
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	d8 a1 05 20 c1 42 00 00 27 b6 00 00 95 42 00 00     ... .B..'....B..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	95 42 00 00 95 42 00 00 95 42 00 00 95 42 00 00     .B...B...B...B..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	65 3f 00 00 95 42 00 00 00 00 00 00 0d 3f 00 00     e?...B.......?..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	95 42 00 00                                         .B..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
			switch (*fmt) {
  c0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
  d0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
  e0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
  f0:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
 100:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
 110:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
				align = VA_STACK_ALIGN(void *);
 120:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
			switch (*fmt) {
 130:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
 140:	e5 3f 00 00 e5 3f 00 00 e5 3f 00 00 e5 3f 00 00     .?...?...?...?..
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	e5 3f 00 00                                         .?..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x66>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5e>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x62>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x56>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5a>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x22>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x4e>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x78>
     326:	b916      	cbnz	r6, 32e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x72>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x6c>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xa2>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x86>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x98>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x9c>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x92>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x136>
     3ec:	d106      	bne.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x140>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x94>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf0>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x11c>

00000424 <main>:
    __ASSERT(0, "Bootloader serial process was terminated unexpectedly.\n");
}
#endif

void main(void)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     426:	4b47      	ldr	r3, [pc, #284]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     428:	4a47      	ldr	r2, [pc, #284]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     42a:	b085      	sub	sp, #20
     42c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     430:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     434:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     438:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     43c:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     440:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     444:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     448:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     44c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     450:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     454:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     458:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     45c:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     460:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     464:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     468:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     46c:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     470:	f000 f87e 	bl	570 <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     474:	4c35      	ldr	r4, [pc, #212]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     476:	4620      	mov	r0, r4
     478:	f00d fd79 	bl	df6e <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     47c:	b300      	cbz	r0, 4c0 <FIH_LABEL_FIH_CALL_START_605>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     47e:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     480:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     482:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     484:	210d      	movs	r1, #13
		data->invert |= (gpio_port_pins_t)BIT(pin);
     486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     48a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     48c:	4620      	mov	r0, r4
     48e:	6833      	ldr	r3, [r6, #0]
     490:	4a2f      	ldr	r2, [pc, #188]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     492:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     494:	4620      	mov	r0, r4
     496:	6873      	ldr	r3, [r6, #4]
     498:	a901      	add	r1, sp, #4
     49a:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     49c:	b920      	cbnz	r0, 4a8 <main+0x84>
		*value ^= data->invert;
     49e:	682a      	ldr	r2, [r5, #0]
     4a0:	9b01      	ldr	r3, [sp, #4]
     4a2:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_BOOT_SERIAL_ENTRANCE_GPIO
    if (detect_pin() &&
     4a4:	049a      	lsls	r2, r3, #18
     4a6:	d50b      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_605>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE uint32_t nrf_reset_resetreas_get(NRF_RESET_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4b0:	b10b      	cbz	r3, 4b6 <main+0x92>
     4b2:	07db      	lsls	r3, r3, #31
     4b4:	d504      	bpl.n	4c0 <FIH_LABEL_FIH_CALL_START_605>
    rc = boot_console_init();
     4b6:	f002 ff6b 	bl	3390 <boot_console_init>
    boot_serial_start(&boot_funcs);
     4ba:	4826      	ldr	r0, [pc, #152]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     4bc:	f003 fb4c 	bl	3b58 <boot_serial_start>

000004c0 <FIH_LABEL_FIH_CALL_START_605>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4c0:	f000 faac 	bl	a1c <fih_cfi_get_and_increment>
     4c4:	4605      	mov	r5, r0
     4c6:	a801      	add	r0, sp, #4
     4c8:	f000 ff34 	bl	1334 <boot_go>
     4cc:	4604      	mov	r4, r0
     4ce:	4628      	mov	r0, r5
     4d0:	f000 fab4 	bl	a3c <fih_cfi_validate>

000004d4 <FIH_LABEL_FIH_CALL_END_625>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     4d4:	4b20      	ldr	r3, [pc, #128]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     4d6:	681b      	ldr	r3, [r3, #0]
     4d8:	42a3      	cmp	r3, r4
     4da:	d001      	beq.n	4e0 <FIH_LABEL_FIH_CALL_END_625+0xc>
         * recovery mode
         */
        boot_serial_enter();
#endif

        FIH_PANIC;
     4dc:	f00a f8c2 	bl	a664 <fih_panic_loop>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4e4:	2000      	movs	r0, #0
     4e6:	f005 ff19 	bl	631c <fprotect_area>

    if (rc != 0) {
     4ea:	4604      	mov	r4, r0
     4ec:	b100      	cbz	r0, 4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     4ee:	e7fe      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
            ;
    }

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     4f0:	f005 ffbc 	bl	646c <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4f4:	4669      	mov	r1, sp
     4f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4fa:	f009 ffd1 	bl	a4a0 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4fe:	9b00      	ldr	r3, [sp, #0]
     500:	9d03      	ldr	r5, [sp, #12]
     502:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     504:	9b01      	ldr	r3, [sp, #4]
     506:	891e      	ldrh	r6, [r3, #8]
        sys_clock_disable();
     508:	f005 fef0 	bl	62ec <sys_clock_disable>
                                     rsp->br_image_off +
     50c:	19af      	adds	r7, r5, r6
    usb_disable();
     50e:	f001 ff87 	bl	2420 <usb_disable>
    nrf_cleanup_peripheral();
     512:	f000 ff45 	bl	13a0 <nrf_cleanup_peripheral>
    nrf_cleanup_ns_ram();
     516:	f000 ff8b 	bl	1430 <nrf_cleanup_ns_ram>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     51a:	f000 ff25 	bl	1368 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     51e:	f003 ff11 	bl	4344 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     522:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     526:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     52a:	59ab      	ldr	r3, [r5, r6]
     52c:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     530:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     534:	f3bf 8f6f 	isb	sy
     538:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     540:	e7fe      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
     542:	bf00      	nop
     544:	6e524635 	.word	0x6e524635
     548:	50018000 	.word	0x50018000
     54c:	0000e748 	.word	0x0000e748
     550:	00010011 	.word	0x00010011
     554:	0000eb18 	.word	0x0000eb18
     558:	200020bc 	.word	0x200020bc

0000055c <flash_area_id_from_direct_image>:
}

#if defined(CONFIG_MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD)
int flash_area_id_from_direct_image(int image_id)
{
    switch (image_id) {
     55c:	2804      	cmp	r0, #4
     55e:	bf9a      	itte	ls
     560:	4b02      	ldrls	r3, [pc, #8]	; (56c <flash_area_id_from_direct_image+0x10>)
     562:	5618      	ldrsbls	r0, [r3, r0]
{
     564:	f06f 0015 	mvnhi.w	r0, #21
    case 4:
        return FIXED_PARTITION_ID(slot3_partition);
#endif
    }
    return -EINVAL;
}
     568:	4770      	bx	lr
     56a:	bf00      	nop
     56c:	0000f0be 	.word	0x0000f0be

00000570 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     574:	4801      	ldr	r0, [pc, #4]	; (57c <os_heap_init+0xc>)
     576:	f006 ba05 	b.w	6984 <mbedtls_memory_buffer_alloc_init>
     57a:	bf00      	nop
     57c:	20014632 	.word	0x20014632

00000580 <bs_peruser_system_specific>:
#endif
#endif /*MCUBOOT_MGMT_CUSTOM_IMG_LIST*/

int bs_peruser_system_specific(const struct nmgr_hdr *hdr, const char *buffer,
                               int len, zcbor_state_t *cs)
{
     580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     582:	461c      	mov	r4, r3
    int mgmt_rc = MGMT_ERR_ENOTSUP;

    if (hdr->nh_group == ZEPHYR_MGMT_GRP_BASIC) {
     584:	8883      	ldrh	r3, [r0, #4]
     586:	4e1f      	ldr	r6, [pc, #124]	; (604 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x28>)
     588:	2b3f      	cmp	r3, #63	; 0x3f
     58a:	d12e      	bne.n	5ea <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe>
        if (hdr->nh_op == NMGR_OP_WRITE) {
     58c:	7803      	ldrb	r3, [r0, #0]
     58e:	2b02      	cmp	r3, #2
     590:	d12b      	bne.n	5ea <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe>
#ifdef CONFIG_BOOT_MGMT_CUSTOM_STORAGE_ERASE
            if (hdr->nh_id == ZEPHYR_MGMT_GRP_BASIC_CMD_ERASE_STORAGE) {
     592:	79c5      	ldrb	r5, [r0, #7]
     594:	bb4d      	cbnz	r5, 5ea <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xe>
    rc = flash_area_open(FIXED_PARTITION_ID(storage_partition), &fa);
     596:	200d      	movs	r0, #13
     598:	a901      	add	r1, sp, #4
     59a:	f001 fc1d 	bl	1dd8 <flash_area_open>
    if (rc < 0) {
     59e:	2800      	cmp	r0, #0
     5a0:	db21      	blt.n	5e6 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xa>
        rc = flash_area_erase(fa, 0, flash_area_get_size(fa));
     5a2:	9801      	ldr	r0, [sp, #4]
     5a4:	4629      	mov	r1, r5
     5a6:	6882      	ldr	r2, [r0, #8]
     5a8:	f00a fe4c 	bl	b244 <flash_area_erase>
     5ac:	4605      	mov	r5, r0
        flash_area_close(fa);
     5ae:	9801      	ldr	r0, [sp, #4]
     5b0:	f00a fe1d 	bl	b1ee <flash_area_close>
    if (rc == 0) {
     5b4:	3d00      	subs	r5, #0
     5b6:	bf18      	it	ne
     5b8:	2501      	movne	r5, #1
    zcbor_map_start_encode(cs, 10);
     5ba:	210a      	movs	r1, #10
     5bc:	4620      	mov	r0, r4
     5be:	f00d fcc9 	bl	df54 <zcbor_map_start_encode>
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
     5c2:	2302      	movs	r3, #2
     5c4:	a902      	add	r1, sp, #8
     5c6:	4620      	mov	r0, r4
     5c8:	9602      	str	r6, [sp, #8]
     5ca:	9303      	str	r3, [sp, #12]
     5cc:	f00d fcbb 	bl	df46 <zcbor_tstr_encode>
    zcbor_uint32_put(cs, rc);
     5d0:	4629      	mov	r1, r5
    }

    if (mgmt_rc == MGMT_ERR_ENOTSUP) {
        zcbor_map_start_encode(cs, 10);
        zcbor_tstr_put_lit(cs, "rc");
        zcbor_uint32_put(cs, mgmt_rc);
     5d2:	4620      	mov	r0, r4
     5d4:	f00d fca8 	bl	df28 <zcbor_uint32_put>
        zcbor_map_end_encode(cs, 10);
     5d8:	210a      	movs	r1, #10
     5da:	4620      	mov	r0, r4
     5dc:	f00d fcc2 	bl	df64 <zcbor_map_end_encode>
    }

    return MGMT_ERR_OK;
}
     5e0:	2000      	movs	r0, #0
     5e2:	b004      	add	sp, #16
     5e4:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EUNKNOWN;
     5e6:	2501      	movs	r5, #1
     5e8:	e7e7      	b.n	5ba <bs_peruser_system_specific+0x3a>
        zcbor_map_start_encode(cs, 10);
     5ea:	210a      	movs	r1, #10
     5ec:	4620      	mov	r0, r4
     5ee:	f00d fcb1 	bl	df54 <zcbor_map_start_encode>
     5f2:	2302      	movs	r3, #2
     5f4:	a902      	add	r1, sp, #8
     5f6:	4620      	mov	r0, r4
     5f8:	9602      	str	r6, [sp, #8]
     5fa:	9303      	str	r3, [sp, #12]
     5fc:	f00d fca3 	bl	df46 <zcbor_tstr_encode>
        zcbor_uint32_put(cs, mgmt_rc);
     600:	2108      	movs	r1, #8
     602:	e7e6      	b.n	5d2 <bs_peruser_system_specific+0x52>
     604:	0000f0c3 	.word	0x0000f0c3

00000608 <bootutil_img_validate>:
fih_ret
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     60c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 7f0 <FIH_LABEL_FIH_CALL_END_813+0x14>
{
     610:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     612:	a838      	add	r0, sp, #224	; 0xe0
     614:	e9dd 7884 	ldrd	r7, r8, [sp, #528]	; 0x210
     618:	4616      	mov	r6, r2
     61a:	461c      	mov	r4, r3
     61c:	f8dd b218 	ldr.w	fp, [sp, #536]	; 0x218
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     620:	f8da 5000 	ldr.w	r5, [sl]
     624:	f00c fedd 	bl	d3e2 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     628:	2100      	movs	r1, #0
     62a:	a838      	add	r0, sp, #224	; 0xe0
     62c:	f006 fabe 	bl	6bac <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     630:	b13f      	cbz	r7, 642 <bootutil_img_validate+0x3a>
     632:	f1b8 0f00 	cmp.w	r8, #0
     636:	dd04      	ble.n	642 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     638:	4642      	mov	r2, r8
     63a:	4639      	mov	r1, r7
     63c:	a838      	add	r0, sp, #224	; 0xe0
     63e:	f00c fed4 	bl	d3ea <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     642:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
     646:	8973      	ldrh	r3, [r6, #10]
    size = hdr_size = hdr->ih_hdr_size;
     648:	8937      	ldrh	r7, [r6, #8]
     64a:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     64c:	68f3      	ldr	r3, [r6, #12]
     64e:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     650:	4547      	cmp	r7, r8
     652:	d84e      	bhi.n	6f2 <FIH_LABEL_FIH_CALL_END_458+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     654:	a90d      	add	r1, sp, #52	; 0x34
     656:	a838      	add	r0, sp, #224	; 0xe0
     658:	f00c ff0b 	bl	d472 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     65c:	f1bb 0f00 	cmp.w	fp, #0
     660:	d004      	beq.n	66c <bootutil_img_validate+0x64>
        memcpy(out_hash, hash, 32);
     662:	2220      	movs	r2, #32
     664:	4658      	mov	r0, fp
     666:	a90d      	add	r1, sp, #52	; 0x34
     668:	f00b f816 	bl	b698 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     66c:	2300      	movs	r3, #0
     66e:	4622      	mov	r2, r4
     670:	9300      	str	r3, [sp, #0]
     672:	4631      	mov	r1, r6
     674:	f64f 73ff 	movw	r3, #65535	; 0xffff
     678:	a807      	add	r0, sp, #28
     67a:	f009 ff47 	bl	a50c <bootutil_tlv_iter_begin>
    if (rc) {
     67e:	4680      	mov	r8, r0
     680:	2800      	cmp	r0, #0
     682:	d133      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     684:	4620      	mov	r0, r4
     686:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     688:	f009 ffea 	bl	a660 <bootutil_max_image_size>
     68c:	4286      	cmp	r6, r0
     68e:	d82d      	bhi.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
    int key_id = -1;
     690:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     694:	f8df 915c 	ldr.w	r9, [pc, #348]	; 7f4 <FIH_LABEL_FIH_CALL_END_813+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     698:	f10d 0316 	add.w	r3, sp, #22
     69c:	aa05      	add	r2, sp, #20
     69e:	a906      	add	r1, sp, #24
     6a0:	a807      	add	r0, sp, #28
     6a2:	f009 ff81 	bl	a5a8 <bootutil_tlv_iter_next>
        if (rc < 0) {
     6a6:	2800      	cmp	r0, #0
     6a8:	db20      	blt.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
        } else if (rc > 0) {
     6aa:	f040 8098 	bne.w	7de <FIH_LABEL_FIH_CALL_END_813+0x2>
        if (type == IMAGE_TLV_SHA256) {
     6ae:	f8bd 6016 	ldrh.w	r6, [sp, #22]
     6b2:	2e10      	cmp	r6, #16
     6b4:	d135      	bne.n	722 <FIH_LABEL_FIH_CALL_END_458+0x3e>
            if (len != sizeof(hash)) {
     6b6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
     6ba:	2e20      	cmp	r6, #32
     6bc:	d116      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6be:	4633      	mov	r3, r6
     6c0:	4620      	mov	r0, r4
     6c2:	9906      	ldr	r1, [sp, #24]
     6c4:	aa38      	add	r2, sp, #224	; 0xe0
     6c6:	f00a fd93 	bl	b1f0 <flash_area_read>
            if (rc) {
     6ca:	b978      	cbnz	r0, 6ec <FIH_LABEL_FIH_CALL_END_458+0x8>

000006cc <FIH_LABEL_FIH_CALL_START_434>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6cc:	f000 f9a6 	bl	a1c <fih_cfi_get_and_increment>
     6d0:	4632      	mov	r2, r6
     6d2:	4680      	mov	r8, r0
     6d4:	a938      	add	r1, sp, #224	; 0xe0
     6d6:	a80d      	add	r0, sp, #52	; 0x34
     6d8:	f000 f988 	bl	9ec <boot_fih_memequal>
     6dc:	4606      	mov	r6, r0
     6de:	4640      	mov	r0, r8
     6e0:	f000 f9ac 	bl	a3c <fih_cfi_validate>

000006e4 <FIH_LABEL_FIH_CALL_END_458>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     6e4:	4b44      	ldr	r3, [pc, #272]	; (7f8 <FIH_LABEL_FIH_CALL_END_813+0x1c>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	42b3      	cmp	r3, r6
     6ea:	d017      	beq.n	71c <FIH_LABEL_FIH_CALL_END_458+0x38>
    }
#endif

out:
    if (rc) {
        FIH_SET(fih_rc, FIH_FAILURE);
     6ec:	f8da 5000 	ldr.w	r5, [sl]
     6f0:	e078      	b.n	7e4 <FIH_LABEL_FIH_CALL_END_813+0x8>
        if (blk_sz > tmp_buf_sz) {
     6f2:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     6f4:	eba7 0908 	sub.w	r9, r7, r8
     6f8:	4599      	cmp	r9, r3
     6fa:	bf28      	it	cs
     6fc:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6fe:	4641      	mov	r1, r8
     700:	464b      	mov	r3, r9
     702:	4620      	mov	r0, r4
     704:	9a82      	ldr	r2, [sp, #520]	; 0x208
     706:	f00a fd73 	bl	b1f0 <flash_area_read>
        if (rc) {
     70a:	2800      	cmp	r0, #0
     70c:	d1ee      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     70e:	464a      	mov	r2, r9
     710:	9982      	ldr	r1, [sp, #520]	; 0x208
     712:	a838      	add	r0, sp, #224	; 0xe0
     714:	f00c fe69 	bl	d3ea <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     718:	44c8      	add	r8, r9
     71a:	e799      	b.n	650 <bootutil_img_validate+0x48>
            sha256_valid = 1;
     71c:	f04f 0801 	mov.w	r8, #1
     720:	e7ba      	b.n	698 <bootutil_img_validate+0x90>
        } else if (type == IMAGE_TLV_KEYHASH) {
     722:	2e01      	cmp	r6, #1
     724:	d135      	bne.n	792 <FIH_LABEL_FIH_CALL_END_458+0xae>
            if (len > 32) {
     726:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     72a:	2b20      	cmp	r3, #32
     72c:	d8de      	bhi.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     72e:	4620      	mov	r0, r4
     730:	9906      	ldr	r1, [sp, #24]
     732:	aa38      	add	r2, sp, #224	; 0xe0
     734:	f00a fd5c 	bl	b1f0 <flash_area_read>
            if (rc) {
     738:	4607      	mov	r7, r0
     73a:	2800      	cmp	r0, #0
     73c:	d1d6      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
            key_id = bootutil_find_key(buf, len);
     73e:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     742:	f1bb 0f20 	cmp.w	fp, #32
     746:	d902      	bls.n	74e <FIH_LABEL_FIH_CALL_END_458+0x6a>
                key_id = -1;
     748:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     74c:	e7a4      	b.n	698 <bootutil_img_validate+0x90>
    for (i = 0; i < bootutil_key_cnt; i++) {
     74e:	f8d9 3000 	ldr.w	r3, [r9]
     752:	4e2a      	ldr	r6, [pc, #168]	; (7fc <FIH_LABEL_FIH_CALL_END_813+0x20>)
     754:	9303      	str	r3, [sp, #12]
     756:	9b03      	ldr	r3, [sp, #12]
     758:	429f      	cmp	r7, r3
     75a:	daf5      	bge.n	748 <FIH_LABEL_FIH_CALL_END_458+0x64>
    mbedtls_sha256_init(ctx);
     75c:	a81d      	add	r0, sp, #116	; 0x74
     75e:	f00c fe40 	bl	d3e2 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     762:	2100      	movs	r1, #0
     764:	a81d      	add	r0, sp, #116	; 0x74
     766:	f006 fa21 	bl	6bac <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     76a:	6872      	ldr	r2, [r6, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     76c:	a81d      	add	r0, sp, #116	; 0x74
     76e:	6812      	ldr	r2, [r2, #0]
     770:	f856 1b08 	ldr.w	r1, [r6], #8
     774:	f00c fe39 	bl	d3ea <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     778:	a915      	add	r1, sp, #84	; 0x54
     77a:	a81d      	add	r0, sp, #116	; 0x74
     77c:	f00c fe79 	bl	d472 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     780:	465a      	mov	r2, fp
     782:	a938      	add	r1, sp, #224	; 0xe0
     784:	a815      	add	r0, sp, #84	; 0x54
     786:	f00a ff60 	bl	b64a <memcmp>
     78a:	2800      	cmp	r0, #0
     78c:	d084      	beq.n	698 <bootutil_img_validate+0x90>
    for (i = 0; i < bootutil_key_cnt; i++) {
     78e:	3701      	adds	r7, #1
     790:	e7e1      	b.n	756 <FIH_LABEL_FIH_CALL_END_458+0x72>
        } else if (type == EXPECTED_SIG_TLV) {
     792:	2e20      	cmp	r6, #32
     794:	d180      	bne.n	698 <bootutil_img_validate+0x90>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     796:	1c7b      	adds	r3, r7, #1
     798:	f43f af7e 	beq.w	698 <bootutil_img_validate+0x90>
     79c:	f8d9 3000 	ldr.w	r3, [r9]
     7a0:	42bb      	cmp	r3, r7
     7a2:	ddd1      	ble.n	748 <FIH_LABEL_FIH_CALL_END_458+0x64>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     7a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     7ac:	d19e      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7ae:	4620      	mov	r0, r4
     7b0:	9906      	ldr	r1, [sp, #24]
     7b2:	aa38      	add	r2, sp, #224	; 0xe0
     7b4:	f00a fd1c 	bl	b1f0 <flash_area_read>
            if (rc) {
     7b8:	2800      	cmp	r0, #0
     7ba:	d197      	bne.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>

000007bc <FIH_LABEL_FIH_CALL_START_785>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     7bc:	f000 f92e 	bl	a1c <fih_cfi_get_and_increment>
     7c0:	b2ff      	uxtb	r7, r7
     7c2:	4683      	mov	fp, r0
     7c4:	4631      	mov	r1, r6
     7c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7ca:	aa38      	add	r2, sp, #224	; 0xe0
     7cc:	9700      	str	r7, [sp, #0]
     7ce:	a80d      	add	r0, sp, #52	; 0x34
     7d0:	f000 f816 	bl	800 <bootutil_verify_sig>
     7d4:	4605      	mov	r5, r0
     7d6:	4658      	mov	r0, fp
     7d8:	f000 f930 	bl	a3c <fih_cfi_validate>

000007dc <FIH_LABEL_FIH_CALL_END_813>:
            key_id = -1;
     7dc:	e7b4      	b.n	748 <FIH_LABEL_FIH_CALL_END_458+0x64>
    if (rc) {
     7de:	f1b8 0f00 	cmp.w	r8, #0
     7e2:	d083      	beq.n	6ec <FIH_LABEL_FIH_CALL_END_458+0x8>
    }

    FIH_RET(fih_rc);
     7e4:	f000 f922 	bl	a2c <fih_cfi_decrement>
}
     7e8:	4628      	mov	r0, r5
     7ea:	b079      	add	sp, #484	; 0x1e4
     7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7f0:	200020b8 	.word	0x200020b8
     7f4:	0000eb20 	.word	0x0000eb20
     7f8:	200020bc 	.word	0x200020bc
     7fc:	0000eb24 	.word	0x0000eb24

00000800 <bootutil_verify_sig>:
}

fih_ret
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_rsa_context ctx;
    int rc;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     804:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 9e0 <FIH_LABEL_FIH_CALL_END_660+0x4>
{
     808:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
     80c:	4606      	mov	r6, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     80e:	a829      	add	r0, sp, #164	; 0xa4
{
     810:	f89d b358 	ldrb.w	fp, [sp, #856]	; 0x358
     814:	4688      	mov	r8, r1
     816:	4617      	mov	r7, r2
     818:	4699      	mov	r9, r3
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     81a:	f8da 5000 	ldr.w	r5, [sl]
    mbedtls_rsa_init(&ctx);
     81e:	f00c fd9d 	bl	d35c <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     822:	4b70      	ldr	r3, [pc, #448]	; (9e4 <FIH_LABEL_FIH_CALL_END_660+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     824:	aa8c      	add	r2, sp, #560	; 0x230
    cp = (uint8_t *)bootutil_keys[key_id].key;
     826:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     82a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
     82e:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     830:	9404      	str	r4, [sp, #16]
    end = cp + *bootutil_keys[key_id].len;
     832:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     834:	a804      	add	r0, sp, #16
    end = cp + *bootutil_keys[key_id].len;
     836:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     838:	4621      	mov	r1, r4
     83a:	2330      	movs	r3, #48	; 0x30
     83c:	f00b fbb5 	bl	bfaa <mbedtls_asn1_get_tag>
     840:	bb70      	cbnz	r0, 8a0 <bootutil_verify_sig+0xa0>
    if (*p + len != end) {
     842:	9b04      	ldr	r3, [sp, #16]
     844:	9a8c      	ldr	r2, [sp, #560]	; 0x230
     846:	4413      	add	r3, r2
     848:	429c      	cmp	r4, r3
     84a:	d129      	bne.n	8a0 <bootutil_verify_sig+0xa0>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     84c:	4621      	mov	r1, r4
     84e:	aa2b      	add	r2, sp, #172	; 0xac
     850:	a804      	add	r0, sp, #16
     852:	f00b fbbe 	bl	bfd2 <mbedtls_asn1_get_mpi>
     856:	bb18      	cbnz	r0, 8a0 <bootutil_verify_sig+0xa0>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     858:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
     85c:	465a      	mov	r2, fp
     85e:	4621      	mov	r1, r4
     860:	a804      	add	r0, sp, #16
     862:	f00b fbb6 	bl	bfd2 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     866:	9003      	str	r0, [sp, #12]
     868:	b9d0      	cbnz	r0, 8a0 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     86a:	a82b      	add	r0, sp, #172	; 0xac
     86c:	f00b fca8 	bl	c1c0 <mbedtls_mpi_size>
    if (*p != end) {
     870:	9a04      	ldr	r2, [sp, #16]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     872:	902a      	str	r0, [sp, #168]	; 0xa8
    if (*p != end) {
     874:	4294      	cmp	r4, r2
     876:	d113      	bne.n	8a0 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     878:	9b03      	ldr	r3, [sp, #12]
     87a:	f8cd b004 	str.w	fp, [sp, #4]
     87e:	461a      	mov	r2, r3
     880:	9300      	str	r3, [sp, #0]
     882:	a92b      	add	r1, sp, #172	; 0xac
     884:	a829      	add	r0, sp, #164	; 0xa4
     886:	f00c fd26 	bl	d2d6 <mbedtls_rsa_import>
    if (rc != 0) {
     88a:	b948      	cbnz	r0, 8a0 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_check_pubkey(ctx);
     88c:	a829      	add	r0, sp, #164	; 0xa4
     88e:	f006 f91f 	bl	6ad0 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     892:	b928      	cbnz	r0, 8a0 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     894:	a82b      	add	r0, sp, #172	; 0xac
     896:	f00b fc93 	bl	c1c0 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     89a:	4581      	cmp	r9, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     89c:	902a      	str	r0, [sp, #168]	; 0xa8
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     89e:	d00c      	beq.n	8ba <FIH_LABEL_FIH_CALL_START_235>
        mbedtls_rsa_free(&ctx);
     8a0:	a829      	add	r0, sp, #164	; 0xa4
     8a2:	f00c fd65 	bl	d370 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     8a6:	a829      	add	r0, sp, #164	; 0xa4
     8a8:	f00c fd62 	bl	d370 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
     8ac:	f000 f8be 	bl	a2c <fih_cfi_decrement>
}
     8b0:	4628      	mov	r0, r5
     8b2:	f50d 7d4d 	add.w	sp, sp, #820	; 0x334
     8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008ba <FIH_LABEL_FIH_CALL_START_235>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8ba:	f000 f8af 	bl	a1c <fih_cfi_get_and_increment>
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8c0:	4681      	mov	r9, r0
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     8c6:	f8da 5000 	ldr.w	r5, [sl]
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8ca:	f040 8082 	bne.w	9d2 <FIH_LABEL_FIH_CALL_END_630>
    if (hlen != PSS_HLEN) {
     8ce:	f1b8 0f20 	cmp.w	r8, #32
     8d2:	d17e      	bne.n	9d2 <FIH_LABEL_FIH_CALL_END_630>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     8d4:	4639      	mov	r1, r7
     8d6:	aa8c      	add	r2, sp, #560	; 0x230
     8d8:	a829      	add	r0, sp, #164	; 0xa4
     8da:	f006 f91f 	bl	6b1c <mbedtls_rsa_public>
     8de:	4604      	mov	r4, r0
     8e0:	2800      	cmp	r0, #0
     8e2:	d176      	bne.n	9d2 <FIH_LABEL_FIH_CALL_END_630>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8e4:	f89d 332f 	ldrb.w	r3, [sp, #815]	; 0x32f
     8e8:	2bbc      	cmp	r3, #188	; 0xbc
     8ea:	d172      	bne.n	9d2 <FIH_LABEL_FIH_CALL_END_630>
    int count = PSS_MASK_LEN;
     8ec:	27df      	movs	r7, #223	; 0xdf
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8ee:	9005      	str	r0, [sp, #20]
     8f0:	f50d 7aa8 	add.w	sl, sp, #336	; 0x150
    mbedtls_sha256_init(ctx);
     8f4:	a80e      	add	r0, sp, #56	; 0x38
     8f6:	f00c fd74 	bl	d3e2 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8fa:	2100      	movs	r1, #0
     8fc:	a80e      	add	r0, sp, #56	; 0x38
     8fe:	f006 f955 	bl	6bac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     902:	2220      	movs	r2, #32
     904:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     908:	a80e      	add	r0, sp, #56	; 0x38
     90a:	f00c fd6e 	bl	d3ea <mbedtls_sha256_update>
     90e:	2204      	movs	r2, #4
     910:	a905      	add	r1, sp, #20
     912:	a80e      	add	r0, sp, #56	; 0x38
     914:	f00c fd69 	bl	d3ea <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     918:	a906      	add	r1, sp, #24
     91a:	a80e      	add	r0, sp, #56	; 0x38
     91c:	f00c fda9 	bl	d472 <mbedtls_sha256_finish>
        if (bytes > count)
     920:	2f20      	cmp	r7, #32
     922:	46b8      	mov	r8, r7
     924:	bfa8      	it	ge
     926:	f04f 0820 	movge.w	r8, #32
        counter[3]++;
     92a:	f89d 3017 	ldrb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     92e:	4650      	mov	r0, sl
        counter[3]++;
     930:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     932:	4642      	mov	r2, r8
     934:	a906      	add	r1, sp, #24
        count -= bytes;
     936:	eba7 0708 	sub.w	r7, r7, r8
        counter[3]++;
     93a:	f88d 3017 	strb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     93e:	f00a feab 	bl	b698 <memcpy>
    while (count > 0) {
     942:	2f00      	cmp	r7, #0
        mask += bytes;
     944:	44c2      	add	sl, r8
    while (count > 0) {
     946:	dcd5      	bgt.n	8f4 <FIH_LABEL_FIH_CALL_START_235+0x3a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     948:	aa54      	add	r2, sp, #336	; 0x150
     94a:	4610      	mov	r0, r2
     94c:	21df      	movs	r1, #223	; 0xdf
     94e:	ab8c      	add	r3, sp, #560	; 0x230
        db_mask[i] ^= em[i];
     950:	7807      	ldrb	r7, [r0, #0]
     952:	f813 cb01 	ldrb.w	ip, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     956:	3901      	subs	r1, #1
        db_mask[i] ^= em[i];
     958:	ea87 070c 	eor.w	r7, r7, ip
     95c:	f800 7b01 	strb.w	r7, [r0], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     960:	d1f6      	bne.n	950 <FIH_LABEL_FIH_CALL_START_235+0x96>
    db_mask[0] &= 0x7F;
     962:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
     966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     96a:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
        if (db_mask[i] != 0) {
     96e:	f812 7b01 	ldrb.w	r7, [r2], #1
     972:	bb77      	cbnz	r7, 9d2 <FIH_LABEL_FIH_CALL_END_630>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     974:	3401      	adds	r4, #1
     976:	2cbe      	cmp	r4, #190	; 0xbe
     978:	d1f9      	bne.n	96e <FIH_LABEL_FIH_CALL_START_235+0xb4>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     97a:	f89d 320e 	ldrb.w	r3, [sp, #526]	; 0x20e
     97e:	2b01      	cmp	r3, #1
     980:	d127      	bne.n	9d2 <FIH_LABEL_FIH_CALL_END_630>
    mbedtls_sha256_init(ctx);
     982:	a80e      	add	r0, sp, #56	; 0x38
     984:	f00c fd2d 	bl	d3e2 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     988:	4639      	mov	r1, r7
     98a:	a80e      	add	r0, sp, #56	; 0x38
     98c:	f006 f90e 	bl	6bac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     990:	2208      	movs	r2, #8
     992:	4915      	ldr	r1, [pc, #84]	; (9e8 <FIH_LABEL_FIH_CALL_END_660+0xc>)
     994:	a80e      	add	r0, sp, #56	; 0x38
     996:	f00c fd28 	bl	d3ea <mbedtls_sha256_update>
     99a:	4631      	mov	r1, r6
     99c:	2220      	movs	r2, #32
     99e:	a80e      	add	r0, sp, #56	; 0x38
     9a0:	f00c fd23 	bl	d3ea <mbedtls_sha256_update>
     9a4:	2220      	movs	r2, #32
     9a6:	f20d 210f 	addw	r1, sp, #527	; 0x20f
     9aa:	a80e      	add	r0, sp, #56	; 0x38
     9ac:	f00c fd1d 	bl	d3ea <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     9b0:	a906      	add	r1, sp, #24
     9b2:	a80e      	add	r0, sp, #56	; 0x38
     9b4:	f00c fd5d 	bl	d472 <mbedtls_sha256_finish>

000009b8 <FIH_LABEL_FIH_CALL_START_606>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     9b8:	f000 f830 	bl	a1c <fih_cfi_get_and_increment>
     9bc:	2220      	movs	r2, #32
     9be:	4604      	mov	r4, r0
     9c0:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     9c4:	a806      	add	r0, sp, #24
     9c6:	f000 f811 	bl	9ec <boot_fih_memequal>
     9ca:	4605      	mov	r5, r0
     9cc:	4620      	mov	r0, r4
     9ce:	f000 f835 	bl	a3c <fih_cfi_validate>

000009d2 <FIH_LABEL_FIH_CALL_END_630>:
    FIH_RET(fih_rc);
     9d2:	f000 f82b 	bl	a2c <fih_cfi_decrement>
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     9d6:	4648      	mov	r0, r9
     9d8:	f000 f830 	bl	a3c <fih_cfi_validate>

000009dc <FIH_LABEL_FIH_CALL_END_660>:
     9dc:	e763      	b.n	8a6 <bootutil_verify_sig+0xa6>
     9de:	bf00      	nop
     9e0:	200020b8 	.word	0x200020b8
     9e4:	0000eb24 	.word	0x0000eb24
     9e8:	0000f0c6 	.word	0x0000f0c6

000009ec <boot_fih_memequal>:
{
    return memcmp(s1, s2, n);
}
#else
fih_ret boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
     9ec:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    uint8_t *s1_p = (uint8_t*) s1;
    uint8_t *s2_p = (uint8_t*) s2;
    FIH_DECLARE(ret, FIH_FAILURE);
     9ee:	4b09      	ldr	r3, [pc, #36]	; (a14 <boot_fih_memequal+0x28>)
{
     9f0:	4604      	mov	r4, r0
    FIH_DECLARE(ret, FIH_FAILURE);
     9f2:	681d      	ldr	r5, [r3, #0]

    for (i = 0; i < n; i++) {
     9f4:	2300      	movs	r3, #0
     9f6:	4293      	cmp	r3, r2
     9f8:	d105      	bne.n	a06 <boot_fih_memequal+0x1a>
        if (s1_p[i] != s2_p[i]) {
            goto out;
        }
    }
    if (i == n) {
        ret = FIH_SUCCESS;
     9fa:	4b07      	ldr	r3, [pc, #28]	; (a18 <boot_fih_memequal+0x2c>)
     9fc:	681d      	ldr	r5, [r3, #0]
    }

out:
    FIH_RET(ret);
     9fe:	f000 f815 	bl	a2c <fih_cfi_decrement>
}
     a02:	4628      	mov	r0, r5
     a04:	bd70      	pop	{r4, r5, r6, pc}
        if (s1_p[i] != s2_p[i]) {
     a06:	5ce6      	ldrb	r6, [r4, r3]
     a08:	5cc8      	ldrb	r0, [r1, r3]
     a0a:	4286      	cmp	r6, r0
     a0c:	d1f7      	bne.n	9fe <boot_fih_memequal+0x12>
    for (i = 0; i < n; i++) {
     a0e:	3301      	adds	r3, #1
     a10:	e7f1      	b.n	9f6 <boot_fih_memequal+0xa>
     a12:	bf00      	nop
     a14:	200020b8 	.word	0x200020b8
     a18:	200020bc 	.word	0x200020bc

00000a1c <fih_cfi_get_and_increment>:

/* Increment the CFI counter by one, and return the value before the increment.
 */
fih_int fih_cfi_get_and_increment(void)
{
    fih_int saved = _fih_cfi_ctr;
     a1c:	4b02      	ldr	r3, [pc, #8]	; (a28 <fih_cfi_get_and_increment+0xc>)
     a1e:	6818      	ldr	r0, [r3, #0]
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(saved) + 1);
     a20:	1c42      	adds	r2, r0, #1
     a22:	601a      	str	r2, [r3, #0]
    return saved;
}
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	20002770 	.word	0x20002770

00000a2c <fih_cfi_decrement>:
/* Decrement the global CFI counter by one, so that it has the same value as
 * before the cfi_precall
 */
void fih_cfi_decrement(void)
{
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(_fih_cfi_ctr) - 1);
     a2c:	4a02      	ldr	r2, [pc, #8]	; (a38 <fih_cfi_decrement+0xc>)
     a2e:	6813      	ldr	r3, [r2, #0]
     a30:	3b01      	subs	r3, #1
     a32:	6013      	str	r3, [r2, #0]
}
     a34:	4770      	bx	lr
     a36:	bf00      	nop
     a38:	20002770 	.word	0x20002770

00000a3c <fih_cfi_validate>:
    if (fih_int_decode(saved) != fih_int_decode(_fih_cfi_ctr)) {
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <fih_cfi_validate+0x10>)
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	4283      	cmp	r3, r0
     a42:	d001      	beq.n	a48 <fih_cfi_validate+0xc>
        FIH_PANIC;
     a44:	f009 be0e 	b.w	a664 <fih_panic_loop>
}
     a48:	4770      	bx	lr
     a4a:	bf00      	nop
     a4c:	20002770 	.word	0x20002770

00000a50 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         FIH_NO_BOOTABLE_IMAGE            if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_ret
boot_validate_slot(struct boot_loader_state *state, int slot,
     a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     a54:	4b65      	ldr	r3, [pc, #404]	; (bec <FIH_LABEL_FIH_CALL_END_698+0xce>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     a56:	b08d      	sub	sp, #52	; 0x34
     a58:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a5a:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     a5e:	460e      	mov	r6, r1
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     a60:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a62:	f009 fd23 	bl	a4ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a66:	a90a      	add	r1, sp, #40	; 0x28
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a68:	4682      	mov	sl, r0
    rc = flash_area_open(area_id, &fap);
     a6a:	b2c0      	uxtb	r0, r0
     a6c:	f001 f9b4 	bl	1dd8 <flash_area_open>
    if (rc != 0) {
     a70:	b128      	cbz	r0, a7e <boot_validate_slot.isra.0+0x2e>
#endif

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
     a72:	f7ff ffdb 	bl	a2c <fih_cfi_decrement>
}
     a76:	4628      	mov	r0, r5
     a78:	b00d      	add	sp, #52	; 0x34
     a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a7e:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a82:	4631      	mov	r1, r6
     a84:	4638      	mov	r0, r7
     a86:	f009 fd11 	bl	a4ac <flash_area_id_from_multi_image_slot>
     a8a:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a8e:	a90b      	add	r1, sp, #44	; 0x2c
     a90:	b2c0      	uxtb	r0, r0
     a92:	fb09 f906 	mul.w	r9, r9, r6
     a96:	f001 f99f 	bl	1dd8 <flash_area_open>
    if (rc != 0) {
     a9a:	2800      	cmp	r0, #0
     a9c:	d05c      	beq.n	b58 <FIH_LABEL_FIH_CALL_END_698+0x3a>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a9e:	f04f 0b58 	mov.w	fp, #88	; 0x58
     aa2:	222c      	movs	r2, #44	; 0x2c
     aa4:	fb0b f307 	mul.w	r3, fp, r7
     aa8:	fb02 3306 	mla	r3, r2, r6, r3
     aac:	4423      	add	r3, r4
     aae:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     ab0:	f013 0810 	ands.w	r8, r3, #16
     ab4:	d165      	bne.n	b82 <FIH_LABEL_FIH_CALL_END_698+0x64>

00000ab6 <FIH_LABEL_FIH_CALL_START_555>:
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, FIH_BOOT_HOOK_REGULAR,
     ab6:	f7ff ffb1 	bl	a1c <fih_cfi_get_and_increment>
     aba:	4631      	mov	r1, r6
     abc:	9007      	str	r0, [sp, #28]
     abe:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     ac2:	f005 fcf1 	bl	64a8 <boot_image_check_hook>
     ac6:	4605      	mov	r5, r0
     ac8:	9807      	ldr	r0, [sp, #28]
     aca:	f7ff ffb7 	bl	a3c <fih_cfi_validate>

00000ace <FIH_LABEL_FIH_CALL_END_577>:
    if (FIH_EQ(fih_rc, FIH_BOOT_HOOK_REGULAR))
     ace:	4b48      	ldr	r3, [pc, #288]	; (bf0 <FIH_LABEL_FIH_CALL_END_698+0xd2>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	429d      	cmp	r5, r3
     ad4:	d123      	bne.n	b1e <FIH_LABEL_FIH_CALL_END_698>

00000ad6 <FIH_LABEL_FIH_CALL_START_594>:
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     ad6:	f7ff ffa1 	bl	a1c <fih_cfi_get_and_increment>
     ada:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     ade:	9007      	str	r0, [sp, #28]
     ae0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
     ae2:	9109      	str	r1, [sp, #36]	; 0x24

00000ae4 <FIH_LABEL_FIH_CALL_START_627>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     ae4:	f7ff ff9a 	bl	a1c <fih_cfi_get_and_increment>
     ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
     aec:	fb07 920b 	mla	r2, r7, fp, r9
     af0:	9301      	str	r3, [sp, #4]
     af2:	4b40      	ldr	r3, [pc, #256]	; (bf4 <FIH_LABEL_FIH_CALL_END_698+0xd6>)
     af4:	9909      	ldr	r1, [sp, #36]	; 0x24
     af6:	9008      	str	r0, [sp, #32]
     af8:	9300      	str	r3, [sp, #0]
     afa:	4422      	add	r2, r4
     afc:	462b      	mov	r3, r5
     afe:	4640      	mov	r0, r8
     b00:	e9cd 8803 	strd	r8, r8, [sp, #12]
     b04:	f8cd 8008 	str.w	r8, [sp, #8]
     b08:	f7ff fd7e 	bl	608 <bootutil_img_validate>
     b0c:	4605      	mov	r5, r0
     b0e:	9808      	ldr	r0, [sp, #32]
     b10:	f7ff ff94 	bl	a3c <fih_cfi_validate>

00000b14 <FIH_LABEL_FIH_CALL_END_675>:
    FIH_RET(fih_rc);
     b14:	f7ff ff8a 	bl	a2c <fih_cfi_decrement>
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     b18:	9807      	ldr	r0, [sp, #28]
     b1a:	f7ff ff8f 	bl	a3c <fih_cfi_validate>

00000b1e <FIH_LABEL_FIH_CALL_END_698>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     b1e:	2358      	movs	r3, #88	; 0x58
     b20:	435f      	muls	r7, r3
     b22:	232c      	movs	r3, #44	; 0x2c
     b24:	fb03 7706 	mla	r7, r3, r6, r7
     b28:	4a33      	ldr	r2, [pc, #204]	; (bf8 <FIH_LABEL_FIH_CALL_END_698+0xda>)
     b2a:	59e1      	ldr	r1, [r4, r7]
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    if (hdr->ih_magic != IMAGE_MAGIC) {
     b2e:	4291      	cmp	r1, r2
     b30:	eb04 0307 	add.w	r3, r4, r7
     b34:	d10a      	bne.n	b4c <FIH_LABEL_FIH_CALL_END_698+0x2e>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     b36:	68da      	ldr	r2, [r3, #12]
     b38:	891b      	ldrh	r3, [r3, #8]
    if (a > UINT32_MAX - b) {
     b3a:	189b      	adds	r3, r3, r2
     b3c:	d206      	bcs.n	b4c <FIH_LABEL_FIH_CALL_END_698+0x2e>
    if (size >= flash_area_get_size(fap)) {
     b3e:	6882      	ldr	r2, [r0, #8]
     b40:	4293      	cmp	r3, r2
     b42:	d203      	bcs.n	b4c <FIH_LABEL_FIH_CALL_END_698+0x2e>
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     b44:	4b2d      	ldr	r3, [pc, #180]	; (bfc <FIH_LABEL_FIH_CALL_END_698+0xde>)
     b46:	681b      	ldr	r3, [r3, #0]
     b48:	42ab      	cmp	r3, r5
     b4a:	d020      	beq.n	b8e <FIH_LABEL_FIH_CALL_END_698+0x70>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     b4c:	b1ce      	cbz	r6, b82 <FIH_LABEL_FIH_CALL_END_698+0x64>
            flash_area_erase(fap, 0, fap->fa_size);
     b4e:	2100      	movs	r1, #0
     b50:	6882      	ldr	r2, [r0, #8]
     b52:	f00a fb77 	bl	b244 <flash_area_erase>
     b56:	e014      	b.n	b82 <FIH_LABEL_FIH_CALL_END_698+0x64>
    erased_val = flash_area_erased_val(fap);
     b58:	980b      	ldr	r0, [sp, #44]	; 0x2c
     b5a:	f00a fb8e 	bl	b27a <flash_area_erased_val>
     b5e:	4605      	mov	r5, r0
    flash_area_close(fap);
     b60:	980b      	ldr	r0, [sp, #44]	; 0x2c
     b62:	f00a fb44 	bl	b1ee <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     b66:	2358      	movs	r3, #88	; 0x58
     b68:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     b6c:	fb02 9303 	mla	r3, r2, r3, r9
     b70:	4423      	add	r3, r4
    for (i = 0; i < len; i++) {
     b72:	1e5a      	subs	r2, r3, #1
     b74:	3303      	adds	r3, #3
        if (val != p[i]) {
     b76:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     b7a:	42a9      	cmp	r1, r5
     b7c:	d18f      	bne.n	a9e <boot_validate_slot.isra.0+0x4e>
    for (i = 0; i < len; i++) {
     b7e:	429a      	cmp	r2, r3
     b80:	d1f9      	bne.n	b76 <FIH_LABEL_FIH_CALL_END_698+0x58>
            fih_rc = FIH_NO_BOOTABLE_IMAGE;
     b82:	4b1f      	ldr	r3, [pc, #124]	; (c00 <FIH_LABEL_FIH_CALL_END_698+0xe2>)
     b84:	681d      	ldr	r5, [r3, #0]
    flash_area_close(fap);
     b86:	980a      	ldr	r0, [sp, #40]	; 0x28
     b88:	f00a fb31 	bl	b1ee <flash_area_close>
     b8c:	e771      	b.n	a72 <boot_validate_slot.isra.0+0x22>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     b8e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     b92:	b343      	cbz	r3, be6 <FIH_LABEL_FIH_CALL_END_698+0xc8>
     b94:	2b01      	cmp	r3, #1
     b96:	bf0c      	ite	eq
     b98:	220b      	moveq	r2, #11
     b9a:	22ff      	movne	r2, #255	; 0xff
     b9c:	4592      	cmp	sl, r2
     b9e:	d1f2      	bne.n	b86 <FIH_LABEL_FIH_CALL_END_698+0x68>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     ba0:	2258      	movs	r2, #88	; 0x58
     ba2:	4353      	muls	r3, r2
     ba4:	18e2      	adds	r2, r4, r3
     ba6:	6a17      	ldr	r7, [r2, #32]
        uint32_t reset_value = 0;
     ba8:	2200      	movs	r2, #0
     baa:	920b      	str	r2, [sp, #44]	; 0x2c
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     bac:	222c      	movs	r2, #44	; 0x2c
     bae:	fb02 3306 	mla	r3, r2, r6, r3
     bb2:	4423      	add	r3, r4
     bb4:	8919      	ldrh	r1, [r3, #8]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     bb6:	2304      	movs	r3, #4
     bb8:	446a      	add	r2, sp
     bba:	4419      	add	r1, r3
     bbc:	f00a fb18 	bl	b1f0 <flash_area_read>
        if (rc != 0) {
     bc0:	2800      	cmp	r0, #0
     bc2:	d1de      	bne.n	b82 <FIH_LABEL_FIH_CALL_END_698+0x64>
        if (BOOT_CURR_IMG(state) == 1) {
     bc4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
        if (BOOT_CURR_IMG(state) == 1) {
     bca:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     bcc:	bf0b      	itete	eq
     bce:	4a0d      	ldreq	r2, [pc, #52]	; (c04 <FIH_LABEL_FIH_CALL_END_698+0xe6>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     bd0:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     bd4:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     bd8:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     bda:	4291      	cmp	r1, r2
     bdc:	d301      	bcc.n	be2 <FIH_LABEL_FIH_CALL_END_698+0xc4>
     bde:	4299      	cmp	r1, r3
     be0:	d9d1      	bls.n	b86 <FIH_LABEL_FIH_CALL_END_698+0x68>
            flash_area_erase(fap, 0, fap->fa_size);
     be2:	980a      	ldr	r0, [sp, #40]	; 0x28
     be4:	e7b3      	b.n	b4e <FIH_LABEL_FIH_CALL_END_698+0x30>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     be6:	2202      	movs	r2, #2
     be8:	e7d8      	b.n	b9c <FIH_LABEL_FIH_CALL_END_698+0x7e>
     bea:	bf00      	nop
     bec:	200020b8 	.word	0x200020b8
     bf0:	200020b0 	.word	0x200020b0
     bf4:	20015e32 	.word	0x20015e32
     bf8:	96f3b83d 	.word	0x96f3b83d
     bfc:	200020bc 	.word	0x200020bc
     c00:	200020b4 	.word	0x200020b4
     c04:	01008800 	.word	0x01008800

00000c08 <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c0c:	4688      	mov	r8, r1
     c0e:	4691      	mov	r9, r2
     c10:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     c12:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     c14:	f8df b08c 	ldr.w	fp, [pc, #140]	; ca4 <boot_copy_region+0x9c>
     c18:	4d23      	ldr	r5, [pc, #140]	; (ca8 <boot_copy_region+0xa0>)
     c1a:	4c24      	ldr	r4, [pc, #144]	; (cac <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     c1e:	429e      	cmp	r6, r3
     c20:	d301      	bcc.n	c26 <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     c22:	2000      	movs	r0, #0
     c24:	e00f      	b.n	c46 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     c28:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     c2a:	1b9f      	subs	r7, r3, r6
     c2c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     c30:	bf28      	it	cs
     c32:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     c36:	4a1b      	ldr	r2, [pc, #108]	; (ca4 <boot_copy_region+0x9c>)
     c38:	463b      	mov	r3, r7
     c3a:	eb06 010a 	add.w	r1, r6, sl
     c3e:	f00a fad7 	bl	b1f0 <flash_area_read>
        if (rc != 0) {
     c42:	b110      	cbz	r0, c4a <boot_copy_region+0x42>
            return BOOT_EFLASH;
     c44:	2001      	movs	r0, #1
}
     c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
     c4c:	463b      	mov	r3, r7
     c4e:	465a      	mov	r2, fp
     c50:	4648      	mov	r0, r9
     c52:	1871      	adds	r1, r6, r1
     c54:	f00a fae1 	bl	b21a <flash_area_write>
        if (rc != 0) {
     c58:	2800      	cmp	r0, #0
     c5a:	d1f3      	bne.n	c44 <boot_copy_region+0x3c>
     c5c:	4b14      	ldr	r3, [pc, #80]	; (cb0 <boot_copy_region+0xa8>)
     c5e:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     c62:	443e      	add	r6, r7
     c64:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     c68:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     c6c:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     c70:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     c74:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     c78:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     c7c:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     c80:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     c84:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     c88:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     c8c:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     c90:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     c94:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     c98:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     c9c:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     ca0:	e7bc      	b.n	c1c <boot_copy_region+0x14>
     ca2:	bf00      	nop
     ca4:	20012774 	.word	0x20012774
     ca8:	50018000 	.word	0x50018000
     cac:	6e524635 	.word	0x6e524635
     cb0:	50019000 	.word	0x50019000

00000cb4 <context_boot_go>:
#endif
}

fih_ret
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     cb8:	2600      	movs	r6, #0
{
     cba:	4604      	mov	r4, r0
     cbc:	460d      	mov	r5, r1
    has_upgrade = false;
     cbe:	46b0      	mov	r8, r6
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     cc0:	2758      	movs	r7, #88	; 0x58
{
     cc2:	b095      	sub	sp, #84	; 0x54
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     cc4:	2e01      	cmp	r6, #1
     cc6:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     cca:	d907      	bls.n	cdc <context_boot_go+0x28>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     ccc:	f1b8 0f00 	cmp.w	r8, #0
     cd0:	f000 815b 	beq.w	f8a <FIH_LABEL_FIH_CALL_END_2245+0x11a>
     cd4:	2000      	movs	r0, #0
    return &BOOT_IMG(state, slot).hdr;
     cd6:	262c      	movs	r6, #44	; 0x2c
     cd8:	2758      	movs	r7, #88	; 0x58
     cda:	e0dc      	b.n	e96 <FIH_LABEL_FIH_CALL_END_2245+0x26>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     cdc:	19a3      	adds	r3, r4, r6
     cde:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     ce2:	2900      	cmp	r1, #0
     ce4:	d14d      	bne.n	d82 <context_boot_go+0xce>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     ce6:	fb07 4306 	mla	r3, r7, r6, r4
            primary_slot_sectors[image_index];
     cea:	4a6d      	ldr	r2, [pc, #436]	; (ea0 <FIH_LABEL_FIH_CALL_END_2245+0x30>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     cec:	4630      	mov	r0, r6
            primary_slot_sectors[image_index];
     cee:	eb02 3286 	add.w	r2, r2, r6, lsl #14
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     cf2:	625a      	str	r2, [r3, #36]	; 0x24
            secondary_slot_sectors[image_index];
     cf4:	4a6b      	ldr	r2, [pc, #428]	; (ea4 <FIH_LABEL_FIH_CALL_END_2245+0x34>)
     cf6:	eb02 3286 	add.w	r2, r2, r6, lsl #14
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     cfa:	651a      	str	r2, [r3, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     cfc:	f009 fbd6 	bl	a4ac <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     d00:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     d04:	b2c0      	uxtb	r0, r0
     d06:	fb07 4101 	mla	r1, r7, r1, r4
     d0a:	3120      	adds	r1, #32
     d0c:	f001 f864 	bl	1dd8 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     d10:	2101      	movs	r1, #1
     d12:	4630      	mov	r0, r6
     d14:	f009 fbca 	bl	a4ac <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     d18:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     d1c:	b2c0      	uxtb	r0, r0
     d1e:	fb07 4101 	mla	r1, r7, r1, r4
     d22:	314c      	adds	r1, #76	; 0x4c
     d24:	f001 f858 	bl	1dd8 <flash_area_open>
    rc = boot_read_sectors(state);
     d28:	4620      	mov	r0, r4
     d2a:	f009 fcdf 	bl	a6ec <boot_read_sectors>
    if (rc != 0) {
     d2e:	bb00      	cbnz	r0, d72 <context_boot_go+0xbe>
    rc = boot_read_image_headers(state, false, NULL);
     d30:	2200      	movs	r2, #0
     d32:	4620      	mov	r0, r4
     d34:	4611      	mov	r1, r2
     d36:	f009 fd07 	bl	a748 <boot_read_image_headers>
    if (rc != 0) {
     d3a:	4683      	mov	fp, r0
     d3c:	b990      	cbnz	r0, d64 <context_boot_go+0xb0>
    if (boot_slots_compatible(state)) {
     d3e:	4620      	mov	r0, r4
     d40:	f009 fd63 	bl	a80a <boot_slots_compatible>
     d44:	b170      	cbz	r0, d64 <context_boot_go+0xb0>
        boot_status_reset(bs);
     d46:	a80a      	add	r0, sp, #40	; 0x28
     d48:	f009 fd2d 	bl	a7a6 <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     d4c:	f009 fd34 	bl	a7b8 <boot_status_is_reset>
     d50:	4606      	mov	r6, r0
     d52:	bb60      	cbnz	r0, dae <context_boot_go+0xfa>
    if (BOOT_CURR_IMG(state) == 0) {
     d54:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d58:	b9c3      	cbnz	r3, d8c <context_boot_go+0xd8>
            rc = boot_read_image_headers(state, false, bs);
     d5a:	2100      	movs	r1, #0
     d5c:	4620      	mov	r0, r4
     d5e:	aa0a      	add	r2, sp, #40	; 0x28
     d60:	f009 fcf2 	bl	a748 <boot_read_image_headers>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d64:	2201      	movs	r2, #1
     d66:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d6a:	4423      	add	r3, r4
     d6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     d70:	e007      	b.n	d82 <context_boot_go+0xce>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d72:	2201      	movs	r2, #1
     d74:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     d78:	4290      	cmp	r0, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d7a:	4423      	add	r3, r4
     d7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     d80:	d1d6      	bne.n	d30 <context_boot_go+0x7c>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d82:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
     d86:	3601      	adds	r6, #1
     d88:	b2f6      	uxtb	r6, r6
     d8a:	e79b      	b.n	cc4 <context_boot_go+0x10>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d8c:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     d90:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     d92:	bf04      	itt	eq
     d94:	2201      	moveq	r2, #1
     d96:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     d9a:	2b01      	cmp	r3, #1
     d9c:	d0dd      	beq.n	d5a <context_boot_go+0xa6>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d9e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     da2:	2b04      	cmp	r3, #4
     da4:	d1d9      	bne.n	d5a <context_boot_go+0xa6>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     da6:	2301      	movs	r3, #1
     da8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     dac:	e7d5      	b.n	d5a <context_boot_go+0xa6>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     dae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     db2:	2b01      	cmp	r3, #1
     db4:	d151      	bne.n	e5a <FIH_LABEL_FIH_CALL_START_2222>
    const struct flash_area *secondary_fa =
     db6:	2258      	movs	r2, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     db8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    uint32_t reset_addr = 0;
     dbc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    const struct flash_area *secondary_fa =
     dc0:	fb02 4303 	mla	r3, r2, r3, r4
    if (hdr->ih_magic == IMAGE_MAGIC) {
     dc4:	4a38      	ldr	r2, [pc, #224]	; (ea8 <FIH_LABEL_FIH_CALL_END_2245+0x38>)
     dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    const struct flash_area *secondary_fa =
     dc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdr->ih_magic == IMAGE_MAGIC) {
     dca:	4291      	cmp	r1, r2
     dcc:	d01d      	beq.n	e0a <FIH_LABEL_FIH_CALL_END_2076+0x16>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     dce:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     dd2:	f005 fc17 	bl	6604 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     dd6:	1e83      	subs	r3, r0, #2
     dd8:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     dda:	4681      	mov	r9, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     ddc:	d81f      	bhi.n	e1e <FIH_LABEL_FIH_CALL_END_2076+0x2a>

00000dde <FIH_LABEL_FIH_CALL_START_2052>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     dde:	f7ff fe1d 	bl	a1c <fih_cfi_get_and_increment>
     de2:	2101      	movs	r1, #1
     de4:	4683      	mov	fp, r0
     de6:	4620      	mov	r0, r4
     de8:	f7ff fe32 	bl	a50 <boot_validate_slot.isra.0>
     dec:	4682      	mov	sl, r0
     dee:	4658      	mov	r0, fp
     df0:	f7ff fe24 	bl	a3c <fih_cfi_validate>

00000df4 <FIH_LABEL_FIH_CALL_END_2076>:
        if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     df4:	492d      	ldr	r1, [pc, #180]	; (eac <FIH_LABEL_FIH_CALL_END_2245+0x3c>)
     df6:	6809      	ldr	r1, [r1, #0]
     df8:	458a      	cmp	sl, r1
     dfa:	d010      	beq.n	e1e <FIH_LABEL_FIH_CALL_END_2076+0x2a>
            if (FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     dfc:	4a2c      	ldr	r2, [pc, #176]	; (eb0 <FIH_LABEL_FIH_CALL_END_2245+0x40>)
     dfe:	6812      	ldr	r2, [r2, #0]
     e00:	4592      	cmp	sl, r2
     e02:	d10a      	bne.n	e1a <FIH_LABEL_FIH_CALL_END_2076+0x26>
                swap_type = BOOT_SWAP_TYPE_NONE;
     e04:	f04f 0901 	mov.w	r9, #1
     e08:	e009      	b.n	e1e <FIH_LABEL_FIH_CALL_END_2076+0x2a>
        rc = flash_area_read(secondary_fa, hdr->ih_hdr_size +
     e0a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
     e0c:	2304      	movs	r3, #4
     e0e:	aa0e      	add	r2, sp, #56	; 0x38
     e10:	4419      	add	r1, r3
     e12:	f00a f9ed 	bl	b1f0 <flash_area_read>
        if (rc != 0) {
     e16:	2800      	cmp	r0, #0
     e18:	d0d9      	beq.n	dce <context_boot_go+0x11a>
            return BOOT_SWAP_TYPE_FAIL;
     e1a:	f04f 0905 	mov.w	r9, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     e1e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     e22:	4423      	add	r3, r4
     e24:	f883 90b0 	strb.w	r9, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     e28:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     e2c:	b16b      	cbz	r3, e4a <FIH_LABEL_FIH_CALL_END_2076+0x56>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     e2e:	18e2      	adds	r2, r4, r3
     e30:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     e34:	2a01      	cmp	r2, #1
     e36:	d0a4      	beq.n	d82 <context_boot_go+0xce>
     e38:	2a04      	cmp	r2, #4
     e3a:	d00c      	beq.n	e56 <FIH_LABEL_FIH_CALL_END_2076+0x62>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     e3c:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     e40:	2a04      	cmp	r2, #4
     e42:	d102      	bne.n	e4a <FIH_LABEL_FIH_CALL_END_2076+0x56>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     e44:	2201      	movs	r2, #1
     e46:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     e4a:	4423      	add	r3, r4
     e4c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     e50:	3b02      	subs	r3, #2
     e52:	2b02      	cmp	r3, #2
     e54:	d895      	bhi.n	d82 <context_boot_go+0xce>
            has_upgrade = true;
     e56:	46b0      	mov	r8, r6
     e58:	e793      	b.n	d82 <context_boot_go+0xce>

00000e5a <FIH_LABEL_FIH_CALL_START_2222>:
                FIH_CALL(boot_validate_slot, fih_rc,
     e5a:	f7ff fddf 	bl	a1c <fih_cfi_get_and_increment>
     e5e:	2101      	movs	r1, #1
     e60:	4683      	mov	fp, r0
     e62:	4620      	mov	r0, r4
     e64:	f7ff fdf4 	bl	a50 <boot_validate_slot.isra.0>
     e68:	4681      	mov	r9, r0
     e6a:	4658      	mov	r0, fp
     e6c:	f7ff fde6 	bl	a3c <fih_cfi_validate>

00000e70 <FIH_LABEL_FIH_CALL_END_2245>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     e70:	4a0e      	ldr	r2, [pc, #56]	; (eac <FIH_LABEL_FIH_CALL_END_2245+0x3c>)
     e72:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     e76:	6812      	ldr	r2, [r2, #0]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     e78:	4423      	add	r3, r4
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     e7a:	4591      	cmp	r9, r2
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     e7c:	bf14      	ite	ne
     e7e:	2205      	movne	r2, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     e80:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
     e84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     e88:	e7ce      	b.n	e28 <FIH_LABEL_FIH_CALL_END_2076+0x34>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     e8a:	1823      	adds	r3, r4, r0
     e8c:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     e90:	b182      	cbz	r2, eb4 <FIH_LABEL_FIH_CALL_END_2245+0x44>
            BOOT_CURR_IMG(state)++;
     e92:	3001      	adds	r0, #1
     e94:	b2c0      	uxtb	r0, r0
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     e96:	2801      	cmp	r0, #1
            BOOT_CURR_IMG(state)++;
     e98:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     e9c:	d9f5      	bls.n	e8a <FIH_LABEL_FIH_CALL_END_2245+0x1a>
     e9e:	e074      	b.n	f8a <FIH_LABEL_FIH_CALL_END_2245+0x11a>
     ea0:	2000a774 	.word	0x2000a774
     ea4:	20002774 	.word	0x20002774
     ea8:	96f3b83d 	.word	0x96f3b83d
     eac:	200020bc 	.word	0x200020bc
     eb0:	200020b4 	.word	0x200020b4
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     eb4:	f893 80b0 	ldrb.w	r8, [r3, #176]	; 0xb0
     eb8:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
     ebc:	f1b8 0801 	subs.w	r8, r8, #1
     ec0:	bf18      	it	ne
     ec2:	f04f 0801 	movne.w	r8, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ec6:	4641      	mov	r1, r8
     ec8:	f009 faf0 	bl	a4ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ecc:	a905      	add	r1, sp, #20
     ece:	b2c0      	uxtb	r0, r0
     ed0:	f000 ff82 	bl	1dd8 <flash_area_open>
    if (rc != 0) {
     ed4:	2800      	cmp	r0, #0
     ed6:	f040 808f 	bne.w	ff8 <FIH_LABEL_FIH_CALL_END_2245+0x188>
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     eda:	2301      	movs	r3, #1
     edc:	fb06 f808 	mul.w	r8, r6, r8
     ee0:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     ee4:	9a05      	ldr	r2, [sp, #20]
     ee6:	fb17 8101 	smlabb	r1, r7, r1, r8
     eea:	9300      	str	r3, [sp, #0]
     eec:	4421      	add	r1, r4
     eee:	2340      	movs	r3, #64	; 0x40
     ef0:	a80e      	add	r0, sp, #56	; 0x38
     ef2:	f009 fb0b 	bl	a50c <bootutil_tlv_iter_begin>
    if (rc != 0) {
     ef6:	4680      	mov	r8, r0
     ef8:	2800      	cmp	r0, #0
     efa:	d17f      	bne.n	ffc <FIH_LABEL_FIH_CALL_END_2245+0x18c>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     efc:	2300      	movs	r3, #0
     efe:	f10d 0212 	add.w	r2, sp, #18
     f02:	a906      	add	r1, sp, #24
     f04:	a80e      	add	r0, sp, #56	; 0x38
     f06:	f009 fb4f 	bl	a5a8 <bootutil_tlv_iter_next>
        if (rc < 0) {
     f0a:	2800      	cmp	r0, #0
     f0c:	db3d      	blt.n	f8a <FIH_LABEL_FIH_CALL_END_2245+0x11a>
        rc = flash_area_read(fap, off, &dep, len);
     f0e:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     f10:	f040 8081 	bne.w	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
        if (len != sizeof(dep)) {
     f14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     f18:	2b0c      	cmp	r3, #12
     f1a:	d17a      	bne.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
        rc = flash_area_read(fap, off, &dep, len);
     f1c:	9906      	ldr	r1, [sp, #24]
     f1e:	aa07      	add	r2, sp, #28
     f20:	f00a f966 	bl	b1f0 <flash_area_read>
        if (rc != 0) {
     f24:	2800      	cmp	r0, #0
     f26:	d17f      	bne.n	1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     f28:	f89d 301c 	ldrb.w	r3, [sp, #28]
     f2c:	2b01      	cmp	r3, #1
     f2e:	d87e      	bhi.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
    swap_type = state->swap_type[dep->image_id];
     f30:	18e2      	adds	r2, r4, r3
                                          : BOOT_PRIMARY_SLOT;
     f32:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
    if (ver1->iv_major > ver2->iv_major) {
     f36:	437b      	muls	r3, r7
                                          : BOOT_PRIMARY_SLOT;
     f38:	3a02      	subs	r2, #2
     f3a:	2a02      	cmp	r2, #2
     f3c:	bf8c      	ite	hi
     f3e:	2200      	movhi	r2, #0
     f40:	2201      	movls	r2, #1
    if (ver1->iv_major > ver2->iv_major) {
     f42:	fb06 3302 	mla	r3, r6, r2, r3
     f46:	4423      	add	r3, r4
     f48:	7d19      	ldrb	r1, [r3, #20]
     f4a:	f89d 2020 	ldrb.w	r2, [sp, #32]
     f4e:	4291      	cmp	r1, r2
     f50:	d8d4      	bhi.n	efc <FIH_LABEL_FIH_CALL_END_2245+0x8c>
    if (ver1->iv_major < ver2->iv_major) {
     f52:	d30a      	bcc.n	f6a <FIH_LABEL_FIH_CALL_END_2245+0xfa>
    if (ver1->iv_minor > ver2->iv_minor) {
     f54:	7d59      	ldrb	r1, [r3, #21]
     f56:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     f5a:	4291      	cmp	r1, r2
     f5c:	d8ce      	bhi.n	efc <FIH_LABEL_FIH_CALL_END_2245+0x8c>
    if (ver1->iv_minor < ver2->iv_minor) {
     f5e:	d304      	bcc.n	f6a <FIH_LABEL_FIH_CALL_END_2245+0xfa>
    if (ver1->iv_revision < ver2->iv_revision) {
     f60:	8ada      	ldrh	r2, [r3, #22]
     f62:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     f66:	429a      	cmp	r2, r3
     f68:	d2c8      	bcs.n	efc <FIH_LABEL_FIH_CALL_END_2245+0x8c>
        switch (BOOT_SWAP_TYPE(state)) {
     f6a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    flash_area_close(fap);
     f6e:	9805      	ldr	r0, [sp, #20]
        switch (BOOT_SWAP_TYPE(state)) {
     f70:	4423      	add	r3, r4
     f72:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     f76:	2a01      	cmp	r2, #1
     f78:	d03c      	beq.n	ff4 <FIH_LABEL_FIH_CALL_END_2245+0x184>
     f7a:	3a02      	subs	r2, #2
     f7c:	2a01      	cmp	r2, #1
     f7e:	d802      	bhi.n	f86 <FIH_LABEL_FIH_CALL_END_2245+0x116>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     f80:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     f82:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    flash_area_close(fap);
     f86:	f00a f932 	bl	b1ee <flash_area_close>

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f8a:	2600      	movs	r6, #0
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     f8c:	f04f 08ff 	mov.w	r8, #255	; 0xff
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     f90:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f92:	2e01      	cmp	r6, #1
     f94:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     f98:	d94c      	bls.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    FIH_SET(fih_cnt, 0);
     f9a:	2300      	movs	r3, #0
     f9c:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 1284 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x284>
        {
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            /* Check for all possible values is redundant in normal operation it
             * is meant to prevent FI attack.
             */
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
     fa0:	4eb9      	ldr	r6, [pc, #740]	; (1288 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x288>)
                FIH_EQ(fih_rc, FIH_FAILURE) ||
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     fa2:	4fba      	ldr	r7, [pc, #744]	; (128c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28c>)
    FIH_SET(fih_cnt, 0);
     fa4:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     fa6:	2b01      	cmp	r3, #1
     fa8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     fac:	f240 8157 	bls.w	125e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x25e>
    /*
     * fih_cnt should be equal to BOOT_IMAGE_NUMBER now.
     * If this is not the case, at least one iteration of the loop
     * has been skipped.
     */
    if(FIH_NOT_EQ(fih_cnt, BOOT_IMAGE_NUMBER)) {
     fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     fb2:	2b02      	cmp	r3, #2
     fb4:	d001      	beq.n	fba <FIH_LABEL_FIH_CALL_END_2245+0x14a>
        FIH_PANIC;
     fb6:	f009 fb55 	bl	a664 <fih_panic_loop>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
     fba:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
     fbe:	2b00      	cmp	r3, #0
     fc0:	f040 819a 	bne.w	12f8 <FIH_LABEL_FIH_CALL_END_3937+0x1a>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     fc4:	2658      	movs	r6, #88	; 0x58
     fc6:	fb06 4203 	mla	r2, r6, r3, r4
     fca:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     fce:	6a10      	ldr	r0, [r2, #32]
     fd0:	f009 fa81 	bl	a4d6 <flash_area_get_device_id>
     fd4:	7128      	strb	r0, [r5, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     fd6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     fda:	fb06 4303 	mla	r3, r6, r3, r4
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     fde:	6a1b      	ldr	r3, [r3, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     fe0:	685b      	ldr	r3, [r3, #4]
     fe2:	60ab      	str	r3, [r5, #8]
    return &BOOT_IMG(state, slot).hdr;
     fe4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     fe8:	fb03 4606 	mla	r6, r3, r6, r4
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     fec:	602e      	str	r6, [r5, #0]
    }

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     fee:	4ba6      	ldr	r3, [pc, #664]	; (1288 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x288>)
     ff0:	681d      	ldr	r5, [r3, #0]
     ff2:	e158      	b.n	12a6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a6>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     ff4:	2204      	movs	r2, #4
     ff6:	e7c4      	b.n	f82 <FIH_LABEL_FIH_CALL_END_2245+0x112>
    flash_area_close(fap);
     ff8:	9805      	ldr	r0, [sp, #20]
     ffa:	e7c4      	b.n	f86 <FIH_LABEL_FIH_CALL_END_2245+0x116>
     ffc:	9805      	ldr	r0, [sp, #20]
     ffe:	f00a f8f6 	bl	b1ee <flash_area_close>
	} else if (rc == BOOT_EBADIMAGE) {
    1002:	f1b8 0f03 	cmp.w	r8, #3
    1006:	d1c0      	bne.n	f8a <FIH_LABEL_FIH_CALL_END_2245+0x11a>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1008:	f240 1301 	movw	r3, #257	; 0x101
    100c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
            for (int idx = 0; idx < BOOT_IMAGE_NUMBER; idx++) {
    1010:	e7bb      	b.n	f8a <FIH_LABEL_FIH_CALL_END_2245+0x11a>
            rc = BOOT_EBADIMAGE;
    1012:	f04f 0803 	mov.w	r8, #3
    flash_area_close(fap);
    1016:	9805      	ldr	r0, [sp, #20]
    1018:	f00a f8e9 	bl	b1ee <flash_area_close>
        if (rc == 0) {
    101c:	f1b8 0f00 	cmp.w	r8, #0
    1020:	d1ef      	bne.n	1002 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2>
            BOOT_CURR_IMG(state)++;
    1022:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1026:	e734      	b.n	e92 <FIH_LABEL_FIH_CALL_END_2245+0x22>
        rc = BOOT_EFLASH;
    1028:	f04f 0801 	mov.w	r8, #1
    102c:	e7f3      	b.n	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
            rc = BOOT_EBADARGS;
    102e:	f04f 0807 	mov.w	r8, #7
    1032:	e7f0      	b.n	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    1034:	19a2      	adds	r2, r4, r6
    1036:	f892 30b9 	ldrb.w	r3, [r2, #185]	; 0xb9
    103a:	2b00      	cmp	r3, #0
    103c:	f040 80c3 	bne.w	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
        boot_status_reset(&bs);
    1040:	a80a      	add	r0, sp, #40	; 0x28
    1042:	f009 fbb0 	bl	a7a6 <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
    1046:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
    104a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
    104c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
    1050:	d806      	bhi.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
    1052:	2b01      	cmp	r3, #1
    1054:	d806      	bhi.n	1064 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x64>
    1056:	f000 80ad 	beq.w	11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    105a:	f882 80b0 	strb.w	r8, [r2, #176]	; 0xb0
    105e:	e0a9      	b.n	11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
        switch (BOOT_SWAP_TYPE(state)) {
    1060:	2b05      	cmp	r3, #5
    1062:	e7f8      	b.n	1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
    1064:	fb07 4306 	mla	r3, r7, r6, r4
    1068:	4619      	mov	r1, r3
    106a:	4630      	mov	r0, r6
    106c:	312c      	adds	r1, #44	; 0x2c
    106e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1070:	f00a fec3 	bl	bdfa <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
    1074:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
    1076:	4601      	mov	r1, r0
            if (rc == BOOT_HOOK_REGULAR)
    1078:	f040 809c 	bne.w	11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    107c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1080:	f009 fa14 	bl	a4ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1084:	a907      	add	r1, sp, #28
    1086:	b2c0      	uxtb	r0, r0
    1088:	f000 fea6 	bl	1dd8 <flash_area_open>
    if (rc != 0) {
    108c:	2800      	cmp	r0, #0
    108e:	f000 809f 	beq.w	11d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1d0>
    uint32_t src_size = 0;
    1092:	f04f 0900 	mov.w	r9, #0
    flash_area_close(fap);
    1096:	9807      	ldr	r0, [sp, #28]
    1098:	f00a f8a9 	bl	b1ee <flash_area_close>
    image_index = BOOT_CURR_IMG(state);
    109c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    10a0:	a907      	add	r1, sp, #28
    10a2:	2800      	cmp	r0, #0
    10a4:	f000 80d3 	beq.w	124e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24e>
    10a8:	2801      	cmp	r0, #1
    10aa:	f000 80cc 	beq.w	1246 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x246>
    10ae:	20ff      	movs	r0, #255	; 0xff
    10b0:	f000 fe92 	bl	1dd8 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10b4:	20ff      	movs	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    10b6:	2600      	movs	r6, #0
    return BOOT_IMG(state, slot).num_sectors;
    10b8:	f04f 0b58 	mov.w	fp, #88	; 0x58
    10bc:	46b2      	mov	sl, r6
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10be:	a90e      	add	r1, sp, #56	; 0x38
    10c0:	f000 fe8a 	bl	1dd8 <flash_area_open>
    10c4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10c8:	fb0b 4303 	mla	r3, fp, r3, r4
    10cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    10ce:	4553      	cmp	r3, sl
    10d0:	d019      	beq.n	1106 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x106>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    10d2:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    10d6:	4631      	mov	r1, r6
    10d8:	fb0b 4202 	mla	r2, fp, r2, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
    10dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10de:	9807      	ldr	r0, [sp, #28]
    10e0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
    10e4:	6852      	ldr	r2, [r2, #4]
    10e6:	9303      	str	r3, [sp, #12]
    10e8:	9202      	str	r2, [sp, #8]
    10ea:	f00a f8ab 	bl	b244 <flash_area_erase>
        if ((size + this_size) >= src_size) {
    10ee:	9a02      	ldr	r2, [sp, #8]
    10f0:	9b03      	ldr	r3, [sp, #12]
    10f2:	4416      	add	r6, r2
    10f4:	454e      	cmp	r6, r9
    10f6:	f0c0 80af 	bcc.w	1258 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x258>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
    10fa:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
    10fe:	fbb9 f9f6 	udiv	r9, r9, r6
    1102:	fb06 6609 	mla	r6, r6, r9, r6
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1106:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    110a:	f009 fa99 	bl	a640 <boot_trailer_sz>
    110e:	2358      	movs	r3, #88	; 0x58
    return BOOT_IMG(state, slot).num_sectors;
    1110:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    1114:	fb03 4202 	mla	r2, r3, r2, r4
    1118:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    111a:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
    111c:	6819      	ldr	r1, [r3, #0]
    111e:	3a01      	subs	r2, #1
    1120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
    1124:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
    1126:	f8d3 e004 	ldr.w	lr, [r3, #4]
    112a:	469c      	mov	ip, r3
    112c:	4472      	add	r2, lr
    } while (sz < trailer_sz);
    112e:	4290      	cmp	r0, r2
    1130:	f1a3 0308 	sub.w	r3, r3, #8
    1134:	d8f7      	bhi.n	1126 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x126>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1136:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
    113a:	9807      	ldr	r0, [sp, #28]
    113c:	1a59      	subs	r1, r3, r1
    113e:	f00a f881 	bl	b244 <flash_area_erase>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
    1142:	2300      	movs	r3, #0
    1144:	4620      	mov	r0, r4
    1146:	9a07      	ldr	r2, [sp, #28]
    1148:	990e      	ldr	r1, [sp, #56]	; 0x38
    114a:	9601      	str	r6, [sp, #4]
    114c:	9300      	str	r3, [sp, #0]
    114e:	f7ff fd5b 	bl	c08 <boot_copy_region>
    if (rc != 0) {
    1152:	bb78      	cbnz	r0, 11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
    rc = boot_write_magic(fap_primary_slot);
    1154:	9807      	ldr	r0, [sp, #28]
    1156:	f005 f9df 	bl	6518 <boot_write_magic>
    if (rc != 0) {
    115a:	bb58      	cbnz	r0, 11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
    115c:	f04f 0958 	mov.w	r9, #88	; 0x58
    1160:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1164:	4632      	mov	r2, r6
    1166:	fb09 4300 	mla	r3, r9, r0, r4
    116a:	6a19      	ldr	r1, [r3, #32]
    116c:	f00a fe53 	bl	be16 <boot_copy_region_post_hook>
    if (rc != 0) {
    1170:	4601      	mov	r1, r0
    1172:	b9f8      	cbnz	r0, 11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>
    1174:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    1178:	980e      	ldr	r0, [sp, #56]	; 0x38
    117a:	fb09 4303 	mla	r3, r9, r3, r4
	return fs->fs_size;
    117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1180:	685a      	ldr	r2, [r3, #4]
    1182:	f00a f85f 	bl	b244 <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
    1186:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    118a:	fb09 4303 	mla	r3, r9, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
    118e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    1192:	3b01      	subs	r3, #1
    1194:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1198:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    119c:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
    119e:	6842      	ldr	r2, [r0, #4]
    11a0:	1ac9      	subs	r1, r1, r3
    11a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    11a4:	f00a f84e 	bl	b244 <flash_area_erase>
    flash_area_close(fap_primary_slot);
    11a8:	9807      	ldr	r0, [sp, #28]
    11aa:	f00a f820 	bl	b1ee <flash_area_close>
    flash_area_close(fap_secondary_slot);
    11ae:	980e      	ldr	r0, [sp, #56]	; 0x38
    11b0:	f00a f81d 	bl	b1ee <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    11b4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11b8:	4423      	add	r3, r4
    11ba:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    11be:	2bff      	cmp	r3, #255	; 0xff
    11c0:	d101      	bne.n	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
            FIH_PANIC;
    11c2:	f009 fa4f 	bl	a664 <fih_panic_loop>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11c6:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
    11ca:	3601      	adds	r6, #1
    11cc:	b2f6      	uxtb	r6, r6
    11ce:	e6e0      	b.n	f92 <FIH_LABEL_FIH_CALL_END_2245+0x122>
    return &BOOT_IMG(state, slot).hdr;
    11d0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    11d4:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    11d6:	fb07 4303 	mla	r3, r7, r3, r4
    11da:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
    11dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    11de:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    11e0:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    11e2:	4631      	mov	r1, r6
    11e4:	2304      	movs	r3, #4
    11e6:	f00a f803 	bl	b1f0 <flash_area_read>
    11ea:	2800      	cmp	r0, #0
    11ec:	f47f af51 	bne.w	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
    11f0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    11f4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    11f8:	fb07 4303 	mla	r3, r7, r3, r4
    11fc:	f8b3 a036 	ldrh.w	sl, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1200:	f646 1308 	movw	r3, #26888	; 0x6908
    1204:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1206:	9807      	ldr	r0, [sp, #28]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1208:	d119      	bne.n	123e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23e>
        if (protect_tlv_size != info.it_tlv_tot) {
    120a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    120e:	459a      	cmp	sl, r3
    1210:	f47f af3f 	bne.w	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1214:	2304      	movs	r3, #4
    1216:	aa0e      	add	r2, sp, #56	; 0x38
    1218:	eb0a 0106 	add.w	r1, sl, r6
    121c:	f009 ffe8 	bl	b1f0 <flash_area_read>
    1220:	2800      	cmp	r0, #0
    1222:	f47f af36 	bne.w	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1226:	f646 1307 	movw	r3, #26887	; 0x6907
    122a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    122e:	429a      	cmp	r2, r3
    1230:	f47f af2f 	bne.w	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1234:	f8bd 903a 	ldrh.w	r9, [sp, #58]	; 0x3a
    1238:	44d1      	add	r9, sl
    123a:	44b1      	add	r9, r6
    rc = 0;
    123c:	e72b      	b.n	1096 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x96>
    } else if (protect_tlv_size != 0) {
    123e:	f1ba 0f00 	cmp.w	sl, #0
    1242:	d0f0      	beq.n	1226 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x226>
    1244:	e725      	b.n	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1246:	f000 fdc7 	bl	1dd8 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    124a:	200b      	movs	r0, #11
    124c:	e733      	b.n	10b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb6>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    124e:	2004      	movs	r0, #4
    1250:	f000 fdc2 	bl	1dd8 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1254:	2002      	movs	r0, #2
    1256:	e72e      	b.n	10b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb6>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    1258:	f10a 0a01 	add.w	sl, sl, #1
    125c:	e737      	b.n	10ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xce>
        FIH_SET(tmp_img_mask, state->img_mask[BOOT_CURR_IMG(state)]);
    125e:	4423      	add	r3, r4
    1260:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    1264:	f88d 201c 	strb.w	r2, [sp, #28]
        if (FIH_EQ(tmp_img_mask, true)) {
    1268:	f89d 201c 	ldrb.w	r2, [sp, #28]
    126c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    1270:	b172      	cbz	r2, 1290 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x290>
        ++fih_cnt;
    1272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1274:	3301      	adds	r3, #1
    1276:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1278:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    127c:	3301      	adds	r3, #1
    127e:	b2db      	uxtb	r3, r3
    1280:	e691      	b.n	fa6 <FIH_LABEL_FIH_CALL_END_2245+0x136>
    1282:	bf00      	nop
    1284:	200020b8 	.word	0x200020b8
    1288:	200020bc 	.word	0x200020bc
    128c:	200020b4 	.word	0x200020b4
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1290:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    1294:	2b01      	cmp	r3, #1
    1296:	d017      	beq.n	12c8 <FIH_LABEL_FIH_CALL_START_3915>
            rc = boot_read_image_headers(state, false, &bs);
    1298:	4620      	mov	r0, r4
    129a:	aa0a      	add	r2, sp, #40	; 0x28
    129c:	f009 fa54 	bl	a748 <boot_read_image_headers>
            if (rc != 0) {
    12a0:	b190      	cbz	r0, 12c8 <FIH_LABEL_FIH_CALL_START_3915>
                FIH_SET(fih_rc, FIH_FAILURE);
    12a2:	f8d8 5000 	ldr.w	r5, [r8]
     * easily recover them.
     */
#if defined(MCUBOOT_ENC_IMAGES) || defined(MCUBOOT_SWAP_SAVE_ENCTLV)
    like_mbedtls_zeroize(&bs, sizeof(bs));
#else
    memset(&bs, 0, sizeof(struct boot_status));
    12a6:	2210      	movs	r2, #16
    12a8:	2100      	movs	r1, #0
    12aa:	a80a      	add	r0, sp, #40	; 0x28
    12ac:	f00a f9ff 	bl	b6ae <memset>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    12b0:	2658      	movs	r6, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    12b2:	2300      	movs	r3, #0
    12b4:	2b01      	cmp	r3, #1
    12b6:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    12ba:	d925      	bls.n	1308 <FIH_LABEL_FIH_CALL_END_3937+0x2a>
#endif

    close_all_flash_areas(state);
    FIH_RET(fih_rc);
    12bc:	f7ff fbb6 	bl	a2c <fih_cfi_decrement>
}
    12c0:	4628      	mov	r0, r5
    12c2:	b015      	add	sp, #84	; 0x54
    12c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000012c8 <FIH_LABEL_FIH_CALL_START_3915>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    12c8:	f7ff fba8 	bl	a1c <fih_cfi_get_and_increment>
    12cc:	2100      	movs	r1, #0
    12ce:	4682      	mov	sl, r0
    12d0:	4620      	mov	r0, r4
    12d2:	f7ff fbbd 	bl	a50 <boot_validate_slot.isra.0>
    12d6:	4681      	mov	r9, r0
    12d8:	4650      	mov	r0, sl
    12da:	f7ff fbaf 	bl	a3c <fih_cfi_validate>

000012de <FIH_LABEL_FIH_CALL_END_3937>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
    12de:	6833      	ldr	r3, [r6, #0]
    12e0:	454b      	cmp	r3, r9
    12e2:	d1de      	bne.n	12a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a2>
    12e4:	f8d8 2000 	ldr.w	r2, [r8]
    12e8:	429a      	cmp	r2, r3
    12ea:	d0da      	beq.n	12a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a2>
                FIH_EQ(fih_rc, FIH_FAILURE) ||
    12ec:	683a      	ldr	r2, [r7, #0]
    12ee:	429a      	cmp	r2, r3
    12f0:	d1bf      	bne.n	1272 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x272>
    12f2:	e7d6      	b.n	12a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a2>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    12f4:	2301      	movs	r3, #1
    12f6:	e665      	b.n	fc4 <FIH_LABEL_FIH_CALL_END_2245+0x154>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    12f8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    12fc:	2b00      	cmp	r3, #0
    12fe:	d0f9      	beq.n	12f4 <FIH_LABEL_FIH_CALL_END_3937+0x16>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1300:	2302      	movs	r3, #2
    1302:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    if (BOOT_CURR_IMG(state) >= BOOT_IMAGE_NUMBER) {
    1306:	e672      	b.n	fee <FIH_LABEL_FIH_CALL_END_2245+0x17e>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    1308:	18e2      	adds	r2, r4, r3
    130a:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    130e:	b95a      	cbnz	r2, 1328 <FIH_LABEL_FIH_CALL_END_3937+0x4a>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1310:	fb06 4303 	mla	r3, r6, r3, r4
    1314:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    1316:	f009 ff6a 	bl	b1ee <flash_area_close>
    131a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    131e:	fb06 4303 	mla	r3, r6, r3, r4
    1322:	6a18      	ldr	r0, [r3, #32]
    1324:	f009 ff63 	bl	b1ee <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1328:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    132c:	3301      	adds	r3, #1
    132e:	b2db      	uxtb	r3, r3
    1330:	e7c0      	b.n	12b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2b4>
    1332:	bf00      	nop

00001334 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_ret
boot_go(struct boot_rsp *rsp)
{
    1334:	b570      	push	{r4, r5, r6, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1336:	4e0b      	ldr	r6, [pc, #44]	; (1364 <FIH_LABEL_FIH_CALL_END_4662+0xa>)
{
    1338:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    133a:	22bc      	movs	r2, #188	; 0xbc
    133c:	2100      	movs	r1, #0
    133e:	4630      	mov	r0, r6
    1340:	f00a f9b5 	bl	b6ae <memset>

00001344 <FIH_LABEL_FIH_CALL_START_4639>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1344:	f7ff fb6a 	bl	a1c <fih_cfi_get_and_increment>
    1348:	4621      	mov	r1, r4
    134a:	4605      	mov	r5, r0
    134c:	4630      	mov	r0, r6
    134e:	f7ff fcb1 	bl	cb4 <context_boot_go>
    1352:	4604      	mov	r4, r0
    1354:	4628      	mov	r0, r5
    1356:	f7ff fb71 	bl	a3c <fih_cfi_validate>

0000135a <FIH_LABEL_FIH_CALL_END_4662>:
    FIH_RET(fih_rc);
    135a:	f7ff fb67 	bl	a2c <fih_cfi_decrement>
}
    135e:	4620      	mov	r0, r4
    1360:	bd70      	pop	{r4, r5, r6, pc}
    1362:	bf00      	nop
    1364:	20012b74 	.word	0x20012b74

00001368 <cleanup_arm_nvic>:
    1368:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    136c:	b672      	cpsid	i
    136e:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1374:	4a09      	ldr	r2, [pc, #36]	; (139c <cleanup_arm_nvic+0x34>)
    1376:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    137a:	3301      	adds	r3, #1
    137c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    137e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1382:	d1f8      	bne.n	1376 <cleanup_arm_nvic+0xe>
    1384:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    138a:	4a04      	ldr	r2, [pc, #16]	; (139c <cleanup_arm_nvic+0x34>)
    138c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1390:	3301      	adds	r3, #1
    1392:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1394:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1398:	d1f8      	bne.n	138c <cleanup_arm_nvic+0x24>
	}
}
    139a:	4770      	bx	lr
    139c:	e000e100 	.word	0xe000e100

000013a0 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    13a0:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13a2:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    13a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13a8:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13aa:	4b1a      	ldr	r3, [pc, #104]	; (1414 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    13ac:	4629      	mov	r1, r5
    13ae:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    13b0:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13b4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    13bc:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    13be:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13c2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13c6:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    13ca:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    13ce:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    13d0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13d4:	4810      	ldr	r0, [pc, #64]	; (1418 <nrf_cleanup_peripheral+0x78>)
    13d6:	f00a f96a 	bl	b6ae <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    13da:	2280      	movs	r2, #128	; 0x80
    13dc:	4629      	mov	r1, r5
    13de:	480f      	ldr	r0, [pc, #60]	; (141c <nrf_cleanup_peripheral+0x7c>)
    13e0:	f00a f965 	bl	b6ae <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13e4:	4b0e      	ldr	r3, [pc, #56]	; (1420 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    13e6:	2280      	movs	r2, #128	; 0x80
    13e8:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    13ec:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    13ee:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    13f2:	480c      	ldr	r0, [pc, #48]	; (1424 <nrf_cleanup_peripheral+0x84>)
    13f4:	f00a f95b 	bl	b6ae <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    13f8:	2280      	movs	r2, #128	; 0x80
    13fa:	4629      	mov	r1, r5
    13fc:	480a      	ldr	r0, [pc, #40]	; (1428 <nrf_cleanup_peripheral+0x88>)
    13fe:	f00a f956 	bl	b6ae <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    1402:	4b0a      	ldr	r3, [pc, #40]	; (142c <nrf_cleanup_peripheral+0x8c>)
    1404:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1408:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    140c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1410:	bd38      	pop	{r3, r4, r5, pc}
    1412:	bf00      	nop
    1414:	50014000 	.word	0x50014000
    1418:	50008080 	.word	0x50008080
    141c:	50008180 	.word	0x50008180
    1420:	50009000 	.word	0x50009000
    1424:	50009080 	.word	0x50009080
    1428:	50009180 	.word	0x50009180
    142c:	50017000 	.word	0x50017000

00001430 <nrf_cleanup_ns_ram>:
#if defined(USE_PARTITION_MANAGER) \
	&& defined(CONFIG_ARM_TRUSTZONE_M) \
	&& defined(PM_SRAM_NONSECURE_NAME)
void nrf_cleanup_ns_ram(void)
{
	memset((void *) PM_SRAM_NONSECURE_ADDRESS, 0, PM_SRAM_NONSECURE_SIZE);
    1430:	f44f 22ec 	mov.w	r2, #483328	; 0x76000
    1434:	2100      	movs	r1, #0
    1436:	4801      	ldr	r0, [pc, #4]	; (143c <nrf_cleanup_ns_ram+0xc>)
    1438:	f00a b939 	b.w	b6ae <memset>
    143c:	2000a000 	.word	0x2000a000

00001440 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1444:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1446:	b915      	cbnz	r5, 144e <base64_encode+0xe>
		*olen = 0;
    1448:	6015      	str	r5, [r2, #0]
		return 0;
    144a:	2000      	movs	r0, #0
    144c:	e012      	b.n	1474 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    144e:	2403      	movs	r4, #3
    1450:	fbb5 f4f4 	udiv	r4, r5, r4
    1454:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1458:	42bd      	cmp	r5, r7
    145a:	bf18      	it	ne
    145c:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    145e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1462:	d209      	bcs.n	1478 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1464:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    1466:	3401      	adds	r4, #1
    1468:	428c      	cmp	r4, r1
    146a:	d800      	bhi.n	146e <base64_encode+0x2e>
    146c:	b938      	cbnz	r0, 147e <base64_encode+0x3e>
		return -ENOMEM;
    146e:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    1472:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    147c:	e7f7      	b.n	146e <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    147e:	4604      	mov	r4, r0
    1480:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1482:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1538 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    1486:	42b9      	cmp	r1, r7
    1488:	f103 0c03 	add.w	ip, r3, #3
    148c:	f104 0604 	add.w	r6, r4, #4
    1490:	d32b      	bcc.n	14ea <base64_encode+0xaa>
	if (i < slen) {
    1492:	42a9      	cmp	r1, r5
    1494:	4627      	mov	r7, r4
    1496:	d223      	bcs.n	14e0 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1498:	f101 0c01 	add.w	ip, r1, #1
    149c:	45ac      	cmp	ip, r5
		C1 = *src++;
    149e:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14a0:	bf28      	it	cs
    14a2:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14a4:	4924      	ldr	r1, [pc, #144]	; (1538 <base64_encode+0xf8>)
    14a6:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14aa:	bf38      	it	cc
    14ac:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14ae:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    14b2:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14b4:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14b8:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    14bc:	bf2e      	itee	cs
    14be:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14c0:	009b      	lslcc	r3, r3, #2
    14c2:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14c6:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14ca:	bf38      	it	cc
    14cc:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14ce:	f007 0730 	and.w	r7, r7, #48	; 0x30
    14d2:	f81e 7007 	ldrb.w	r7, [lr, r7]
    14d6:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    14d8:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14da:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    14dc:	4637      	mov	r7, r6
    14de:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    14e0:	2300      	movs	r3, #0
	*olen = p - dst;
    14e2:	1a38      	subs	r0, r7, r0
    14e4:	6010      	str	r0, [r2, #0]
	*p = 0U;
    14e6:	703b      	strb	r3, [r7, #0]
	return 0;
    14e8:	e7af      	b.n	144a <base64_encode+0xa>
		C1 = *src++;
    14ea:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    14ee:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14f2:	ea4f 09a4 	mov.w	r9, r4, asr #2
    14f6:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14fa:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    14fc:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1500:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1504:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1508:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    150c:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1510:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1512:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1516:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    151a:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    151e:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    1520:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1524:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1528:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    152c:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    152e:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1532:	3103      	adds	r1, #3
    1534:	4663      	mov	r3, ip
    1536:	e7a6      	b.n	1486 <base64_encode+0x46>
    1538:	0000f25c 	.word	0x0000f25c

0000153c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    153c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    1540:	2700      	movs	r7, #0
    1542:	463c      	mov	r4, r7
    1544:	463d      	mov	r5, r7
{
    1546:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    154a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1674 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    154e:	4575      	cmp	r5, lr
    1550:	d31f      	bcc.n	1592 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    1552:	bbe4      	cbnz	r4, 15ce <base64_decode+0x92>
		*olen = 0;
		return 0;
    1554:	2000      	movs	r0, #0
		*olen = 0;
    1556:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    155c:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    155e:	4576      	cmp	r6, lr
    1560:	d033      	beq.n	15ca <base64_decode+0x8e>
    1562:	f813 c006 	ldrb.w	ip, [r3, r6]
    1566:	f1bc 0f20 	cmp.w	ip, #32
    156a:	d0f7      	beq.n	155c <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    156c:	ebae 0906 	sub.w	r9, lr, r6
    1570:	f1b9 0f01 	cmp.w	r9, #1
    1574:	eba6 0505 	sub.w	r5, r6, r5
    1578:	d00d      	beq.n	1596 <base64_decode+0x5a>
    157a:	f1bc 0f0d 	cmp.w	ip, #13
    157e:	d10a      	bne.n	1596 <base64_decode+0x5a>
    1580:	eb03 0906 	add.w	r9, r3, r6
    1584:	f899 9001 	ldrb.w	r9, [r9, #1]
    1588:	f1b9 0f0a 	cmp.w	r9, #10
    158c:	d16e      	bne.n	166c <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    158e:	1c75      	adds	r5, r6, #1
    1590:	e7dd      	b.n	154e <base64_decode+0x12>
    1592:	462e      	mov	r6, r5
    1594:	e7e3      	b.n	155e <base64_decode+0x22>
		if (src[i] == '\n') {
    1596:	f1bc 0f0a 	cmp.w	ip, #10
    159a:	d0f8      	beq.n	158e <base64_decode+0x52>
		if (x != 0U) {
    159c:	b92d      	cbnz	r5, 15aa <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    159e:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    15a2:	d105      	bne.n	15b0 <base64_decode+0x74>
    15a4:	3701      	adds	r7, #1
    15a6:	2f02      	cmp	r7, #2
    15a8:	d90d      	bls.n	15c6 <base64_decode+0x8a>
			return -EINVAL;
    15aa:	f06f 0015 	mvn.w	r0, #21
    15ae:	e7d3      	b.n	1558 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    15b0:	f01c 0f80 	tst.w	ip, #128	; 0x80
    15b4:	d1f9      	bne.n	15aa <base64_decode+0x6e>
    15b6:	f818 500c 	ldrb.w	r5, [r8, ip]
    15ba:	2d7f      	cmp	r5, #127	; 0x7f
    15bc:	d0f5      	beq.n	15aa <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    15be:	2d3f      	cmp	r5, #63	; 0x3f
    15c0:	d801      	bhi.n	15c6 <base64_decode+0x8a>
    15c2:	2f00      	cmp	r7, #0
    15c4:	d1f1      	bne.n	15aa <base64_decode+0x6e>
		n++;
    15c6:	3401      	adds	r4, #1
    15c8:	e7e1      	b.n	158e <base64_decode+0x52>
    15ca:	4635      	mov	r5, r6
    15cc:	e7c1      	b.n	1552 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    15ce:	f04f 0c06 	mov.w	ip, #6
    15d2:	f004 0607 	and.w	r6, r4, #7
    15d6:	08e4      	lsrs	r4, r4, #3
    15d8:	fb0c f606 	mul.w	r6, ip, r6
    15dc:	fb0c f404 	mul.w	r4, ip, r4
    15e0:	3607      	adds	r6, #7
	n -= j;
    15e2:	1be4      	subs	r4, r4, r7
    15e4:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    15e8:	b170      	cbz	r0, 1608 <base64_decode+0xcc>
    15ea:	428c      	cmp	r4, r1
    15ec:	d80c      	bhi.n	1608 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15ee:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    15f0:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15f2:	2603      	movs	r6, #3
    15f4:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    15f6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1674 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    15fa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1678 <base64_decode+0x13c>
    15fe:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1600:	429d      	cmp	r5, r3
    1602:	d105      	bne.n	1610 <base64_decode+0xd4>
	*olen = p - dst;
    1604:	1a0c      	subs	r4, r1, r0
	return 0;
    1606:	e7a5      	b.n	1554 <base64_decode+0x18>
		return -ENOMEM;
    1608:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    160c:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    160e:	e7a3      	b.n	1558 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1610:	f813 9b01 	ldrb.w	r9, [r3], #1
    1614:	f1a9 0c0a 	sub.w	ip, r9, #10
    1618:	fa5f fc8c 	uxtb.w	ip, ip
    161c:	f1bc 0f16 	cmp.w	ip, #22
    1620:	d804      	bhi.n	162c <base64_decode+0xf0>
    1622:	fa48 fc0c 	asr.w	ip, r8, ip
    1626:	f01c 0f01 	tst.w	ip, #1
    162a:	d0e9      	beq.n	1600 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    162c:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    1630:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    1632:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    1636:	bf08      	it	eq
    1638:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    163a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    163e:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1640:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    1644:	d1dc      	bne.n	1600 <base64_decode+0xc4>
			if (j > 0) {
    1646:	b17e      	cbz	r6, 1668 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    1648:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    164a:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    164c:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    164e:	d102      	bne.n	1656 <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    1650:	3101      	adds	r1, #1
			n = 0;
    1652:	2400      	movs	r4, #0
    1654:	e7d4      	b.n	1600 <base64_decode+0xc4>
			if (j > 2) {
    1656:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    1658:	ea4f 2417 	mov.w	r4, r7, lsr #8
    165c:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    165e:	bf16      	itet	ne
    1660:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1662:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1664:	3103      	addne	r1, #3
    1666:	e7f4      	b.n	1652 <base64_decode+0x116>
			n = 0;
    1668:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    166a:	e7c9      	b.n	1600 <base64_decode+0xc4>
		if (x != 0U) {
    166c:	2d00      	cmp	r5, #0
    166e:	d0a2      	beq.n	15b6 <base64_decode+0x7a>
    1670:	e79b      	b.n	15aa <base64_decode+0x6e>
    1672:	bf00      	nop
    1674:	0000f1dc 	.word	0x0000f1dc
    1678:	ffbffff6 	.word	0xffbffff6

0000167c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1680:	8b05      	ldrh	r5, [r0, #24]
{
    1682:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1684:	0728      	lsls	r0, r5, #28
{
    1686:	4690      	mov	r8, r2
	if (processing) {
    1688:	d411      	bmi.n	16ae <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    168a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    168c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1690:	f040 80cd 	bne.w	182e <process_event+0x1b2>
			evt = process_recheck(mgr);
    1694:	4620      	mov	r0, r4
    1696:	f009 fbc7 	bl	ae28 <process_recheck>
		}

		if (evt == EVT_NOP) {
    169a:	b178      	cbz	r0, 16bc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    169c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    169e:	8b21      	ldrh	r1, [r4, #24]
    16a0:	2804      	cmp	r0, #4
    16a2:	d811      	bhi.n	16c8 <process_event+0x4c>
    16a4:	e8df f000 	tbb	[pc, r0]
    16a8:	856d10c3 	.word	0x856d10c3
    16ac:	95          	.byte	0x95
    16ad:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    16ae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16b0:	bf0c      	ite	eq
    16b2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16b6:	f045 0520 	orrne.w	r5, r5, #32
    16ba:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    16bc:	f388 8811 	msr	BASEPRI, r8
    16c0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    16c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    16cc:	45aa      	cmp	sl, r5
    16ce:	f000 80a6 	beq.w	181e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    16d2:	2700      	movs	r7, #0
    16d4:	46b9      	mov	r9, r7
    16d6:	463e      	mov	r6, r7
    16d8:	68a3      	ldr	r3, [r4, #8]
    16da:	2b00      	cmp	r3, #0
    16dc:	f000 80bd 	beq.w	185a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    16e4:	8321      	strh	r1, [r4, #24]
    16e6:	f388 8811 	msr	BASEPRI, r8
    16ea:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16ee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16f0:	2900      	cmp	r1, #0
    16f2:	f000 80bb 	beq.w	186c <process_event+0x1f0>
	return node->next;
    16f6:	680d      	ldr	r5, [r1, #0]
    16f8:	2900      	cmp	r1, #0
    16fa:	f000 80b7 	beq.w	186c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    16fe:	4633      	mov	r3, r6
    1700:	4652      	mov	r2, sl
    1702:	4620      	mov	r0, r4
    1704:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1708:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    170a:	2d00      	cmp	r5, #0
    170c:	d076      	beq.n	17fc <process_event+0x180>
    170e:	682b      	ldr	r3, [r5, #0]
    1710:	4629      	mov	r1, r5
    1712:	461d      	mov	r5, r3
    1714:	e7f0      	b.n	16f8 <process_event+0x7c>
    1716:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    171a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    171c:	2a01      	cmp	r2, #1
    171e:	d81b      	bhi.n	1758 <process_event+0xdc>
	list->head = NULL;
    1720:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1722:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1726:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1728:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172a:	b289      	uxth	r1, r1
	list->tail = NULL;
    172c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1730:	d109      	bne.n	1746 <process_event+0xca>
    1732:	463b      	mov	r3, r7
    1734:	e003      	b.n	173e <process_event+0xc2>
				mgr->refs += 1U;
    1736:	8b62      	ldrh	r2, [r4, #26]
    1738:	3201      	adds	r2, #1
    173a:	8362      	strh	r2, [r4, #26]
	return node->next;
    173c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    173e:	2b00      	cmp	r3, #0
    1740:	d1f9      	bne.n	1736 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1742:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1746:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1748:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    174a:	f009 fb6d 	bl	ae28 <process_recheck>
    174e:	2800      	cmp	r0, #0
    1750:	d07b      	beq.n	184a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1752:	f041 0120 	orr.w	r1, r1, #32
    1756:	e077      	b.n	1848 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1758:	2b04      	cmp	r3, #4
    175a:	d10a      	bne.n	1772 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    175c:	f021 0107 	bic.w	r1, r1, #7
    1760:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1762:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1764:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1766:	f009 fb5f 	bl	ae28 <process_recheck>
    176a:	b110      	cbz	r0, 1772 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    176c:	f041 0120 	orr.w	r1, r1, #32
    1770:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1772:	8b21      	ldrh	r1, [r4, #24]
    1774:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1778:	45aa      	cmp	sl, r5
    177a:	d050      	beq.n	181e <process_event+0x1a2>
    177c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    177e:	46b9      	mov	r9, r7
    1780:	e7aa      	b.n	16d8 <process_event+0x5c>
			transit = mgr->transitions->start;
    1782:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1784:	f021 0107 	bic.w	r1, r1, #7
    1788:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    178c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    178e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1792:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1794:	d12d      	bne.n	17f2 <process_event+0x176>
		    || (transit != NULL)) {
    1796:	f1b9 0f00 	cmp.w	r9, #0
    179a:	d040      	beq.n	181e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    179c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17a0:	8321      	strh	r1, [r4, #24]
    17a2:	f388 8811 	msr	BASEPRI, r8
    17a6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    17aa:	4620      	mov	r0, r4
    17ac:	4939      	ldr	r1, [pc, #228]	; (1894 <process_event+0x218>)
    17ae:	47c8      	blx	r9
    17b0:	e029      	b.n	1806 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17b2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    17b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17b8:	f041 0104 	orr.w	r1, r1, #4
    17bc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    17be:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    17c0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17c4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17c6:	d0e6      	beq.n	1796 <process_event+0x11a>
    17c8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17ca:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    17ce:	463e      	mov	r6, r7
    17d0:	e782      	b.n	16d8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    17d6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d8:	f041 0105 	orr.w	r1, r1, #5
    17dc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    17de:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    17e0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17e4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17e6:	d0d6      	beq.n	1796 <process_event+0x11a>
    17e8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17ea:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    17ee:	463e      	mov	r6, r7
    17f0:	e772      	b.n	16d8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    17f2:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17f4:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    17f8:	463e      	mov	r6, r7
    17fa:	e76d      	b.n	16d8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17fc:	462b      	mov	r3, r5
    17fe:	e787      	b.n	1710 <process_event+0x94>
			if (transit != NULL) {
    1800:	f1b9 0f00 	cmp.w	r9, #0
    1804:	d1d1      	bne.n	17aa <process_event+0x12e>
	__asm__ volatile(
    1806:	f04f 0320 	mov.w	r3, #32
    180a:	f3ef 8811 	mrs	r8, BASEPRI
    180e:	f383 8812 	msr	BASEPRI_MAX, r3
    1812:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1816:	8b23      	ldrh	r3, [r4, #24]
    1818:	f023 0308 	bic.w	r3, r3, #8
    181c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    181e:	8b25      	ldrh	r5, [r4, #24]
    1820:	06ea      	lsls	r2, r5, #27
    1822:	d52e      	bpl.n	1882 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1824:	f025 0310 	bic.w	r3, r5, #16
    1828:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    182a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    182e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1830:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1832:	2e00      	cmp	r6, #0
    1834:	f6bf af6f 	bge.w	1716 <process_event+0x9a>
	list->head = NULL;
    1838:	2300      	movs	r3, #0
		*clients = mgr->clients;
    183a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    183c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1840:	f021 0107 	bic.w	r1, r1, #7
    1844:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1848:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    184a:	8b21      	ldrh	r1, [r4, #24]
    184c:	f04f 0900 	mov.w	r9, #0
    1850:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1854:	45aa      	cmp	sl, r5
    1856:	f47f af3f 	bne.w	16d8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    185a:	2f00      	cmp	r7, #0
    185c:	d09b      	beq.n	1796 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    185e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1862:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1864:	f388 8811 	msr	BASEPRI, r8
    1868:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    186c:	2f00      	cmp	r7, #0
    186e:	d0c7      	beq.n	1800 <process_event+0x184>
	return node->next;
    1870:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1872:	4639      	mov	r1, r7
    1874:	4633      	mov	r3, r6
    1876:	4652      	mov	r2, sl
    1878:	4620      	mov	r0, r4
    187a:	f009 fb01 	bl	ae80 <notify_one>
	list->head = node;
    187e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1880:	e7f4      	b.n	186c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1882:	06ab      	lsls	r3, r5, #26
    1884:	f57f af1a 	bpl.w	16bc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1888:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    188c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    188e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1892:	e6ff      	b.n	1694 <process_event+0x18>
    1894:	0000aead 	.word	0x0000aead

00001898 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    189c:	4682      	mov	sl, r0
	size_t count = 0;
    189e:	f04f 0900 	mov.w	r9, #0
{
    18a2:	b08d      	sub	sp, #52	; 0x34
    18a4:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18a6:	1e53      	subs	r3, r2, #1
{
    18a8:	9101      	str	r1, [sp, #4]
	fmt--;
    18aa:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    18ac:	9b03      	ldr	r3, [sp, #12]
    18ae:	7858      	ldrb	r0, [r3, #1]
    18b0:	1c5c      	adds	r4, r3, #1
    18b2:	2825      	cmp	r0, #37	; 0x25
    18b4:	d119      	bne.n	18ea <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    18b6:	2000      	movs	r0, #0
	precision = -1;
    18b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    18bc:	461e      	mov	r6, r3
	min_width = -1;
    18be:	4644      	mov	r4, r8
	length_mod = 0;
    18c0:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    18c2:	3602      	adds	r6, #2
	padding_mode = 0;
    18c4:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    18c6:	7831      	ldrb	r1, [r6, #0]
    18c8:	9603      	str	r6, [sp, #12]
    18ca:	2939      	cmp	r1, #57	; 0x39
    18cc:	d855      	bhi.n	197a <CONFIG_USB_DEVICE_VID+0x65>
    18ce:	291f      	cmp	r1, #31
    18d0:	d814      	bhi.n	18fc <z_cbvprintf_impl+0x64>
    18d2:	2900      	cmp	r1, #0
    18d4:	f000 81f1 	beq.w	1cba <CONFIG_USB_DEVICE_VID+0x3a5>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    18d8:	9901      	ldr	r1, [sp, #4]
    18da:	2025      	movs	r0, #37	; 0x25
    18dc:	47d0      	blx	sl
			OUTC(*fmt);
    18de:	9901      	ldr	r1, [sp, #4]
    18e0:	7830      	ldrb	r0, [r6, #0]
    18e2:	47d0      	blx	sl
    18e4:	f109 0902 	add.w	r9, r9, #2
			goto start;
    18e8:	e7e0      	b.n	18ac <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    18ea:	2800      	cmp	r0, #0
    18ec:	f000 81e5 	beq.w	1cba <CONFIG_USB_DEVICE_VID+0x3a5>
		OUTC(*fmt);
    18f0:	9901      	ldr	r1, [sp, #4]
    18f2:	47d0      	blx	sl
    18f4:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    18f8:	9403      	str	r4, [sp, #12]
    18fa:	e7d7      	b.n	18ac <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    18fc:	f1a1 0220 	sub.w	r2, r1, #32
    1900:	2a19      	cmp	r2, #25
    1902:	d8e9      	bhi.n	18d8 <z_cbvprintf_impl+0x40>
    1904:	a701      	add	r7, pc, #4	; (adr r7, 190c <z_cbvprintf_impl+0x74>)
    1906:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    190a:	bf00      	nop
    190c:	00001975 	.word	0x00001975
    1910:	000018d9 	.word	0x000018d9
    1914:	000018d9 	.word	0x000018d9
    1918:	00001975 	.word	0x00001975
    191c:	000018d9 	.word	0x000018d9
    1920:	000019f5 	.word	0x000019f5
    1924:	000018d9 	.word	0x000018d9
    1928:	000018d9 	.word	0x000018d9
    192c:	000018d9 	.word	0x000018d9
    1930:	000018d9 	.word	0x000018d9
    1934:	00001a41 	.word	0x00001a41
    1938:	00001975 	.word	0x00001975
    193c:	000018d9 	.word	0x000018d9
    1940:	00001a55 	.word	0x00001a55
    1944:	00001a01 	.word	0x00001a01
    1948:	000018d9 	.word	0x000018d9
    194c:	00001a0f 	.word	0x00001a0f
    1950:	00001a2f 	.word	0x00001a2f
    1954:	00001a2f 	.word	0x00001a2f
    1958:	00001a2f 	.word	0x00001a2f
    195c:	00001a2f 	.word	0x00001a2f
    1960:	00001a2f 	.word	0x00001a2f
    1964:	00001a2f 	.word	0x00001a2f
    1968:	00001a2f 	.word	0x00001a2f
    196c:	00001a2f 	.word	0x00001a2f
    1970:	00001a2f 	.word	0x00001a2f
    1974:	4608      	mov	r0, r1
    1976:	3601      	adds	r6, #1
    1978:	e7a5      	b.n	18c6 <z_cbvprintf_impl+0x2e>
    197a:	2958      	cmp	r1, #88	; 0x58
    197c:	f000 80ee 	beq.w	1b5c <CONFIG_USB_DEVICE_VID+0x247>
    1980:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1984:	b2d7      	uxtb	r7, r2
    1986:	2f17      	cmp	r7, #23
    1988:	d8a6      	bhi.n	18d8 <z_cbvprintf_impl+0x40>
    198a:	2a17      	cmp	r2, #23
    198c:	d8a4      	bhi.n	18d8 <z_cbvprintf_impl+0x40>
    198e:	a701      	add	r7, pc, #4	; (adr r7, 1994 <CONFIG_USB_DEVICE_VID+0x7f>)
    1990:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1994:	00001c03 	.word	0x00001c03
    1998:	00001a7b 	.word	0x00001a7b
    199c:	000018d9 	.word	0x000018d9
    19a0:	000018d9 	.word	0x000018d9
    19a4:	000018d9 	.word	0x000018d9
    19a8:	00001a5b 	.word	0x00001a5b
    19ac:	00001a7b 	.word	0x00001a7b
    19b0:	000018d9 	.word	0x000018d9
    19b4:	000018d9 	.word	0x000018d9
    19b8:	00001a5b 	.word	0x00001a5b
    19bc:	000018d9 	.word	0x000018d9
    19c0:	000018d9 	.word	0x000018d9
    19c4:	000018d9 	.word	0x000018d9
    19c8:	00001b37 	.word	0x00001b37
    19cc:	000018d9 	.word	0x000018d9
    19d0:	000018d9 	.word	0x000018d9
    19d4:	00001bd7 	.word	0x00001bd7
    19d8:	000018d9 	.word	0x000018d9
    19dc:	00001a7b 	.word	0x00001a7b
    19e0:	000018d9 	.word	0x000018d9
    19e4:	000018d9 	.word	0x000018d9
    19e8:	00001b37 	.word	0x00001b37
    19ec:	000018d9 	.word	0x000018d9
    19f0:	00001a5b 	.word	0x00001a5b
			OUTC('%');
    19f4:	2025      	movs	r0, #37	; 0x25
    19f6:	9901      	ldr	r1, [sp, #4]
    19f8:	47d0      	blx	sl
    19fa:	f109 0901 	add.w	r9, r9, #1
			goto start;
    19fe:	e755      	b.n	18ac <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a00:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1a02:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    1a06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a0a:	9202      	str	r2, [sp, #8]
			continue;
    1a0c:	e7b3      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a0e:	2c00      	cmp	r4, #0
    1a10:	da0d      	bge.n	1a2e <CONFIG_USB_DEVICE_VID+0x119>
    1a12:	f1b8 0f00 	cmp.w	r8, #0
    1a16:	da0d      	bge.n	1a34 <CONFIG_USB_DEVICE_VID+0x11f>
    1a18:	9a02      	ldr	r2, [sp, #8]
    1a1a:	2a00      	cmp	r2, #0
    1a1c:	f000 8145 	beq.w	1caa <CONFIG_USB_DEVICE_VID+0x395>
				min_width = 10 * min_width + *fmt - '0';
    1a20:	220a      	movs	r2, #10
				if (min_width < 0) {
    1a22:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1a26:	fb02 1404 	mla	r4, r2, r4, r1
    1a2a:	3c30      	subs	r4, #48	; 0x30
    1a2c:	e7a3      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			if (precision >= 0) {
    1a2e:	f1b8 0f00 	cmp.w	r8, #0
    1a32:	dbf5      	blt.n	1a20 <CONFIG_USB_DEVICE_VID+0x10b>
				precision = 10 * precision + *fmt - '0';
    1a34:	220a      	movs	r2, #10
    1a36:	fb02 1208 	mla	r2, r2, r8, r1
    1a3a:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    1a3e:	e79a      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			if (precision >= 0) {
    1a40:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1a44:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1a48:	f280 8131 	bge.w	1cae <CONFIG_USB_DEVICE_VID+0x399>
				if (min_width < 0) {
    1a4c:	2a00      	cmp	r2, #0
    1a4e:	f280 8130 	bge.w	1cb2 <CONFIG_USB_DEVICE_VID+0x39d>
					min_width = -min_width;
    1a52:	4254      	negs	r4, r2
		switch (*fmt) {
    1a54:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1a56:	9202      	str	r2, [sp, #8]
    1a58:	e78d      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			if (*fmt == 'h' && length_mod == 'h') {
    1a5a:	2968      	cmp	r1, #104	; 0x68
    1a5c:	d103      	bne.n	1a66 <CONFIG_USB_DEVICE_VID+0x151>
    1a5e:	2b68      	cmp	r3, #104	; 0x68
    1a60:	d106      	bne.n	1a70 <CONFIG_USB_DEVICE_VID+0x15b>
				length_mod = 'H';
    1a62:	2348      	movs	r3, #72	; 0x48
    1a64:	e787      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1a66:	296c      	cmp	r1, #108	; 0x6c
    1a68:	d102      	bne.n	1a70 <CONFIG_USB_DEVICE_VID+0x15b>
    1a6a:	2b6c      	cmp	r3, #108	; 0x6c
    1a6c:	f000 8123 	beq.w	1cb6 <CONFIG_USB_DEVICE_VID+0x3a1>
			} else if (length_mod == '\0') {
    1a70:	2b00      	cmp	r3, #0
    1a72:	f47f af31 	bne.w	18d8 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1a76:	460b      	mov	r3, r1
    1a78:	e77d      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
			if (length_mod == 'z') {
    1a7a:	2b7a      	cmp	r3, #122	; 0x7a
    1a7c:	d106      	bne.n	1a8c <CONFIG_USB_DEVICE_VID+0x177>
			} else if (*fmt == 'u') {
    1a7e:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1a80:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1a84:	d114      	bne.n	1ab0 <CONFIG_USB_DEVICE_VID+0x19b>
				d = va_arg(ap, unsigned int);
    1a86:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1a8a:	e00c      	b.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
			} else if (length_mod == 'l') {
    1a8c:	2b6c      	cmp	r3, #108	; 0x6c
    1a8e:	d0f6      	beq.n	1a7e <CONFIG_USB_DEVICE_VID+0x169>
			} else if (length_mod == 'L') {
    1a90:	2b4c      	cmp	r3, #76	; 0x4c
    1a92:	d1f4      	bne.n	1a7e <CONFIG_USB_DEVICE_VID+0x169>
					unsigned long long llu =
    1a94:	3507      	adds	r5, #7
    1a96:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1a9a:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1a9c:	f103 0508 	add.w	r5, r3, #8
    1aa0:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1aa4:	d106      	bne.n	1ab4 <CONFIG_USB_DEVICE_VID+0x19f>
			} else if (special == ' ') {
    1aa6:	2820      	cmp	r0, #32
    1aa8:	d13e      	bne.n	1b28 <CONFIG_USB_DEVICE_VID+0x213>
				prefix = " ";
    1aaa:	4f86      	ldr	r7, [pc, #536]	; (1cc4 <CONFIG_USB_DEVICE_VID+0x3af>)
				min_width--;
    1aac:	3c01      	subs	r4, #1
    1aae:	e009      	b.n	1ac4 <CONFIG_USB_DEVICE_VID+0x1af>
				d = va_arg(ap, int);
    1ab0:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1ab4:	f1bb 0f00 	cmp.w	fp, #0
    1ab8:	daf5      	bge.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
				d = -d;
    1aba:	4276      	negs	r6, r6
				prefix = "-";
    1abc:	4f82      	ldr	r7, [pc, #520]	; (1cc8 <CONFIG_USB_DEVICE_VID+0x3b3>)
				d = -d;
    1abe:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1ac2:	3c01      	subs	r4, #1
	int i = 0;
    1ac4:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1ac8:	9305      	str	r3, [sp, #20]
    1aca:	2300      	movs	r3, #0
    1acc:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1ace:	4630      	mov	r0, r6
    1ad0:	4659      	mov	r1, fp
    1ad2:	220a      	movs	r2, #10
    1ad4:	2300      	movs	r3, #0
    1ad6:	f7fe fb3d 	bl	154 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1ada:	9b04      	ldr	r3, [sp, #16]
    1adc:	3230      	adds	r2, #48	; 0x30
    1ade:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    1ae2:	f8cd c010 	str.w	ip, [sp, #16]
    1ae6:	f8dd c014 	ldr.w	ip, [sp, #20]
    1aea:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    1aee:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    1af2:	46b4      	mov	ip, r6
    1af4:	465a      	mov	r2, fp
	} while (num);
    1af6:	f1bc 0f0a 	cmp.w	ip, #10
    1afa:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1afe:	4606      	mov	r6, r0
    1b00:	468b      	mov	fp, r1
	} while (num);
    1b02:	d2e4      	bcs.n	1ace <CONFIG_USB_DEVICE_VID+0x1b9>
	return -i;
    1b04:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b08:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1b0a:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b0e:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1b12:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b16:	da6d      	bge.n	1bf4 <CONFIG_USB_DEVICE_VID+0x2df>
    1b18:	9b02      	ldr	r3, [sp, #8]
    1b1a:	07d9      	lsls	r1, r3, #31
    1b1c:	d47c      	bmi.n	1c18 <CONFIG_USB_DEVICE_VID+0x303>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b1e:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1b22:	eba4 040b 	sub.w	r4, r4, fp
    1b26:	e013      	b.n	1b50 <CONFIG_USB_DEVICE_VID+0x23b>
			} else if (special == '+') {
    1b28:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1b2a:	bf0a      	itet	eq
    1b2c:	4f67      	ldreq	r7, [pc, #412]	; (1ccc <CONFIG_USB_DEVICE_VID+0x3b7>)
	prefix = "";
    1b2e:	4f68      	ldrne	r7, [pc, #416]	; (1cd0 <CONFIG_USB_DEVICE_VID+0x3bb>)
				min_width--;
    1b30:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    1b34:	e7c6      	b.n	1ac4 <CONFIG_USB_DEVICE_VID+0x1af>
			if (*fmt == 'p') {
    1b36:	2970      	cmp	r1, #112	; 0x70
    1b38:	d10f      	bne.n	1b5a <CONFIG_USB_DEVICE_VID+0x245>
				x = (uintptr_t)va_arg(ap, void *);
    1b3a:	f855 2b04 	ldr.w	r2, [r5], #4
    1b3e:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1b40:	b9fa      	cbnz	r2, 1b82 <CONFIG_USB_DEVICE_VID+0x26d>
		precision -= data_len;
    1b42:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1b46:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1b4a:	4e62      	ldr	r6, [pc, #392]	; (1cd4 <CONFIG_USB_DEVICE_VID+0x3bf>)
		min_width -= data_len;
    1b4c:	3c05      	subs	r4, #5
	prefix = "";
    1b4e:	4f60      	ldr	r7, [pc, #384]	; (1cd0 <CONFIG_USB_DEVICE_VID+0x3bb>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1b50:	9a02      	ldr	r2, [sp, #8]
    1b52:	0792      	lsls	r2, r2, #30
    1b54:	d46f      	bmi.n	1c36 <CONFIG_USB_DEVICE_VID+0x321>
    1b56:	46a0      	mov	r8, r4
    1b58:	e065      	b.n	1c26 <CONFIG_USB_DEVICE_VID+0x311>
		switch (*fmt) {
    1b5a:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1b5c:	2b6c      	cmp	r3, #108	; 0x6c
    1b5e:	d103      	bne.n	1b68 <CONFIG_USB_DEVICE_VID+0x253>
				x = va_arg(ap, unsigned int);
    1b60:	2300      	movs	r3, #0
    1b62:	f855 2b04 	ldr.w	r2, [r5], #4
    1b66:	e008      	b.n	1b7a <CONFIG_USB_DEVICE_VID+0x265>
			} else if (length_mod == 'L') {
    1b68:	2b4c      	cmp	r3, #76	; 0x4c
    1b6a:	d1f9      	bne.n	1b60 <CONFIG_USB_DEVICE_VID+0x24b>
				unsigned long long llx =
    1b6c:	3507      	adds	r5, #7
    1b6e:	f025 0307 	bic.w	r3, r5, #7
    1b72:	461d      	mov	r5, r3
    1b74:	685b      	ldr	r3, [r3, #4]
    1b76:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1b7a:	2823      	cmp	r0, #35	; 0x23
    1b7c:	d125      	bne.n	1bca <CONFIG_USB_DEVICE_VID+0x2b5>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1b7e:	0688      	lsls	r0, r1, #26
    1b80:	d521      	bpl.n	1bc6 <CONFIG_USB_DEVICE_VID+0x2b1>
    1b82:	4f55      	ldr	r7, [pc, #340]	; (1cd8 <CONFIG_USB_DEVICE_VID+0x3c3>)
				min_width -= 2;
    1b84:	3c02      	subs	r4, #2
	int i = 0;
    1b86:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1b88:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1b8c:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1b90:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1b94:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1b98:	2909      	cmp	r1, #9
			c += alpha;
    1b9a:	bf88      	it	hi
    1b9c:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1b9e:	3130      	adds	r1, #48	; 0x30
    1ba0:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1ba4:	2a10      	cmp	r2, #16
		num /= base;
    1ba6:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1baa:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1bae:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1bb2:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1bb6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
    1bba:	d208      	bcs.n	1bce <CONFIG_USB_DEVICE_VID+0x2b9>
	return -i;
    1bbc:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1bc0:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1bc4:	e7a1      	b.n	1b0a <CONFIG_USB_DEVICE_VID+0x1f5>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bc6:	4f45      	ldr	r7, [pc, #276]	; (1cdc <CONFIG_USB_DEVICE_VID+0x3c7>)
    1bc8:	e7dc      	b.n	1b84 <CONFIG_USB_DEVICE_VID+0x26f>
	prefix = "";
    1bca:	4f41      	ldr	r7, [pc, #260]	; (1cd0 <CONFIG_USB_DEVICE_VID+0x3bb>)
    1bcc:	e7db      	b.n	1b86 <CONFIG_USB_DEVICE_VID+0x271>
		buftop[--i] = c + '0';
    1bce:	4666      	mov	r6, ip
		num /= base;
    1bd0:	460a      	mov	r2, r1
    1bd2:	4603      	mov	r3, r0
    1bd4:	e7de      	b.n	1b94 <CONFIG_USB_DEVICE_VID+0x27f>
			data = va_arg(ap, char *);
    1bd6:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1bda:	4630      	mov	r0, r6
    1bdc:	f009 fd2e 	bl	b63c <strlen>
			if (precision >= 0 && data_len > precision) {
    1be0:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1be4:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1be6:	db02      	blt.n	1bee <CONFIG_USB_DEVICE_VID+0x2d9>
    1be8:	4540      	cmp	r0, r8
    1bea:	bfa8      	it	ge
    1bec:	46c3      	movge	fp, r8
			precision = 0;
    1bee:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1bf2:	4f37      	ldr	r7, [pc, #220]	; (1cd0 <CONFIG_USB_DEVICE_VID+0x3bb>)
		precision -= data_len;
    1bf4:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	dd92      	ble.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
			min_width -= precision;
    1bfc:	eba4 0408 	sub.w	r4, r4, r8
    1c00:	e7a6      	b.n	1b50 <CONFIG_USB_DEVICE_VID+0x23b>
			buf[0] = c;
    1c02:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c06:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1c0a:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1c0e:	3c01      	subs	r4, #1
		precision -= data_len;
    1c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data = buf;
    1c14:	ae06      	add	r6, sp, #24
    1c16:	e79a      	b.n	1b4e <CONFIG_USB_DEVICE_VID+0x239>
    1c18:	46a0      	mov	r8, r4
    1c1a:	e7eb      	b.n	1bf4 <CONFIG_USB_DEVICE_VID+0x2df>
    1c1c:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1c1e:	2020      	movs	r0, #32
    1c20:	9901      	ldr	r1, [sp, #4]
    1c22:	47d0      	blx	sl
    1c24:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1c26:	f1b8 0801 	subs.w	r8, r8, #1
    1c2a:	d5f7      	bpl.n	1c1c <CONFIG_USB_DEVICE_VID+0x307>
    1c2c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1c30:	3c01      	subs	r4, #1
    1c32:	4491      	add	r9, r2
    1c34:	1aa4      	subs	r4, r4, r2
    1c36:	46b8      	mov	r8, r7
    1c38:	e006      	b.n	1c48 <CONFIG_USB_DEVICE_VID+0x333>
    1c3a:	9304      	str	r3, [sp, #16]
    1c3c:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1c3e:	9901      	ldr	r1, [sp, #4]
    1c40:	47d0      	blx	sl
    1c42:	9a02      	ldr	r2, [sp, #8]
    1c44:	9b04      	ldr	r3, [sp, #16]
    1c46:	4690      	mov	r8, r2
		while (*prefix) {
    1c48:	4642      	mov	r2, r8
    1c4a:	f812 0b01 	ldrb.w	r0, [r2], #1
    1c4e:	2800      	cmp	r0, #0
    1c50:	d1f3      	bne.n	1c3a <CONFIG_USB_DEVICE_VID+0x325>
    1c52:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1c54:	3a01      	subs	r2, #1
    1c56:	d515      	bpl.n	1c84 <CONFIG_USB_DEVICE_VID+0x36f>
    1c58:	2b00      	cmp	r3, #0
    1c5a:	bfac      	ite	ge
    1c5c:	ebc7 0703 	rsbge	r7, r7, r3
    1c60:	427f      	neglt	r7, r7
    1c62:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1c64:	3b01      	subs	r3, #1
    1c66:	d515      	bpl.n	1c94 <CONFIG_USB_DEVICE_VID+0x37f>
    1c68:	f1bb 0f00 	cmp.w	fp, #0
    1c6c:	bfa8      	it	ge
    1c6e:	445f      	addge	r7, fp
    1c70:	4626      	mov	r6, r4
    1c72:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1c74:	3e01      	subs	r6, #1
    1c76:	d514      	bpl.n	1ca2 <CONFIG_USB_DEVICE_VID+0x38d>
    1c78:	2c00      	cmp	r4, #0
    1c7a:	bfa8      	it	ge
    1c7c:	193f      	addge	r7, r7, r4
    1c7e:	eb07 0908 	add.w	r9, r7, r8
    1c82:	e613      	b.n	18ac <z_cbvprintf_impl+0x14>
    1c84:	9304      	str	r3, [sp, #16]
    1c86:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1c88:	2030      	movs	r0, #48	; 0x30
    1c8a:	9901      	ldr	r1, [sp, #4]
    1c8c:	47d0      	blx	sl
    1c8e:	9b04      	ldr	r3, [sp, #16]
    1c90:	9a02      	ldr	r2, [sp, #8]
    1c92:	e7df      	b.n	1c54 <CONFIG_USB_DEVICE_VID+0x33f>
    1c94:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1c96:	9901      	ldr	r1, [sp, #4]
    1c98:	f816 0b01 	ldrb.w	r0, [r6], #1
    1c9c:	47d0      	blx	sl
    1c9e:	9b02      	ldr	r3, [sp, #8]
    1ca0:	e7e0      	b.n	1c64 <CONFIG_USB_DEVICE_VID+0x34f>
			OUTC(' ');
    1ca2:	9901      	ldr	r1, [sp, #4]
    1ca4:	2020      	movs	r0, #32
    1ca6:	47d0      	blx	sl
    1ca8:	e7e4      	b.n	1c74 <CONFIG_USB_DEVICE_VID+0x35f>
				padding_mode = PAD_ZERO;
    1caa:	2201      	movs	r2, #1
    1cac:	e6d3      	b.n	1a56 <CONFIG_USB_DEVICE_VID+0x141>
				precision = va_arg(ap, int);
    1cae:	4690      	mov	r8, r2
    1cb0:	e661      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
    1cb2:	4614      	mov	r4, r2
    1cb4:	e65f      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
				length_mod = 'L';
    1cb6:	234c      	movs	r3, #76	; 0x4c
    1cb8:	e65d      	b.n	1976 <CONFIG_USB_DEVICE_VID+0x61>
		}

		goto start;
	}
}
    1cba:	4648      	mov	r0, r9
    1cbc:	b00d      	add	sp, #52	; 0x34
    1cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc2:	bf00      	nop
    1cc4:	0000f2af 	.word	0x0000f2af
    1cc8:	0000f2ad 	.word	0x0000f2ad
    1ccc:	0000f2b1 	.word	0x0000f2b1
    1cd0:	0000f371 	.word	0x0000f371
    1cd4:	0000f2b9 	.word	0x0000f2b9
    1cd8:	0000f2b3 	.word	0x0000f2b3
    1cdc:	0000f2b6 	.word	0x0000f2b6

00001ce0 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1ce0:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ce6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1cea:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1cee:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1cf2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    1cf6:	4770      	bx	lr
    1cf8:	50842500 	.word	0x50842500

00001cfc <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
    1cfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    1cfe:	f04f 0320 	mov.w	r3, #32
    1d02:	f3ef 8411 	mrs	r4, BASEPRI
    1d06:	f383 8812 	msr	BASEPRI_MAX, r3
    1d0a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1d0e:	2201      	movs	r2, #1
    1d10:	4b0c      	ldr	r3, [pc, #48]	; (1d44 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1d12:	490d      	ldr	r1, [pc, #52]	; (1d48 <nordicsemi_nrf53_init+0x4c>)
    1d14:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1d18:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1d1a:	2000      	movs	r0, #0
    1d1c:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    1d20:	f7ff ffde 	bl	1ce0 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1d24:	4610      	mov	r0, r2
    1d26:	f7ff ffdb 	bl	1ce0 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1d2a:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1d2e:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1d32:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    1d36:	f384 8811 	msr	BASEPRI, r4
    1d3a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d3e:	2000      	movs	r0, #0
    1d40:	bd10      	pop	{r4, pc}
    1d42:	bf00      	nop
    1d44:	50001000 	.word	0x50001000
    1d48:	50004000 	.word	0x50004000

00001d4c <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1d4c:	2305      	movs	r3, #5
{
    1d4e:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1d50:	4d14      	ldr	r5, [pc, #80]	; (1da4 <z_arm_on_enter_cpu_idle+0x58>)
    1d52:	4e15      	ldr	r6, [pc, #84]	; (1da8 <z_arm_on_enter_cpu_idle+0x5c>)
    1d54:	782c      	ldrb	r4, [r5, #0]
    1d56:	3401      	adds	r4, #1
    1d58:	fbb4 f3f3 	udiv	r3, r4, r3
    1d5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d60:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1d62:	f00a f846 	bl	bdf2 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    1d66:	4a11      	ldr	r2, [pc, #68]	; (1dac <z_arm_on_enter_cpu_idle+0x60>)
    1d68:	7813      	ldrb	r3, [r2, #0]
    1d6a:	b123      	cbz	r3, 1d76 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    1d6c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    1d70:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    1d72:	2807      	cmp	r0, #7
    1d74:	d914      	bls.n	1da0 <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d7a:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    1d7e:	b141      	cbz	r1, 1d92 <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d80:	2100      	movs	r1, #0
    1d82:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d86:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1d8a:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    1d8c:	b90c      	cbnz	r4, 1d92 <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
    1d8e:	2301      	movs	r3, #1
    1d90:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    1d92:	782c      	ldrb	r4, [r5, #0]
    1d94:	f00a f82d 	bl	bdf2 <sys_clock_cycle_get_32>
    1d98:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    1d9c:	2001      	movs	r0, #1
}
    1d9e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    1da0:	2000      	movs	r0, #0
    1da2:	e7fc      	b.n	1d9e <z_arm_on_enter_cpu_idle+0x52>
    1da4:	20015f33 	.word	0x20015f33
    1da8:	20012c30 	.word	0x20012c30
    1dac:	20015f32 	.word	0x20015f32

00001db0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1db0:	b148      	cbz	r0, 1dc6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1db2:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <arch_busy_wait+0x18>)
    1db4:	4a05      	ldr	r2, [pc, #20]	; (1dcc <arch_busy_wait+0x1c>)
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    1dbc:	4358      	muls	r0, r3
    1dbe:	4b04      	ldr	r3, [pc, #16]	; (1dd0 <arch_busy_wait+0x20>)
    1dc0:	f043 0301 	orr.w	r3, r3, #1
    1dc4:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1dc6:	4770      	bx	lr
    1dc8:	2000218c 	.word	0x2000218c
    1dcc:	000f4240 	.word	0x000f4240
    1dd0:	0000eb10 	.word	0x0000eb10

00001dd4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1dd4:	f005 b806 	b.w	6de4 <SystemInit>

00001dd8 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1dda:	4b11      	ldr	r3, [pc, #68]	; (1e20 <flash_area_open+0x48>)
{
    1ddc:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1dde:	681c      	ldr	r4, [r3, #0]
    1de0:	b1dc      	cbz	r4, 1e1a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1de2:	4b10      	ldr	r3, [pc, #64]	; (1e24 <flash_area_open+0x4c>)
    1de4:	6819      	ldr	r1, [r3, #0]
    1de6:	2300      	movs	r3, #0
    1de8:	428b      	cmp	r3, r1
    1dea:	db02      	blt.n	1df2 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1dec:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1df0:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1df2:	4622      	mov	r2, r4
    1df4:	f812 6b10 	ldrb.w	r6, [r2], #16
    1df8:	4286      	cmp	r6, r0
    1dfa:	d002      	beq.n	1e02 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1dfc:	4614      	mov	r4, r2
    1dfe:	3301      	adds	r3, #1
    1e00:	e7f2      	b.n	1de8 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1e02:	68e0      	ldr	r0, [r4, #12]
    1e04:	b910      	cbnz	r0, 1e0c <flash_area_open+0x34>
		return -ENODEV;
    1e06:	f06f 0012 	mvn.w	r0, #18
    1e0a:	e7f1      	b.n	1df0 <flash_area_open+0x18>
    1e0c:	f00c f8af 	bl	df6e <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1e10:	2800      	cmp	r0, #0
    1e12:	d0f8      	beq.n	1e06 <flash_area_open+0x2e>
	return 0;
    1e14:	2000      	movs	r0, #0
	*fap = area;
    1e16:	602c      	str	r4, [r5, #0]
	return 0;
    1e18:	e7ea      	b.n	1df0 <flash_area_open+0x18>
		return -EACCES;
    1e1a:	f06f 000c 	mvn.w	r0, #12
    1e1e:	e7e7      	b.n	1df0 <flash_area_open+0x18>
    1e20:	20002118 	.word	0x20002118
    1e24:	0000eb84 	.word	0x0000eb84

00001e28 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e28:	b570      	push	{r4, r5, r6, lr}
    1e2a:	b088      	sub	sp, #32
    1e2c:	4605      	mov	r5, r0
    1e2e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1e30:	b2c0      	uxtb	r0, r0
    1e32:	4669      	mov	r1, sp
{
    1e34:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1e36:	f7ff ffcf 	bl	1dd8 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1e3a:	2800      	cmp	r0, #0
    1e3c:	db1b      	blt.n	1e76 <flash_area_get_sectors+0x4e>
    1e3e:	9800      	ldr	r0, [sp, #0]
    1e40:	b1c8      	cbz	r0, 1e76 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1e42:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e44:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e46:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e48:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1e4a:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1e4c:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1e50:	2300      	movs	r3, #0
	cb_data->status = 0;
    1e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e56:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1e58:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1e5a:	f009 f9c8 	bl	b1ee <flash_area_close>
	if (flash_dev == NULL) {
    1e5e:	b16d      	cbz	r5, 1e7c <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e60:	4628      	mov	r0, r5
    1e62:	4908      	ldr	r1, [pc, #32]	; (1e84 <flash_area_get_sectors+0x5c>)
    1e64:	aa01      	add	r2, sp, #4
    1e66:	f009 fe1f 	bl	baa8 <flash_page_foreach>
	if (cb_data->status == 0) {
    1e6a:	9807      	ldr	r0, [sp, #28]
    1e6c:	b908      	cbnz	r0, 1e72 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1e6e:	9b05      	ldr	r3, [sp, #20]
    1e70:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e72:	b008      	add	sp, #32
    1e74:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1e76:	f06f 0015 	mvn.w	r0, #21
    1e7a:	e7fa      	b.n	1e72 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1e7c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e80:	e7f7      	b.n	1e72 <flash_area_get_sectors+0x4a>
    1e82:	bf00      	nop
    1e84:	0000b289 	.word	0x0000b289

00001e88 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    1e88:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1e8a:	4b0c      	ldr	r3, [pc, #48]	; (1ebc <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e8c:	4e0c      	ldr	r6, [pc, #48]	; (1ec0 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1e8e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e90:	4b0c      	ldr	r3, [pc, #48]	; (1ec4 <class_handler+0x3c>)
    1e92:	42b3      	cmp	r3, r6
    1e94:	d303      	bcc.n	1e9e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1e96:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1e9a:	bcf0      	pop	{r4, r5, r6, r7}
    1e9c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1e9e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1ea0:	42bd      	cmp	r5, r7
    1ea2:	d309      	bcc.n	1eb8 <class_handler+0x30>
		if (iface->class_handler &&
    1ea4:	691c      	ldr	r4, [r3, #16]
    1ea6:	b13c      	cbz	r4, 1eb8 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1ea8:	f895 c002 	ldrb.w	ip, [r5, #2]
    1eac:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1eae:	45ac      	cmp	ip, r5
    1eb0:	d102      	bne.n	1eb8 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1eb2:	4623      	mov	r3, r4
}
    1eb4:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1eb6:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1eb8:	3324      	adds	r3, #36	; 0x24
    1eba:	e7ea      	b.n	1e92 <class_handler+0xa>
    1ebc:	20012c44 	.word	0x20012c44
    1ec0:	20002490 	.word	0x20002490
    1ec4:	2000246c 	.word	0x2000246c

00001ec8 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ecc:	4605      	mov	r5, r0
    1ece:	460e      	mov	r6, r1
    1ed0:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ed2:	4c12      	ldr	r4, [pc, #72]	; (1f1c <custom_handler+0x54>)
    1ed4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1f20 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1ed8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1f24 <custom_handler+0x5c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1edc:	4544      	cmp	r4, r8
    1ede:	d303      	bcc.n	1ee8 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    1ee0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    1ee8:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1eea:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    1eee:	429a      	cmp	r2, r3
    1ef0:	d312      	bcc.n	1f18 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    1ef2:	69a3      	ldr	r3, [r4, #24]
    1ef4:	b183      	cbz	r3, 1f18 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1ef6:	7890      	ldrb	r0, [r2, #2]
    1ef8:	7929      	ldrb	r1, [r5, #4]
    1efa:	4288      	cmp	r0, r1
    1efc:	d105      	bne.n	1f0a <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1efe:	463a      	mov	r2, r7
    1f00:	4631      	mov	r1, r6
    1f02:	4628      	mov	r0, r5
}
    1f04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1f08:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1f0a:	7952      	ldrb	r2, [r2, #5]
    1f0c:	2a01      	cmp	r2, #1
    1f0e:	d103      	bne.n	1f18 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1f10:	463a      	mov	r2, r7
    1f12:	4631      	mov	r1, r6
    1f14:	4628      	mov	r0, r5
    1f16:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f18:	3424      	adds	r4, #36	; 0x24
    1f1a:	e7df      	b.n	1edc <custom_handler+0x14>
    1f1c:	2000246c 	.word	0x2000246c
    1f20:	20002490 	.word	0x20002490
    1f24:	20012c44 	.word	0x20012c44

00001f28 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f2c:	4605      	mov	r5, r0
    1f2e:	460e      	mov	r6, r1
    1f30:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f32:	4c0a      	ldr	r4, [pc, #40]	; (1f5c <vendor_handler+0x34>)
    1f34:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1f60 <vendor_handler+0x38>
    1f38:	4544      	cmp	r4, r8
    1f3a:	d302      	bcc.n	1f42 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1f3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1f40:	e009      	b.n	1f56 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1f42:	6963      	ldr	r3, [r4, #20]
    1f44:	b90b      	cbnz	r3, 1f4a <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1f46:	3424      	adds	r4, #36	; 0x24
    1f48:	e7f6      	b.n	1f38 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1f4a:	463a      	mov	r2, r7
    1f4c:	4631      	mov	r1, r6
    1f4e:	4628      	mov	r0, r5
    1f50:	4798      	blx	r3
    1f52:	2800      	cmp	r0, #0
    1f54:	d1f7      	bne.n	1f46 <vendor_handler+0x1e>
}
    1f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f5a:	bf00      	nop
    1f5c:	2000246c 	.word	0x2000246c
    1f60:	20002490 	.word	0x20002490

00001f64 <disable_endpoint>:
{
    1f64:	b510      	push	{r4, lr}
    1f66:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    1f68:	f009 fbeb 	bl	b742 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1f6c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1f70:	d000      	beq.n	1f74 <disable_endpoint+0x10>
	} else if (ret) {
    1f72:	b950      	cbnz	r0, 1f8a <disable_endpoint+0x26>
	ep_bm = get_ep_bm_from_addr(ep_addr);
    1f74:	4620      	mov	r0, r4
    1f76:	f009 f9a9 	bl	b2cc <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    1f7a:	4a04      	ldr	r2, [pc, #16]	; (1f8c <disable_endpoint+0x28>)
    1f7c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    1f80:	ea23 0300 	bic.w	r3, r3, r0
	return 0;
    1f84:	2000      	movs	r0, #0
	usb_dev.ep_bm &= ~ep_bm;
    1f86:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	20012c44 	.word	0x20012c44

00001f90 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1f90:	2208      	movs	r2, #8
    1f92:	2100      	movs	r1, #0
    1f94:	4801      	ldr	r0, [pc, #4]	; (1f9c <usb_reset_alt_setting+0xc>)
    1f96:	f009 bb8a 	b.w	b6ae <memset>
    1f9a:	bf00      	nop
    1f9c:	20012cff 	.word	0x20012cff

00001fa0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1fa0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1fa2:	4b0b      	ldr	r3, [pc, #44]	; (1fd0 <is_ep_valid.part.0+0x30>)
    1fa4:	4c0b      	ldr	r4, [pc, #44]	; (1fd4 <is_ep_valid.part.0+0x34>)
    1fa6:	42a3      	cmp	r3, r4
    1fa8:	d301      	bcc.n	1fae <is_ep_valid.part.0+0xe>
	return false;
    1faa:	2000      	movs	r0, #0
}
    1fac:	bd70      	pop	{r4, r5, r6, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1fae:	2200      	movs	r2, #0
		ep_data = cfg_data->endpoint;
    1fb0:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1fb2:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
    1fb4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1fb6:	b2d5      	uxtb	r5, r2
    1fb8:	42ae      	cmp	r6, r5
    1fba:	d801      	bhi.n	1fc0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1fbc:	3324      	adds	r3, #36	; 0x24
    1fbe:	e7f2      	b.n	1fa6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1fc0:	3201      	adds	r2, #1
    1fc2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1fc6:	4285      	cmp	r5, r0
    1fc8:	d1f5      	bne.n	1fb6 <is_ep_valid.part.0+0x16>
		return true;
    1fca:	2001      	movs	r0, #1
    1fcc:	e7ee      	b.n	1fac <is_ep_valid.part.0+0xc>
    1fce:	bf00      	nop
    1fd0:	2000246c 	.word	0x2000246c
    1fd4:	20002490 	.word	0x20002490

00001fd8 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    1fd8:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    1fda:	4809      	ldr	r0, [pc, #36]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
	uint32_t type = setup->RequestType.type;
    1fdc:	7803      	ldrb	r3, [r0, #0]
    1fde:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1fe2:	330a      	adds	r3, #10
    1fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1fe8:	b13b      	cbz	r3, 1ffa <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1fea:	f100 0208 	add.w	r2, r0, #8
    1fee:	f100 0110 	add.w	r1, r0, #16
    1ff2:	4798      	blx	r3
    1ff4:	43c0      	mvns	r0, r0
    1ff6:	0fc0      	lsrs	r0, r0, #31
}
    1ff8:	bd08      	pop	{r3, pc}
		return false;
    1ffa:	4618      	mov	r0, r3
    1ffc:	e7fc      	b.n	1ff8 <usb_handle_request.constprop.0+0x20>
    1ffe:	bf00      	nop
    2000:	20012c44 	.word	0x20012c44

00002004 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2004:	2804      	cmp	r0, #4
{
    2006:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    200a:	4604      	mov	r4, r0
    200c:	460f      	mov	r7, r1
    200e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 20a4 <forward_status_cb+0xa0>
	if (status == USB_DC_DISCONNECTED) {
    2012:	d016      	beq.n	2042 <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2014:	2801      	cmp	r0, #1
    2016:	d12d      	bne.n	2074 <forward_status_cb+0x70>
		if (usb_dev.configured) {
    2018:	f8df 808c 	ldr.w	r8, [pc, #140]	; 20a8 <forward_status_cb+0xa4>
    201c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    2020:	b343      	cbz	r3, 2074 <forward_status_cb+0x70>
			usb_cancel_transfers();
    2022:	f000 fde5 	bl	2bf0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2026:	4d21      	ldr	r5, [pc, #132]	; (20ac <forward_status_cb+0xa8>)
    2028:	454d      	cmp	r5, r9
    202a:	d220      	bcs.n	206e <forward_status_cb+0x6a>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    202c:	f04f 0a00 	mov.w	sl, #0
		ep_data = cfg_data->endpoint;
    2030:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2034:	7f2b      	ldrb	r3, [r5, #28]
    2036:	fa5f f68a 	uxtb.w	r6, sl
    203a:	42b3      	cmp	r3, r6
    203c:	d804      	bhi.n	2048 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    203e:	3524      	adds	r5, #36	; 0x24
    2040:	e7f2      	b.n	2028 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    2042:	f7ff ffa5 	bl	1f90 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2046:	e7e7      	b.n	2018 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2048:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    204c:	7930      	ldrb	r0, [r6, #4]
    204e:	f009 fb78 	bl	b742 <usb_dc_ep_disable>
    2052:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2054:	7930      	ldrb	r0, [r6, #4]
    2056:	f009 f939 	bl	b2cc <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    205a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    205e:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    2060:	ea23 0300 	bic.w	r3, r3, r0
    2064:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2068:	f10a 0a01 	add.w	sl, sl, #1
    206c:	dae2      	bge.n	2034 <forward_status_cb+0x30>
			usb_dev.configured = false;
    206e:	2300      	movs	r3, #0
    2070:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2074:	4d0d      	ldr	r5, [pc, #52]	; (20ac <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2076:	454d      	cmp	r5, r9
    2078:	d308      	bcc.n	208c <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
    207a:	4b0b      	ldr	r3, [pc, #44]	; (20a8 <forward_status_cb+0xa4>)
    207c:	6a1b      	ldr	r3, [r3, #32]
    207e:	b16b      	cbz	r3, 209c <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
    2080:	4639      	mov	r1, r7
    2082:	4620      	mov	r0, r4
}
    2084:	b001      	add	sp, #4
    2086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    208a:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    208c:	68eb      	ldr	r3, [r5, #12]
    208e:	b11b      	cbz	r3, 2098 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2090:	463a      	mov	r2, r7
    2092:	4621      	mov	r1, r4
    2094:	4628      	mov	r0, r5
    2096:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2098:	3524      	adds	r5, #36	; 0x24
    209a:	e7ec      	b.n	2076 <forward_status_cb+0x72>
}
    209c:	b001      	add	sp, #4
    209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20a2:	bf00      	nop
    20a4:	20002490 	.word	0x20002490
    20a8:	20012c44 	.word	0x20012c44
    20ac:	2000246c 	.word	0x2000246c

000020b0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    20b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    20b2:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    20b4:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    20b6:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    20b8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    20bc:	d007      	beq.n	20ce <usb_halt_endpoint_req.isra.0+0x1e>
    20be:	4620      	mov	r0, r4
    20c0:	f7ff ff6e 	bl	1fa0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    20c4:	b178      	cbz	r0, 20e6 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    20c6:	4b0d      	ldr	r3, [pc, #52]	; (20fc <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    20c8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    20cc:	b158      	cbz	r0, 20e6 <usb_halt_endpoint_req.isra.0+0x36>
			usb_dc_ep_set_stall(ep);
    20ce:	4620      	mov	r0, r4
    20d0:	4e0a      	ldr	r6, [pc, #40]	; (20fc <usb_halt_endpoint_req.isra.0+0x4c>)
		if (halt) {
    20d2:	b155      	cbz	r5, 20ea <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    20d4:	f002 fdae 	bl	4c34 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    20d8:	69f3      	ldr	r3, [r6, #28]
    20da:	b11b      	cbz	r3, 20e4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    20dc:	2008      	movs	r0, #8
    20de:	f10d 0107 	add.w	r1, sp, #7
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    20e2:	4798      	blx	r3
		return true;
    20e4:	2001      	movs	r0, #1
}
    20e6:	b002      	add	sp, #8
    20e8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    20ea:	f002 fdcb 	bl	4c84 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    20ee:	69f3      	ldr	r3, [r6, #28]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d0f7      	beq.n	20e4 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    20f4:	2009      	movs	r0, #9
    20f6:	f10d 0107 	add.w	r1, sp, #7
    20fa:	e7f2      	b.n	20e2 <usb_halt_endpoint_req.isra.0+0x32>
    20fc:	20012c44 	.word	0x20012c44

00002100 <set_endpoint>:
{
    2100:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2102:	7886      	ldrb	r6, [r0, #2]
	if (ep_bm & usb_dev.ep_bm) {
    2104:	4c1e      	ldr	r4, [pc, #120]	; (2180 <set_endpoint+0x80>)
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2106:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    210a:	7903      	ldrb	r3, [r0, #4]
    210c:	7942      	ldrb	r2, [r0, #5]
    210e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2112:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2116:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2118:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    211a:	f003 0303 	and.w	r3, r3, #3
    211e:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2122:	f009 f8d3 	bl	b2cc <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    2126:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    212a:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    212c:	4218      	tst	r0, r3
    212e:	d00b      	beq.n	2148 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    2130:	4630      	mov	r0, r6
    2132:	f000 fd3f 	bl	2bb4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2136:	4630      	mov	r0, r6
    2138:	f7ff ff14 	bl	1f64 <disable_endpoint>
		if (!k_is_in_isr()) {
    213c:	f00b ff9a 	bl	e074 <k_is_in_isr>
    2140:	b910      	cbnz	r0, 2148 <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    2142:	2096      	movs	r0, #150	; 0x96
    2144:	f007 fd38 	bl	9bb8 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    2148:	4668      	mov	r0, sp
    214a:	f002 fd4f 	bl	4bec <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    214e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2152:	d003      	beq.n	215c <set_endpoint+0x5c>
	} else if (ret) {
    2154:	b110      	cbz	r0, 215c <set_endpoint+0x5c>
		return false;
    2156:	2000      	movs	r0, #0
}
    2158:	b002      	add	sp, #8
    215a:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    215c:	f89d 0000 	ldrb.w	r0, [sp]
    2160:	f002 fdcc 	bl	4cfc <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2164:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2168:	d001      	beq.n	216e <set_endpoint+0x6e>
	} else if (ret) {
    216a:	2800      	cmp	r0, #0
    216c:	d1f3      	bne.n	2156 <set_endpoint+0x56>
	usb_dev.configured = true;
    216e:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2170:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    2174:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2178:	432b      	orrs	r3, r5
    217a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    217e:	e7eb      	b.n	2158 <set_endpoint+0x58>
    2180:	20012c44 	.word	0x20012c44

00002184 <usb_handle_standard_request>:
{
    2184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2188:	4d92      	ldr	r5, [pc, #584]	; (23d4 <usb_handle_standard_request+0x250>)
{
    218a:	4604      	mov	r4, r0
	if (usb_dev.custom_req_handler &&
    218c:	69ab      	ldr	r3, [r5, #24]
{
    218e:	460e      	mov	r6, r1
    2190:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    2192:	b9c3      	cbnz	r3, 21c6 <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
    2194:	7820      	ldrb	r0, [r4, #0]
    2196:	f000 001f 	and.w	r0, r0, #31
    219a:	2801      	cmp	r0, #1
    219c:	d076      	beq.n	228c <usb_handle_standard_request+0x108>
    219e:	2802      	cmp	r0, #2
    21a0:	f000 80dc 	beq.w	235c <usb_handle_standard_request+0x1d8>
    21a4:	bb00      	cbnz	r0, 21e8 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
    21a6:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
    21aa:	683a      	ldr	r2, [r7, #0]
	if (usb_reqtype_is_to_host(setup)) {
    21ac:	2900      	cmp	r1, #0
		switch (setup->bRequest) {
    21ae:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    21b0:	da2e      	bge.n	2210 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
    21b2:	2b06      	cmp	r3, #6
    21b4:	d00c      	beq.n	21d0 <usb_handle_standard_request+0x4c>
    21b6:	2b08      	cmp	r3, #8
    21b8:	d025      	beq.n	2206 <usb_handle_standard_request+0x82>
    21ba:	b9ab      	cbnz	r3, 21e8 <usb_handle_standard_request+0x64>
	data[1] = 0U;
    21bc:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    21be:	2301      	movs	r3, #1
    21c0:	7013      	strb	r3, [r2, #0]
		*len = 2;
    21c2:	2302      	movs	r3, #2
    21c4:	e103      	b.n	23ce <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    21c6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    21c8:	2800      	cmp	r0, #0
    21ca:	d1e3      	bne.n	2194 <usb_handle_standard_request+0x10>
		return 0;
    21cc:	2000      	movs	r0, #0
    21ce:	e00d      	b.n	21ec <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
    21d0:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    21d2:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    21d4:	1f0a      	subs	r2, r1, #4
    21d6:	2a01      	cmp	r2, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    21d8:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    21da:	d905      	bls.n	21e8 <usb_handle_standard_request+0x64>
    21dc:	2907      	cmp	r1, #7
    21de:	d803      	bhi.n	21e8 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    21e0:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
    21e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    21e4:	781c      	ldrb	r4, [r3, #0]
    21e6:	b91c      	cbnz	r4, 21f0 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
    21e8:	f06f 0015 	mvn.w	r0, #21
}
    21ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    21f0:	785d      	ldrb	r5, [r3, #1]
    21f2:	4565      	cmp	r5, ip
    21f4:	d103      	bne.n	21fe <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
    21f6:	4282      	cmp	r2, r0
    21f8:	f000 80e4 	beq.w	23c4 <usb_handle_standard_request+0x240>
			cur_index++;
    21fc:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    21fe:	4423      	add	r3, r4
    2200:	e7f0      	b.n	21e4 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	e0e3      	b.n	23ce <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
    2206:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    220a:	7013      	strb	r3, [r2, #0]
				*len = 1;
    220c:	2301      	movs	r3, #1
    220e:	e0de      	b.n	23ce <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
    2210:	2b05      	cmp	r3, #5
    2212:	d011      	beq.n	2238 <usb_handle_standard_request+0xb4>
    2214:	2b09      	cmp	r3, #9
    2216:	d1e7      	bne.n	21e8 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
    2218:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    221a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
    221c:	2b00      	cmp	r3, #0
    221e:	d132      	bne.n	2286 <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
    2220:	f7ff feb6 	bl	1f90 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2224:	8863      	ldrh	r3, [r4, #2]
    2226:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
    222a:	69eb      	ldr	r3, [r5, #28]
    222c:	2b00      	cmp	r3, #0
    222e:	d0cd      	beq.n	21cc <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2230:	2003      	movs	r0, #3
    2232:	4969      	ldr	r1, [pc, #420]	; (23d8 <usb_handle_standard_request+0x254>)
    2234:	4798      	blx	r3
    2236:	e7c9      	b.n	21cc <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
    2238:	78a0      	ldrb	r0, [r4, #2]
    223a:	f002 fcc5 	bl	4bc8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    223e:	2800      	cmp	r0, #0
    2240:	d0c4      	beq.n	21cc <usb_handle_standard_request+0x48>
    2242:	e7d1      	b.n	21e8 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
    2244:	7873      	ldrb	r3, [r6, #1]
    2246:	2b04      	cmp	r3, #4
    2248:	d010      	beq.n	226c <usb_handle_standard_request+0xe8>
    224a:	2b05      	cmp	r3, #5
    224c:	d011      	beq.n	2272 <usb_handle_standard_request+0xee>
    224e:	2b02      	cmp	r3, #2
    2250:	d104      	bne.n	225c <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2252:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
    2254:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2256:	42bb      	cmp	r3, r7
    2258:	bf08      	it	eq
    225a:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    225c:	7833      	ldrb	r3, [r6, #0]
    225e:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
    2260:	7833      	ldrb	r3, [r6, #0]
    2262:	2b00      	cmp	r3, #0
    2264:	d1ee      	bne.n	2244 <usb_handle_standard_request+0xc0>
	if (found) {
    2266:	2800      	cmp	r0, #0
    2268:	d0be      	beq.n	21e8 <usb_handle_standard_request+0x64>
    226a:	e7d9      	b.n	2220 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
    226c:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
    2270:	e7f4      	b.n	225c <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
    2272:	8863      	ldrh	r3, [r4, #2]
    2274:	42bb      	cmp	r3, r7
    2276:	d1f1      	bne.n	225c <usb_handle_standard_request+0xd8>
    2278:	f1b8 0f00 	cmp.w	r8, #0
    227c:	d1ee      	bne.n	225c <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    227e:	4630      	mov	r0, r6
    2280:	f7ff ff3e 	bl	2100 <set_endpoint>
			break;
    2284:	e7ea      	b.n	225c <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
    2286:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2288:	46b8      	mov	r8, r7
    228a:	e7e9      	b.n	2260 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
    228c:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    2290:	f8d7 c000 	ldr.w	ip, [r7]
    2294:	2b00      	cmp	r3, #0
    2296:	d0a7      	beq.n	21e8 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2298:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    229a:	88a2      	ldrh	r2, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    229c:	463b      	mov	r3, r7
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    229e:	f894 e004 	ldrb.w	lr, [r4, #4]
	while (p[DESC_bLength] != 0U) {
    22a2:	7818      	ldrb	r0, [r3, #0]
    22a4:	2800      	cmp	r0, #0
    22a6:	d09f      	beq.n	21e8 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    22a8:	7859      	ldrb	r1, [r3, #1]
    22aa:	2902      	cmp	r1, #2
    22ac:	d104      	bne.n	22b8 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
    22ae:	f893 8004 	ldrb.w	r8, [r3, #4]
    22b2:	45f0      	cmp	r8, lr
    22b4:	f200 8092 	bhi.w	23dc <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
    22b8:	4403      	add	r3, r0
    22ba:	e7f2      	b.n	22a2 <usb_handle_standard_request+0x11e>
			data[0] = 0U;
    22bc:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
    22c0:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
    22c4:	6031      	str	r1, [r6, #0]
			return true;
    22c6:	e781      	b.n	21cc <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
    22c8:	441f      	add	r7, r3
    22ca:	e093      	b.n	23f4 <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    22cc:	2b0b      	cmp	r3, #11
    22ce:	d18b      	bne.n	21e8 <usb_handle_standard_request+0x64>
	bool ret = false;
    22d0:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
    22d2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	const uint8_t *if_desc = NULL;
    22d6:	46b2      	mov	sl, r6
	uint8_t cur_alt_setting = 0xFF;
    22d8:	46c1      	mov	r9, r8
    22da:	e006      	b.n	22ea <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
    22dc:	787b      	ldrb	r3, [r7, #1]
    22de:	2b04      	cmp	r3, #4
    22e0:	d00f      	beq.n	2302 <usb_handle_standard_request+0x17e>
    22e2:	2b05      	cmp	r3, #5
    22e4:	d021      	beq.n	232a <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
    22e6:	783b      	ldrb	r3, [r7, #0]
    22e8:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
    22ea:	783b      	ldrb	r3, [r7, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d1f5      	bne.n	22dc <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
    22f0:	69eb      	ldr	r3, [r5, #28]
    22f2:	b113      	cbz	r3, 22fa <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    22f4:	4651      	mov	r1, sl
    22f6:	2007      	movs	r0, #7
    22f8:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    22fa:	2e00      	cmp	r6, #0
    22fc:	f47f af66 	bne.w	21cc <usb_handle_standard_request+0x48>
    2300:	e772      	b.n	21e8 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2302:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
    2306:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2308:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
    230c:	4598      	cmp	r8, r3
    230e:	d1ea      	bne.n	22e6 <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
    2310:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2312:	4599      	cmp	r9, r3
    2314:	d1e7      	bne.n	22e6 <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2316:	f1b8 0f07 	cmp.w	r8, #7
    231a:	d81c      	bhi.n	2356 <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
    231c:	eb05 0308 	add.w	r3, r5, r8
		return true;
    2320:	46ba      	mov	sl, r7
    2322:	2601      	movs	r6, #1
				ret = usb_set_alt_setting(setup->wIndex,
    2324:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2328:	e7dd      	b.n	22e6 <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
    232a:	88a3      	ldrh	r3, [r4, #4]
    232c:	4543      	cmp	r3, r8
    232e:	d1da      	bne.n	22e6 <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
    2330:	78a3      	ldrb	r3, [r4, #2]
    2332:	454b      	cmp	r3, r9
    2334:	d00a      	beq.n	234c <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
    2336:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2338:	4630      	mov	r0, r6
    233a:	f000 fc3b 	bl	2bb4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    233e:	4630      	mov	r0, r6
    2340:	f7ff fe10 	bl	1f64 <disable_endpoint>
    2344:	fab0 f680 	clz	r6, r0
    2348:	0976      	lsrs	r6, r6, #5
    234a:	e7cc      	b.n	22e6 <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
    234c:	4638      	mov	r0, r7
    234e:	f7ff fed7 	bl	2100 <set_endpoint>
    2352:	4606      	mov	r6, r0
    2354:	e7c7      	b.n	22e6 <usb_handle_standard_request+0x162>
    2356:	46ba      	mov	sl, r7
	return false;
    2358:	2600      	movs	r6, #0
    235a:	e7c4      	b.n	22e6 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    235c:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2360:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2362:	2a00      	cmp	r2, #0
    2364:	da18      	bge.n	2398 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2366:	2b00      	cmp	r3, #0
    2368:	f47f af3e 	bne.w	21e8 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
    236c:	7924      	ldrb	r4, [r4, #4]
    236e:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    2370:	0663      	lsls	r3, r4, #25
    2372:	d00a      	beq.n	238a <usb_handle_standard_request+0x206>
    2374:	4620      	mov	r0, r4
    2376:	f7ff fe13 	bl	1fa0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    237a:	2800      	cmp	r0, #0
    237c:	f43f af34 	beq.w	21e8 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2380:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    2384:	2b00      	cmp	r3, #0
    2386:	f43f af2f 	beq.w	21e8 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
    238a:	4639      	mov	r1, r7
    238c:	4620      	mov	r0, r4
    238e:	f002 fc99 	bl	4cc4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    2392:	2300      	movs	r3, #0
    2394:	707b      	strb	r3, [r7, #1]
    2396:	e714      	b.n	21c2 <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
    2398:	2b01      	cmp	r3, #1
    239a:	d008      	beq.n	23ae <usb_handle_standard_request+0x22a>
    239c:	2b03      	cmp	r3, #3
    239e:	f47f af23 	bne.w	21e8 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    23a2:	8863      	ldrh	r3, [r4, #2]
    23a4:	2b00      	cmp	r3, #0
    23a6:	f47f af1f 	bne.w	21e8 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    23aa:	2101      	movs	r1, #1
    23ac:	e003      	b.n	23b6 <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    23ae:	8861      	ldrh	r1, [r4, #2]
    23b0:	2900      	cmp	r1, #0
    23b2:	f47f af19 	bne.w	21e8 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    23b6:	88a0      	ldrh	r0, [r4, #4]
    23b8:	f7ff fe7a 	bl	20b0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    23bc:	2800      	cmp	r0, #0
    23be:	f47f af05 	bne.w	21cc <usb_handle_standard_request+0x48>
    23c2:	e711      	b.n	21e8 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
    23c4:	2902      	cmp	r1, #2
		*data = p;
    23c6:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
    23c8:	f47f af1b 	bne.w	2202 <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
    23cc:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
    23ce:	6033      	str	r3, [r6, #0]
		return true;
    23d0:	e6fc      	b.n	21cc <usb_handle_standard_request+0x48>
    23d2:	bf00      	nop
    23d4:	20012c44 	.word	0x20012c44
    23d8:	20012cfe 	.word	0x20012cfe
	if (usb_reqtype_is_to_host(setup)) {
    23dc:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    23e0:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    23e2:	2800      	cmp	r0, #0
    23e4:	f6bf af72 	bge.w	22cc <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
    23e8:	2b00      	cmp	r3, #0
    23ea:	f43f af67 	beq.w	22bc <usb_handle_standard_request+0x138>
    23ee:	2b0a      	cmp	r3, #10
    23f0:	f47f aefa 	bne.w	21e8 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
    23f4:	783b      	ldrb	r3, [r7, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	f43f aef6 	beq.w	21e8 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    23fc:	7879      	ldrb	r1, [r7, #1]
    23fe:	2904      	cmp	r1, #4
    2400:	f47f af62 	bne.w	22c8 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2404:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
    2406:	428a      	cmp	r2, r1
    2408:	f47f af5e 	bne.w	22c8 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    240c:	2a07      	cmp	r2, #7
	return 0;
    240e:	bf8e      	itee	hi
    2410:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2412:	1952      	addls	r2, r2, r5
    2414:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2418:	f88c 3000 	strb.w	r3, [ip]
    241c:	e6f6      	b.n	220c <usb_handle_standard_request+0x88>
    241e:	bf00      	nop

00002420 <usb_disable>:
{
    2420:	b570      	push	{r4, r5, r6, lr}
	if (usb_dev.enabled != true) {
    2422:	4d16      	ldr	r5, [pc, #88]	; (247c <usb_disable+0x5c>)
    2424:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    2428:	b1fb      	cbz	r3, 246a <usb_disable+0x4a>
	ret = usb_dc_detach();
    242a:	f002 fbad 	bl	4b88 <usb_dc_detach>
	if (ret < 0) {
    242e:	2800      	cmp	r0, #0
    2430:	db22      	blt.n	2478 <usb_disable+0x58>
	usb_cancel_transfers();
    2432:	f000 fbdd 	bl	2bf0 <usb_cancel_transfers>
    2436:	2400      	movs	r4, #0
		if (usb_dev.ep_bm & BIT(i)) {
    2438:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    243c:	b2e6      	uxtb	r6, r4
    243e:	40e3      	lsrs	r3, r4
    2440:	07da      	lsls	r2, r3, #31
    2442:	d414      	bmi.n	246e <usb_disable+0x4e>
		if (usb_dev.ep_bm & BIT(i + 16)) {
    2444:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2448:	f104 0210 	add.w	r2, r4, #16
    244c:	40d3      	lsrs	r3, r2
    244e:	07db      	lsls	r3, r3, #31
    2450:	d505      	bpl.n	245e <usb_disable+0x3e>
			ret = disable_endpoint(USB_EP_DIR_IN | i);
    2452:	f046 0080 	orr.w	r0, r6, #128	; 0x80
    2456:	f7ff fd85 	bl	1f64 <disable_endpoint>
			if (ret < 0) {
    245a:	2800      	cmp	r0, #0
    245c:	db0c      	blt.n	2478 <usb_disable+0x58>
	for (uint8_t i = 0; i <= 15; i++) {
    245e:	3401      	adds	r4, #1
    2460:	2c10      	cmp	r4, #16
    2462:	d1e9      	bne.n	2438 <usb_disable+0x18>
	usb_dev.enabled = false;
    2464:	2300      	movs	r3, #0
    2466:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		return 0;
    246a:	2000      	movs	r0, #0
    246c:	e004      	b.n	2478 <usb_disable+0x58>
			ret = disable_endpoint(i);
    246e:	4630      	mov	r0, r6
    2470:	f7ff fd78 	bl	1f64 <disable_endpoint>
			if (ret < 0) {
    2474:	2800      	cmp	r0, #0
    2476:	dae5      	bge.n	2444 <usb_disable+0x24>
}
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	bf00      	nop
    247c:	20012c44 	.word	0x20012c44

00002480 <usb_data_to_host>:
{
    2480:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    2482:	4c13      	ldr	r4, [pc, #76]	; (24d0 <usb_data_to_host+0x50>)
    2484:	7d23      	ldrb	r3, [r4, #20]
    2486:	b9cb      	cbnz	r3, 24bc <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2488:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    248a:	ab01      	add	r3, sp, #4
    248c:	2080      	movs	r0, #128	; 0x80
    248e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2490:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2492:	f008 ff2a 	bl	b2ea <usb_write>
		usb_dev.data_buf += chunk;
    2496:	9a01      	ldr	r2, [sp, #4]
    2498:	68a3      	ldr	r3, [r4, #8]
    249a:	4413      	add	r3, r2
    249c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    249e:	68e3      	ldr	r3, [r4, #12]
    24a0:	1a9b      	subs	r3, r3, r2
    24a2:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    24a4:	b943      	cbnz	r3, 24b8 <usb_data_to_host+0x38>
    24a6:	b13a      	cbz	r2, 24b8 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    24a8:	6923      	ldr	r3, [r4, #16]
    24aa:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    24ac:	429a      	cmp	r2, r3
    24ae:	dd03      	ble.n	24b8 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    24b0:	069b      	lsls	r3, r3, #26
    24b2:	d101      	bne.n	24b8 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    24b4:	2301      	movs	r3, #1
    24b6:	7523      	strb	r3, [r4, #20]
}
    24b8:	b002      	add	sp, #8
    24ba:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    24bc:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    24be:	2080      	movs	r0, #128	; 0x80
    24c0:	461a      	mov	r2, r3
    24c2:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
    24c4:	7523      	strb	r3, [r4, #20]
}
    24c6:	b002      	add	sp, #8
    24c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    24cc:	f002 bc40 	b.w	4d50 <usb_dc_ep_write>
    24d0:	20012c44 	.word	0x20012c44

000024d4 <usb_handle_control_transfer>:
	uint32_t chunk = 0U;
    24d4:	2300      	movs	r3, #0
{
    24d6:	b530      	push	{r4, r5, lr}
    24d8:	b085      	sub	sp, #20
    24da:	4602      	mov	r2, r0
    24dc:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    24de:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    24e0:	2800      	cmp	r0, #0
    24e2:	d158      	bne.n	2596 <usb_handle_control_transfer+0xc2>
    24e4:	2900      	cmp	r1, #0
    24e6:	d135      	bne.n	2554 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    24e8:	2208      	movs	r2, #8
    24ea:	460b      	mov	r3, r1
    24ec:	eb0d 0102 	add.w	r1, sp, r2
    24f0:	f009 f940 	bl	b774 <usb_dc_ep_read>
    24f4:	2800      	cmp	r0, #0
    24f6:	da04      	bge.n	2502 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    24f8:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    24fa:	f002 fb9b 	bl	4c34 <usb_dc_ep_set_stall>
}
    24fe:	b005      	add	sp, #20
    2500:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    2502:	4c2a      	ldr	r4, [pc, #168]	; (25ac <usb_handle_control_transfer+0xd8>)
    2504:	9a02      	ldr	r2, [sp, #8]
		usb_dev.data_buf_residue = 0;
    2506:	e9c4 5503 	strd	r5, r5, [r4, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    250a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    250c:	9a03      	ldr	r2, [sp, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    250e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2512:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2514:	f104 0238 	add.w	r2, r4, #56	; 0x38
    2518:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    251a:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		usb_dev.zlp_flag = false;
    251e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    2520:	2a00      	cmp	r2, #0
    2522:	db0a      	blt.n	253a <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2524:	2b80      	cmp	r3, #128	; 0x80
    2526:	d904      	bls.n	2532 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2528:	2080      	movs	r0, #128	; 0x80
    252a:	f002 fb83 	bl	4c34 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    252e:	2000      	movs	r0, #0
    2530:	e7e3      	b.n	24fa <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2532:	b113      	cbz	r3, 253a <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    2534:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    2538:	e7e1      	b.n	24fe <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    253a:	f7ff fd4d 	bl	1fd8 <usb_handle_request.constprop.0>
    253e:	2800      	cmp	r0, #0
    2540:	d0da      	beq.n	24f8 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2542:	88e2      	ldrh	r2, [r4, #6]
    2544:	6923      	ldr	r3, [r4, #16]
    2546:	429a      	cmp	r2, r3
    2548:	bfd4      	ite	le
    254a:	60e2      	strle	r2, [r4, #12]
    254c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    254e:	f7ff ff97 	bl	2480 <usb_data_to_host>
    2552:	e7d4      	b.n	24fe <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    2554:	4c15      	ldr	r4, [pc, #84]	; (25ac <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2556:	ab01      	add	r3, sp, #4
    2558:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    255c:	2d00      	cmp	r5, #0
    255e:	dc04      	bgt.n	256a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2560:	f009 f908 	bl	b774 <usb_dc_ep_read>
    2564:	2800      	cmp	r0, #0
    2566:	daca      	bge.n	24fe <usb_handle_control_transfer+0x2a>
    2568:	e7c6      	b.n	24f8 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    256a:	462a      	mov	r2, r5
    256c:	f009 f902 	bl	b774 <usb_dc_ep_read>
    2570:	2800      	cmp	r0, #0
    2572:	dbd9      	blt.n	2528 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    2574:	9a01      	ldr	r2, [sp, #4]
    2576:	68a3      	ldr	r3, [r4, #8]
    2578:	4413      	add	r3, r2
    257a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    257c:	68e3      	ldr	r3, [r4, #12]
    257e:	1a9b      	subs	r3, r3, r2
    2580:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2582:	2b00      	cmp	r3, #0
    2584:	d1bb      	bne.n	24fe <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2586:	f104 0338 	add.w	r3, r4, #56	; 0x38
    258a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    258c:	f7ff fd24 	bl	1fd8 <usb_handle_request.constprop.0>
    2590:	2800      	cmp	r0, #0
    2592:	d1dc      	bne.n	254e <usb_handle_control_transfer+0x7a>
    2594:	e7b0      	b.n	24f8 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2596:	2880      	cmp	r0, #128	; 0x80
    2598:	d1b1      	bne.n	24fe <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    259a:	4b04      	ldr	r3, [pc, #16]	; (25ac <usb_handle_control_transfer+0xd8>)
    259c:	68da      	ldr	r2, [r3, #12]
    259e:	2a00      	cmp	r2, #0
    25a0:	d1d5      	bne.n	254e <usb_handle_control_transfer+0x7a>
    25a2:	7d1b      	ldrb	r3, [r3, #20]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d1d2      	bne.n	254e <usb_handle_control_transfer+0x7a>
    25a8:	e7a9      	b.n	24fe <usb_handle_control_transfer+0x2a>
    25aa:	bf00      	nop
    25ac:	20012c44 	.word	0x20012c44

000025b0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    25b0:	4b05      	ldr	r3, [pc, #20]	; (25c8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    25b2:	4a06      	ldr	r2, [pc, #24]	; (25cc <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
    25b4:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.req_handlers[type] = handler;
    25b6:	629a      	str	r2, [r3, #40]	; 0x28
    25b8:	4a05      	ldr	r2, [pc, #20]	; (25d0 <usb_set_config+0x20>)

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    25ba:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
    25bc:	62da      	str	r2, [r3, #44]	; 0x2c
    25be:	4a05      	ldr	r2, [pc, #20]	; (25d4 <usb_set_config+0x24>)
    25c0:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    25c2:	4a05      	ldr	r2, [pc, #20]	; (25d8 <usb_set_config+0x28>)
    25c4:	619a      	str	r2, [r3, #24]
}
    25c6:	4770      	bx	lr
    25c8:	20012c44 	.word	0x20012c44
    25cc:	00002185 	.word	0x00002185
    25d0:	00001e89 	.word	0x00001e89
    25d4:	00001f29 	.word	0x00001f29
    25d8:	00001ec9 	.word	0x00001ec9

000025dc <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    25dc:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    25de:	4b08      	ldr	r3, [pc, #32]	; (2600 <usb_device_init+0x24>)
    25e0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    25e4:	b934      	cbnz	r4, 25f4 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    25e6:	f000 f8d7 	bl	2798 <usb_get_device_descriptor>
	if (!device_descriptor) {
    25ea:	b130      	cbz	r0, 25fa <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    25ec:	f7ff ffe0 	bl	25b0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    25f0:	4620      	mov	r0, r4
}
    25f2:	bd10      	pop	{r4, pc}
		return -EALREADY;
    25f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    25f8:	e7fb      	b.n	25f2 <usb_device_init+0x16>
		return -1;
    25fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25fe:	e7f8      	b.n	25f2 <usb_device_init+0x16>
    2600:	20012c44 	.word	0x20012c44

00002604 <usb_enable>:
{
    2604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2608:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    260a:	4d3b      	ldr	r5, [pc, #236]	; (26f8 <usb_enable+0xf4>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2614:	4839      	ldr	r0, [pc, #228]	; (26fc <usb_enable+0xf8>)
    2616:	f006 fe3f 	bl	9298 <z_impl_k_mutex_lock>
    261a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    261e:	2e00      	cmp	r6, #0
    2620:	d167      	bne.n	26f2 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    2622:	4837      	ldr	r0, [pc, #220]	; (2700 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    2624:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    2626:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2628:	f002 fcac 	bl	4f84 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    262c:	f002 fa7a 	bl	4b24 <usb_dc_attach>
	if (ret < 0) {
    2630:	1e04      	subs	r4, r0, #0
    2632:	db42      	blt.n	26ba <usb_enable+0xb6>
	ret = usb_transfer_init();
    2634:	f000 fb00 	bl	2c38 <usb_transfer_init>
	if (ret < 0) {
    2638:	1e04      	subs	r4, r0, #0
    263a:	db3e      	blt.n	26ba <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    263c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    263e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2640:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2644:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2648:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    264c:	f002 face 	bl	4bec <usb_dc_ep_configure>
	if (ret < 0) {
    2650:	1e04      	subs	r4, r0, #0
    2652:	db32      	blt.n	26ba <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2654:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2656:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2658:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    265c:	f002 fac6 	bl	4bec <usb_dc_ep_configure>
	if (ret < 0) {
    2660:	1e04      	subs	r4, r0, #0
    2662:	db2a      	blt.n	26ba <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2664:	4630      	mov	r0, r6
    2666:	4927      	ldr	r1, [pc, #156]	; (2704 <usb_enable+0x100>)
    2668:	f002 fc78 	bl	4f5c <usb_dc_ep_set_callback>
	if (ret < 0) {
    266c:	1e04      	subs	r4, r0, #0
    266e:	db24      	blt.n	26ba <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2670:	4638      	mov	r0, r7
    2672:	4924      	ldr	r1, [pc, #144]	; (2704 <usb_enable+0x100>)
    2674:	f002 fc72 	bl	4f5c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2678:	1e04      	subs	r4, r0, #0
    267a:	db1e      	blt.n	26ba <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    267c:	4c22      	ldr	r4, [pc, #136]	; (2708 <usb_enable+0x104>)
    267e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 270c <usb_enable+0x108>
    2682:	4544      	cmp	r4, r8
    2684:	d320      	bcc.n	26c8 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2686:	2000      	movs	r0, #0
    2688:	f002 fb38 	bl	4cfc <usb_dc_ep_enable>
	if (ret < 0) {
    268c:	1e04      	subs	r4, r0, #0
    268e:	db14      	blt.n	26ba <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2690:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2694:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2696:	f043 0301 	orr.w	r3, r3, #1
    269a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    269e:	f002 fb2d 	bl	4cfc <usb_dc_ep_enable>
	if (ret < 0) {
    26a2:	1e04      	subs	r4, r0, #0
    26a4:	db09      	blt.n	26ba <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    26a6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = 0;
    26aa:	2400      	movs	r4, #0
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    26ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    26b0:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    26b4:	2301      	movs	r3, #1
    26b6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    26ba:	4810      	ldr	r0, [pc, #64]	; (26fc <usb_enable+0xf8>)
    26bc:	f006 fe66 	bl	938c <z_impl_k_mutex_unlock>
}
    26c0:	4620      	mov	r0, r4
    26c2:	b002      	add	sp, #8
    26c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    26c8:	2600      	movs	r6, #0
		ep_data = cfg_data->endpoint;
    26ca:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    26cc:	7f22      	ldrb	r2, [r4, #28]
    26ce:	b2f3      	uxtb	r3, r6
    26d0:	429a      	cmp	r2, r3
    26d2:	d801      	bhi.n	26d8 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    26d4:	3424      	adds	r4, #36	; 0x24
    26d6:	e7d4      	b.n	2682 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    26d8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    26dc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    26e0:	7910      	ldrb	r0, [r2, #4]
    26e2:	f002 fc3b 	bl	4f5c <usb_dc_ep_set_callback>
    26e6:	3601      	adds	r6, #1
    26e8:	2800      	cmp	r0, #0
    26ea:	d0ef      	beq.n	26cc <usb_enable+0xc8>
    26ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    26f0:	e7e3      	b.n	26ba <usb_enable+0xb6>
		ret = -EALREADY;
    26f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    26f6:	e7e0      	b.n	26ba <usb_enable+0xb6>
    26f8:	20012c44 	.word	0x20012c44
    26fc:	20002364 	.word	0x20002364
    2700:	00002005 	.word	0x00002005
    2704:	000024d5 	.word	0x000024d5
    2708:	2000246c 	.word	0x2000246c
    270c:	20002490 	.word	0x20002490

00002710 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2710:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2712:	4b1f      	ldr	r3, [pc, #124]	; (2790 <usb_update_sn_string_descriptor+0x80>)
{
    2714:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2716:	aa05      	add	r2, sp, #20
    2718:	f103 0510 	add.w	r5, r3, #16
    271c:	4614      	mov	r4, r2
    271e:	6818      	ldr	r0, [r3, #0]
    2720:	6859      	ldr	r1, [r3, #4]
    2722:	3308      	adds	r3, #8
    2724:	c403      	stmia	r4!, {r0, r1}
    2726:	42ab      	cmp	r3, r5
    2728:	4622      	mov	r2, r4
    272a:	d1f7      	bne.n	271c <usb_update_sn_string_descriptor+0xc>
    272c:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    272e:	2210      	movs	r2, #16
	const char hex[] = "0123456789ABCDEF";
    2730:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
    2732:	2100      	movs	r1, #0
    2734:	a801      	add	r0, sp, #4
    2736:	f008 ffba 	bl	b6ae <memset>
	memset(sn, 0, sizeof(sn));
    273a:	2212      	movs	r2, #18
    273c:	2100      	movs	r1, #0
    273e:	4815      	ldr	r0, [pc, #84]	; (2794 <usb_update_sn_string_descriptor+0x84>)
    2740:	f008 ffb5 	bl	b6ae <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2744:	2110      	movs	r1, #16
    2746:	a801      	add	r0, sp, #4
    2748:	f009 fa27 	bl	bb9a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    274c:	2800      	cmp	r0, #0
    274e:	dd1b      	ble.n	2788 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2750:	2808      	cmp	r0, #8
    2752:	bfb8      	it	lt
    2754:	2008      	movlt	r0, #8
    2756:	ab01      	add	r3, sp, #4
    2758:	3809      	subs	r0, #9
    275a:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    275c:	2000      	movs	r0, #0
    275e:	490d      	ldr	r1, [pc, #52]	; (2794 <usb_update_sn_string_descriptor+0x84>)
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2760:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2764:	ac0a      	add	r4, sp, #40	; 0x28
    2766:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    276a:	f003 030f 	and.w	r3, r3, #15
    276e:	3328      	adds	r3, #40	; 0x28
    2770:	446b      	add	r3, sp
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2772:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2776:	f813 3c14 	ldrb.w	r3, [r3, #-20]
		for (int i = 0; i < usblen; i++) {
    277a:	3001      	adds	r0, #1
    277c:	2808      	cmp	r0, #8
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    277e:	700c      	strb	r4, [r1, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2780:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2782:	f101 0102 	add.w	r1, r1, #2
    2786:	d1eb      	bne.n	2760 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2788:	4802      	ldr	r0, [pc, #8]	; (2794 <usb_update_sn_string_descriptor+0x84>)
    278a:	b00b      	add	sp, #44	; 0x2c
    278c:	bd30      	pop	{r4, r5, pc}
    278e:	bf00      	nop
    2790:	0000f2ce 	.word	0x0000f2ce
    2794:	20015f34 	.word	0x20015f34

00002798 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    279c:	4c63      	ldr	r4, [pc, #396]	; (292c <CONFIG_MAIN_STACK_SIZE+0x12c>)
    279e:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
    27a0:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    27a2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    27a6:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
    27a8:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    27aa:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
    27ac:	7823      	ldrb	r3, [r4, #0]
    27ae:	b92b      	cbnz	r3, 27bc <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
    27b0:	4b5f      	ldr	r3, [pc, #380]	; (2930 <CONFIG_MAIN_STACK_SIZE+0x130>)
    27b2:	3402      	adds	r4, #2
    27b4:	429c      	cmp	r4, r3
    27b6:	d1f3      	bne.n	27a0 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    27b8:	485c      	ldr	r0, [pc, #368]	; (292c <CONFIG_MAIN_STACK_SIZE+0x12c>)
    27ba:	e01c      	b.n	27f6 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
    27bc:	7863      	ldrb	r3, [r4, #1]
    27be:	2b05      	cmp	r3, #5
    27c0:	d805      	bhi.n	27ce <usb_get_device_descriptor+0x36>
    27c2:	e8df f003 	tbb	[pc, r3]
    27c6:	0479      	.short	0x0479
    27c8:	25077903 	.word	0x25077903
    27cc:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    27ce:	7823      	ldrb	r3, [r4, #0]
    27d0:	441c      	add	r4, r3
    27d2:	e7eb      	b.n	27ac <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    27d4:	78e3      	ldrb	r3, [r4, #3]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d1f9      	bne.n	27ce <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    27da:	78a3      	ldrb	r3, [r4, #2]
    27dc:	b173      	cbz	r3, 27fc <usb_get_device_descriptor+0x64>
			numof_ifaces++;
    27de:	f109 0901 	add.w	r9, r9, #1
    27e2:	fa5f f989 	uxtb.w	r9, r9
			break;
    27e6:	e7f2      	b.n	27ce <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    27e8:	686a      	ldr	r2, [r5, #4]
    27ea:	4294      	cmp	r4, r2
    27ec:	d009      	beq.n	2802 <CONFIG_MAIN_STACK_SIZE+0x2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    27ee:	3524      	adds	r5, #36	; 0x24
    27f0:	429d      	cmp	r5, r3
    27f2:	d3f9      	bcc.n	27e8 <usb_get_device_descriptor+0x50>
		return NULL;
    27f4:	2000      	movs	r0, #0
}
    27f6:	b005      	add	sp, #20
    27f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    27fc:	4d4d      	ldr	r5, [pc, #308]	; (2934 <CONFIG_MAIN_STACK_SIZE+0x134>)
    27fe:	4b4e      	ldr	r3, [pc, #312]	; (2938 <CONFIG_MAIN_STACK_SIZE+0x138>)
    2800:	e7f6      	b.n	27f0 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
    2802:	68ab      	ldr	r3, [r5, #8]
    2804:	2b00      	cmp	r3, #0
    2806:	d0ea      	beq.n	27de <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
    2808:	4649      	mov	r1, r9
    280a:	4620      	mov	r0, r4
    280c:	4798      	blx	r3
    280e:	e7e6      	b.n	27de <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
    2810:	2d00      	cmp	r5, #0
    2812:	d0ef      	beq.n	27f4 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2814:	2300      	movs	r3, #0
    2816:	2101      	movs	r1, #1
    2818:	7f2a      	ldrb	r2, [r5, #28]
    281a:	4293      	cmp	r3, r2
    281c:	d2ea      	bcs.n	27f4 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    281e:	6a2a      	ldr	r2, [r5, #32]
    2820:	78a7      	ldrb	r7, [r4, #2]
    2822:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2826:	7910      	ldrb	r0, [r2, #4]
    2828:	4287      	cmp	r7, r0
    282a:	d001      	beq.n	2830 <CONFIG_MAIN_STACK_SIZE+0x30>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    282c:	3301      	adds	r3, #1
    282e:	e7f3      	b.n	2818 <CONFIG_MAIN_STACK_SIZE+0x18>
    2830:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2832:	78e0      	ldrb	r0, [r4, #3]
    2834:	fa5f f887 	uxtb.w	r8, r7
    2838:	f000 0003 	and.w	r0, r0, #3
    283c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2840:	7920      	ldrb	r0, [r4, #4]
    2842:	f894 c005 	ldrb.w	ip, [r4, #5]
    2846:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    284a:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    284e:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2852:	2800      	cmp	r0, #0
    2854:	da25      	bge.n	28a2 <CONFIG_MAIN_STACK_SIZE+0xa2>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2856:	f107 0010 	add.w	r0, r7, #16
    285a:	fa01 f000 	lsl.w	r0, r1, r0
    285e:	ea10 0f0b 	tst.w	r0, fp
    2862:	d125      	bne.n	28b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2864:	f048 0080 	orr.w	r0, r8, #128	; 0x80
    2868:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    286c:	a802      	add	r0, sp, #8
    286e:	e9cd 3200 	strd	r3, r2, [sp]
    2872:	f008 ff4e 	bl	b712 <usb_dc_ep_check_cap>
    2876:	e9dd 3200 	ldrd	r3, r2, [sp]
    287a:	2101      	movs	r1, #1
    287c:	b9c0      	cbnz	r0, 28b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    287e:	f89d 3008 	ldrb.w	r3, [sp, #8]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2882:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2886:	70a3      	strb	r3, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2888:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    288a:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    288c:	bf1d      	ittte	ne
    288e:	f108 0810 	addne.w	r8, r8, #16
    2892:	fa5f f888 	uxtbne.w	r8, r8
    2896:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
    289a:	40bb      	lsleq	r3, r7
    289c:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
    28a0:	e795      	b.n	27ce <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    28a2:	fa01 f007 	lsl.w	r0, r1, r7
    28a6:	ea10 0f0b 	tst.w	r0, fp
    28aa:	d101      	bne.n	28b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
    28ac:	4640      	mov	r0, r8
    28ae:	e7db      	b.n	2868 <CONFIG_MAIN_STACK_SIZE+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    28b0:	3701      	adds	r7, #1
    28b2:	2f10      	cmp	r7, #16
    28b4:	d1bd      	bne.n	2832 <CONFIG_MAIN_STACK_SIZE+0x32>
    28b6:	e7b9      	b.n	282c <CONFIG_MAIN_STACK_SIZE+0x2c>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    28b8:	2e03      	cmp	r6, #3
    28ba:	d11d      	bne.n	28f8 <CONFIG_MAIN_STACK_SIZE+0xf8>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    28bc:	f7ff ff28 	bl	2710 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    28c0:	4607      	mov	r7, r0
    28c2:	b168      	cbz	r0, 28e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
	runtime_sn_len = strlen(runtime_sn);
    28c4:	f008 feba 	bl	b63c <strlen>
	if (!runtime_sn_len) {
    28c8:	4680      	mov	r8, r0
    28ca:	b148      	cbz	r0, 28e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    28cc:	481b      	ldr	r0, [pc, #108]	; (293c <CONFIG_MAIN_STACK_SIZE+0x13c>)
    28ce:	f008 feb5 	bl	b63c <strlen>
	if (runtime_sn_len != default_sn_len) {
    28d2:	4580      	cmp	r8, r0
    28d4:	d104      	bne.n	28e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    28d6:	4642      	mov	r2, r8
    28d8:	4639      	mov	r1, r7
    28da:	1ca0      	adds	r0, r4, #2
    28dc:	f008 fedc 	bl	b698 <memcpy>
	for (int i = idx_max; i >= 0; i -= 2) {
    28e0:	f06f 0102 	mvn.w	r1, #2
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    28e4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    28e6:	1b09      	subs	r1, r1, r4
    28e8:	18e2      	adds	r2, r4, r3
    28ea:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    28ee:	42d1      	cmn	r1, r2
    28f0:	d513      	bpl.n	291a <CONFIG_MAIN_STACK_SIZE+0x11a>
			str_descr_idx += 1U;
    28f2:	3601      	adds	r6, #1
    28f4:	b2f6      	uxtb	r6, r6
			break;
    28f6:	e76a      	b.n	27ce <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
    28f8:	2e00      	cmp	r6, #0
    28fa:	d1f1      	bne.n	28e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
				if (!cfg_descr) {
    28fc:	f1ba 0f00 	cmp.w	sl, #0
    2900:	f43f af78 	beq.w	27f4 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2904:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2908:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    290c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2910:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2914:	f88a 9004 	strb.w	r9, [sl, #4]
    2918:	e7eb      	b.n	28f2 <CONFIG_MAIN_STACK_SIZE+0xf2>
		buf[i] = 0U;
    291a:	f04f 0000 	mov.w	r0, #0
    291e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2922:	f813 0901 	ldrb.w	r0, [r3], #-1
    2926:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    292a:	e7e0      	b.n	28ee <CONFIG_MAIN_STACK_SIZE+0xee>
    292c:	20002388 	.word	0x20002388
    2930:	20002469 	.word	0x20002469
    2934:	2000246c 	.word	0x2000246c
    2938:	20002490 	.word	0x20002490
    293c:	0000f2ce 	.word	0x0000f2ce

00002940 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2940:	4b09      	ldr	r3, [pc, #36]	; (2968 <usb_ep_get_transfer+0x28>)
    2942:	2100      	movs	r1, #0
    2944:	461a      	mov	r2, r3
{
    2946:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2948:	781c      	ldrb	r4, [r3, #0]
    294a:	4284      	cmp	r4, r0
    294c:	d104      	bne.n	2958 <usb_ep_get_transfer+0x18>
    294e:	685c      	ldr	r4, [r3, #4]
    2950:	b114      	cbz	r4, 2958 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2952:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2956:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2958:	3101      	adds	r1, #1
    295a:	2904      	cmp	r1, #4
    295c:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2960:	d1f2      	bne.n	2948 <usb_ep_get_transfer+0x8>
	return NULL;
    2962:	2000      	movs	r0, #0
    2964:	e7f7      	b.n	2956 <usb_ep_get_transfer+0x16>
    2966:	bf00      	nop
    2968:	20012d0c 	.word	0x20012d0c

0000296c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    296c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2970:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
    2974:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2976:	3310      	adds	r3, #16
	ep = trans->ep;
    2978:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    297c:	d110      	bne.n	29a0 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    297e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2980:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2984:	0799      	lsls	r1, r3, #30
    2986:	d53c      	bpl.n	2a02 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2988:	bb02      	cbnz	r2, 29cc <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    298a:	f013 0304 	ands.w	r3, r3, #4
    298e:	d104      	bne.n	299a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2990:	461a      	mov	r2, r3
    2992:	4619      	mov	r1, r3
    2994:	4630      	mov	r0, r6
    2996:	f008 fca8 	bl	b2ea <usb_write>
			}
			trans->status = 0;
    299a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    299c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    29a0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    29a4:	3310      	adds	r3, #16
    29a6:	d00e      	beq.n	29c6 <usb_transfer_work+0x5a>
    29a8:	f854 5c18 	ldr.w	r5, [r4, #-24]
    29ac:	b15d      	cbz	r5, 29c6 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    29ae:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    29b2:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    29b6:	f00b fb5d 	bl	e074 <k_is_in_isr>
    29ba:	2800      	cmp	r0, #0
    29bc:	d04c      	beq.n	2a58 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    29be:	4621      	mov	r1, r4
    29c0:	482b      	ldr	r0, [pc, #172]	; (2a70 <usb_transfer_work+0x104>)
    29c2:	f00b fc50 	bl	e266 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    29c6:	b002      	add	sp, #8
    29c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    29cc:	f850 1c24 	ldr.w	r1, [r0, #-36]
    29d0:	ab01      	add	r3, sp, #4
    29d2:	4630      	mov	r0, r6
    29d4:	f008 fc89 	bl	b2ea <usb_write>
		if (ret) {
    29d8:	b110      	cbz	r0, 29e0 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    29da:	f06f 0315 	mvn.w	r3, #21
    29de:	e7dd      	b.n	299c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    29e0:	9a01      	ldr	r2, [sp, #4]
    29e2:	f854 3c24 	ldr.w	r3, [r4, #-36]
    29e6:	4413      	add	r3, r2
    29e8:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    29ec:	f854 3c20 	ldr.w	r3, [r4, #-32]
    29f0:	1a9b      	subs	r3, r3, r2
    29f2:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    29f6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    29fa:	4413      	add	r3, r2
    29fc:	f844 3c1c 	str.w	r3, [r4, #-28]
    2a00:	e7ce      	b.n	29a0 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2a02:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2a06:	ab01      	add	r3, sp, #4
    2a08:	4630      	mov	r0, r6
    2a0a:	f002 fa1d 	bl	4e48 <usb_dc_ep_read_wait>
		if (ret) {
    2a0e:	2800      	cmp	r0, #0
    2a10:	d1e3      	bne.n	29da <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2a12:	9d01      	ldr	r5, [sp, #4]
    2a14:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2a18:	442b      	add	r3, r5
    2a1a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2a1e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2a22:	1b5b      	subs	r3, r3, r5
    2a24:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2a28:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2a2c:	442b      	add	r3, r5
    2a2e:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2a32:	2d00      	cmp	r5, #0
    2a34:	d0b1      	beq.n	299a <usb_transfer_work+0x2e>
    2a36:	4630      	mov	r0, r6
    2a38:	f002 faaa 	bl	4f90 <usb_dc_ep_mps>
    2a3c:	fbb5 f3f0 	udiv	r3, r5, r0
    2a40:	fb03 5510 	mls	r5, r3, r0, r5
    2a44:	2d00      	cmp	r5, #0
    2a46:	d1a8      	bne.n	299a <usb_transfer_work+0x2e>
    2a48:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d0a4      	beq.n	299a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2a50:	4630      	mov	r0, r6
    2a52:	f002 fa41 	bl	4ed8 <usb_dc_ep_read_continue>
    2a56:	e7a3      	b.n	29a0 <usb_transfer_work+0x34>
		trans->cb = NULL;
    2a58:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2a5c:	f1a4 0010 	sub.w	r0, r4, #16
    2a60:	f006 fd04 	bl	946c <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    2a64:	4642      	mov	r2, r8
    2a66:	4639      	mov	r1, r7
    2a68:	4630      	mov	r0, r6
    2a6a:	47a8      	blx	r5
    2a6c:	e7ab      	b.n	29c6 <usb_transfer_work+0x5a>
    2a6e:	bf00      	nop
    2a70:	20002490 	.word	0x20002490

00002a74 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2a74:	1e4b      	subs	r3, r1, #1
    2a76:	2b01      	cmp	r3, #1
{
    2a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2a7a:	4606      	mov	r6, r0
    2a7c:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2a7e:	d80f      	bhi.n	2aa0 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2a80:	f7ff ff5e 	bl	2940 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2a84:	4604      	mov	r4, r0
    2a86:	b968      	cbnz	r0, 2aa4 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2a88:	2d01      	cmp	r5, #1
    2a8a:	d109      	bne.n	2aa0 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2a8c:	ab01      	add	r3, sp, #4
    2a8e:	2201      	movs	r2, #1
    2a90:	4630      	mov	r0, r6
    2a92:	f10d 0103 	add.w	r1, sp, #3
    2a96:	f002 f9d7 	bl	4e48 <usb_dc_ep_read_wait>
			} while (bytes);
    2a9a:	9b01      	ldr	r3, [sp, #4]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d1f5      	bne.n	2a8c <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2aa0:	b002      	add	sp, #8
    2aa2:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2aa4:	f00b fae6 	bl	e074 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2aa8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2aac:	b108      	cbz	r0, 2ab2 <usb_transfer_ep_callback+0x3e>
    2aae:	2d01      	cmp	r5, #1
    2ab0:	d105      	bne.n	2abe <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2ab2:	4608      	mov	r0, r1
}
    2ab4:	b002      	add	sp, #8
    2ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2aba:	f7ff bf57 	b.w	296c <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2abe:	4803      	ldr	r0, [pc, #12]	; (2acc <usb_transfer_ep_callback+0x58>)
}
    2ac0:	b002      	add	sp, #8
    2ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ac6:	f00b bbce 	b.w	e266 <k_work_submit_to_queue>
    2aca:	bf00      	nop
    2acc:	20002490 	.word	0x20002490

00002ad0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ad4:	4606      	mov	r6, r0
    2ad6:	4615      	mov	r5, r2
    2ad8:	4698      	mov	r8, r3
    2ada:	9101      	str	r1, [sp, #4]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2adc:	f008 fc4b 	bl	b376 <usb_transfer_is_busy>
    2ae0:	4604      	mov	r4, r0
    2ae2:	2800      	cmp	r0, #0
    2ae4:	d15c      	bne.n	2ba0 <usb_transfer+0xd0>
	__asm__ volatile(
    2ae6:	f04f 0320 	mov.w	r3, #32
    2aea:	f3ef 8a11 	mrs	sl, BASEPRI
    2aee:	f383 8812 	msr	BASEPRI_MAX, r3
    2af2:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2af6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2ba8 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    2afa:	2200      	movs	r2, #0
    2afc:	2300      	movs	r3, #0
    2afe:	4658      	mov	r0, fp
    2b00:	f006 fcd4 	bl	94ac <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2b04:	b970      	cbnz	r0, 2b24 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2b06:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2bac <usb_transfer+0xdc>
    2b0a:	01a7      	lsls	r7, r4, #6
    2b0c:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2b10:	6863      	ldr	r3, [r4, #4]
    2b12:	f113 0f10 	cmn.w	r3, #16
    2b16:	d114      	bne.n	2b42 <usb_transfer+0x72>
    2b18:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2b1a:	4658      	mov	r0, fp
    2b1c:	f006 fca6 	bl	946c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2b20:	9b01      	ldr	r3, [sp, #4]
    2b22:	e006      	b.n	2b32 <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b24:	3401      	adds	r4, #1
    2b26:	2c04      	cmp	r4, #4
    2b28:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2b2c:	d1e5      	bne.n	2afa <usb_transfer+0x2a>
		ret = -ENOMEM;
    2b2e:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2b32:	f38a 8811 	msr	BASEPRI, sl
    2b36:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	b003      	add	sp, #12
    2b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2b42:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2b44:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2b46:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2b4c:	4630      	mov	r0, r6
	trans->cb = cb;
    2b4e:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	trans->ep = ep;
    2b52:	f809 6007 	strb.w	r6, [r9, r7]
	trans->priv = cb_data;
    2b56:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2b58:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
    2b5c:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2b60:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2b62:	f002 fa15 	bl	4f90 <usb_dc_ep_mps>
    2b66:	b158      	cbz	r0, 2b80 <usb_transfer+0xb0>
    2b68:	4630      	mov	r0, r6
    2b6a:	f002 fa11 	bl	4f90 <usb_dc_ep_mps>
    2b6e:	fbb5 f3f0 	udiv	r3, r5, r0
    2b72:	fb03 5510 	mls	r5, r3, r0, r5
    2b76:	b11d      	cbz	r5, 2b80 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2b7a:	f043 0304 	orr.w	r3, r3, #4
    2b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2b80:	f018 0f02 	tst.w	r8, #2
    2b84:	d007      	beq.n	2b96 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2b86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2b8a:	4809      	ldr	r0, [pc, #36]	; (2bb0 <usb_transfer+0xe0>)
    2b8c:	4449      	add	r1, r9
    2b8e:	f00b fb6a 	bl	e266 <k_work_submit_to_queue>
	int key, ret = 0;
    2b92:	2300      	movs	r3, #0
    2b94:	e7cd      	b.n	2b32 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2b96:	4630      	mov	r0, r6
    2b98:	f002 f99e 	bl	4ed8 <usb_dc_ep_read_continue>
    2b9c:	4603      	mov	r3, r0
    2b9e:	e7c8      	b.n	2b32 <usb_transfer+0x62>
		return -EBUSY;
    2ba0:	f06f 030f 	mvn.w	r3, #15
    2ba4:	e7c9      	b.n	2b3a <usb_transfer+0x6a>
    2ba6:	bf00      	nop
    2ba8:	20012d28 	.word	0x20012d28
    2bac:	20012d0c 	.word	0x20012d0c
    2bb0:	20002490 	.word	0x20002490

00002bb4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2bb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    2bb6:	f04f 0320 	mov.w	r3, #32
    2bba:	f3ef 8411 	mrs	r4, BASEPRI
    2bbe:	f383 8812 	msr	BASEPRI_MAX, r3
    2bc2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2bc6:	f7ff febb 	bl	2940 <usb_ep_get_transfer>
	if (!trans) {
    2bca:	b150      	cbz	r0, 2be2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2bcc:	6843      	ldr	r3, [r0, #4]
    2bce:	3310      	adds	r3, #16
    2bd0:	d107      	bne.n	2be2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2bd2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2bd6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
    2bda:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2bdc:	4803      	ldr	r0, [pc, #12]	; (2bec <usb_cancel_transfer+0x38>)
    2bde:	f00b fb42 	bl	e266 <k_work_submit_to_queue>
	__asm__ volatile(
    2be2:	f384 8811 	msr	BASEPRI, r4
    2be6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2bea:	bd10      	pop	{r4, pc}
    2bec:	20002490 	.word	0x20002490

00002bf0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	2504      	movs	r5, #4
    2bf4:	4c0e      	ldr	r4, [pc, #56]	; (2c30 <usb_cancel_transfers+0x40>)
	__asm__ volatile(
    2bf6:	f04f 0320 	mov.w	r3, #32
    2bfa:	f3ef 8611 	mrs	r6, BASEPRI
    2bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    2c02:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2c06:	6863      	ldr	r3, [r4, #4]
    2c08:	3310      	adds	r3, #16
    2c0a:	d107      	bne.n	2c1c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2c0c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2c10:	4808      	ldr	r0, [pc, #32]	; (2c34 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2c12:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2c14:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2c18:	f00b fb25 	bl	e266 <k_work_submit_to_queue>
	__asm__ volatile(
    2c1c:	f386 8811 	msr	BASEPRI, r6
    2c20:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2c24:	3d01      	subs	r5, #1
    2c26:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2c2a:	d1e4      	bne.n	2bf6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2c2c:	bd70      	pop	{r4, r5, r6, pc}
    2c2e:	bf00      	nop
    2c30:	20012d0c 	.word	0x20012d0c
    2c34:	20002490 	.word	0x20002490

00002c38 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2c38:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2c3a:	2500      	movs	r5, #0
    2c3c:	4c09      	ldr	r4, [pc, #36]	; (2c64 <usb_transfer_init+0x2c>)
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2c3e:	4e0a      	ldr	r6, [pc, #40]	; (2c68 <usb_transfer_init+0x30>)
    2c40:	4631      	mov	r1, r6
    2c42:	4620      	mov	r0, r4
    2c44:	f00b faf2 	bl	e22c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2c48:	2201      	movs	r2, #1
    2c4a:	f1a4 0010 	sub.w	r0, r4, #16
    2c4e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2c50:	3501      	adds	r5, #1
    2c52:	f00b faae 	bl	e1b2 <z_impl_k_sem_init>
    2c56:	2d04      	cmp	r5, #4
    2c58:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2c5c:	d1f0      	bne.n	2c40 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2c5e:	2000      	movs	r0, #0
    2c60:	bd70      	pop	{r4, r5, r6, pc}
    2c62:	bf00      	nop
    2c64:	20012d38 	.word	0x20012d38
    2c68:	0000296d 	.word	0x0000296d

00002c6c <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	4604      	mov	r4, r0
    2c70:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2c72:	7901      	ldrb	r1, [r0, #4]
    2c74:	4812      	ldr	r0, [pc, #72]	; (2cc0 <cdc_acm_class_handle_req+0x54>)
{
    2c76:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2c78:	f008 fb5a 	bl	b330 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    2c7c:	b1e8      	cbz	r0, 2cba <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    2c7e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2c82:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    2c84:	2a00      	cmp	r2, #0
    2c86:	db11      	blt.n	2cac <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    2c88:	2b20      	cmp	r3, #32
    2c8a:	d004      	beq.n	2c96 <cdc_acm_class_handle_req+0x2a>
    2c8c:	2b22      	cmp	r3, #34	; 0x22
    2c8e:	d009      	beq.n	2ca4 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    2c90:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c94:	e005      	b.n	2ca2 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    2c96:	2207      	movs	r2, #7
    2c98:	6829      	ldr	r1, [r5, #0]
    2c9a:	3810      	subs	r0, #16
    2c9c:	f008 fcfc 	bl	b698 <memcpy>
			return 0;
    2ca0:	2000      	movs	r0, #0
}
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    2ca4:	8863      	ldrh	r3, [r4, #2]
    2ca6:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    2caa:	e7f9      	b.n	2ca0 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    2cac:	2b21      	cmp	r3, #33	; 0x21
    2cae:	d1ef      	bne.n	2c90 <cdc_acm_class_handle_req+0x24>
			*len = sizeof(dev_data->line_coding);
    2cb0:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    2cb2:	3810      	subs	r0, #16
    2cb4:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    2cb6:	6033      	str	r3, [r6, #0]
			return 0;
    2cb8:	e7f2      	b.n	2ca0 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    2cba:	f06f 0012 	mvn.w	r0, #18
    2cbe:	e7f0      	b.n	2ca2 <cdc_acm_class_handle_req+0x36>
    2cc0:	20012e0c 	.word	0x20012e0c

00002cc4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2cc4:	4601      	mov	r1, r0
    2cc6:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2cc8:	4803      	ldr	r0, [pc, #12]	; (2cd8 <cdc_acm_int_in+0x14>)
    2cca:	f008 fb3e 	bl	b34a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2cce:	b110      	cbz	r0, 2cd6 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2cd0:	2301      	movs	r3, #1
    2cd2:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    2cd6:	bd08      	pop	{r3, pc}
    2cd8:	20012e0c 	.word	0x20012e0c

00002cdc <cdc_acm_irq_rx_enable>:
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;

	dev_data->rx_irq_ena = true;
    2cdc:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2cde:	6901      	ldr	r1, [r0, #16]
	dev_data->rx_irq_ena = true;
    2ce0:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    2ce4:	680b      	ldr	r3, [r1, #0]
    2ce6:	b133      	cbz	r3, 2cf6 <cdc_acm_irq_rx_enable+0x1a>
    2ce8:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    2cec:	b11b      	cbz	r3, 2cf6 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2cee:	4802      	ldr	r0, [pc, #8]	; (2cf8 <cdc_acm_irq_rx_enable+0x1c>)
    2cf0:	3108      	adds	r1, #8
    2cf2:	f00b bab8 	b.w	e266 <k_work_submit_to_queue>
	}
}
    2cf6:	4770      	bx	lr
    2cf8:	20002490 	.word	0x20002490

00002cfc <cdc_acm_irq_tx_enable>:
	dev_data->tx_irq_ena = true;
    2cfc:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2cfe:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2d00:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    2d04:	680b      	ldr	r3, [r1, #0]
    2d06:	b133      	cbz	r3, 2d16 <cdc_acm_irq_tx_enable+0x1a>
    2d08:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    2d0c:	b11b      	cbz	r3, 2d16 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2d0e:	4802      	ldr	r0, [pc, #8]	; (2d18 <cdc_acm_irq_tx_enable+0x1c>)
    2d10:	3108      	adds	r1, #8
    2d12:	f00b baa8 	b.w	e266 <k_work_submit_to_queue>
}
    2d16:	4770      	bx	lr
    2d18:	20002490 	.word	0x20002490

00002d1c <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
    2d1c:	2100      	movs	r1, #0
{
    2d1e:	4603      	mov	r3, r0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2d20:	4a0c      	ldr	r2, [pc, #48]	; (2d54 <cdc_acm_reset_port+0x38>)
	dev_data->tx_ready = false;
    2d22:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2d26:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
    2d28:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2d2c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    2d30:	8890      	ldrh	r0, [r2, #4]
    2d32:	7992      	ldrb	r2, [r2, #6]
    2d34:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    2d38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->line_state = 0;
    2d3c:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2d40:	2240      	movs	r2, #64	; 0x40
	dev_data->configured = false;
    2d42:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    2d46:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2d4a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    2d4e:	f008 bcae 	b.w	b6ae <memset>
    2d52:	bf00      	nop
    2d54:	0000eb00 	.word	0x0000eb00

00002d58 <cdc_acm_fifo_fill>:
{
    2d58:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2d5a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2d5c:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    2d60:	b188      	cbz	r0, 2d86 <cdc_acm_fifo_fill+0x2e>
    2d62:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    2d66:	b97b      	cbnz	r3, 2d88 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    2d68:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2d6c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    2d70:	f008 f9ba 	bl	b0e8 <ring_buf_put>
    2d74:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2d76:	2200      	movs	r2, #0
    2d78:	2300      	movs	r3, #0
    2d7a:	4804      	ldr	r0, [pc, #16]	; (2d8c <cdc_acm_fifo_fill+0x34>)
    2d7c:	f105 0118 	add.w	r1, r5, #24
    2d80:	f006 fce4 	bl	974c <k_work_schedule_for_queue>
	return wrote;
    2d84:	4620      	mov	r0, r4
}
    2d86:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2d88:	2000      	movs	r0, #0
    2d8a:	e7fc      	b.n	2d86 <cdc_acm_fifo_fill+0x2e>
    2d8c:	20002490 	.word	0x20002490

00002d90 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2d90:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2d92:	6904      	ldr	r4, [r0, #16]
{
    2d94:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2d98:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    2d9c:	b1a3      	cbz	r3, 2dc8 <cdc_acm_poll_out+0x38>
    2d9e:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    2da2:	b98b      	cbnz	r3, 2dc8 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2da4:	f10d 0107 	add.w	r1, sp, #7
    2da8:	2201      	movs	r2, #1
    2daa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    2dae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2db2:	f008 f999 	bl	b0e8 <ring_buf_put>
    2db6:	4601      	mov	r1, r0
    2db8:	b140      	cbz	r0, 2dcc <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    2dba:	2221      	movs	r2, #33	; 0x21
    2dbc:	2300      	movs	r3, #0
    2dbe:	480c      	ldr	r0, [pc, #48]	; (2df0 <cdc_acm_poll_out+0x60>)
    2dc0:	f104 0118 	add.w	r1, r4, #24
    2dc4:	f006 fcc2 	bl	974c <k_work_schedule_for_queue>
}
    2dc8:	b002      	add	sp, #8
    2dca:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2dcc:	2201      	movs	r2, #1
    2dce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2dd2:	f008 f9d9 	bl	b188 <ring_buf_get>
    2dd6:	2800      	cmp	r0, #0
    2dd8:	d0f6      	beq.n	2dc8 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2dda:	2201      	movs	r2, #1
    2ddc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2de0:	f10d 0107 	add.w	r1, sp, #7
    2de4:	f008 f980 	bl	b0e8 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2de8:	2800      	cmp	r0, #0
    2dea:	d1e6      	bne.n	2dba <cdc_acm_poll_out+0x2a>
    2dec:	e7ec      	b.n	2dc8 <cdc_acm_poll_out+0x38>
    2dee:	bf00      	nop
    2df0:	20002490 	.word	0x20002490

00002df4 <tx_work_handler>:
{
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    2df6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
    2dfa:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2dfc:	685b      	ldr	r3, [r3, #4]
{
    2dfe:	b085      	sub	sp, #20
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2e00:	6a1b      	ldr	r3, [r3, #32]
    2e02:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    2e04:	4638      	mov	r0, r7
    2e06:	f008 fab6 	bl	b376 <usb_transfer_is_busy>
    2e0a:	4606      	mov	r6, r0
    2e0c:	b9e0      	cbnz	r0, 2e48 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2e12:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    2e14:	a903      	add	r1, sp, #12
    2e16:	f008 f986 	bl	b126 <ring_buf_get_claim>
	if (!len) {
    2e1a:	4604      	mov	r4, r0
    2e1c:	b1a0      	cbz	r0, 2e48 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2e1e:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2e20:	f1a5 0318 	sub.w	r3, r5, #24
	dev_data->tx_ready = false;
    2e24:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2e28:	9301      	str	r3, [sp, #4]
    2e2a:	4b08      	ldr	r3, [pc, #32]	; (2e4c <tx_work_handler+0x58>)
		len -= 1;
    2e2c:	bf08      	it	eq
    2e2e:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2e32:	9903      	ldr	r1, [sp, #12]
    2e34:	9300      	str	r3, [sp, #0]
    2e36:	4622      	mov	r2, r4
    2e38:	2302      	movs	r3, #2
    2e3a:	4638      	mov	r0, r7
    2e3c:	f7ff fe48 	bl	2ad0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    2e40:	4621      	mov	r1, r4
    2e42:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    2e44:	f008 f98b 	bl	b15e <ring_buf_get_finish>
}
    2e48:	b005      	add	sp, #20
    2e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4c:	00002e51 	.word	0x00002e51

00002e50 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2e50:	2301      	movs	r3, #1
{
    2e52:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    2e54:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2e58:	6813      	ldr	r3, [r2, #0]
{
    2e5a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2e5c:	b13b      	cbz	r3, 2e6e <cdc_acm_write_cb+0x1e>
    2e5e:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    2e62:	b123      	cbz	r3, 2e6e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2e64:	480a      	ldr	r0, [pc, #40]	; (2e90 <cdc_acm_write_cb+0x40>)
    2e66:	f102 0108 	add.w	r1, r2, #8
    2e6a:	f00b f9fc 	bl	e266 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2e6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2e72:	689a      	ldr	r2, [r3, #8]
    2e74:	691b      	ldr	r3, [r3, #16]
    2e76:	429a      	cmp	r2, r3
    2e78:	d008      	beq.n	2e8c <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2e7a:	f104 0118 	add.w	r1, r4, #24
    2e7e:	2200      	movs	r2, #0
}
    2e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2e84:	2300      	movs	r3, #0
    2e86:	4802      	ldr	r0, [pc, #8]	; (2e90 <cdc_acm_write_cb+0x40>)
    2e88:	f006 bc60 	b.w	974c <k_work_schedule_for_queue>
}
    2e8c:	bd10      	pop	{r4, pc}
    2e8e:	bf00      	nop
    2e90:	20002490 	.word	0x20002490

00002e94 <cdc_acm_init>:
	parent->next = child;
    2e94:	2300      	movs	r3, #0
{
    2e96:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2e98:	6904      	ldr	r4, [r0, #16]
    2e9a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2e9e:	4b0c      	ldr	r3, [pc, #48]	; (2ed0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    2ea0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    2ea4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    2ea6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2eaa:	b969      	cbnz	r1, 2ec8 <cdc_acm_init+0x34>
	list->head = node;
    2eac:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2eb0:	f104 0008 	add.w	r0, r4, #8
    2eb4:	4907      	ldr	r1, [pc, #28]	; (2ed4 <cdc_acm_init+0x40>)
    2eb6:	f00b f9b9 	bl	e22c <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    2eba:	f104 0018 	add.w	r0, r4, #24
    2ebe:	4906      	ldr	r1, [pc, #24]	; (2ed8 <cdc_acm_init+0x44>)
    2ec0:	f00b f9e2 	bl	e288 <k_work_init_delayable>
}
    2ec4:	2000      	movs	r0, #0
    2ec6:	bd10      	pop	{r4, pc}
	parent->next = child;
    2ec8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2eca:	605a      	str	r2, [r3, #4]
}
    2ecc:	e7f0      	b.n	2eb0 <cdc_acm_init+0x1c>
    2ece:	bf00      	nop
    2ed0:	20012e0c 	.word	0x20012e0c
    2ed4:	0000b3a1 	.word	0x0000b3a1
    2ed8:	00002df5 	.word	0x00002df5

00002edc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    2edc:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    2ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2ee2:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2ee4:	6905      	ldr	r5, [r0, #16]
	notification.wIndex = 0U;
    2ee6:	f242 00a1 	movw	r0, #8353	; 0x20a1
static int cdc_acm_send_notification(const struct device *dev,
    2eea:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    2eec:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    2ef0:	2300      	movs	r3, #0
    2ef2:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2ef6:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    2ef8:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2efc:	220a      	movs	r2, #10
    2efe:	7900      	ldrb	r0, [r0, #4]
    2f00:	a901      	add	r1, sp, #4
    2f02:	f008 f9f2 	bl	b2ea <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2f06:	4c05      	ldr	r4, [pc, #20]	; (2f1c <cdc_acm_send_notification.isra.0+0x40>)
    2f08:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    2f0c:	b923      	cbnz	r3, 2f18 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    2f0e:	2001      	movs	r0, #1
    2f10:	f00b faf8 	bl	e504 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2f14:	3c01      	subs	r4, #1
    2f16:	d1f7      	bne.n	2f08 <cdc_acm_send_notification.isra.0+0x2c>
}
    2f18:	b005      	add	sp, #20
    2f1a:	bd30      	pop	{r4, r5, pc}
    2f1c:	000186a1 	.word	0x000186a1

00002f20 <cdc_acm_read_cb>:
{
    2f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2f22:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2f24:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    2f28:	1e0a      	subs	r2, r1, #0
{
    2f2a:	4605      	mov	r5, r0
	if (size <= 0) {
    2f2c:	dd1f      	ble.n	2f6e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2f2e:	4631      	mov	r1, r6
    2f30:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    2f34:	f008 f8d8 	bl	b0e8 <ring_buf_put>
	dev_data->rx_ready = true;
    2f38:	2301      	movs	r3, #1
    2f3a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2f3e:	6823      	ldr	r3, [r4, #0]
    2f40:	b13b      	cbz	r3, 2f52 <cdc_acm_read_cb+0x32>
    2f42:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2f46:	b123      	cbz	r3, 2f52 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2f48:	480e      	ldr	r0, [pc, #56]	; (2f84 <cdc_acm_read_cb+0x64>)
    2f4a:	f104 0108 	add.w	r1, r4, #8
    2f4e:	f00b f98a 	bl	e266 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    2f52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    2f56:	684b      	ldr	r3, [r1, #4]
    2f58:	694a      	ldr	r2, [r1, #20]
    2f5a:	1a9a      	subs	r2, r3, r2
    2f5c:	69cb      	ldr	r3, [r1, #28]
    2f5e:	1a9b      	subs	r3, r3, r2
    2f60:	2b3f      	cmp	r3, #63	; 0x3f
    2f62:	d804      	bhi.n	2f6e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    2f64:	2301      	movs	r3, #1
    2f66:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    2f6a:	b002      	add	sp, #8
    2f6c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    2f6e:	4b06      	ldr	r3, [pc, #24]	; (2f88 <cdc_acm_read_cb+0x68>)
    2f70:	2240      	movs	r2, #64	; 0x40
    2f72:	9300      	str	r3, [sp, #0]
    2f74:	4631      	mov	r1, r6
    2f76:	2301      	movs	r3, #1
    2f78:	4628      	mov	r0, r5
    2f7a:	9401      	str	r4, [sp, #4]
    2f7c:	f7ff fda8 	bl	2ad0 <usb_transfer>
    2f80:	e7f3      	b.n	2f6a <cdc_acm_read_cb+0x4a>
    2f82:	bf00      	nop
    2f84:	20002490 	.word	0x20002490
    2f88:	00002f21 	.word	0x00002f21

00002f8c <cdc_acm_dev_status_cb>:
{
    2f8c:	b538      	push	{r3, r4, r5, lr}
    2f8e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2f90:	4601      	mov	r1, r0
    2f92:	481e      	ldr	r0, [pc, #120]	; (300c <cdc_acm_dev_status_cb+0x80>)
    2f94:	f008 f9c1 	bl	b31a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2f98:	4604      	mov	r4, r0
    2f9a:	b380      	cbz	r0, 2ffe <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2f9c:	4602      	mov	r2, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2f9e:	f852 39a4 	ldr.w	r3, [r2], #-164
	switch (status) {
    2fa2:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    2fa4:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    2fa6:	2905      	cmp	r1, #5
    2fa8:	d829      	bhi.n	2ffe <cdc_acm_dev_status_cb+0x72>
    2faa:	e8df f001 	tbb	[pc, r1]
    2fae:	2820      	.short	0x2820
    2fb0:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    2fb4:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    2fb8:	b931      	cbnz	r1, 2fc8 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2fba:	6a1b      	ldr	r3, [r3, #32]
    2fbc:	7b18      	ldrb	r0, [r3, #12]
    2fbe:	f7ff ffaf 	bl	2f20 <cdc_acm_read_cb>
			dev_data->configured = true;
    2fc2:	2301      	movs	r3, #1
    2fc4:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    2fc8:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    2fcc:	b9bb      	cbnz	r3, 2ffe <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    2fce:	2301      	movs	r3, #1
    2fd0:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    2fd4:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    2fd8:	b18b      	cbz	r3, 2ffe <cdc_acm_dev_status_cb+0x72>
    2fda:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    2fde:	b173      	cbz	r3, 2ffe <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2fe0:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    2fe4:	480a      	ldr	r0, [pc, #40]	; (3010 <cdc_acm_dev_status_cb+0x84>)
}
    2fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2fea:	f00b b93c 	b.w	e266 <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
    2fee:	4610      	mov	r0, r2
}
    2ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    2ff4:	f7ff be92 	b.w	2d1c <cdc_acm_reset_port>
		dev_data->suspended = true;
    2ff8:	2301      	movs	r3, #1
			dev_data->suspended = false;
    2ffa:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    2ffe:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    3000:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    3004:	2b00      	cmp	r3, #0
    3006:	d0fa      	beq.n	2ffe <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    3008:	2300      	movs	r3, #0
    300a:	e7f6      	b.n	2ffa <cdc_acm_dev_status_cb+0x6e>
    300c:	20012e0c 	.word	0x20012e0c
    3010:	20002490 	.word	0x20002490

00003014 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    3014:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    3016:	2400      	movs	r4, #0
    3018:	4d08      	ldr	r5, [pc, #32]	; (303c <z_usb_work_q_init+0x28>)
    301a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    301e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3022:	4628      	mov	r0, r5
    3024:	4906      	ldr	r1, [pc, #24]	; (3040 <z_usb_work_q_init+0x2c>)
    3026:	9400      	str	r4, [sp, #0]
    3028:	f006 fb58 	bl	96dc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    302c:	4905      	ldr	r1, [pc, #20]	; (3044 <z_usb_work_q_init+0x30>)
    302e:	4628      	mov	r0, r5
    3030:	f00b f826 	bl	e080 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3034:	4620      	mov	r0, r4
    3036:	b003      	add	sp, #12
    3038:	bd30      	pop	{r4, r5, pc}
    303a:	bf00      	nop
    303c:	20002490 	.word	0x20002490
    3040:	20056898 	.word	0x20056898
    3044:	0000f314 	.word	0x0000f314

00003048 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3048:	4801      	ldr	r0, [pc, #4]	; (3050 <nrf_cc3xx_platform_abort_init+0x8>)
    304a:	f007 b8dd 	b.w	a208 <nrf_cc3xx_platform_set_abort>
    304e:	bf00      	nop
    3050:	0000ec78 	.word	0x0000ec78

00003054 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3054:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3056:	4604      	mov	r4, r0
    3058:	b918      	cbnz	r0, 3062 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    305a:	4b0f      	ldr	r3, [pc, #60]	; (3098 <mutex_free_platform+0x44>)
    305c:	480f      	ldr	r0, [pc, #60]	; (309c <mutex_free_platform+0x48>)
    305e:	685b      	ldr	r3, [r3, #4]
    3060:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3062:	6861      	ldr	r1, [r4, #4]
    3064:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3068:	d00f      	beq.n	308a <mutex_free_platform+0x36>
    306a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    306e:	d00c      	beq.n	308a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3070:	4d0b      	ldr	r5, [pc, #44]	; (30a0 <mutex_free_platform+0x4c>)
    3072:	42a9      	cmp	r1, r5
    3074:	d009      	beq.n	308a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3076:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    307a:	d007      	beq.n	308c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    307c:	4621      	mov	r1, r4
    307e:	4809      	ldr	r0, [pc, #36]	; (30a4 <mutex_free_platform+0x50>)
    3080:	f00a ffcf 	bl	e022 <k_mem_slab_free>
        mutex->mutex = NULL;
    3084:	2300      	movs	r3, #0
    3086:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3088:	6065      	str	r5, [r4, #4]
}
    308a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    308c:	2214      	movs	r2, #20
    308e:	6820      	ldr	r0, [r4, #0]
    3090:	f008 fb0d 	bl	b6ae <memset>
    3094:	e7f8      	b.n	3088 <mutex_free_platform+0x34>
    3096:	bf00      	nop
    3098:	20002214 	.word	0x20002214
    309c:	0000f31d 	.word	0x0000f31d
    30a0:	a95c5f2c 	.word	0xa95c5f2c
    30a4:	20013314 	.word	0x20013314

000030a8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    30a8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    30aa:	b360      	cbz	r0, 3106 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    30ac:	6843      	ldr	r3, [r0, #4]
    30ae:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    30b2:	d00e      	beq.n	30d2 <mutex_lock_platform+0x2a>
    30b4:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    30b8:	d018      	beq.n	30ec <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    30ba:	4a14      	ldr	r2, [pc, #80]	; (310c <mutex_lock_platform+0x64>)
    30bc:	4293      	cmp	r3, r2
    30be:	d020      	beq.n	3102 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    30c0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    30c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30ca:	f006 f8e5 	bl	9298 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    30ce:	b158      	cbz	r0, 30e8 <mutex_lock_platform+0x40>
    30d0:	e015      	b.n	30fe <mutex_lock_platform+0x56>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    30d2:	2201      	movs	r2, #1
    30d4:	6803      	ldr	r3, [r0, #0]
    30d6:	e8d3 1fef 	ldaex	r1, [r3]
    30da:	2900      	cmp	r1, #0
    30dc:	d103      	bne.n	30e6 <mutex_lock_platform+0x3e>
    30de:	e8c3 2fe0 	stlex	r0, r2, [r3]
    30e2:	2800      	cmp	r0, #0
    30e4:	d1f7      	bne.n	30d6 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30e6:	d10a      	bne.n	30fe <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    30e8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    30ea:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    30ec:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <mutex_lock_platform+0x68>)
    30f0:	781b      	ldrb	r3, [r3, #0]
    30f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    30f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30fa:	2b00      	cmp	r3, #0
    30fc:	d0f4      	beq.n	30e8 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30fe:	4805      	ldr	r0, [pc, #20]	; (3114 <mutex_lock_platform+0x6c>)
    3100:	e7f3      	b.n	30ea <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3102:	4805      	ldr	r0, [pc, #20]	; (3118 <mutex_lock_platform+0x70>)
    3104:	e7f1      	b.n	30ea <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3106:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    310a:	e7ee      	b.n	30ea <mutex_lock_platform+0x42>
    310c:	a95c5f2c 	.word	0xa95c5f2c
    3110:	50030000 	.word	0x50030000
    3114:	ffff8fe9 	.word	0xffff8fe9
    3118:	ffff8fea 	.word	0xffff8fea

0000311c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    311c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    311e:	b320      	cbz	r0, 316a <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3120:	6843      	ldr	r3, [r0, #4]
    3122:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3126:	d009      	beq.n	313c <mutex_unlock_platform+0x20>
    3128:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    312c:	d013      	beq.n	3156 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    312e:	4a11      	ldr	r2, [pc, #68]	; (3174 <mutex_unlock_platform+0x58>)
    3130:	4293      	cmp	r3, r2
    3132:	d01d      	beq.n	3170 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3134:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3136:	f006 f929 	bl	938c <z_impl_k_mutex_unlock>
    313a:	e014      	b.n	3166 <mutex_unlock_platform+0x4a>
    313c:	2200      	movs	r2, #0
    313e:	6803      	ldr	r3, [r0, #0]
    3140:	e8d3 1fef 	ldaex	r1, [r3]
    3144:	2901      	cmp	r1, #1
    3146:	d103      	bne.n	3150 <mutex_unlock_platform+0x34>
    3148:	e8c3 2fe0 	stlex	r0, r2, [r3]
    314c:	2800      	cmp	r0, #0
    314e:	d1f7      	bne.n	3140 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3150:	d009      	beq.n	3166 <mutex_unlock_platform+0x4a>
    3152:	4809      	ldr	r0, [pc, #36]	; (3178 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    3154:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3156:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3158:	6803      	ldr	r3, [r0, #0]
    315a:	4a08      	ldr	r2, [pc, #32]	; (317c <mutex_unlock_platform+0x60>)
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3162:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3166:	2000      	movs	r0, #0
    3168:	e7f4      	b.n	3154 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    316a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    316e:	e7f1      	b.n	3154 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3170:	4803      	ldr	r0, [pc, #12]	; (3180 <mutex_unlock_platform+0x64>)
    3172:	e7ef      	b.n	3154 <mutex_unlock_platform+0x38>
    3174:	a95c5f2c 	.word	0xa95c5f2c
    3178:	ffff8fe9 	.word	0xffff8fe9
    317c:	50030000 	.word	0x50030000
    3180:	ffff8fea 	.word	0xffff8fea

00003184 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3184:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3186:	4604      	mov	r4, r0
    3188:	b918      	cbnz	r0, 3192 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    318a:	4b1d      	ldr	r3, [pc, #116]	; (3200 <mutex_init_platform+0x7c>)
    318c:	481d      	ldr	r0, [pc, #116]	; (3204 <mutex_init_platform+0x80>)
    318e:	685b      	ldr	r3, [r3, #4]
    3190:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3192:	6863      	ldr	r3, [r4, #4]
    3194:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3198:	d02f      	beq.n	31fa <mutex_init_platform+0x76>
    319a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    319e:	d02c      	beq.n	31fa <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    31a0:	4a19      	ldr	r2, [pc, #100]	; (3208 <mutex_init_platform+0x84>)
    31a2:	4293      	cmp	r3, r2
    31a4:	d119      	bne.n	31da <mutex_init_platform+0x56>
    31a6:	6823      	ldr	r3, [r4, #0]
    31a8:	bb03      	cbnz	r3, 31ec <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    31aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    31ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31b2:	4621      	mov	r1, r4
    31b4:	4815      	ldr	r0, [pc, #84]	; (320c <mutex_init_platform+0x88>)
    31b6:	f005 ff89 	bl	90cc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    31ba:	b908      	cbnz	r0, 31c0 <mutex_init_platform+0x3c>
    31bc:	6823      	ldr	r3, [r4, #0]
    31be:	b91b      	cbnz	r3, 31c8 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    31c0:	4b0f      	ldr	r3, [pc, #60]	; (3200 <mutex_init_platform+0x7c>)
    31c2:	4813      	ldr	r0, [pc, #76]	; (3210 <mutex_init_platform+0x8c>)
    31c4:	685b      	ldr	r3, [r3, #4]
    31c6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    31c8:	2214      	movs	r2, #20
    31ca:	2100      	movs	r1, #0
    31cc:	6820      	ldr	r0, [r4, #0]
    31ce:	f008 fa6e 	bl	b6ae <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    31d2:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    31d6:	6063      	str	r3, [r4, #4]
    31d8:	e008      	b.n	31ec <mutex_init_platform+0x68>
    switch(flags){
    31da:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    31de:	d80d      	bhi.n	31fc <mutex_init_platform+0x78>
    31e0:	2b3a      	cmp	r3, #58	; 0x3a
    31e2:	d003      	beq.n	31ec <mutex_init_platform+0x68>
    31e4:	f640 62ba 	movw	r2, #3770	; 0xeba
    31e8:	4293      	cmp	r3, r2
    31ea:	d1de      	bne.n	31aa <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    31ec:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    31ee:	f00a ff60 	bl	e0b2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    31f2:	6863      	ldr	r3, [r4, #4]
    31f4:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    31f8:	6063      	str	r3, [r4, #4]
}
    31fa:	bd10      	pop	{r4, pc}
    switch(flags){
    31fc:	4a05      	ldr	r2, [pc, #20]	; (3214 <mutex_init_platform+0x90>)
    31fe:	e7f3      	b.n	31e8 <mutex_init_platform+0x64>
    3200:	20002214 	.word	0x20002214
    3204:	0000f31d 	.word	0x0000f31d
    3208:	a95c5f2c 	.word	0xa95c5f2c
    320c:	20013314 	.word	0x20013314
    3210:	0000f343 	.word	0x0000f343
    3214:	3a00003a 	.word	0x3a00003a

00003218 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3218:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    321a:	4906      	ldr	r1, [pc, #24]	; (3234 <nrf_cc3xx_platform_mutex_init+0x1c>)
    321c:	2340      	movs	r3, #64	; 0x40
    321e:	2214      	movs	r2, #20
    3220:	4805      	ldr	r0, [pc, #20]	; (3238 <nrf_cc3xx_platform_mutex_init+0x20>)
    3222:	f00a fef0 	bl	e006 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    322a:	4904      	ldr	r1, [pc, #16]	; (323c <nrf_cc3xx_platform_mutex_init+0x24>)
    322c:	4804      	ldr	r0, [pc, #16]	; (3240 <nrf_cc3xx_platform_mutex_init+0x28>)
    322e:	f007 b85d 	b.w	a2ec <nrf_cc3xx_platform_set_mutexes>
    3232:	bf00      	nop
    3234:	20012e14 	.word	0x20012e14
    3238:	20013314 	.word	0x20013314
    323c:	0000ec80 	.word	0x0000ec80
    3240:	0000ec94 	.word	0x0000ec94

00003244 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    3244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    3246:	4e22      	ldr	r6, [pc, #136]	; (32d0 <boot_uart_fifo_callback+0x8c>)
    3248:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    324a:	6883      	ldr	r3, [r0, #8]
    324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    324e:	b103      	cbz	r3, 3252 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    3250:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    3252:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    3254:	6883      	ldr	r3, [r0, #8]
    3256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3258:	2b00      	cmp	r3, #0
    325a:	d131      	bne.n	32c0 <boot_uart_fifo_callback+0x7c>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    325c:	4c1d      	ldr	r4, [pc, #116]	; (32d4 <boot_uart_fifo_callback+0x90>)
	return list->head;
    325e:	4d1e      	ldr	r5, [pc, #120]	; (32d8 <boot_uart_fifo_callback+0x94>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    3260:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    3262:	6883      	ldr	r3, [r0, #8]
    3264:	699b      	ldr	r3, [r3, #24]
    3266:	2b00      	cmp	r3, #0
    3268:	d02d      	beq.n	32c6 <boot_uart_fifo_callback+0x82>
	return api->fifo_read(dev, rx_data, size);
    326a:	2201      	movs	r2, #1
    326c:	f10d 0107 	add.w	r1, sp, #7
    3270:	4798      	blx	r3
		if (rx != 1) {
    3272:	2801      	cmp	r0, #1
    3274:	d127      	bne.n	32c6 <boot_uart_fifo_callback+0x82>
		if (!cmd) {
    3276:	6823      	ldr	r3, [r4, #0]
    3278:	b943      	cbnz	r3, 328c <boot_uart_fifo_callback+0x48>
    327a:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    327c:	b31b      	cbz	r3, 32c6 <boot_uart_fifo_callback+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    327e:	6869      	ldr	r1, [r5, #4]
	return node->next;
    3280:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3282:	428b      	cmp	r3, r1
	list->head = node;
    3284:	602a      	str	r2, [r5, #0]
	list->tail = node;
    3286:	bf08      	it	eq
    3288:	606a      	streq	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    328a:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    328c:	4a13      	ldr	r2, [pc, #76]	; (32dc <boot_uart_fifo_callback+0x98>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    328e:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    3292:	8811      	ldrh	r1, [r2, #0]
    3294:	297f      	cmp	r1, #127	; 0x7f
    3296:	d804      	bhi.n	32a2 <boot_uart_fifo_callback+0x5e>
			cmd->line[cur++] = byte;
    3298:	6823      	ldr	r3, [r4, #0]
    329a:	1c4f      	adds	r7, r1, #1
    329c:	440b      	add	r3, r1
    329e:	8017      	strh	r7, [r2, #0]
    32a0:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    32a2:	280a      	cmp	r0, #10
    32a4:	d1dc      	bne.n	3260 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    32a6:	2000      	movs	r0, #0
			cmd->len = cur;
    32a8:	6823      	ldr	r3, [r4, #0]
    32aa:	8811      	ldrh	r1, [r2, #0]
    32ac:	6018      	str	r0, [r3, #0]
    32ae:	6059      	str	r1, [r3, #4]
	return list->tail;
    32b0:	490b      	ldr	r1, [pc, #44]	; (32e0 <boot_uart_fifo_callback+0x9c>)
    32b2:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    32b4:	b94d      	cbnz	r5, 32ca <boot_uart_fifo_callback+0x86>
	list->head = node;
    32b6:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    32ba:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    32bc:	6020      	str	r0, [r4, #0]
    32be:	e7ce      	b.n	325e <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    32c0:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    32c2:	2800      	cmp	r0, #0
    32c4:	d1ca      	bne.n	325c <boot_uart_fifo_callback+0x18>
		}
	}
}
    32c6:	b003      	add	sp, #12
    32c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    32ca:	602b      	str	r3, [r5, #0]
	list->tail = node;
    32cc:	604b      	str	r3, [r1, #4]
}
    32ce:	e7f4      	b.n	32ba <boot_uart_fifo_callback+0x76>
    32d0:	20013788 	.word	0x20013788
    32d4:	20013330 	.word	0x20013330
    32d8:	20013340 	.word	0x20013340
    32dc:	20014630 	.word	0x20014630
    32e0:	20013338 	.word	0x20013338

000032e4 <console_out>:
{
    32e4:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    32e6:	4b04      	ldr	r3, [pc, #16]	; (32f8 <console_out+0x14>)
{
    32e8:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    32ea:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    32ec:	6883      	ldr	r3, [r0, #8]
    32ee:	b2e1      	uxtb	r1, r4
    32f0:	685b      	ldr	r3, [r3, #4]
    32f2:	4798      	blx	r3
}
    32f4:	4620      	mov	r0, r4
    32f6:	bd10      	pop	{r4, pc}
    32f8:	20013788 	.word	0x20013788

000032fc <console_read>:
{
    32fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32fe:	4605      	mov	r5, r0
    3300:	4616      	mov	r6, r2
    3302:	4608      	mov	r0, r1
	__asm__ volatile(
    3304:	f04f 0320 	mov.w	r3, #32
    3308:	f3ef 8711 	mrs	r7, BASEPRI
    330c:	f383 8812 	msr	BASEPRI_MAX, r3
    3310:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3314:	491b      	ldr	r1, [pc, #108]	; (3384 <console_read+0x88>)
    3316:	680b      	ldr	r3, [r1, #0]
    3318:	b14b      	cbz	r3, 332e <console_read+0x32>
	return list->tail;
    331a:	4c1b      	ldr	r4, [pc, #108]	; (3388 <console_read+0x8c>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    331c:	6862      	ldr	r2, [r4, #4]
    331e:	429a      	cmp	r2, r3
    3320:	d005      	beq.n	332e <console_read+0x32>
	parent->next = child;
    3322:	2200      	movs	r2, #0
    3324:	601a      	str	r2, [r3, #0]
	return list->tail;
    3326:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    3328:	b962      	cbnz	r2, 3344 <console_read+0x48>
	list->head = node;
    332a:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    332e:	4a17      	ldr	r2, [pc, #92]	; (338c <console_read+0x90>)
    3330:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    3332:	b953      	cbnz	r3, 334a <console_read+0x4e>
	__asm__ volatile(
    3334:	f387 8811 	msr	BASEPRI, r7
    3338:	f3bf 8f6f 	isb	sy
		return 0;
    333c:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    333e:	600b      	str	r3, [r1, #0]
		*newline = 0;
    3340:	6033      	str	r3, [r6, #0]
}
    3342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3344:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3346:	6063      	str	r3, [r4, #4]
}
    3348:	e7f1      	b.n	332e <console_read+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    334a:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return node->next;
    334e:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3350:	4563      	cmp	r3, ip
	list->head = node;
    3352:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3354:	bf08      	it	eq
    3356:	6054      	streq	r4, [r2, #4]
    3358:	f387 8811 	msr	BASEPRI, r7
    335c:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    3360:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    3362:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    3364:	42a0      	cmp	r0, r4
		len = str_size - 1;
    3366:	bfd8      	it	le
    3368:	f100 34ff 	addle.w	r4, r0, #4294967295	; 0xffffffff
	*line = cmd->line;
    336c:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    3370:	4622      	mov	r2, r4
    3372:	4628      	mov	r0, r5
    3374:	f008 f990 	bl	b698 <memcpy>
	str[len] = '\0';
    3378:	2300      	movs	r3, #0
	return len + 1;
    337a:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    337c:	552b      	strb	r3, [r5, r4]
	return len + 1;
    337e:	2301      	movs	r3, #1
    3380:	e7de      	b.n	3340 <console_read+0x44>
    3382:	bf00      	nop
    3384:	20013334 	.word	0x20013334
    3388:	20013340 	.word	0x20013340
    338c:	20013338 	.word	0x20013338

00003390 <boot_console_init>:
	list->head = NULL;
    3390:	2300      	movs	r3, #0
{
    3392:	b537      	push	{r0, r1, r2, r4, r5, lr}
	parent->next = child;
    3394:	461c      	mov	r4, r3
	list->head = NULL;
    3396:	4923      	ldr	r1, [pc, #140]	; (3424 <boot_console_init+0x94>)
    3398:	4a23      	ldr	r2, [pc, #140]	; (3428 <boot_console_init+0x98>)
	list->tail = NULL;
    339a:	e9c1 3300 	strd	r3, r3, [r1]
    339e:	e9c2 3300 	strd	r3, r3, [r2]
	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    33a2:	4a22      	ldr	r2, [pc, #136]	; (342c <boot_console_init+0x9c>)
	return list->tail;
    33a4:	6848      	ldr	r0, [r1, #4]
	parent->next = child;
    33a6:	6014      	str	r4, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    33a8:	b988      	cbnz	r0, 33ce <boot_console_init+0x3e>
	list->head = node;
    33aa:	e9c1 2200 	strd	r2, r2, [r1]
    33ae:	3301      	adds	r3, #1
    33b0:	2b08      	cmp	r3, #8
    33b2:	f102 0288 	add.w	r2, r2, #136	; 0x88
    33b6:	d1f5      	bne.n	33a4 <boot_console_init+0x14>
#else
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
#endif

#elif defined(CONFIG_BOOT_SERIAL_CDC_ACM)
        uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
    33b8:	4d1d      	ldr	r5, [pc, #116]	; (3430 <boot_console_init+0xa0>)
    33ba:	481e      	ldr	r0, [pc, #120]	; (3434 <boot_console_init+0xa4>)
    33bc:	6028      	str	r0, [r5, #0]
    33be:	f00a fdd6 	bl	df6e <z_device_is_ready>
#else
#error No serial recovery device selected
#endif


	if (!device_is_ready(uart_dev)) {
    33c2:	b938      	cbnz	r0, 33d4 <boot_console_init+0x44>
		return (-1);
    33c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    33c8:	4620      	mov	r0, r4
    33ca:	b003      	add	sp, #12
    33cc:	bd30      	pop	{r4, r5, pc}
	parent->next = child;
    33ce:	6002      	str	r2, [r0, #0]
	list->tail = node;
    33d0:	604a      	str	r2, [r1, #4]
}
    33d2:	e7ec      	b.n	33ae <boot_console_init+0x1e>
	}

#if CONFIG_BOOT_SERIAL_CDC_ACM
	int rc = usb_enable(NULL);
    33d4:	2000      	movs	r0, #0
    33d6:	f7ff f915 	bl	2604 <usb_enable>
	if (rc) {
    33da:	4604      	mov	r4, r0
    33dc:	2800      	cmp	r0, #0
    33de:	d1f1      	bne.n	33c4 <boot_console_init+0x34>
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    33e0:	6828      	ldr	r0, [r5, #0]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    33e2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    33e4:	b123      	cbz	r3, 33f0 <boot_console_init+0x60>
    33e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    33e8:	b113      	cbz	r3, 33f0 <boot_console_init+0x60>
		api->irq_callback_set(dev, cb, user_data);
    33ea:	4622      	mov	r2, r4
    33ec:	4912      	ldr	r1, [pc, #72]	; (3438 <boot_console_init+0xa8>)
    33ee:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    33f0:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    33f2:	6883      	ldr	r3, [r0, #8]
    33f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    33f6:	b10b      	cbz	r3, 33fc <boot_console_init+0x6c>
	return api->irq_rx_ready(dev);
    33f8:	4798      	blx	r3
    33fa:	b148      	cbz	r0, 3410 <boot_console_init+0x80>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    33fc:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    33fe:	6883      	ldr	r3, [r0, #8]
    3400:	699b      	ldr	r3, [r3, #24]
    3402:	2b00      	cmp	r3, #0
    3404:	d0fa      	beq.n	33fc <boot_console_init+0x6c>
	return api->fifo_read(dev, rx_data, size);
    3406:	2201      	movs	r2, #1
    3408:	f10d 0107 	add.w	r1, sp, #7
    340c:	4798      	blx	r3
    340e:	e7f4      	b.n	33fa <boot_console_init+0x6a>
			;
		}
	}

	cur = 0;
    3410:	2200      	movs	r2, #0
    3412:	4b0a      	ldr	r3, [pc, #40]	; (343c <boot_console_init+0xac>)

	uart_irq_rx_enable(uart_dev);
    3414:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    3416:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    3418:	6883      	ldr	r3, [r0, #8]
    341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    341c:	2b00      	cmp	r3, #0
    341e:	d0d3      	beq.n	33c8 <boot_console_init+0x38>
		api->irq_rx_enable(dev);
    3420:	4798      	blx	r3
	return boot_uart_fifo_init();
    3422:	e7d1      	b.n	33c8 <boot_console_init+0x38>
    3424:	20013340 	.word	0x20013340
    3428:	20013338 	.word	0x20013338
    342c:	20013348 	.word	0x20013348
    3430:	20013788 	.word	0x20013788
    3434:	0000e778 	.word	0x0000e778
    3438:	00003245 	.word	0x00003245
    343c:	20014630 	.word	0x20014630

00003440 <boot_serial_output>:
{
    char *data;
    int len, out;
    uint16_t crc;
    uint16_t totlen;
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    3440:	f241 4304 	movw	r3, #5124	; 0x1404
{
    3444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3448:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    char pkt_cont[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    344c:	f8ad 300c 	strh.w	r3, [sp, #12]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    3450:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    3454:	2500      	movs	r5, #0
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    3456:	f8ad 3010 	strh.w	r3, [sp, #16]
    bs_hdr->nh_op++;
    345a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 3568 <boot_serial_output+0x128>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    345e:	4b43      	ldr	r3, [pc, #268]	; (356c <boot_serial_output+0x12c>)
    bs_hdr->nh_op++;
    3460:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	4e42      	ldr	r6, [pc, #264]	; (3570 <boot_serial_output+0x130>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    3468:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    346a:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    346e:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    3470:	704d      	strb	r5, [r1, #1]
    bs_hdr->nh_op++;
    3472:	3301      	adds	r3, #1
    3474:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    3476:	fa98 f398 	rev16.w	r3, r8
    347a:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    347c:	888b      	ldrh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    347e:	4628      	mov	r0, r5
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    3480:	ba5b      	rev16	r3, r3
    3482:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    3484:	f007 fdea 	bl	b05c <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    3488:	4631      	mov	r1, r6
    348a:	4642      	mov	r2, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    348c:	f8ad 0014 	strh.w	r0, [sp, #20]
    crc =  crc16_itu_t(crc, data, len);
    3490:	f007 fde4 	bl	b05c <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    3494:	2702      	movs	r7, #2
    3496:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    349a:	ba40      	rev16	r0, r0
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    349c:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    34a0:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    34a2:	2202      	movs	r2, #2
    crc = htons(crc);
    34a4:	f8ad 0014 	strh.w	r0, [sp, #20]
    memcpy(buf, &totlen, sizeof(totlen));
    34a8:	f10d 0116 	add.w	r1, sp, #22
    34ac:	a807      	add	r0, sp, #28
    totlen = htons(totlen);
    34ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    memcpy(buf, &totlen, sizeof(totlen));
    34b2:	f008 f8f1 	bl	b698 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    34b6:	2208      	movs	r2, #8
    34b8:	f8d9 1000 	ldr.w	r1, [r9]
    34bc:	f10d 001e 	add.w	r0, sp, #30
    totlen = sizeof(totlen);
    34c0:	f8ad 7016 	strh.w	r7, [sp, #22]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    34c4:	f008 f8e8 	bl	b698 <memcpy>
    totlen += sizeof(*bs_hdr);
    34c8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    memcpy(&buf[totlen], data, len);
    34cc:	ab07      	add	r3, sp, #28
    totlen += sizeof(*bs_hdr);
    34ce:	3008      	adds	r0, #8
    34d0:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    34d2:	4631      	mov	r1, r6
    34d4:	4642      	mov	r2, r8
    totlen += sizeof(*bs_hdr);
    34d6:	f8ad 0016 	strh.w	r0, [sp, #22]
    memcpy(&buf[totlen], data, len);
    34da:	4418      	add	r0, r3
    34dc:	f008 f8dc 	bl	b698 <memcpy>
    totlen += len;
    34e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    34e4:	463a      	mov	r2, r7
    totlen += len;
    34e6:	441c      	add	r4, r3
    34e8:	b2a0      	uxth	r0, r4
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif

    out = 0;
    34ea:	462c      	mov	r4, r5
    memcpy(&buf[totlen], &crc, sizeof(crc));
    34ec:	ab07      	add	r3, sp, #28
    totlen += len;
    34ee:	f8ad 0016 	strh.w	r0, [sp, #22]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    34f2:	a905      	add	r1, sp, #20
    34f4:	4418      	add	r0, r3
    34f6:	f008 f8cf 	bl	b698 <memcpy>
    totlen += sizeof(crc);
    34fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    34fe:	f240 11bd 	movw	r1, #445	; 0x1bd
    totlen += sizeof(crc);
    3502:	443b      	add	r3, r7
    3504:	b29b      	uxth	r3, r3
    3506:	f8ad 3016 	strh.w	r3, [sp, #22]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    350a:	9300      	str	r3, [sp, #0]
    350c:	aa06      	add	r2, sp, #24
    350e:	ab07      	add	r3, sp, #28
    3510:	a85a      	add	r0, sp, #360	; 0x168
    3512:	f7fd ff95 	bl	1440 <base64_encode>
    totlen = enc_len;
    3516:	9b06      	ldr	r3, [sp, #24]
    while (out < totlen) {
        if (out == 0) {
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3518:	4e16      	ldr	r6, [pc, #88]	; (3574 <boot_serial_output+0x134>)
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
        boot_uf->write(&encoded_buf[out], len);

        out += len;

        boot_uf->write("\n", 1);
    351a:	4f17      	ldr	r7, [pc, #92]	; (3578 <boot_serial_output+0x138>)
    totlen = enc_len;
    351c:	f8ad 3016 	strh.w	r3, [sp, #22]
    while (out < totlen) {
    3520:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3524:	42a3      	cmp	r3, r4
    3526:	dc03      	bgt.n	3530 <boot_serial_output+0xf0>
    }

    BOOT_LOG_INF("TX");
}
    3528:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
    352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3530:	6833      	ldr	r3, [r6, #0]
    3532:	2102      	movs	r1, #2
    3534:	685b      	ldr	r3, [r3, #4]
        if (out == 0) {
    3536:	b9a4      	cbnz	r4, 3562 <boot_serial_output+0x122>
            boot_uf->write(pkt_start, sizeof(pkt_start));
    3538:	a804      	add	r0, sp, #16
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    353a:	4798      	blx	r3
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    353c:	f8bd 5016 	ldrh.w	r5, [sp, #22]
        boot_uf->write(&encoded_buf[out], len);
    3540:	6833      	ldr	r3, [r6, #0]
        len = MIN(BOOT_SERIAL_FRAME_MTU, totlen - out);
    3542:	1b2d      	subs	r5, r5, r4
    3544:	2d7c      	cmp	r5, #124	; 0x7c
    3546:	bfa8      	it	ge
    3548:	257c      	movge	r5, #124	; 0x7c
        boot_uf->write(&encoded_buf[out], len);
    354a:	aa5a      	add	r2, sp, #360	; 0x168
    354c:	1910      	adds	r0, r2, r4
    354e:	4629      	mov	r1, r5
    3550:	685b      	ldr	r3, [r3, #4]
    3552:	4798      	blx	r3
        boot_uf->write("\n", 1);
    3554:	6833      	ldr	r3, [r6, #0]
    3556:	2101      	movs	r1, #1
    3558:	4638      	mov	r0, r7
    355a:	685b      	ldr	r3, [r3, #4]
        out += len;
    355c:	442c      	add	r4, r5
        boot_uf->write("\n", 1);
    355e:	4798      	blx	r3
    3560:	e7de      	b.n	3520 <boot_serial_output+0xe0>
            boot_uf->write(pkt_cont, sizeof(pkt_cont));
    3562:	a803      	add	r0, sp, #12
    3564:	e7e9      	b.n	353a <boot_serial_output+0xfa>
    3566:	bf00      	nop
    3568:	200137d0 	.word	0x200137d0
    356c:	200137a0 	.word	0x200137a0
    3570:	20015f46 	.word	0x20015f46
    3574:	200137d4 	.word	0x200137d4
    3578:	0000f370 	.word	0x0000f370

0000357c <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    357c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    357e:	680c      	ldr	r4, [r1, #0]
    3580:	4f16      	ldr	r7, [pc, #88]	; (35dc <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3582:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3584:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    3586:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    3588:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    358c:	9000      	str	r0, [sp, #0]
    358e:	4b14      	ldr	r3, [pc, #80]	; (35e0 <boot_serial_in_dec.constprop.0+0x64>)
    3590:	1938      	adds	r0, r7, r4
    3592:	aa03      	add	r2, sp, #12
    3594:	3101      	adds	r1, #1
    3596:	f7fd ffd1 	bl	153c <base64_decode>
    if (err) {
    359a:	4604      	mov	r4, r0
    359c:	b9d0      	cbnz	r0, 35d4 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    359e:	682b      	ldr	r3, [r5, #0]
    35a0:	9a03      	ldr	r2, [sp, #12]
    35a2:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    35a4:	2b02      	cmp	r3, #2
    *out_off += rc;
    35a6:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    35a8:	d911      	bls.n	35ce <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    35aa:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    35ac:	3b02      	subs	r3, #2
    35ae:	ba76      	rev16	r6, r6
    35b0:	b2b6      	uxth	r6, r6
    35b2:	429e      	cmp	r6, r3
    35b4:	d10b      	bne.n	35ce <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    35b6:	4632      	mov	r2, r6
    35b8:	1cb9      	adds	r1, r7, #2
    35ba:	f007 fd4f 	bl	b05c <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~esp_crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    35be:	b930      	cbnz	r0, 35ce <boot_serial_in_dec.constprop.0+0x52>
    35c0:	2e02      	cmp	r6, #2
    35c2:	d904      	bls.n	35ce <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    35c4:	682b      	ldr	r3, [r5, #0]
    35c6:	1e9a      	subs	r2, r3, #2
    35c8:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    35ca:	54fc      	strb	r4, [r7, r3]

    return 1;
    35cc:	2401      	movs	r4, #1
}
    35ce:	4620      	mov	r0, r4
    35d0:	b005      	add	sp, #20
    35d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    35d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    35d8:	e7f9      	b.n	35ce <boot_serial_in_dec.constprop.0+0x52>
    35da:	bf00      	nop
    35dc:	20016087 	.word	0x20016087
    35e0:	2001648a 	.word	0x2001648a

000035e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    35e4:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    35e6:	e9cd 0100 	strd	r0, r1, [sp]
    35ea:	4669      	mov	r1, sp
    35ec:	4802      	ldr	r0, [pc, #8]	; (35f8 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    35ee:	f00a fcaa 	bl	df46 <zcbor_tstr_encode>
}
    35f2:	b003      	add	sp, #12
    35f4:	f85d fb04 	ldr.w	pc, [sp], #4
    35f8:	200137a0 	.word	0x200137a0

000035fc <bs_rc_rsp>:
{
    35fc:	b538      	push	{r3, r4, r5, lr}
    35fe:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    3600:	4c0a      	ldr	r4, [pc, #40]	; (362c <bs_rc_rsp+0x30>)
    3602:	210a      	movs	r1, #10
    3604:	4620      	mov	r0, r4
    3606:	f00a fca5 	bl	df54 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    360a:	2102      	movs	r1, #2
    360c:	4808      	ldr	r0, [pc, #32]	; (3630 <bs_rc_rsp+0x34>)
    360e:	f7ff ffe9 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    3612:	4629      	mov	r1, r5
    3614:	4620      	mov	r0, r4
    3616:	f00a fc7d 	bl	df14 <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    361a:	4620      	mov	r0, r4
    361c:	210a      	movs	r1, #10
    361e:	f00a fca1 	bl	df64 <zcbor_map_end_encode>
}
    3622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    3626:	f7ff bf0b 	b.w	3440 <boot_serial_output>
    362a:	bf00      	nop
    362c:	200137a0 	.word	0x200137a0
    3630:	0000f0c3 	.word	0x0000f0c3

00003634 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    3634:	2300      	movs	r3, #0
{
    3636:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    3638:	4a05      	ldr	r2, [pc, #20]	; (3650 <reset_cbor_state+0x1c>)
    363a:	9300      	str	r3, [sp, #0]
    363c:	2102      	movs	r1, #2
    363e:	f502 73a0 	add.w	r3, r2, #320	; 0x140
    3642:	4804      	ldr	r0, [pc, #16]	; (3654 <reset_cbor_state+0x20>)
    3644:	f00a fc90 	bl	df68 <zcbor_new_encode_state>
}
    3648:	b003      	add	sp, #12
    364a:	f85d fb04 	ldr.w	pc, [sp], #4
    364e:	bf00      	nop
    3650:	20015f46 	.word	0x20015f46
    3654:	200137a0 	.word	0x200137a0

00003658 <boot_serial_input>:
{
    3658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    365c:	2907      	cmp	r1, #7
{
    365e:	4604      	mov	r4, r0
    3660:	b0b9      	sub	sp, #228	; 0xe4
    if (len < sizeof(*hdr) ||
    3662:	f240 8104 	bls.w	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
    3666:	7803      	ldrb	r3, [r0, #0]
    3668:	f013 08fd 	ands.w	r8, r3, #253	; 0xfd
    366c:	f040 80ff 	bne.w	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    3670:	8843      	ldrh	r3, [r0, #2]
    3672:	f1a1 0508 	sub.w	r5, r1, #8
    3676:	ba5b      	rev16	r3, r3
    3678:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    367a:	42ab      	cmp	r3, r5
    367c:	f0c0 80f7 	bcc.w	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
    bs_hdr = hdr;
    3680:	4bad      	ldr	r3, [pc, #692]	; (3938 <FIH_LABEL_FIH_CALL_END_866+0x1dc>)
    buf += sizeof(*hdr);
    3682:	f100 0708 	add.w	r7, r0, #8
    bs_hdr = hdr;
    3686:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    3688:	8883      	ldrh	r3, [r0, #4]
    368a:	ba5b      	rev16	r3, r3
    368c:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    368e:	f7ff ffd1 	bl	3634 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    3692:	88a6      	ldrh	r6, [r4, #4]
    3694:	2e01      	cmp	r6, #1
    3696:	f040 822a 	bne.w	3aee <FIH_LABEL_FIH_CALL_END_866+0x392>
        switch (hdr->nh_id) {
    369a:	79e4      	ldrb	r4, [r4, #7]
    369c:	b144      	cbz	r4, 36b0 <boot_serial_input+0x58>
    369e:	2c01      	cmp	r4, #1
    36a0:	f000 80e8 	beq.w	3874 <FIH_LABEL_FIH_CALL_END_866+0x118>
            bs_rc_rsp(MGMT_ERR_ENOTSUP);
    36a4:	2008      	movs	r0, #8
}
    36a6:	b039      	add	sp, #228	; 0xe4
    36a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            bs_rc_rsp(0);
    36ac:	f7ff bfa6 	b.w	35fc <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    36b0:	4631      	mov	r1, r6
    36b2:	48a2      	ldr	r0, [pc, #648]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    36b4:	f00a fc4e 	bl	df54 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    36b8:	2106      	movs	r1, #6
    36ba:	48a1      	ldr	r0, [pc, #644]	; (3940 <FIH_LABEL_FIH_CALL_END_866+0x1e4>)
    36bc:	f7ff ff92 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    36c0:	2105      	movs	r1, #5
    36c2:	489e      	ldr	r0, [pc, #632]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    36c4:	f00a fc42 	bl	df4c <zcbor_list_start_encode>
            FIH_DECLARE(fih_rc, FIH_FAILURE);
    36c8:	f8df 9278 	ldr.w	r9, [pc, #632]	; 3944 <FIH_LABEL_FIH_CALL_END_866+0x1e8>
            if (hdr.ih_magic == IMAGE_MAGIC)
    36cc:	f8df a278 	ldr.w	sl, [pc, #632]	; 3948 <FIH_LABEL_FIH_CALL_END_866+0x1ec>
        for (slot = 0; slot < 2; slot++) {
    36d0:	2600      	movs	r6, #0
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
    36d2:	f8df 8278 	ldr.w	r8, [pc, #632]	; 394c <FIH_LABEL_FIH_CALL_END_866+0x1f0>
    36d6:	e000      	b.n	36da <boot_serial_input+0x82>
        for (slot = 0; slot < 2; slot++) {
    36d8:	2601      	movs	r6, #1
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    36da:	4631      	mov	r1, r6
    36dc:	4620      	mov	r0, r4
    36de:	f006 fee5 	bl	a4ac <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    36e2:	a908      	add	r1, sp, #32
    36e4:	b2c0      	uxtb	r0, r0
    36e6:	f7fe fb77 	bl	1dd8 <flash_area_open>
    36ea:	4605      	mov	r5, r0
    36ec:	2800      	cmp	r0, #0
    36ee:	f040 8093 	bne.w	3818 <FIH_LABEL_FIH_CALL_END_866+0xbc>
            int rc = BOOT_HOOK_CALL(boot_read_image_header_hook,
    36f2:	4631      	mov	r1, r6
    36f4:	4620      	mov	r0, r4
    36f6:	aa10      	add	r2, sp, #64	; 0x40
    36f8:	f002 fec0 	bl	647c <boot_read_image_header_hook>
            if (rc == BOOT_HOOK_REGULAR)
    36fc:	2801      	cmp	r0, #1
    36fe:	d105      	bne.n	370c <boot_serial_input+0xb4>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    3700:	2320      	movs	r3, #32
    3702:	4629      	mov	r1, r5
    3704:	9808      	ldr	r0, [sp, #32]
    3706:	aa10      	add	r2, sp, #64	; 0x40
    3708:	f007 fd72 	bl	b1f0 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    370c:	9b10      	ldr	r3, [sp, #64]	; 0x40
            FIH_DECLARE(fih_rc, FIH_FAILURE);
    370e:	f8d9 5000 	ldr.w	r5, [r9]
            if (hdr.ih_magic == IMAGE_MAGIC)
    3712:	4553      	cmp	r3, sl
    3714:	d122      	bne.n	375c <FIH_LABEL_FIH_CALL_END_866>

00003716 <FIH_LABEL_FIH_CALL_START_798>:
                BOOT_HOOK_CALL_FIH(boot_image_check_hook,
    3716:	f7fd f981 	bl	a1c <fih_cfi_get_and_increment>
    371a:	4631      	mov	r1, r6
    371c:	4607      	mov	r7, r0
    371e:	4620      	mov	r0, r4
    3720:	f002 fec2 	bl	64a8 <boot_image_check_hook>
    3724:	4605      	mov	r5, r0
    3726:	4638      	mov	r0, r7
    3728:	f7fd f988 	bl	a3c <fih_cfi_validate>

0000372c <FIH_LABEL_FIH_CALL_END_820>:
                if (FIH_EQ(fih_rc, FIH_BOOT_HOOK_REGULAR))
    372c:	4b88      	ldr	r3, [pc, #544]	; (3950 <FIH_LABEL_FIH_CALL_END_866+0x1f4>)
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	429d      	cmp	r5, r3
    3732:	d113      	bne.n	375c <FIH_LABEL_FIH_CALL_END_866>

00003734 <FIH_LABEL_FIH_CALL_START_835>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    3734:	f7fd f972 	bl	a1c <fih_cfi_get_and_increment>
    3738:	2340      	movs	r3, #64	; 0x40
    373a:	2100      	movs	r1, #0
    373c:	9301      	str	r3, [sp, #4]
    373e:	ab28      	add	r3, sp, #160	; 0xa0
    3740:	4607      	mov	r7, r0
    3742:	e9cd 1103 	strd	r1, r1, [sp, #12]
    3746:	4608      	mov	r0, r1
    3748:	9102      	str	r1, [sp, #8]
    374a:	9300      	str	r3, [sp, #0]
    374c:	aa10      	add	r2, sp, #64	; 0x40
    374e:	9b08      	ldr	r3, [sp, #32]
    3750:	f7fc ff5a 	bl	608 <bootutil_img_validate>
    3754:	4605      	mov	r5, r0
    3756:	4638      	mov	r0, r7
    3758:	f7fd f970 	bl	a3c <fih_cfi_validate>

0000375c <FIH_LABEL_FIH_CALL_END_866>:
    int rc;

    /* Manifest data is concatenated to the end of the image.
     * It is encoded in TLV format.
     */
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    375c:	2300      	movs	r3, #0
            rc = boot_serial_get_hash(&hdr, fap, hash);
    375e:	9f08      	ldr	r7, [sp, #32]
    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3760:	9300      	str	r3, [sp, #0]
    3762:	463a      	mov	r2, r7
    3764:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3768:	a910      	add	r1, sp, #64	; 0x40
    376a:	a80a      	add	r0, sp, #40	; 0x28
    376c:	f006 fece 	bl	a50c <bootutil_tlv_iter_begin>
    if (rc) {
    3770:	2800      	cmp	r0, #0
    3772:	d057      	beq.n	3824 <FIH_LABEL_FIH_CALL_END_866+0xc8>
        return -1;
    3774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            flash_area_close(fap);
    3778:	9808      	ldr	r0, [sp, #32]
    377a:	f007 fd38 	bl	b1ee <flash_area_close>
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
    377e:	f8d8 3000 	ldr.w	r3, [r8]
    3782:	42ab      	cmp	r3, r5
    3784:	d148      	bne.n	3818 <FIH_LABEL_FIH_CALL_END_866+0xbc>
            zcbor_map_start_encode(cbor_state, 20);
    3786:	2114      	movs	r1, #20
    3788:	486c      	ldr	r0, [pc, #432]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    378a:	f00a fbe3 	bl	df54 <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "image");
    378e:	2105      	movs	r1, #5
    3790:	4870      	ldr	r0, [pc, #448]	; (3954 <FIH_LABEL_FIH_CALL_END_866+0x1f8>)
    3792:	f7ff ff27 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, image_index);
    3796:	4621      	mov	r1, r4
    3798:	4868      	ldr	r0, [pc, #416]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    379a:	f00a fbc5 	bl	df28 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    379e:	2104      	movs	r1, #4
    37a0:	486d      	ldr	r0, [pc, #436]	; (3958 <FIH_LABEL_FIH_CALL_END_866+0x1fc>)
    37a2:	f7ff ff1f 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    37a6:	4631      	mov	r1, r6
    37a8:	4864      	ldr	r0, [pc, #400]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    37aa:	f00a fbbd 	bl	df28 <zcbor_uint32_put>
            if (rc == 0) {
    37ae:	b95f      	cbnz	r7, 37c8 <FIH_LABEL_FIH_CALL_END_866+0x6c>
                zcbor_tstr_put_lit_cast(cbor_state, "hash");
    37b0:	2104      	movs	r1, #4
    37b2:	486a      	ldr	r0, [pc, #424]	; (395c <FIH_LABEL_FIH_CALL_END_866+0x200>)
    37b4:	f7ff ff16 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    37b8:	ab18      	add	r3, sp, #96	; 0x60
    37ba:	930a      	str	r3, [sp, #40]	; 0x28
    37bc:	2320      	movs	r3, #32
    37be:	485f      	ldr	r0, [pc, #380]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    37c0:	a90a      	add	r1, sp, #40	; 0x28
    37c2:	930b      	str	r3, [sp, #44]	; 0x2c
    37c4:	f00a fbbc 	bl	df40 <zcbor_bstr_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    37c8:	2107      	movs	r1, #7
    37ca:	4865      	ldr	r0, [pc, #404]	; (3960 <FIH_LABEL_FIH_CALL_END_866+0x204>)
    37cc:	f7ff ff0a 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   len = snprintf(dst, maxlen, "%hu.%hu.%hu", (uint16_t)ver->iv_major,
    37d0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    37d4:	2140      	movs	r1, #64	; 0x40
    37d6:	9301      	str	r3, [sp, #4]
    37d8:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
    37dc:	4a61      	ldr	r2, [pc, #388]	; (3964 <FIH_LABEL_FIH_CALL_END_866+0x208>)
    37de:	9300      	str	r3, [sp, #0]
    37e0:	a828      	add	r0, sp, #160	; 0xa0
    37e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    37e6:	f000 fdfb 	bl	43e0 <snprintf>
   if (ver->iv_build_num != 0 && len > 0 && len < maxlen) {
    37ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    37ec:	b14b      	cbz	r3, 3802 <FIH_LABEL_FIH_CALL_END_866+0xa6>
    37ee:	1e42      	subs	r2, r0, #1
    37f0:	2a3e      	cmp	r2, #62	; 0x3e
    37f2:	d806      	bhi.n	3802 <FIH_LABEL_FIH_CALL_END_866+0xa6>
      snprintf(&dst[len], (maxlen - len), "%u", ver->iv_build_num);
    37f4:	ad28      	add	r5, sp, #160	; 0xa0
    37f6:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    37fa:	4a5b      	ldr	r2, [pc, #364]	; (3968 <FIH_LABEL_FIH_CALL_END_866+0x20c>)
    37fc:	4428      	add	r0, r5
    37fe:	f000 fdef 	bl	43e0 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    3802:	a828      	add	r0, sp, #160	; 0xa0
    3804:	f007 ff1a 	bl	b63c <strlen>
    3808:	4601      	mov	r1, r0
    380a:	a828      	add	r0, sp, #160	; 0xa0
    380c:	f7ff feea 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    3810:	2114      	movs	r1, #20
    3812:	484a      	ldr	r0, [pc, #296]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    3814:	f00a fba6 	bl	df64 <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    3818:	2e00      	cmp	r6, #0
    381a:	f43f af5d 	beq.w	36d8 <boot_serial_input+0x80>
    IMAGES_ITER(image_index) {
    381e:	b9e4      	cbnz	r4, 385a <FIH_LABEL_FIH_CALL_END_866+0xfe>
    3820:	4634      	mov	r4, r6
    3822:	e755      	b.n	36d0 <boot_serial_input+0x78>
    }

    /* Traverse through the TLV area to find the image hash TLV. */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &offset, &len, &type);
    3824:	f10d 031e 	add.w	r3, sp, #30
    3828:	aa07      	add	r2, sp, #28
    382a:	a909      	add	r1, sp, #36	; 0x24
    382c:	a80a      	add	r0, sp, #40	; 0x28
    382e:	f006 febb 	bl	a5a8 <bootutil_tlv_iter_next>
        if (rc < 0) {
            return -1;
        } else if (rc > 0) {
    3832:	2800      	cmp	r0, #0
    3834:	d19e      	bne.n	3774 <FIH_LABEL_FIH_CALL_END_866+0x18>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    3836:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    383a:	2b10      	cmp	r3, #16
    383c:	d1f2      	bne.n	3824 <FIH_LABEL_FIH_CALL_END_866+0xc8>
            /* Get the image's hash value from the manifest section. */
            if (len != 32) {
    383e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3842:	2b20      	cmp	r3, #32
    3844:	d196      	bne.n	3774 <FIH_LABEL_FIH_CALL_END_866+0x18>
                return -1;
            }

            rc = flash_area_read(fap, offset, hash, len);
    3846:	4638      	mov	r0, r7
    3848:	9909      	ldr	r1, [sp, #36]	; 0x24
    384a:	aa18      	add	r2, sp, #96	; 0x60
    384c:	f007 fcd0 	bl	b1f0 <flash_area_read>
            if (rc) {
    3850:	1e07      	subs	r7, r0, #0
    3852:	bf18      	it	ne
    3854:	2701      	movne	r7, #1
    3856:	427f      	negs	r7, r7
    3858:	e78e      	b.n	3778 <FIH_LABEL_FIH_CALL_END_866+0x1c>
    zcbor_list_end_encode(cbor_state, 5);
    385a:	2105      	movs	r1, #5
    385c:	4837      	ldr	r0, [pc, #220]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    385e:	f00a fb7d 	bl	df5c <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    3862:	2101      	movs	r1, #1
    3864:	4835      	ldr	r0, [pc, #212]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    3866:	f00a fb7d 	bl	df64 <zcbor_map_end_encode>
    boot_serial_output();
    386a:	f7ff fde9 	bl	3440 <boot_serial_output>
}
    386e:	b039      	add	sp, #228	; 0xe4
    3870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3874:	4638      	mov	r0, r7
    3876:	4629      	mov	r1, r5
    3878:	ab10      	add	r3, sp, #64	; 0x40
    387a:	aa18      	add	r2, sp, #96	; 0x60
    const struct flash_area *fap = NULL;
    387c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3880:	f000 fa58 	bl	3d34 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    3884:	4607      	mov	r7, r0
    3886:	b300      	cbz	r0, 38ca <FIH_LABEL_FIH_CALL_END_866+0x16e>
        rc = MGMT_ERR_EINVAL;
    3888:	2403      	movs	r4, #3
    zcbor_map_start_encode(cbor_state, 10);
    388a:	210a      	movs	r1, #10
    388c:	482b      	ldr	r0, [pc, #172]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    388e:	f00a fb61 	bl	df54 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    3892:	2102      	movs	r1, #2
    3894:	4835      	ldr	r0, [pc, #212]	; (396c <FIH_LABEL_FIH_CALL_END_866+0x210>)
    3896:	f7ff fea5 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    389a:	4621      	mov	r1, r4
    389c:	4827      	ldr	r0, [pc, #156]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    389e:	f00a fb39 	bl	df14 <zcbor_int32_put>
    if (rc == 0) {
    38a2:	b944      	cbnz	r4, 38b6 <FIH_LABEL_FIH_CALL_END_866+0x15a>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    38a4:	2103      	movs	r1, #3
    38a6:	4832      	ldr	r0, [pc, #200]	; (3970 <FIH_LABEL_FIH_CALL_END_866+0x214>)
    38a8:	f7ff fe9c 	bl	35e4 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    38ac:	4b31      	ldr	r3, [pc, #196]	; (3974 <FIH_LABEL_FIH_CALL_END_866+0x218>)
    38ae:	4823      	ldr	r0, [pc, #140]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    38b0:	6819      	ldr	r1, [r3, #0]
    38b2:	f00a fb39 	bl	df28 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    38b6:	210a      	movs	r1, #10
    38b8:	4820      	ldr	r0, [pc, #128]	; (393c <FIH_LABEL_FIH_CALL_END_866+0x1e0>)
    38ba:	f00a fb53 	bl	df64 <zcbor_map_end_encode>
    boot_serial_output();
    38be:	f7ff fdbf 	bl	3440 <boot_serial_output>
    flash_area_close(fap);
    38c2:	980a      	ldr	r0, [sp, #40]	; 0x28
    38c4:	f007 fc93 	bl	b1ee <flash_area_close>
}
    38c8:	e7d1      	b.n	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    38ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38cc:	429d      	cmp	r5, r3
    38ce:	d1db      	bne.n	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    38d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for (int i = 0; i < upload._Upload_members_count; i++) {
    38d4:	463a      	mov	r2, r7
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    38d6:	4655      	mov	r5, sl
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    38d8:	46b9      	mov	r9, r7
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    38da:	46b8      	mov	r8, r7
    38dc:	9827      	ldr	r0, [sp, #156]	; 0x9c
    38de:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    38e0:	4282      	cmp	r2, r0
    38e2:	d122      	bne.n	392a <FIH_LABEL_FIH_CALL_END_866+0x1ce>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    38e4:	1c6b      	adds	r3, r5, #1
    38e6:	d0cf      	beq.n	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    38e8:	f1b8 0f00 	cmp.w	r8, #0
    38ec:	d0cc      	beq.n	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    rc = flash_area_open(flash_area_id_from_direct_image(img_num), &fap);
    38ee:	4638      	mov	r0, r7
    38f0:	f7fc fe34 	bl	55c <flash_area_id_from_direct_image>
    38f4:	a90a      	add	r1, sp, #40	; 0x28
    38f6:	b2c0      	uxtb	r0, r0
    38f8:	f7fe fa6e 	bl	1dd8 <flash_area_open>
    if (rc) {
    38fc:	4604      	mov	r4, r0
    38fe:	2800      	cmp	r0, #0
    3900:	d1c2      	bne.n	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    if (img_chunk_off == 0) {
    3902:	4e1c      	ldr	r6, [pc, #112]	; (3974 <FIH_LABEL_FIH_CALL_END_866+0x218>)
    3904:	2d00      	cmp	r5, #0
    3906:	f040 8084 	bne.w	3a12 <FIH_LABEL_FIH_CALL_END_866+0x2b6>
        const size_t area_size = flash_area_get_size(fap);
    390a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        curr_off = 0;
    390c:	6030      	str	r0, [r6, #0]
        if (flash_area_get_sector(fap, boot_status_off(fap), &status_sector)) {
    390e:	4628      	mov	r0, r5
	return (uint32_t)fa->fa_size;
    3910:	f8d5 b008 	ldr.w	fp, [r5, #8]
    3914:	f006 fe99 	bl	a64a <boot_status_off>
    3918:	4a17      	ldr	r2, [pc, #92]	; (3978 <FIH_LABEL_FIH_CALL_END_866+0x21c>)
    391a:	4601      	mov	r1, r0
    391c:	4628      	mov	r0, r5
    391e:	f006 fddc 	bl	a4da <flash_area_get_sector>
    3922:	2800      	cmp	r0, #0
    3924:	d036      	beq.n	3994 <FIH_LABEL_FIH_CALL_END_866+0x238>
            rc = MGMT_ERR_EUNKNOWN;
    3926:	2401      	movs	r4, #1
    3928:	e7af      	b.n	388a <FIH_LABEL_FIH_CALL_END_866+0x12e>
        switch(member->_Member_choice) {
    392a:	7a19      	ldrb	r1, [r3, #8]
    392c:	2903      	cmp	r1, #3
    392e:	d826      	bhi.n	397e <FIH_LABEL_FIH_CALL_END_866+0x222>
    3930:	e8df f001 	tbb	[pc, r1]
    3934:	2e2b2824 	.word	0x2e2b2824
    3938:	200137d0 	.word	0x200137d0
    393c:	200137a0 	.word	0x200137a0
    3940:	0000f372 	.word	0x0000f372
    3944:	200020b8 	.word	0x200020b8
    3948:	96f3b83d 	.word	0x96f3b83d
    394c:	200020bc 	.word	0x200020bc
    3950:	200020b0 	.word	0x200020b0
    3954:	0000f379 	.word	0x0000f379
    3958:	0000f37f 	.word	0x0000f37f
    395c:	0000f384 	.word	0x0000f384
    3960:	0000f389 	.word	0x0000f389
    3964:	0000f391 	.word	0x0000f391
    3968:	0000f39d 	.word	0x0000f39d
    396c:	0000f0c3 	.word	0x0000f0c3
    3970:	0000f3a0 	.word	0x0000f3a0
    3974:	2001379c 	.word	0x2001379c
    3978:	20013794 	.word	0x20013794
                img_num = member->_Member_image;
    397c:	681f      	ldr	r7, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    397e:	3201      	adds	r2, #1
    3980:	330c      	adds	r3, #12
    3982:	e7ad      	b.n	38e0 <FIH_LABEL_FIH_CALL_END_866+0x184>
                img_chunk_len = member->_Member_data.len;
    3984:	e9d3 8900 	ldrd	r8, r9, [r3]
                break;
    3988:	e7f9      	b.n	397e <FIH_LABEL_FIH_CALL_END_866+0x222>
                img_size_tmp = member->_Member_len;
    398a:	f8d3 a000 	ldr.w	sl, [r3]
                break;
    398e:	e7f6      	b.n	397e <FIH_LABEL_FIH_CALL_END_866+0x222>
                img_chunk_off = member->_Member_off;
    3990:	681d      	ldr	r5, [r3, #0]
                break;
    3992:	e7f4      	b.n	397e <FIH_LABEL_FIH_CALL_END_866+0x222>
        if (img_size_tmp > area_size) {
    3994:	45d3      	cmp	fp, sl
    3996:	f4ff af77 	bcc.w	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
        not_yet_erased = 0;
    399a:	4b6b      	ldr	r3, [pc, #428]	; (3b48 <FIH_LABEL_FIH_CALL_END_866+0x3ec>)
    399c:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    399e:	4b6b      	ldr	r3, [pc, #428]	; (3b4c <FIH_LABEL_FIH_CALL_END_866+0x3f0>)
    39a0:	f8c3 a000 	str.w	sl, [r3]
                                 curr_off + img_chunk_len - 1);
    39a4:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    39a6:	4d68      	ldr	r5, [pc, #416]	; (3b48 <FIH_LABEL_FIH_CALL_END_866+0x3ec>)
                                 curr_off + img_chunk_len - 1);
    39a8:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    39aa:	6829      	ldr	r1, [r5, #0]
    39ac:	980a      	ldr	r0, [sp, #40]	; 0x28
    39ae:	444a      	add	r2, r9
    39b0:	f007 fe10 	bl	b5d4 <erase_range>
    if (not_yet_erased < 0) {
    39b4:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    39b6:	6028      	str	r0, [r5, #0]
    if (not_yet_erased < 0) {
    39b8:	f6ff af66 	blt.w	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    39bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    39be:	f007 fc55 	bl	b26c <flash_area_align>
    39c2:	fbb9 f3f0 	udiv	r3, r9, r0
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    39c6:	f8df a184 	ldr.w	sl, [pc, #388]	; 3b4c <FIH_LABEL_FIH_CALL_END_866+0x3f0>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    39ca:	fb03 9010 	mls	r0, r3, r0, r9
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    39ce:	6833      	ldr	r3, [r6, #0]
    39d0:	f8da 2000 	ldr.w	r2, [sl]
    39d4:	444b      	add	r3, r9
    img_chunk_len -= rem_bytes;
    39d6:	b2c5      	uxtb	r5, r0
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    39d8:	4293      	cmp	r3, r2
    39da:	bf38      	it	cc
    39dc:	2000      	movcc	r0, #0
    39de:	fa5f fb80 	uxtb.w	fp, r0
    if (flash_area_align(fap) > 1 &&
    39e2:	980a      	ldr	r0, [sp, #40]	; 0x28
    39e4:	f007 fc42 	bl	b26c <flash_area_align>
    39e8:	2801      	cmp	r0, #1
    img_chunk_len -= rem_bytes;
    39ea:	eba9 0505 	sub.w	r5, r9, r5
    if (flash_area_align(fap) > 1 &&
    39ee:	d906      	bls.n	39fe <FIH_LABEL_FIH_CALL_END_866+0x2a2>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    39f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    39f2:	f007 fc3b 	bl	b26c <flash_area_align>
    39f6:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    39f8:	ea18 0f00 	tst.w	r8, r0
    39fc:	d154      	bne.n	3aa8 <FIH_LABEL_FIH_CALL_END_866+0x34c>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    39fe:	462b      	mov	r3, r5
    3a00:	4642      	mov	r2, r8
    3a02:	6831      	ldr	r1, [r6, #0]
    3a04:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a06:	f007 fc08 	bl	b21a <flash_area_write>
    if (rc == 0 && rem_bytes) {
    3a0a:	2800      	cmp	r0, #0
    3a0c:	f47f af3c 	bne.w	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    3a10:	e02e      	b.n	3a70 <FIH_LABEL_FIH_CALL_END_866+0x314>
    } else if (img_chunk_off != curr_off) {
    3a12:	6833      	ldr	r3, [r6, #0]
    3a14:	42ab      	cmp	r3, r5
    3a16:	f47f af38 	bne.w	388a <FIH_LABEL_FIH_CALL_END_866+0x12e>
    } else if (curr_off + img_chunk_len > img_size) {
    3a1a:	4b4c      	ldr	r3, [pc, #304]	; (3b4c <FIH_LABEL_FIH_CALL_END_866+0x3f0>)
    3a1c:	444d      	add	r5, r9
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	429d      	cmp	r5, r3
    3a22:	d9bf      	bls.n	39a4 <FIH_LABEL_FIH_CALL_END_866+0x248>
    3a24:	e730      	b.n	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
            if (write_size > img_chunk_len) {
    3a26:	45a9      	cmp	r9, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    3a28:	980a      	ldr	r0, [sp, #40]	; 0x28
                write_size = img_chunk_len;
    3a2a:	bf88      	it	hi
    3a2c:	fa5f f985 	uxtbhi.w	r9, r5
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    3a30:	f007 fc23 	bl	b27a <flash_area_erased_val>
    3a34:	2240      	movs	r2, #64	; 0x40
    3a36:	4601      	mov	r1, r0
    3a38:	a828      	add	r0, sp, #160	; 0xa0
    3a3a:	f007 fe38 	bl	b6ae <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    3a3e:	464a      	mov	r2, r9
    3a40:	4641      	mov	r1, r8
    3a42:	a828      	add	r0, sp, #160	; 0xa0
    3a44:	f007 fe28 	bl	b698 <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    3a48:	464b      	mov	r3, r9
    3a4a:	6831      	ldr	r1, [r6, #0]
    3a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a4e:	aa28      	add	r2, sp, #160	; 0xa0
    3a50:	f007 fbe3 	bl	b21a <flash_area_write>
            if (rc != 0) {
    3a54:	b108      	cbz	r0, 3a5a <FIH_LABEL_FIH_CALL_END_866+0x2fe>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    3a56:	4604      	mov	r4, r0
            if (rc) {
    3a58:	e717      	b.n	388a <FIH_LABEL_FIH_CALL_END_866+0x12e>
            curr_off += write_size;
    3a5a:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    3a5c:	44c8      	add	r8, r9
            curr_off += write_size;
    3a5e:	444b      	add	r3, r9
    3a60:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    3a62:	eba5 0509 	sub.w	r5, r5, r9
        while (img_chunk_len >= flash_area_align(fap)) {
    3a66:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a68:	f007 fc00 	bl	b26c <flash_area_align>
    3a6c:	4285      	cmp	r5, r0
    3a6e:	d2da      	bcs.n	3a26 <FIH_LABEL_FIH_CALL_END_866+0x2ca>
    if (rc == 0 && rem_bytes) {
    3a70:	f1bb 0f00 	cmp.w	fp, #0
    3a74:	d11b      	bne.n	3aae <FIH_LABEL_FIH_CALL_END_866+0x352>
        curr_off += img_chunk_len + rem_bytes;
    3a76:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    3a78:	f8da 2000 	ldr.w	r2, [sl]
        curr_off += img_chunk_len + rem_bytes;
    3a7c:	445b      	add	r3, fp
    3a7e:	442b      	add	r3, r5
        if (curr_off == img_size) {
    3a80:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    3a82:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    3a84:	f47f af01 	bne.w	388a <FIH_LABEL_FIH_CALL_END_866+0x12e>
	return fs->fs_off;
    3a88:	4b31      	ldr	r3, [pc, #196]	; (3b50 <FIH_LABEL_FIH_CALL_END_866+0x3f4>)
            if (erase_range(fap, start, start) < 0) {
    3a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	4611      	mov	r1, r2
    3a90:	f007 fda0 	bl	b5d4 <erase_range>
    3a94:	2800      	cmp	r0, #0
    3a96:	f6ff af46 	blt.w	3926 <FIH_LABEL_FIH_CALL_END_866+0x1ca>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    3a9a:	4638      	mov	r0, r7
    3a9c:	f8da 2000 	ldr.w	r2, [sl]
    3aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
    3aa2:	f008 f9be 	bl	be22 <boot_serial_uploaded_hook>
    3aa6:	e7d6      	b.n	3a56 <FIH_LABEL_FIH_CALL_END_866+0x2fa>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    3aa8:	f04f 0940 	mov.w	r9, #64	; 0x40
    3aac:	e7db      	b.n	3a66 <FIH_LABEL_FIH_CALL_END_866+0x30a>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    3aae:	980a      	ldr	r0, [sp, #40]	; 0x28
    3ab0:	f007 fbe3 	bl	b27a <flash_area_erased_val>
    3ab4:	2208      	movs	r2, #8
    3ab6:	4601      	mov	r1, r0
    3ab8:	a828      	add	r0, sp, #160	; 0xa0
    3aba:	f007 fdf8 	bl	b6ae <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    3abe:	465a      	mov	r2, fp
    3ac0:	eb08 0105 	add.w	r1, r8, r5
    3ac4:	a828      	add	r0, sp, #160	; 0xa0
    3ac6:	f007 fde7 	bl	b698 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    3aca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    3ace:	6831      	ldr	r1, [r6, #0]
    3ad0:	4640      	mov	r0, r8
    3ad2:	eb05 0901 	add.w	r9, r5, r1
    3ad6:	f007 fbc9 	bl	b26c <flash_area_align>
    3ada:	4649      	mov	r1, r9
    3adc:	4603      	mov	r3, r0
    3ade:	aa28      	add	r2, sp, #160	; 0xa0
    3ae0:	4640      	mov	r0, r8
    3ae2:	f007 fb9a 	bl	b21a <flash_area_write>
    if (rc == 0) {
    3ae6:	2800      	cmp	r0, #0
    3ae8:	f47f aece 	bne.w	3888 <FIH_LABEL_FIH_CALL_END_866+0x12c>
    3aec:	e7c3      	b.n	3a76 <FIH_LABEL_FIH_CALL_END_866+0x31a>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    3aee:	b9e6      	cbnz	r6, 3b2a <FIH_LABEL_FIH_CALL_END_866+0x3ce>
        switch (hdr->nh_id) {
    3af0:	79e3      	ldrb	r3, [r4, #7]
    3af2:	2b01      	cmp	r3, #1
    3af4:	d005      	beq.n	3b02 <FIH_LABEL_FIH_CALL_END_866+0x3a6>
    3af6:	2b05      	cmp	r3, #5
    3af8:	d005      	beq.n	3b06 <FIH_LABEL_FIH_CALL_END_866+0x3aa>
    3afa:	2b00      	cmp	r3, #0
    3afc:	f47f add2 	bne.w	36a4 <boot_serial_input+0x4c>
    3b00:	e6b5      	b.n	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
            bs_rc_rsp(0);
    3b02:	4630      	mov	r0, r6
    3b04:	e5cf      	b.n	36a6 <boot_serial_input+0x4e>
    int rc = BOOT_HOOK_CALL(boot_reset_request_hook, 0, false);
    3b06:	4630      	mov	r0, r6
    3b08:	f008 f992 	bl	be30 <boot_reset_request_hook>
    if (rc == BOOT_RESET_REQUEST_HOOK_BUSY) {
    3b0c:	2801      	cmp	r0, #1
    3b0e:	d00a      	beq.n	3b26 <FIH_LABEL_FIH_CALL_END_866+0x3ca>
    bs_rc_rsp(rc);
    3b10:	4630      	mov	r0, r6
    3b12:	f7ff fd73 	bl	35fc <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    3b16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3b1a:	2100      	movs	r1, #0
    3b1c:	f006 f832 	bl	9b84 <z_impl_k_sleep>
        sys_reboot(SYS_REBOOT_COLD);
    3b20:	2001      	movs	r0, #1
    3b22:	f007 fb51 	bl	b1c8 <sys_reboot>
    bs_rc_rsp(rc);
    3b26:	200a      	movs	r0, #10
    3b28:	e5bd      	b.n	36a6 <boot_serial_input+0x4e>
        if (bs_peruser_system_specific(hdr, buf, len, cbor_state) == 0) {
    3b2a:	462a      	mov	r2, r5
    3b2c:	4639      	mov	r1, r7
    3b2e:	4620      	mov	r0, r4
    3b30:	4b08      	ldr	r3, [pc, #32]	; (3b54 <FIH_LABEL_FIH_CALL_END_866+0x3f8>)
    3b32:	f7fc fd25 	bl	580 <bs_peruser_system_specific>
    3b36:	2800      	cmp	r0, #0
    3b38:	f47f ae99 	bne.w	386e <FIH_LABEL_FIH_CALL_END_866+0x112>
}
    3b3c:	b039      	add	sp, #228	; 0xe4
    3b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            boot_serial_output();
    3b42:	f7ff bc7d 	b.w	3440 <boot_serial_output>
    3b46:	bf00      	nop
    3b48:	20013790 	.word	0x20013790
    3b4c:	2001378c 	.word	0x2001378c
    3b50:	20013794 	.word	0x20013794
    3b54:	200137a0 	.word	0x200137a0

00003b58 <boot_serial_start>:
    bs_entry = true;
    3b58:	2301      	movs	r3, #1
{
    3b5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    3b5e:	2500      	movs	r5, #0
{
    3b60:	4606      	mov	r6, r0
    bs_entry = true;
    3b62:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3c24 <boot_serial_start+0xcc>
    3b66:	4c30      	ldr	r4, [pc, #192]	; (3c28 <boot_serial_start+0xd0>)
    3b68:	f888 3000 	strb.w	r3, [r8]
    boot_uf = f;
    3b6c:	4b2f      	ldr	r3, [pc, #188]	; (3c2c <boot_serial_start+0xd4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3b6e:	4f30      	ldr	r7, [pc, #192]	; (3c30 <boot_serial_start+0xd8>)
    int dec_off = 0;
    3b70:	9500      	str	r5, [sp, #0]
    boot_uf = f;
    3b72:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    3b74:	f898 3000 	ldrb.w	r3, [r8]
    3b78:	b913      	cbnz	r3, 3b80 <boot_serial_start+0x28>
}
    3b7a:	b002      	add	sp, #8
    3b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b80:	4b2c      	ldr	r3, [pc, #176]	; (3c34 <boot_serial_start+0xdc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3b82:	f5c5 6180 	rsb	r1, r5, #1024	; 0x400
    3b86:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    3b8a:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    3b8e:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    3b92:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    3b96:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    3b9a:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    3b9e:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    3ba2:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    3ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3baa:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    3bae:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    3bb2:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    3bb6:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    3bba:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    3bbe:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    3bc2:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    3bc6:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    3bca:	6833      	ldr	r3, [r6, #0]
    3bcc:	aa01      	add	r2, sp, #4
    3bce:	3101      	adds	r1, #1
    3bd0:	1978      	adds	r0, r7, r5
    3bd2:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    3bd4:	2800      	cmp	r0, #0
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	dc01      	bgt.n	3bde <boot_serial_start+0x86>
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d0ca      	beq.n	3b74 <boot_serial_start+0x1c>
        off += rc;
    3bde:	4405      	add	r5, r0
        if (!full_line) {
    3be0:	b92b      	cbnz	r3, 3bee <boot_serial_start+0x96>
            if (off == max_input) {
    3be2:	f240 4301 	movw	r3, #1025	; 0x401
    3be6:	429d      	cmp	r5, r3
    3be8:	d1c4      	bne.n	3b74 <boot_serial_start+0x1c>
                off = 0;
    3bea:	2500      	movs	r5, #0
    3bec:	e7c2      	b.n	3b74 <boot_serial_start+0x1c>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    3bee:	783b      	ldrb	r3, [r7, #0]
    3bf0:	2b06      	cmp	r3, #6
    3bf2:	d109      	bne.n	3c08 <boot_serial_start+0xb0>
    3bf4:	787b      	ldrb	r3, [r7, #1]
    3bf6:	2b09      	cmp	r3, #9
    3bf8:	d10b      	bne.n	3c12 <boot_serial_start+0xba>
            dec_off = 0;
    3bfa:	2300      	movs	r3, #0
    3bfc:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3bfe:	4669      	mov	r1, sp
    3c00:	1ea8      	subs	r0, r5, #2
    3c02:	f7ff fcbb 	bl	357c <boot_serial_in_dec.constprop.0>
    3c06:	e004      	b.n	3c12 <boot_serial_start+0xba>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    3c08:	2b04      	cmp	r3, #4
    3c0a:	d102      	bne.n	3c12 <boot_serial_start+0xba>
    3c0c:	787b      	ldrb	r3, [r7, #1]
    3c0e:	2b14      	cmp	r3, #20
    3c10:	d0f5      	beq.n	3bfe <boot_serial_start+0xa6>
        if (rc == 1) {
    3c12:	2801      	cmp	r0, #1
    3c14:	d1e9      	bne.n	3bea <boot_serial_start+0x92>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3c16:	9900      	ldr	r1, [sp, #0]
    3c18:	4807      	ldr	r0, [pc, #28]	; (3c38 <boot_serial_start+0xe0>)
    3c1a:	3902      	subs	r1, #2
    3c1c:	f7ff fd1c 	bl	3658 <boot_serial_input>
    3c20:	e7e3      	b.n	3bea <boot_serial_start+0x92>
    3c22:	bf00      	nop
    3c24:	20016086 	.word	0x20016086
    3c28:	6e524635 	.word	0x6e524635
    3c2c:	200137d4 	.word	0x200137d4
    3c30:	20016488 	.word	0x20016488
    3c34:	50018000 	.word	0x50018000
    3c38:	20016089 	.word	0x20016089

00003c3c <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    3c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3c3e:	4604      	mov	r4, r0
    3c40:	460d      	mov	r5, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3c42:	f009 ff2c 	bl	da9e <zcbor_union_start_code>
    3c46:	2800      	cmp	r0, #0
    3c48:	d068      	beq.n	3d1c <decode_repeated_Upload_members+0xe0>
    3c4a:	4b35      	ldr	r3, [pc, #212]	; (3d20 <decode_repeated_Upload_members+0xe4>)
    3c4c:	4669      	mov	r1, sp
    3c4e:	9300      	str	r3, [sp, #0]
    3c50:	2305      	movs	r3, #5
    3c52:	4620      	mov	r0, r4
    3c54:	9301      	str	r3, [sp, #4]
    3c56:	f00a f88d 	bl	dd74 <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3c5a:	b160      	cbz	r0, 3c76 <decode_repeated_Upload_members+0x3a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    3c5c:	4629      	mov	r1, r5
    3c5e:	4620      	mov	r0, r4
    3c60:	f00a f882 	bl	dd68 <zcbor_int32_decode>
    3c64:	b138      	cbz	r0, 3c76 <decode_repeated_Upload_members+0x3a>
    3c66:	2300      	movs	r3, #0
    3c68:	722b      	strb	r3, [r5, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    3c6a:	4620      	mov	r0, r4
    3c6c:	f009 ff1e 	bl	daac <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3c70:	2001      	movs	r0, #1

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    3c72:	b002      	add	sp, #8
    3c74:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    3c76:	4620      	mov	r0, r4
    3c78:	f009 ff14 	bl	daa4 <zcbor_union_elem_code>
    3c7c:	b178      	cbz	r0, 3c9e <decode_repeated_Upload_members+0x62>
    3c7e:	4b29      	ldr	r3, [pc, #164]	; (3d24 <decode_repeated_Upload_members+0xe8>)
    3c80:	4669      	mov	r1, sp
    3c82:	9300      	str	r3, [sp, #0]
    3c84:	2304      	movs	r3, #4
    3c86:	4620      	mov	r0, r4
    3c88:	9301      	str	r3, [sp, #4]
    3c8a:	f00a f873 	bl	dd74 <zcbor_tstr_expect>
    3c8e:	b130      	cbz	r0, 3c9e <decode_repeated_Upload_members+0x62>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    3c90:	4629      	mov	r1, r5
    3c92:	4620      	mov	r0, r4
    3c94:	f00a f86b 	bl	dd6e <zcbor_bstr_decode>
    3c98:	b108      	cbz	r0, 3c9e <decode_repeated_Upload_members+0x62>
    3c9a:	2301      	movs	r3, #1
    3c9c:	e7e4      	b.n	3c68 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    3c9e:	4620      	mov	r0, r4
    3ca0:	f009 ff00 	bl	daa4 <zcbor_union_elem_code>
    3ca4:	b178      	cbz	r0, 3cc6 <decode_repeated_Upload_members+0x8a>
    3ca6:	4b20      	ldr	r3, [pc, #128]	; (3d28 <decode_repeated_Upload_members+0xec>)
    3ca8:	4669      	mov	r1, sp
    3caa:	9300      	str	r3, [sp, #0]
    3cac:	2303      	movs	r3, #3
    3cae:	4620      	mov	r0, r4
    3cb0:	9301      	str	r3, [sp, #4]
    3cb2:	f00a f85f 	bl	dd74 <zcbor_tstr_expect>
    3cb6:	b130      	cbz	r0, 3cc6 <decode_repeated_Upload_members+0x8a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    3cb8:	4629      	mov	r1, r5
    3cba:	4620      	mov	r0, r4
    3cbc:	f00a f854 	bl	dd68 <zcbor_int32_decode>
    3cc0:	b108      	cbz	r0, 3cc6 <decode_repeated_Upload_members+0x8a>
    3cc2:	2302      	movs	r3, #2
    3cc4:	e7d0      	b.n	3c68 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    3cc6:	4620      	mov	r0, r4
    3cc8:	f009 feec 	bl	daa4 <zcbor_union_elem_code>
    3ccc:	b178      	cbz	r0, 3cee <decode_repeated_Upload_members+0xb2>
    3cce:	2603      	movs	r6, #3
    3cd0:	4b16      	ldr	r3, [pc, #88]	; (3d2c <decode_repeated_Upload_members+0xf0>)
    3cd2:	4669      	mov	r1, sp
    3cd4:	4620      	mov	r0, r4
    3cd6:	9300      	str	r3, [sp, #0]
    3cd8:	9601      	str	r6, [sp, #4]
    3cda:	f00a f84b 	bl	dd74 <zcbor_tstr_expect>
    3cde:	b130      	cbz	r0, 3cee <decode_repeated_Upload_members+0xb2>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    3ce0:	4629      	mov	r1, r5
    3ce2:	4620      	mov	r0, r4
    3ce4:	f00a f840 	bl	dd68 <zcbor_int32_decode>
    3ce8:	b108      	cbz	r0, 3cee <decode_repeated_Upload_members+0xb2>
    3cea:	722e      	strb	r6, [r5, #8]
    3cec:	e7bd      	b.n	3c6a <decode_repeated_Upload_members+0x2e>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3cee:	4620      	mov	r0, r4
    3cf0:	f009 fed8 	bl	daa4 <zcbor_union_elem_code>
    3cf4:	b178      	cbz	r0, 3d16 <decode_repeated_Upload_members+0xda>
    3cf6:	4b0e      	ldr	r3, [pc, #56]	; (3d30 <decode_repeated_Upload_members+0xf4>)
    3cf8:	4669      	mov	r1, sp
    3cfa:	9300      	str	r3, [sp, #0]
    3cfc:	2303      	movs	r3, #3
    3cfe:	4620      	mov	r0, r4
    3d00:	9301      	str	r3, [sp, #4]
    3d02:	f00a f837 	bl	dd74 <zcbor_tstr_expect>
    3d06:	b130      	cbz	r0, 3d16 <decode_repeated_Upload_members+0xda>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    3d08:	4629      	mov	r1, r5
    3d0a:	4620      	mov	r0, r4
    3d0c:	f00a f82f 	bl	dd6e <zcbor_bstr_decode>
    3d10:	b108      	cbz	r0, 3d16 <decode_repeated_Upload_members+0xda>
    3d12:	2304      	movs	r3, #4
    3d14:	e7a8      	b.n	3c68 <decode_repeated_Upload_members+0x2c>
    3d16:	4620      	mov	r0, r4
    3d18:	f009 fec8 	bl	daac <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3d1c:	2000      	movs	r0, #0
    3d1e:	e7a8      	b.n	3c72 <decode_repeated_Upload_members+0x36>
    3d20:	0000f379 	.word	0x0000f379
    3d24:	0000f3a4 	.word	0x0000f3a4
    3d28:	0000f3a9 	.word	0x0000f3a9
    3d2c:	0000f3a0 	.word	0x0000f3a0
    3d30:	0000f3ad 	.word	0x0000f3ad

00003d34 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    3d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3d38:	f04f 0901 	mov.w	r9, #1
{
    3d3c:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3d3e:	ac04      	add	r4, sp, #16
{
    3d40:	4607      	mov	r7, r0
    3d42:	460e      	mov	r6, r1
    3d44:	4690      	mov	r8, r2
    3d46:	461d      	mov	r5, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3d48:	4602      	mov	r2, r0
    3d4a:	460b      	mov	r3, r1
    3d4c:	4620      	mov	r0, r4
    3d4e:	2104      	movs	r1, #4
    3d50:	f8cd 9000 	str.w	r9, [sp]
    3d54:	f009 feae 	bl	dab4 <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    3d58:	4620      	mov	r0, r4
    3d5a:	f00a f80e 	bl	dd7a <zcbor_map_start_decode>
    3d5e:	b170      	cbz	r0, 3d7e <cbor_decode_Upload+0x4a>
    3d60:	230c      	movs	r3, #12
    3d62:	2105      	movs	r1, #5
    3d64:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3d68:	4648      	mov	r0, r9
    3d6a:	4b11      	ldr	r3, [pc, #68]	; (3db0 <cbor_decode_Upload+0x7c>)
    3d6c:	9400      	str	r4, [sp, #0]
    3d6e:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    3d72:	f00a f823 	bl	ddbc <zcbor_multi_decode>
    3d76:	b960      	cbnz	r0, 3d92 <cbor_decode_Upload+0x5e>
    3d78:	4620      	mov	r0, r4
    3d7a:	f00a f81a 	bl	ddb2 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    3d7e:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    3d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d82:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    3d84:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    3d86:	4290      	cmp	r0, r2
    3d88:	bf08      	it	eq
    3d8a:	201f      	moveq	r0, #31
	}
	return ZCBOR_SUCCESS;
}
    3d8c:	b01d      	add	sp, #116	; 0x74
    3d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    3d92:	4620      	mov	r0, r4
    3d94:	f00a f80b 	bl	ddae <zcbor_map_end_decode>
    3d98:	2800      	cmp	r0, #0
    3d9a:	d0f0      	beq.n	3d7e <cbor_decode_Upload+0x4a>
	if (ret && (payload_len_out != NULL)) {
    3d9c:	b90d      	cbnz	r5, 3da2 <cbor_decode_Upload+0x6e>
	return ZCBOR_SUCCESS;
    3d9e:	2000      	movs	r0, #0
    3da0:	e7f4      	b.n	3d8c <cbor_decode_Upload+0x58>
		*payload_len_out = MIN(payload_len,
    3da2:	9b04      	ldr	r3, [sp, #16]
    3da4:	1bdb      	subs	r3, r3, r7
    3da6:	42b3      	cmp	r3, r6
    3da8:	bf94      	ite	ls
    3daa:	602b      	strls	r3, [r5, #0]
    3dac:	602e      	strhi	r6, [r5, #0]
    3dae:	e7f6      	b.n	3d9e <cbor_decode_Upload+0x6a>
    3db0:	00003c3d 	.word	0x00003c3d

00003db4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3db4:	4901      	ldr	r1, [pc, #4]	; (3dbc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3db6:	2210      	movs	r2, #16
	str	r2, [r1]
    3db8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3dba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3dbc:	e000ed10 	.word	0xe000ed10

00003dc0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3dc0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3dc2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3dc4:	f380 8811 	msr	BASEPRI, r0
	isb
    3dc8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3dcc:	b501      	push	{r0, lr}
    3dce:	f7fd ffbd 	bl	1d4c <z_arm_on_enter_cpu_idle>
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d002      	beq.n	3ddc <_skip_0>
    3dd6:	f3bf 8f4f 	dsb	sy
    3dda:	bf30      	wfi

00003ddc <_skip_0>:
    3ddc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3de0:	b662      	cpsie	i
	isb
    3de2:	f3bf 8f6f 	isb	sy

	bx	lr
    3de6:	4770      	bx	lr

00003de8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3de8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3dea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3dec:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3df0:	b501      	push	{r0, lr}
    3df2:	f7fd ffab 	bl	1d4c <z_arm_on_enter_cpu_idle>
    3df6:	2800      	cmp	r0, #0
    3df8:	d002      	beq.n	3e00 <_skip_1>
    3dfa:	f3bf 8f4f 	dsb	sy
    3dfe:	bf20      	wfe

00003e00 <_skip_1>:
    3e00:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    3e04:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3e08:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3e0a:	4770      	bx	lr

00003e0c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3e0c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3e0e:	2800      	cmp	r0, #0
    3e10:	db07      	blt.n	3e22 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e12:	2301      	movs	r3, #1
    3e14:	0941      	lsrs	r1, r0, #5
    3e16:	4a03      	ldr	r2, [pc, #12]	; (3e24 <arch_irq_enable+0x18>)
    3e18:	f000 001f 	and.w	r0, r0, #31
    3e1c:	4083      	lsls	r3, r0
    3e1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3e22:	4770      	bx	lr
    3e24:	e000e100 	.word	0xe000e100

00003e28 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3e28:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3e2a:	2800      	cmp	r0, #0
    3e2c:	db0c      	blt.n	3e48 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e2e:	2201      	movs	r2, #1
    3e30:	4906      	ldr	r1, [pc, #24]	; (3e4c <arch_irq_disable+0x24>)
    3e32:	0943      	lsrs	r3, r0, #5
    3e34:	f000 001f 	and.w	r0, r0, #31
    3e38:	4082      	lsls	r2, r0
    3e3a:	3320      	adds	r3, #32
    3e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e44:	f3bf 8f6f 	isb	sy
}
    3e48:	4770      	bx	lr
    3e4a:	bf00      	nop
    3e4c:	e000e100 	.word	0xe000e100

00003e50 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3e50:	4b05      	ldr	r3, [pc, #20]	; (3e68 <arch_irq_is_enabled+0x18>)
    3e52:	0942      	lsrs	r2, r0, #5
    3e54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3e58:	2301      	movs	r3, #1
    3e5a:	f000 001f 	and.w	r0, r0, #31
    3e5e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3e62:	4010      	ands	r0, r2
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	e000e100 	.word	0xe000e100

00003e6c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3e6c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3e6e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    3e70:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e74:	bfac      	ite	ge
    3e76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e7a:	4b06      	ldrlt	r3, [pc, #24]	; (3e94 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e7c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3e80:	b2c9      	uxtb	r1, r1
    3e82:	bfab      	itete	ge
    3e84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e88:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e8c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e90:	5419      	strblt	r1, [r3, r0]
}
    3e92:	4770      	bx	lr
    3e94:	e000ed14 	.word	0xe000ed14

00003e98 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3e98:	bf30      	wfi
    b z_SysNmiOnReset
    3e9a:	f7ff bffd 	b.w	3e98 <z_SysNmiOnReset>
    3e9e:	bf00      	nop

00003ea0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3ea0:	4a0b      	ldr	r2, [pc, #44]	; (3ed0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3ea2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3ea4:	4b0b      	ldr	r3, [pc, #44]	; (3ed4 <z_arm_prep_c+0x34>)
    3ea6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3eaa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3eac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eb0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3eb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3eb8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3ec0:	f005 f848 	bl	8f54 <z_bss_zero>
	z_data_copy();
    3ec4:	f005 ff0a 	bl	9cdc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3ec8:	f000 f9ee 	bl	42a8 <z_arm_interrupt_init>
	z_cstart();
    3ecc:	f005 f882 	bl	8fd4 <z_cstart>
    3ed0:	00000000 	.word	0x00000000
    3ed4:	e000ed00 	.word	0xe000ed00

00003ed8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3ed8:	4a09      	ldr	r2, [pc, #36]	; (3f00 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3eda:	490a      	ldr	r1, [pc, #40]	; (3f04 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3edc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3ede:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3ee0:	6718      	str	r0, [r3, #112]	; 0x70
	_current->arch.swap_return_value = _k_neg_eagain;
    3ee2:	6759      	str	r1, [r3, #116]	; 0x74

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3ee4:	4908      	ldr	r1, [pc, #32]	; (3f08 <arch_swap+0x30>)
    3ee6:	684b      	ldr	r3, [r1, #4]
    3ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3eec:	604b      	str	r3, [r1, #4]
    3eee:	2300      	movs	r3, #0
    3ef0:	f383 8811 	msr	BASEPRI, r3
    3ef4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ef8:	6893      	ldr	r3, [r2, #8]
}
    3efa:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop
    3f00:	2001442c 	.word	0x2001442c
    3f04:	0000efcc 	.word	0x0000efcc
    3f08:	e000ed00 	.word	0xe000ed00

00003f0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3f0c:	4913      	ldr	r1, [pc, #76]	; (3f5c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3f0e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3f10:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3f14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3f16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3f1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3f1e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3f20:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3f24:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3f28:	4f0d      	ldr	r7, [pc, #52]	; (3f60 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3f2a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3f2e:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    3f30:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3f32:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3f34:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    3f36:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3f3a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3f3e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3f42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3f46:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3f4a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3f4e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3f50:	f007 fb70 	bl	b634 <configure_builtin_stack_guard>
    pop {r2, lr}
    3f54:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3f58:	4770      	bx	lr
    3f5a:	0000      	.short	0x0000
    ldr r1, =_kernel
    3f5c:	2001442c 	.word	0x2001442c
    ldr v4, =_SCS_ICSR
    3f60:	e000ed04 	.word	0xe000ed04

00003f64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3f64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3f68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3f6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3f6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3f72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3f74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3f78:	2902      	cmp	r1, #2
    beq _oops
    3f7a:	d0ff      	beq.n	3f7c <_oops>

00003f7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3f7c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3f7e:	f007 fb4a 	bl	b616 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3f82:	bd01      	pop	{r0, pc}

00003f84 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3f84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3f88:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3f8a:	490b      	ldr	r1, [pc, #44]	; (3fb8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3f8c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3f90:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3f92:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3f96:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3f9a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3f9c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3fa0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3fa8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3fac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3fae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3fb0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3fb2:	6703      	str	r3, [r0, #112]	; 0x70
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop
    3fb8:	0000a893 	.word	0x0000a893

00003fbc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3fbc:	4b08      	ldr	r3, [pc, #32]	; (3fe0 <arch_switch_to_main_thread+0x24>)
    3fbe:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3fc0:	6e03      	ldr	r3, [r0, #96]	; 0x60
    3fc2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3fc6:	4610      	mov	r0, r2
    3fc8:	f381 8809 	msr	PSP, r1
    3fcc:	2100      	movs	r1, #0
    3fce:	b663      	cpsie	if
    3fd0:	f381 8811 	msr	BASEPRI, r1
    3fd4:	f3bf 8f6f 	isb	sy
    3fd8:	2200      	movs	r2, #0
    3fda:	2300      	movs	r3, #0
    3fdc:	f006 fc59 	bl	a892 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3fe0:	2001442c 	.word	0x2001442c

00003fe4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3fe4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3fe6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3fea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3fee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3ff2:	4904      	ldr	r1, [pc, #16]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3ff4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3ff6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3ff8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3ffa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3ffe:	4902      	ldr	r1, [pc, #8]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
	bx r1
    4000:	4708      	bx	r1
    4002:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    4004:	0000e808 	.word	0x0000e808
	ldr r1, =z_arm_int_exit
    4008:	0000400d 	.word	0x0000400d

0000400c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    400e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4010:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    4012:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4014:	d003      	beq.n	401e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4016:	4903      	ldr	r1, [pc, #12]	; (4024 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    401c:	600a      	str	r2, [r1, #0]

0000401e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    401e:	4770      	bx	lr
	ldr r3, =_kernel
    4020:	2001442c 	.word	0x2001442c
	ldr r1, =_SCS_ICSR
    4024:	e000ed04 	.word	0xe000ed04

00004028 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4028:	4b15      	ldr	r3, [pc, #84]	; (4080 <usage_fault.constprop.0+0x58>)
    402a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    402c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    4032:	bf14      	ite	ne
    4034:	201e      	movne	r0, #30
    4036:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    4038:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    403c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    403e:	bf18      	it	ne
    4040:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    4042:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    4048:	bf18      	it	ne
    404a:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    404c:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    4052:	bf18      	it	ne
    4054:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    4056:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    405a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    405c:	bf18      	it	ne
    405e:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    4060:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    4066:	bf18      	it	ne
    4068:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    406a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    406e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    4070:	bf18      	it	ne
    4072:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4074:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4078:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    407c:	629a      	str	r2, [r3, #40]	; 0x28
}
    407e:	4770      	bx	lr
    4080:	e000ed00 	.word	0xe000ed00

00004084 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4084:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4086:	4b18      	ldr	r3, [pc, #96]	; (40e8 <bus_fault.constprop.0+0x64>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4088:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    408a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    408c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    408e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4092:	bf14      	ite	ne
    4094:	2017      	movne	r0, #23
    4096:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    4098:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    409c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    409e:	bf18      	it	ne
    40a0:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    40a2:	05a4      	lsls	r4, r4, #22
    40a4:	d508      	bpl.n	40b8 <bus_fault.constprop.0+0x34>
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    40a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    40a8:	0400      	lsls	r0, r0, #16
    40aa:	d504      	bpl.n	40b6 <bus_fault.constprop.0+0x32>
			if (from_hard_fault != 0) {
    40ac:	b11a      	cbz	r2, 40b6 <bus_fault.constprop.0+0x32>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    40ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    40b4:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    40b6:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    40b8:	4b0b      	ldr	r3, [pc, #44]	; (40e8 <bus_fault.constprop.0+0x64>)
    40ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    40bc:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    40c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    40c2:	bf18      	it	ne
    40c4:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    40c6:	05d2      	lsls	r2, r2, #23
    40c8:	d40c      	bmi.n	40e4 <bus_fault.constprop.0+0x60>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    40ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    40cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    40d0:	bf18      	it	ne
    40d2:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    40d4:	4a04      	ldr	r2, [pc, #16]	; (40e8 <bus_fault.constprop.0+0x64>)
    40d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    40dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    40de:	2300      	movs	r3, #0
    40e0:	700b      	strb	r3, [r1, #0]
}
    40e2:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    40e4:	201b      	movs	r0, #27
    40e6:	e7f5      	b.n	40d4 <bus_fault.constprop.0+0x50>
    40e8:	e000ed00 	.word	0xe000ed00

000040ec <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    40ec:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    40ee:	4b1c      	ldr	r3, [pc, #112]	; (4160 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    40f0:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    40f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    40f4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    40f6:	f010 0f10 	tst.w	r0, #16
    40fa:	bf14      	ite	ne
    40fc:	2011      	movne	r0, #17
    40fe:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    4100:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4104:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    4106:	bf18      	it	ne
    4108:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    410a:	07a4      	lsls	r4, r4, #30
    410c:	d509      	bpl.n	4122 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    410e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4110:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4112:	0600      	lsls	r0, r0, #24
    4114:	d504      	bpl.n	4120 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    4116:	b11a      	cbz	r2, 4120 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    411a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    411e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    4120:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4122:	4b0f      	ldr	r3, [pc, #60]	; (4160 <mem_manage_fault.constprop.0+0x74>)
    4124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    4126:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    412a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    412c:	bf18      	it	ne
    412e:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    4130:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    4136:	bf18      	it	ne
    4138:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    413a:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    413c:	bf58      	it	pl
    413e:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4140:	4b07      	ldr	r3, [pc, #28]	; (4160 <mem_manage_fault.constprop.0+0x74>)
    4142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4144:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4146:	bf42      	ittt	mi
    4148:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    414a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    414e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4152:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4156:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4158:	2300      	movs	r3, #0
    415a:	700b      	strb	r3, [r1, #0]
}
    415c:	bd10      	pop	{r4, pc}
    415e:	bf00      	nop
    4160:	e000ed00 	.word	0xe000ed00

00004164 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4164:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4166:	4b44      	ldr	r3, [pc, #272]	; (4278 <z_arm_fault+0x114>)
{
    4168:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    416a:	685b      	ldr	r3, [r3, #4]
    416c:	2500      	movs	r5, #0
{
    416e:	b08a      	sub	sp, #40	; 0x28
    4170:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4174:	f385 8811 	msr	BASEPRI, r5
    4178:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    417c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    4180:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    4184:	d111      	bne.n	41aa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4186:	f002 000c 	and.w	r0, r2, #12
    418a:	2808      	cmp	r0, #8
    418c:	d00d      	beq.n	41aa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    418e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4190:	bf4c      	ite	mi
    4192:	460e      	movmi	r6, r1
			*nested_exc = true;
    4194:	2501      	movpl	r5, #1
	*recoverable = false;
    4196:	2200      	movs	r2, #0
	switch (fault) {
    4198:	3b03      	subs	r3, #3
	*recoverable = false;
    419a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    419e:	2b03      	cmp	r3, #3
    41a0:	d805      	bhi.n	41ae <z_arm_fault+0x4a>
    41a2:	e8df f003 	tbb	[pc, r3]
    41a6:	5c1e      	.short	0x5c1e
    41a8:	5960      	.short	0x5960
		return NULL;
    41aa:	462e      	mov	r6, r5
    41ac:	e7f3      	b.n	4196 <z_arm_fault+0x32>
    41ae:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    41b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    41b4:	b99b      	cbnz	r3, 41de <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    41b6:	2220      	movs	r2, #32
    41b8:	4631      	mov	r1, r6
    41ba:	a802      	add	r0, sp, #8
    41bc:	f007 fa6c 	bl	b698 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    41c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41c2:	2d00      	cmp	r5, #0
    41c4:	d053      	beq.n	426e <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    41c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    41ca:	b922      	cbnz	r2, 41d6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    41cc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    41d0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    41d4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    41d6:	4620      	mov	r0, r4
    41d8:	a902      	add	r1, sp, #8
    41da:	f007 fa1a 	bl	b612 <z_arm_fatal_error>
}
    41de:	b00a      	add	sp, #40	; 0x28
    41e0:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41e2:	4b25      	ldr	r3, [pc, #148]	; (4278 <z_arm_fault+0x114>)
    41e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41e6:	0791      	lsls	r1, r2, #30
    41e8:	d4e1      	bmi.n	41ae <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    41ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41ec:	2a00      	cmp	r2, #0
    41ee:	dbde      	blt.n	41ae <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    41f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41f2:	0052      	lsls	r2, r2, #1
    41f4:	d5db      	bpl.n	41ae <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    41f6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    41f8:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    41fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    41fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4204:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4208:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    420a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    420e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    4212:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4218:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    421c:	f64d 7202 	movw	r2, #57090	; 0xdf02
    4220:	4291      	cmp	r1, r2
    4222:	d009      	beq.n	4238 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4226:	b2d2      	uxtb	r2, r2
    4228:	b142      	cbz	r2, 423c <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    422a:	2001      	movs	r0, #1
    422c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    4230:	f7ff ff5c 	bl	40ec <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    4234:	4604      	mov	r4, r0
		break;
    4236:	e7bb      	b.n	41b0 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    4238:	6834      	ldr	r4, [r6, #0]
    423a:	e7b9      	b.n	41b0 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    423c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    423e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    4242:	d005      	beq.n	4250 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    4244:	2001      	movs	r0, #1
    4246:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    424a:	f7ff ff1b 	bl	4084 <bus_fault.constprop.0>
    424e:	e7f1      	b.n	4234 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    4250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4256:	d3aa      	bcc.n	41ae <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    4258:	f7ff fee6 	bl	4028 <usage_fault.constprop.0>
    425c:	e7ea      	b.n	4234 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    425e:	2000      	movs	r0, #0
    4260:	f10d 0107 	add.w	r1, sp, #7
    4264:	e7e4      	b.n	4230 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    4266:	2000      	movs	r0, #0
    4268:	f10d 0107 	add.w	r1, sp, #7
    426c:	e7ed      	b.n	424a <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    426e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4272:	f023 0301 	bic.w	r3, r3, #1
    4276:	e7ad      	b.n	41d4 <z_arm_fault+0x70>
    4278:	e000ed00 	.word	0xe000ed00

0000427c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    427c:	4b04      	ldr	r3, [pc, #16]	; (4290 <z_arm_fault_init+0x14>)
    427e:	695a      	ldr	r2, [r3, #20]
    4280:	f042 0210 	orr.w	r2, r2, #16
    4284:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4286:	695a      	ldr	r2, [r3, #20]
    4288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    428c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    428e:	4770      	bx	lr
    4290:	e000ed00 	.word	0xe000ed00

00004294 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4294:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4298:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    429c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    429e:	4672      	mov	r2, lr
	bl z_arm_fault
    42a0:	f7ff ff60 	bl	4164 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    42a4:	bd01      	pop	{r0, pc}
    42a6:	bf00      	nop

000042a8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    42a8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42aa:	2120      	movs	r1, #32
    42ac:	4803      	ldr	r0, [pc, #12]	; (42bc <z_arm_interrupt_init+0x14>)
    42ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    42b0:	3301      	adds	r3, #1
    42b2:	2b45      	cmp	r3, #69	; 0x45
    42b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    42b8:	d1f9      	bne.n	42ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    42ba:	4770      	bx	lr
    42bc:	e000e100 	.word	0xe000e100

000042c0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    42c0:	2000      	movs	r0, #0
    msr CONTROL, r0
    42c2:	f380 8814 	msr	CONTROL, r0
    isb
    42c6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    42ca:	2000      	movs	r0, #0
    msr MSPLIM, r0
    42cc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    42d0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    42d4:	f7fd fd7e 	bl	1dd4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    42d8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    42da:	490e      	ldr	r1, [pc, #56]	; (4314 <__start+0x54>)
    str r0, [r1]
    42dc:	6008      	str	r0, [r1, #0]
    dsb
    42de:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    42e2:	480d      	ldr	r0, [pc, #52]	; (4318 <__start+0x58>)
    msr msp, r0
    42e4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    42e8:	f000 f83e 	bl	4368 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    42ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    42ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    42f2:	480a      	ldr	r0, [pc, #40]	; (431c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    42f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    42f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    42fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    42fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4302:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4304:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4306:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    430a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    430e:	f7ff fdc7 	bl	3ea0 <z_arm_prep_c>
    4312:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    4314:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4318:	2005a1d8 	.word	0x2005a1d8
    ldr r0, =z_interrupt_stacks
    431c:	20057098 	.word	0x20057098

00004320 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4320:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4324:	4905      	ldr	r1, [pc, #20]	; (433c <sys_arch_reboot+0x1c>)
    4326:	4b06      	ldr	r3, [pc, #24]	; (4340 <sys_arch_reboot+0x20>)
    4328:	68ca      	ldr	r2, [r1, #12]
    432a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    432e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4330:	60cb      	str	r3, [r1, #12]
    4332:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4336:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4338:	e7fd      	b.n	4336 <sys_arch_reboot+0x16>
    433a:	bf00      	nop
    433c:	e000ed00 	.word	0xe000ed00
    4340:	05fa0004 	.word	0x05fa0004

00004344 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    4344:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    4346:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4348:	4906      	ldr	r1, [pc, #24]	; (4364 <z_arm_clear_arm_mpu_config+0x20>)
    434a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    434e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    4352:	4293      	cmp	r3, r2
    4354:	db00      	blt.n	4358 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    4356:	4770      	bx	lr
  mpu->RNR = rnr;
    4358:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    435c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4360:	3301      	adds	r3, #1
    4362:	e7f6      	b.n	4352 <z_arm_clear_arm_mpu_config+0xe>
    4364:	e000ed00 	.word	0xe000ed00

00004368 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4368:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    436a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    436c:	2400      	movs	r4, #0
    436e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4372:	f7ff ffe7 	bl	4344 <z_arm_clear_arm_mpu_config>
    4376:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    437c:	4a0c      	ldr	r2, [pc, #48]	; (43b0 <z_arm_init_arch_hw_at_boot+0x48>)
    437e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4382:	3301      	adds	r3, #1
    4384:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    4386:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    438a:	d1f8      	bne.n	437e <z_arm_init_arch_hw_at_boot+0x16>
    438c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    438e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4392:	4a07      	ldr	r2, [pc, #28]	; (43b0 <z_arm_init_arch_hw_at_boot+0x48>)
    4394:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4398:	3301      	adds	r3, #1
    439a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    439c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    43a0:	d1f8      	bne.n	4394 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    43a2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    43a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    43a8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    43ac:	bd10      	pop	{r4, pc}
    43ae:	bf00      	nop
    43b0:	e000e100 	.word	0xe000e100

000043b4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    43b4:	4b08      	ldr	r3, [pc, #32]	; (43d8 <z_impl_k_thread_abort+0x24>)
    43b6:	689b      	ldr	r3, [r3, #8]
    43b8:	4283      	cmp	r3, r0
    43ba:	d10b      	bne.n	43d4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    43bc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    43c0:	b143      	cbz	r3, 43d4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    43c2:	4b06      	ldr	r3, [pc, #24]	; (43dc <z_impl_k_thread_abort+0x28>)
    43c4:	685a      	ldr	r2, [r3, #4]
    43c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    43ca:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    43cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    43ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    43d2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    43d4:	f005 bc10 	b.w	9bf8 <z_thread_abort>
    43d8:	2001442c 	.word	0x2001442c
    43dc:	e000ed00 	.word	0xe000ed00

000043e0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    43e0:	b40c      	push	{r2, r3}
    43e2:	b510      	push	{r4, lr}
    43e4:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    43e6:	b909      	cbnz	r1, 43ec <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    43e8:	f10d 000b 	add.w	r0, sp, #11
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    43ec:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    43ee:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    43f2:	ab09      	add	r3, sp, #36	; 0x24
    43f4:	9a08      	ldr	r2, [sp, #32]
    43f6:	9400      	str	r4, [sp, #0]
    43f8:	a904      	add	r1, sp, #16
    43fa:	4805      	ldr	r0, [pc, #20]	; (4410 <snprintf+0x30>)
    43fc:	9303      	str	r3, [sp, #12]
    43fe:	f7fd fa4b 	bl	1898 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    4402:	9b04      	ldr	r3, [sp, #16]
    4404:	701c      	strb	r4, [r3, #0]
	return r;
}
    4406:	b006      	add	sp, #24
    4408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    440c:	b002      	add	sp, #8
    440e:	4770      	bx	lr
    4410:	0000b6c1 	.word	0x0000b6c1

00004414 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4414:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4416:	4801      	ldr	r0, [pc, #4]	; (441c <usbd_evt_put+0x8>)
    4418:	f009 bec0 	b.w	e19c <k_queue_append>
    441c:	20002378 	.word	0x20002378

00004420 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4420:	4901      	ldr	r1, [pc, #4]	; (4428 <usbd_work_schedule+0x8>)
    4422:	4802      	ldr	r0, [pc, #8]	; (442c <usbd_work_schedule+0xc>)
    4424:	f009 bf1f 	b.w	e266 <k_work_submit_to_queue>
    4428:	20013800 	.word	0x20013800
    442c:	20002528 	.word	0x20002528

00004430 <endpoint_ctx>:
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4430:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4432:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4436:	d512      	bpl.n	445e <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4438:	2b08      	cmp	r3, #8
    443a:	d105      	bne.n	4448 <endpoint_ctx+0x18>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    443c:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    443e:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4442:	d506      	bpl.n	4452 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4444:	480e      	ldr	r0, [pc, #56]	; (4480 <endpoint_ctx+0x50>)
    4446:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    4448:	f010 0f78 	tst.w	r0, #120	; 0x78
    444c:	d112      	bne.n	4474 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    444e:	f000 030f 	and.w	r3, r0, #15
			return &ctx->ep_ctx[ep_num];
    4452:	204c      	movs	r0, #76	; 0x4c
    4454:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4458:	4b0a      	ldr	r3, [pc, #40]	; (4484 <endpoint_ctx+0x54>)
    445a:	4418      	add	r0, r3
    445c:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    445e:	2b08      	cmp	r3, #8
    4460:	d105      	bne.n	446e <endpoint_ctx+0x3e>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4462:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4464:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4468:	d506      	bpl.n	4478 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    446a:	4807      	ldr	r0, [pc, #28]	; (4488 <endpoint_ctx+0x58>)
    446c:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    446e:	f010 0f78 	tst.w	r0, #120	; 0x78
    4472:	d0f6      	beq.n	4462 <endpoint_ctx+0x32>
		return NULL;
    4474:	2000      	movs	r0, #0
}
    4476:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4478:	4804      	ldr	r0, [pc, #16]	; (448c <endpoint_ctx+0x5c>)
    447a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    447e:	4770      	bx	lr
    4480:	20013924 	.word	0x20013924
    4484:	200137d8 	.word	0x200137d8
    4488:	20013a44 	.word	0x20013a44
    448c:	20013944 	.word	0x20013944

00004490 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4490:	2200      	movs	r2, #0
    4492:	2300      	movs	r3, #0
    4494:	4801      	ldr	r0, [pc, #4]	; (449c <usbd_evt_get+0xc>)
    4496:	f004 bfb5 	b.w	9404 <z_impl_k_queue_get>
    449a:	bf00      	nop
    449c:	20002378 	.word	0x20002378

000044a0 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    44a0:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    44a2:	4c05      	ldr	r4, [pc, #20]	; (44b8 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    44a4:	f7ff fff4 	bl	4490 <usbd_evt_get>
		if (ev) {
    44a8:	b120      	cbz	r0, 44b4 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    44aa:	1d01      	adds	r1, r0, #4
    44ac:	4620      	mov	r0, r4
    44ae:	f009 fdb8 	bl	e022 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    44b2:	e7f7      	b.n	44a4 <usbd_evt_flush+0x4>
}
    44b4:	bd10      	pop	{r4, pc}
    44b6:	bf00      	nop
    44b8:	200022f8 	.word	0x200022f8

000044bc <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    44bc:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    44be:	2300      	movs	r3, #0
    44c0:	2200      	movs	r2, #0
    44c2:	480e      	ldr	r0, [pc, #56]	; (44fc <usbd_evt_alloc+0x40>)
    44c4:	a901      	add	r1, sp, #4
    44c6:	f004 fe01 	bl	90cc <k_mem_slab_alloc>
    44ca:	b190      	cbz	r0, 44f2 <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    44cc:	f7ff ffe8 	bl	44a0 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    44d0:	2200      	movs	r2, #0
    44d2:	2300      	movs	r3, #0
    44d4:	4809      	ldr	r0, [pc, #36]	; (44fc <usbd_evt_alloc+0x40>)
    44d6:	a901      	add	r1, sp, #4
    44d8:	f004 fdf8 	bl	90cc <k_mem_slab_alloc>
    44dc:	b938      	cbnz	r0, 44ee <usbd_evt_alloc+0x32>
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    44de:	2304      	movs	r3, #4
		ev = (struct usbd_event *)block.data;
    44e0:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
    44e2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    44e4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    44e6:	f7ff ff95 	bl	4414 <usbd_evt_put>
		usbd_work_schedule();
    44ea:	f7ff ff99 	bl	4420 <usbd_work_schedule>

		return NULL;
    44ee:	2000      	movs	r0, #0
    44f0:	e001      	b.n	44f6 <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    44f2:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    44f4:	6040      	str	r0, [r0, #4]

	return ev;
}
    44f6:	b003      	add	sp, #12
    44f8:	f85d fb04 	ldr.w	pc, [sp], #4
    44fc:	200022f8 	.word	0x200022f8

00004500 <submit_dc_power_event>:

static void submit_dc_power_event(enum usbd_periph_state state)
{
    4500:	b510      	push	{r4, lr}
    4502:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
    4504:	f7ff ffda 	bl	44bc <usbd_evt_alloc>

	if (!ev) {
    4508:	b160      	cbz	r0, 4524 <submit_dc_power_event+0x24>
		return;
	}

	ev->evt_type = USBD_EVT_POWER;
    450a:	2200      	movs	r2, #0
	ev->evt.pwr_evt.state = state;
    450c:	7204      	strb	r4, [r0, #8]
	ev->evt_type = USBD_EVT_POWER;
    450e:	7402      	strb	r2, [r0, #16]

	usbd_evt_put(ev);
    4510:	f7ff ff80 	bl	4414 <usbd_evt_put>

	if (usbd_ctx.attached) {
    4514:	4b04      	ldr	r3, [pc, #16]	; (4528 <submit_dc_power_event+0x28>)
    4516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    451a:	b11b      	cbz	r3, 4524 <submit_dc_power_event+0x24>
		usbd_work_schedule();
	}
}
    451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    4520:	f7ff bf7e 	b.w	4420 <usbd_work_schedule>
}
    4524:	bd10      	pop	{r4, pc}
    4526:	bf00      	nop
    4528:	200137d8 	.word	0x200137d8

0000452c <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    452e:	7887      	ldrb	r7, [r0, #2]
{
    4530:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4532:	4638      	mov	r0, r7
    4534:	f7ff ff7c 	bl	4430 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4538:	063b      	lsls	r3, r7, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    453a:	4604      	mov	r4, r0
		switch (p_event->data.eptransfer.status) {
    453c:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    453e:	d512      	bpl.n	4566 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    4540:	2d00      	cmp	r5, #0
    4542:	d143      	bne.n	45cc <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    4544:	f7ff ffba 	bl	44bc <usbd_evt_alloc>

			if (!ev) {
    4548:	4603      	mov	r3, r0
    454a:	2800      	cmp	r0, #0
    454c:	d03e      	beq.n	45cc <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    454e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4550:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    4552:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4554:	2203      	movs	r2, #3
    4556:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    4558:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    455a:	f7ff ff5b 	bl	4414 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    455e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    4562:	f7ff bf5d 	b.w	4420 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    4566:	b14d      	cbz	r5, 457c <usbd_event_transfer_data+0x50>
    4568:	2d01      	cmp	r5, #1
    456a:	d12f      	bne.n	45cc <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    456c:	f7ff ffa6 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    4570:	4603      	mov	r3, r0
    4572:	b358      	cbz	r0, 45cc <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    4574:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    4576:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4578:	7305      	strb	r5, [r0, #12]
    457a:	e7ed      	b.n	4558 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    457c:	f7ff ff9e 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    4580:	b320      	cbz	r0, 45cc <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    4582:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    4584:	4b12      	ldr	r3, [pc, #72]	; (45d0 <usbd_event_transfer_data+0xa4>)
    4586:	f012 0f80 	tst.w	r2, #128	; 0x80
    458a:	f002 0108 	and.w	r1, r2, #8
    458e:	d011      	beq.n	45b4 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4590:	b141      	cbz	r1, 45a4 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    4592:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    4596:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    4598:	2301      	movs	r3, #1
    459a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    459c:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    459e:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    45a0:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    45a2:	e7da      	b.n	455a <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    45a4:	2114      	movs	r1, #20
    45a6:	f002 020f 	and.w	r2, r2, #15
    45aa:	fb01 3302 	mla	r3, r1, r2, r3
    45ae:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    45b2:	e7f0      	b.n	4596 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    45b4:	b111      	cbz	r1, 45bc <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    45b6:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    45ba:	e7ec      	b.n	4596 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    45bc:	2114      	movs	r1, #20
    45be:	f002 020f 	and.w	r2, r2, #15
    45c2:	fb01 3302 	mla	r3, r1, r2, r3
    45c6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    45ca:	e7e4      	b.n	4596 <usbd_event_transfer_data+0x6a>
}
    45cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45ce:	bf00      	nop
    45d0:	50036000 	.word	0x50036000

000045d4 <usb_dc_power_event_handler>:
	switch (event) {
    45d4:	2801      	cmp	r0, #1
{
    45d6:	b507      	push	{r0, r1, r2, lr}
	switch (event) {
    45d8:	d00f      	beq.n	45fa <usb_dc_power_event_handler+0x26>
    45da:	2802      	cmp	r0, #2
    45dc:	d00e      	beq.n	45fc <usb_dc_power_event_handler+0x28>
    45de:	b948      	cbnz	r0, 45f4 <usb_dc_power_event_handler+0x20>
	z_impl_k_timer_start(timer, duration, period);
    45e0:	2200      	movs	r2, #0
    45e2:	2300      	movs	r3, #0
    45e4:	4808      	ldr	r0, [pc, #32]	; (4608 <usb_dc_power_event_handler+0x34>)
    45e6:	e9cd 2300 	strd	r2, r3, [sp]
    45ea:	f645 129a 	movw	r2, #22938	; 0x599a
    45ee:	2300      	movs	r3, #0
    45f0:	f005 fd3e 	bl	a070 <z_impl_k_timer_start>
}
    45f4:	b003      	add	sp, #12
    45f6:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (event) {
    45fa:	2000      	movs	r0, #0
}
    45fc:	b003      	add	sp, #12
    45fe:	f85d eb04 	ldr.w	lr, [sp], #4
	submit_dc_power_event(new_state);
    4602:	f7ff bf7d 	b.w	4500 <submit_dc_power_event>
    4606:	bf00      	nop
    4608:	20002288 	.word	0x20002288

0000460c <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    460c:	b513      	push	{r0, r1, r4, lr}

#ifdef CONFIG_HAS_HW_NRF_USBREG
	/* Use CLOCK/POWER priority for compatibility with other series where
	 * USB events are handled by CLOCK interrupt handler.
	 */
	IRQ_CONNECT(USBREGULATOR_IRQn,
    460e:	2200      	movs	r2, #0
    4610:	2101      	movs	r1, #1
    4612:	2037      	movs	r0, #55	; 0x37
    4614:	f7ff fc2a 	bl	3e6c <z_arm_irq_priority_set>
		    DT_IRQ(DT_INST(0, nordic_nrf_clock), priority),
		    nrfx_isr, nrfx_usbreg_irq_handler, 0);
	irq_enable(USBREGULATOR_IRQn);
    4618:	2037      	movs	r0, #55	; 0x37
    461a:	f7ff fbf7 	bl	3e0c <arch_irq_enable>

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    461e:	4812      	ldr	r0, [pc, #72]	; (4668 <usb_init+0x5c>)
    4620:	f003 ff2a 	bl	8478 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4624:	4b11      	ldr	r3, [pc, #68]	; (466c <usb_init+0x60>)
    4626:	4298      	cmp	r0, r3
    4628:	d11a      	bne.n	4660 <usb_init+0x54>
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    462a:	2400      	movs	r4, #0
	(void)nrfx_power_init(&power_config);
    462c:	4810      	ldr	r0, [pc, #64]	; (4670 <usb_init+0x64>)
    462e:	f003 f961 	bl	78f4 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    4632:	4810      	ldr	r0, [pc, #64]	; (4674 <usb_init+0x68>)
    4634:	f004 fbbc 	bl	8db0 <nrfx_usbreg_init>
	k_work_queue_start(&usbd_work_queue,
    4638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    463c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4640:	490d      	ldr	r1, [pc, #52]	; (4678 <usb_init+0x6c>)
    4642:	480e      	ldr	r0, [pc, #56]	; (467c <usb_init+0x70>)
    4644:	9400      	str	r4, [sp, #0]
    4646:	f005 f849 	bl	96dc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    464a:	490d      	ldr	r1, [pc, #52]	; (4680 <usb_init+0x74>)
    464c:	480b      	ldr	r0, [pc, #44]	; (467c <usb_init+0x70>)
    464e:	f009 fd17 	bl	e080 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    4652:	480c      	ldr	r0, [pc, #48]	; (4684 <usb_init+0x78>)
    4654:	490c      	ldr	r1, [pc, #48]	; (4688 <usb_init+0x7c>)
    4656:	f009 fde9 	bl	e22c <k_work_init>

	return 0;
    465a:	4620      	mov	r0, r4
}
    465c:	b002      	add	sp, #8
    465e:	bd10      	pop	{r4, pc}
		return -EIO;
    4660:	f06f 0004 	mvn.w	r0, #4
    4664:	e7fa      	b.n	465c <usb_init+0x50>
    4666:	bf00      	nop
    4668:	000046c5 	.word	0x000046c5
    466c:	0bad0000 	.word	0x0bad0000
    4670:	0000f3d0 	.word	0x0000f3d0
    4674:	0000eca4 	.word	0x0000eca4
    4678:	20056c98 	.word	0x20056c98
    467c:	20002528 	.word	0x20002528
    4680:	0000f3c5 	.word	0x0000f3c5
    4684:	20013800 	.word	0x20013800
    4688:	00004849 	.word	0x00004849

0000468c <hfxo_stop.constprop.0.isra.0>:
    468c:	2300      	movs	r3, #0
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    468e:	b510      	push	{r4, lr}
    4690:	490b      	ldr	r1, [pc, #44]	; (46c0 <hfxo_stop.constprop.0.isra.0+0x34>)
    4692:	e8d1 2fef 	ldaex	r2, [r1]
    4696:	2a01      	cmp	r2, #1
    4698:	d103      	bne.n	46a2 <hfxo_stop.constprop.0.isra.0+0x16>
    469a:	e8c1 3fe0 	stlex	r0, r3, [r1]
    469e:	2800      	cmp	r0, #0
    46a0:	d1f7      	bne.n	4692 <hfxo_stop.constprop.0.isra.0+0x6>
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    46a2:	d10c      	bne.n	46be <hfxo_stop.constprop.0.isra.0+0x32>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    46a4:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    46a8:	3914      	subs	r1, #20
    46aa:	4620      	mov	r0, r4
    46ac:	f006 fc9c 	bl	afe8 <onoff_cancel>

	if (rv == -EALREADY) {
    46b0:	3078      	adds	r0, #120	; 0x78
    46b2:	d104      	bne.n	46be <hfxo_stop.constprop.0.isra.0+0x32>
		rv = onoff_release(mgr);
    46b4:	4620      	mov	r0, r4
}
    46b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46ba:	f006 bc70 	b.w	af9e <onoff_release>
    46be:	bd10      	pop	{r4, pc}
    46c0:	200137f8 	.word	0x200137f8

000046c4 <usbd_event_handler>:
{
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	4606      	mov	r6, r0
    46c8:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    46ca:	2214      	movs	r2, #20
    46cc:	2100      	movs	r1, #0
    46ce:	a803      	add	r0, sp, #12
    46d0:	f006 ffed 	bl	b6ae <memset>
	switch (p_event->type) {
    46d4:	7833      	ldrb	r3, [r6, #0]
    46d6:	3b01      	subs	r3, #1
    46d8:	2b05      	cmp	r3, #5
    46da:	d821      	bhi.n	4720 <usbd_event_handler+0x5c>
    46dc:	e8df f003 	tbb	[pc, r3]
    46e0:	1414037a 	.word	0x1414037a
    46e4:	166a      	.short	0x166a
    46e6:	2303      	movs	r3, #3
		evt.evt_type = USBD_EVT_POWER;
    46e8:	2400      	movs	r4, #0
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    46ea:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
    46ee:	f7ff fee5 	bl	44bc <usbd_evt_alloc>
		if (!ev) {
    46f2:	4603      	mov	r3, r0
    46f4:	b1a0      	cbz	r0, 4720 <usbd_event_handler+0x5c>
		ev->evt = evt.evt;
    46f6:	f100 0208 	add.w	r2, r0, #8
		ev->evt_type = evt.evt_type;
    46fa:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    46fc:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    4700:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4704:	4618      	mov	r0, r3
    4706:	e01d      	b.n	4744 <usbd_event_handler+0x80>
	switch (p_event->type) {
    4708:	2304      	movs	r3, #4
    470a:	e7ed      	b.n	46e8 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    470c:	78b7      	ldrb	r7, [r6, #2]
    470e:	4638      	mov	r0, r7
    4710:	f7ff fe8e 	bl	4430 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4714:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4716:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    4718:	b123      	cbz	r3, 4724 <usbd_event_handler+0x60>
    471a:	3b01      	subs	r3, #1
    471c:	2b02      	cmp	r3, #2
    471e:	d943      	bls.n	47a8 <usbd_event_handler+0xe4>
}
    4720:	b009      	add	sp, #36	; 0x24
    4722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4724:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    4726:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4728:	d513      	bpl.n	4752 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    472a:	2d00      	cmp	r5, #0
    472c:	d1f8      	bne.n	4720 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    472e:	f7ff fec5 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    4732:	4603      	mov	r3, r0
    4734:	2800      	cmp	r0, #0
    4736:	d0f3      	beq.n	4720 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4738:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    473a:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    473c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    473e:	2203      	movs	r2, #3
    4740:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4742:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    4744:	f7ff fe66 	bl	4414 <usbd_evt_put>
}
    4748:	b009      	add	sp, #36	; 0x24
    474a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    474e:	f7ff be67 	b.w	4420 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    4752:	b155      	cbz	r5, 476a <usbd_event_handler+0xa6>
    4754:	2d01      	cmp	r5, #1
    4756:	d1e3      	bne.n	4720 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    4758:	f7ff feb0 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    475c:	4603      	mov	r3, r0
    475e:	2800      	cmp	r0, #0
    4760:	d0de      	beq.n	4720 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    4762:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    4764:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4766:	7305      	strb	r5, [r0, #12]
    4768:	e7eb      	b.n	4742 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    476a:	f7ff fea7 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    476e:	4607      	mov	r7, r0
    4770:	2800      	cmp	r0, #0
    4772:	d0d5      	beq.n	4720 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4774:	2301      	movs	r3, #1
    4776:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4778:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    477a:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    477c:	7303      	strb	r3, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    477e:	f104 010c 	add.w	r1, r4, #12
    4782:	78b0      	ldrb	r0, [r6, #2]
    4784:	f009 f90a 	bl	d99c <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4788:	4a13      	ldr	r2, [pc, #76]	; (47d8 <usbd_event_handler+0x114>)
    478a:	68e1      	ldr	r1, [r4, #12]
    478c:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4790:	428b      	cmp	r3, r1
    4792:	d906      	bls.n	47a2 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4794:	1a5b      	subs	r3, r3, r1
    4796:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    479a:	f004 f8a3 	bl	88e4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    479e:	4638      	mov	r0, r7
    47a0:	e7d0      	b.n	4744 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    47a2:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    47a6:	e7fa      	b.n	479e <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    47a8:	4630      	mov	r0, r6
}
    47aa:	b009      	add	sp, #36	; 0x24
    47ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    47b0:	f7ff bebc 	b.w	452c <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    47b4:	a801      	add	r0, sp, #4
    47b6:	f004 f86f 	bl	8898 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    47ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    47be:	2b05      	cmp	r3, #5
    47c0:	d104      	bne.n	47cc <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    47c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    47c6:	f013 0f60 	tst.w	r3, #96	; 0x60
    47ca:	d0a9      	beq.n	4720 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    47cc:	4b03      	ldr	r3, [pc, #12]	; (47dc <usbd_event_handler+0x118>)
			evt.evt_type = USBD_EVT_EP;
    47ce:	2401      	movs	r4, #1
			evt.evt.ep_evt.ep = ep_ctx;
    47d0:	9305      	str	r3, [sp, #20]
	if (put_evt) {
    47d2:	e78c      	b.n	46ee <usbd_event_handler+0x2a>
	switch (p_event->type) {
    47d4:	2402      	movs	r4, #2
    47d6:	e78a      	b.n	46ee <usbd_event_handler+0x2a>
    47d8:	200137d8 	.word	0x200137d8
    47dc:	20013944 	.word	0x20013944

000047e0 <eps_ctx_init>:
{
    47e0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47e2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    47e4:	f064 007f 	orn	r0, r4, #127	; 0x7f
    47e8:	b2c0      	uxtb	r0, r0
    47ea:	f7ff fe21 	bl	4430 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47ee:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    47f0:	f006 ff75 	bl	b6de <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47f4:	2c08      	cmp	r4, #8
    47f6:	d1f5      	bne.n	47e4 <eps_ctx_init+0x4>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    47f8:	2400      	movs	r4, #0
    47fa:	4d0e      	ldr	r5, [pc, #56]	; (4834 <eps_ctx_init+0x54>)
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    47fc:	b2e0      	uxtb	r0, r4
    47fe:	f7ff fe17 	bl	4430 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4802:	6903      	ldr	r3, [r0, #16]
    4804:	b903      	cbnz	r3, 4808 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4806:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4808:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    480a:	f006 ff68 	bl	b6de <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    480e:	2c08      	cmp	r4, #8
    4810:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4814:	d1f2      	bne.n	47fc <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    4816:	4808      	ldr	r0, [pc, #32]	; (4838 <eps_ctx_init+0x58>)
    4818:	f006 ff61 	bl	b6de <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    481c:	4b07      	ldr	r3, [pc, #28]	; (483c <eps_ctx_init+0x5c>)
    481e:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4822:	b912      	cbnz	r2, 482a <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4824:	4a06      	ldr	r2, [pc, #24]	; (4840 <eps_ctx_init+0x60>)
    4826:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    482a:	4806      	ldr	r0, [pc, #24]	; (4844 <eps_ctx_init+0x64>)
    482c:	f006 ff57 	bl	b6de <ep_ctx_reset>
}
    4830:	2000      	movs	r0, #0
    4832:	bd38      	pop	{r3, r4, r5, pc}
    4834:	20013e68 	.word	0x20013e68
    4838:	20013924 	.word	0x20013924
    483c:	200137d8 	.word	0x200137d8
    4840:	20013a68 	.word	0x20013a68
    4844:	20013a44 	.word	0x20013a44

00004848 <usbd_work_handler>:
{
    4848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    484c:	4607      	mov	r7, r0
	return get_usbd_ctx()->ready;
    484e:	4cad      	ldr	r4, [pc, #692]	; (4b04 <usbd_work_handler+0x2bc>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4850:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4b08 <usbd_work_handler+0x2c0>
{
    4854:	b085      	sub	sp, #20
	while ((ev = usbd_evt_get()) != NULL) {
    4856:	f7ff fe1b 	bl	4490 <usbd_evt_get>
    485a:	b910      	cbnz	r0, 4862 <usbd_work_handler+0x1a>
}
    485c:	b005      	add	sp, #20
    485e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    4862:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4866:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4868:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    486c:	b93b      	cbnz	r3, 487e <usbd_work_handler+0x36>
    486e:	2a00      	cmp	r2, #0
    4870:	f000 8088 	beq.w	4984 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4874:	4649      	mov	r1, r9
    4876:	48a4      	ldr	r0, [pc, #656]	; (4b08 <usbd_work_handler+0x2c0>)
    4878:	f009 fbd3 	bl	e022 <k_mem_slab_free>
}
    487c:	e7eb      	b.n	4856 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    487e:	2a04      	cmp	r2, #4
    4880:	d844      	bhi.n	490c <usbd_work_handler+0xc4>
    4882:	e8df f012 	tbh	[pc, r2, lsl #1]
    4886:	007f      	.short	0x007f
    4888:	00fe0005 	.word	0x00fe0005
    488c:	012f0114 	.word	0x012f0114
	switch (ep_evt->evt_type) {
    4890:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4892:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    4894:	2b03      	cmp	r3, #3
    4896:	d839      	bhi.n	490c <usbd_work_handler+0xc4>
    4898:	e8df f003 	tbb	[pc, r3]
    489c:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    48a0:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    48a2:	2208      	movs	r2, #8
    48a4:	2100      	movs	r1, #0
    48a6:	4630      	mov	r0, r6
    48a8:	f006 ff01 	bl	b6ae <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    48ac:	4b97      	ldr	r3, [pc, #604]	; (4b0c <usbd_work_handler+0x2c4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    48ae:	4898      	ldr	r0, [pc, #608]	; (4b10 <usbd_work_handler+0x2c8>)
    48b0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    48b4:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    48b6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    48ba:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    48bc:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    48c0:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    48c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    48c8:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    48ca:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    48ce:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    48d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    48d6:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    48d8:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    48dc:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    48e0:	4631      	mov	r1, r6
    48e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    48e6:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    48e8:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    48ea:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    48ec:	f006 fed4 	bl	b698 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    48f0:	682b      	ldr	r3, [r5, #0]
    48f2:	2100      	movs	r1, #0
    48f4:	7a68      	ldrb	r0, [r5, #9]
    48f6:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    48f8:	f996 3000 	ldrsb.w	r3, [r6]
    48fc:	2b00      	cmp	r3, #0
    48fe:	db08      	blt.n	4912 <usbd_work_handler+0xca>
    4900:	88f3      	ldrh	r3, [r6, #6]
    4902:	b133      	cbz	r3, 4912 <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4904:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4908:	f003 ffec 	bl	88e4 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    490c:	4649      	mov	r1, r9
    490e:	4640      	mov	r0, r8
    4910:	e7b2      	b.n	4878 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    4912:	2300      	movs	r3, #0
    4914:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4918:	e7f8      	b.n	490c <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    491a:	7f6b      	ldrb	r3, [r5, #29]
    491c:	2b00      	cmp	r3, #0
    491e:	d0f5      	beq.n	490c <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    4920:	7f2b      	ldrb	r3, [r5, #28]
    4922:	2b00      	cmp	r3, #0
    4924:	d0f2      	beq.n	490c <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    4926:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	ep_ctx->read_pending = false;
    492c:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    492e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4932:	4878      	ldr	r0, [pc, #480]	; (4b14 <usbd_work_handler+0x2cc>)
	ep_ctx->read_complete = false;
    4934:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4936:	f006 fee8 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    493a:	696b      	ldr	r3, [r5, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    493c:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    493e:	9301      	str	r3, [sp, #4]
    4940:	686b      	ldr	r3, [r5, #4]
    4942:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4946:	7a68      	ldrb	r0, [r5, #9]
    4948:	f003 fdd8 	bl	84fc <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    494c:	4871      	ldr	r0, [pc, #452]	; (4b14 <usbd_work_handler+0x2cc>)
    494e:	f006 fede 	bl	b70e <k_mutex_unlock.isra.0>
    4952:	e7db      	b.n	490c <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4954:	2101      	movs	r1, #1
    4956:	682b      	ldr	r3, [r5, #0]
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4958:	7a68      	ldrb	r0, [r5, #9]
    495a:	4798      	blx	r3
		break;
    495c:	e7d6      	b.n	490c <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    495e:	7aab      	ldrb	r3, [r5, #10]
    4960:	b96b      	cbnz	r3, 497e <usbd_work_handler+0x136>
    4962:	7feb      	ldrb	r3, [r5, #31]
    4964:	b95b      	cbnz	r3, 497e <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4966:	486b      	ldr	r0, [pc, #428]	; (4b14 <usbd_work_handler+0x2cc>)
    4968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    496c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4970:	f006 fecb 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    4974:	f003 ffea 	bl	894c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4978:	4866      	ldr	r0, [pc, #408]	; (4b14 <usbd_work_handler+0x2cc>)
    497a:	f006 fec8 	bl	b70e <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    497e:	2102      	movs	r1, #2
    4980:	682b      	ldr	r3, [r5, #0]
    4982:	e7e9      	b.n	4958 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    4984:	7a02      	ldrb	r2, [r0, #8]
    4986:	2a04      	cmp	r2, #4
    4988:	d8c0      	bhi.n	490c <usbd_work_handler+0xc4>
    498a:	e8df f002 	tbb	[pc, r2]
    498e:	0355      	.short	0x0355
    4990:	631f      	.short	0x631f
    4992:	6f          	.byte	0x6f
    4993:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4994:	f003 fd3a 	bl	840c <nrfx_usbd_is_enabled>
    4998:	4605      	mov	r5, r0
    499a:	2800      	cmp	r0, #0
    499c:	d1b6      	bne.n	490c <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    499e:	f003 fce1 	bl	8364 <nrfx_usbd_enable>
    49a2:	2301      	movs	r3, #1
    49a4:	495c      	ldr	r1, [pc, #368]	; (4b18 <usbd_work_handler+0x2d0>)
    49a6:	e8d1 2fef 	ldaex	r2, [r1]
    49aa:	2a00      	cmp	r2, #0
    49ac:	d103      	bne.n	49b6 <usbd_work_handler+0x16e>
    49ae:	e8c1 3fe0 	stlex	r0, r3, [r1]
    49b2:	2800      	cmp	r0, #0
    49b4:	d1f7      	bne.n	49a6 <usbd_work_handler+0x15e>
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    49b6:	d1a9      	bne.n	490c <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    49b8:	f841 5c08 	str.w	r5, [r1, #-8]
    49bc:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    49c0:	69e0      	ldr	r0, [r4, #28]
    49c2:	3914      	subs	r1, #20
    49c4:	6163      	str	r3, [r4, #20]
    49c6:	f006 fa92 	bl	aeee <onoff_request>
    49ca:	e79f      	b.n	490c <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    49cc:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    49ce:	f065 007f 	orn	r0, r5, #127	; 0x7f
    49d2:	b2c0      	uxtb	r0, r0
    49d4:	f7ff fd2c 	bl	4430 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    49d8:	7a03      	ldrb	r3, [r0, #8]
    49da:	b113      	cbz	r3, 49e2 <usbd_work_handler+0x19a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    49dc:	7a40      	ldrb	r0, [r0, #9]
    49de:	f004 f963 	bl	8ca8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    49e2:	3501      	adds	r5, #1
    49e4:	2d08      	cmp	r5, #8
    49e6:	d1f2      	bne.n	49ce <usbd_work_handler+0x186>
		if (ep_ctx->cfg.en) {
    49e8:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    49ec:	b11b      	cbz	r3, 49f6 <usbd_work_handler+0x1ae>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    49ee:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    49f2:	f004 f959 	bl	8ca8 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    49f6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    49f8:	b2e8      	uxtb	r0, r5
    49fa:	f7ff fd19 	bl	4430 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    49fe:	7a03      	ldrb	r3, [r0, #8]
    4a00:	b113      	cbz	r3, 4a08 <usbd_work_handler+0x1c0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a02:	7a40      	ldrb	r0, [r0, #9]
    4a04:	f004 f950 	bl	8ca8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4a08:	3501      	adds	r5, #1
    4a0a:	2d08      	cmp	r5, #8
    4a0c:	d1f4      	bne.n	49f8 <usbd_work_handler+0x1b0>
		if (ep_ctx->cfg.en) {
    4a0e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4a12:	b11b      	cbz	r3, 4a1c <usbd_work_handler+0x1d4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4a14:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4a18:	f004 f946 	bl	8ca8 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4a1c:	2001      	movs	r0, #1
    4a1e:	f003 fcd7 	bl	83d0 <nrfx_usbd_start>
		ctx->ready = true;
    4a22:	2301      	movs	r3, #1
    4a24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4a28:	6823      	ldr	r3, [r4, #0]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	f43f af6e 	beq.w	490c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4a30:	2100      	movs	r1, #0
    4a32:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4a34:	4798      	blx	r3
    4a36:	e769      	b.n	490c <usbd_work_handler+0xc4>
		ctx->ready = false;
    4a38:	2500      	movs	r5, #0
    4a3a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4a3e:	f004 f8f1 	bl	8c24 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4a42:	f7ff fe23 	bl	468c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4a46:	6823      	ldr	r3, [r4, #0]
    4a48:	2b00      	cmp	r3, #0
    4a4a:	f43f af5f 	beq.w	490c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4a4e:	4629      	mov	r1, r5
    4a50:	2004      	movs	r0, #4
    4a52:	e7ef      	b.n	4a34 <usbd_work_handler+0x1ec>
		if (dev_ready()) {
    4a54:	2b00      	cmp	r3, #0
    4a56:	f43f af59 	beq.w	490c <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    4a5a:	f003 fce1 	bl	8420 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4a5e:	6823      	ldr	r3, [r4, #0]
    4a60:	2b00      	cmp	r3, #0
    4a62:	f43f af53 	beq.w	490c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4a66:	2100      	movs	r1, #0
    4a68:	2005      	movs	r0, #5
    4a6a:	e7e3      	b.n	4a34 <usbd_work_handler+0x1ec>
		if (ctx->status_cb && dev_ready()) {
    4a6c:	6822      	ldr	r2, [r4, #0]
    4a6e:	2a00      	cmp	r2, #0
    4a70:	f43f af4c 	beq.w	490c <usbd_work_handler+0xc4>
    4a74:	2b00      	cmp	r3, #0
    4a76:	f43f af49 	beq.w	490c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4a7a:	2100      	movs	r1, #0
    4a7c:	2006      	movs	r0, #6
    4a7e:	4790      	blx	r2
    4a80:	e744      	b.n	490c <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a82:	f107 0510 	add.w	r5, r7, #16
    4a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a8e:	4628      	mov	r0, r5
    4a90:	f006 fe3b 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4a94:	f7ff fea4 	bl	47e0 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4a98:	4628      	mov	r0, r5
    4a9a:	f006 fe38 	bl	b70e <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4a9e:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	f43f af32 	beq.w	490c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4aa8:	2100      	movs	r1, #0
    4aaa:	2001      	movs	r0, #1
    4aac:	e7c2      	b.n	4a34 <usbd_work_handler+0x1ec>
	if (ep_ctx->cfg.en) {
    4aae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4ab2:	b17b      	cbz	r3, 4ad4 <usbd_work_handler+0x28c>
		ep_ctx->read_pending = true;
    4ab4:	2501      	movs	r5, #1
    4ab6:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4aba:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4abe:	f7ff fcfd 	bl	44bc <usbd_evt_alloc>
		if (!ev) {
    4ac2:	b138      	cbz	r0, 4ad4 <usbd_work_handler+0x28c>
		ev->evt.ep_evt.ep = ep_ctx;
    4ac4:	4a15      	ldr	r2, [pc, #84]	; (4b1c <usbd_work_handler+0x2d4>)
		ev->evt_type = USBD_EVT_EP;
    4ac6:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4ac8:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4aca:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4acc:	f7ff fca2 	bl	4414 <usbd_evt_put>
		usbd_work_schedule();
    4ad0:	f7ff fca6 	bl	4420 <usbd_work_schedule>
			if (ctx->status_cb) {
    4ad4:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4ad8:	2b00      	cmp	r3, #0
    4ada:	f43f af17 	beq.w	490c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    4ade:	2100      	movs	r1, #0
    4ae0:	200a      	movs	r0, #10
    4ae2:	e7a7      	b.n	4a34 <usbd_work_handler+0x1ec>
	nrfx_power_usbevt_disable();
    4ae4:	f004 f94c 	bl	8d80 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    4ae8:	f004 f89c 	bl	8c24 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4aec:	f003 fc30 	bl	8350 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4af0:	f7ff fcd6 	bl	44a0 <usbd_evt_flush>
	ret = eps_ctx_init();
    4af4:	f7ff fe74 	bl	47e0 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4af8:	f004 f93a 	bl	8d70 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4afc:	4808      	ldr	r0, [pc, #32]	; (4b20 <usbd_work_handler+0x2d8>)
    4afe:	f003 fcbb 	bl	8478 <nrfx_usbd_init>
}
    4b02:	e703      	b.n	490c <usbd_work_handler+0xc4>
    4b04:	200137d8 	.word	0x200137d8
    4b08:	200022f8 	.word	0x200022f8
    4b0c:	50036000 	.word	0x50036000
    4b10:	200137dc 	.word	0x200137dc
    4b14:	20013810 	.word	0x20013810
    4b18:	200137f8 	.word	0x200137f8
    4b1c:	20013a44 	.word	0x20013a44
    4b20:	000046c5 	.word	0x000046c5

00004b24 <usb_dc_attach>:
{
    4b24:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4b26:	4d15      	ldr	r5, [pc, #84]	; (4b7c <usb_dc_attach+0x58>)
    4b28:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4b2c:	bb24      	cbnz	r4, 4b78 <usb_dc_attach+0x54>
	return z_impl_k_mutex_init(mutex);
    4b2e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4b32:	f009 fabe 	bl	e0b2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4b36:	2002      	movs	r0, #2
    4b38:	f000 fb40 	bl	51bc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b3c:	4622      	mov	r2, r4
    4b3e:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4b40:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b42:	2036      	movs	r0, #54	; 0x36
    4b44:	f7ff f992 	bl	3e6c <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4b48:	f004 f912 	bl	8d70 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    4b4c:	f7ff fe48 	bl	47e0 <eps_ctx_init>
	if (ret == 0) {
    4b50:	4604      	mov	r4, r0
    4b52:	b910      	cbnz	r0, 4b5a <usb_dc_attach+0x36>
		ctx->attached = true;
    4b54:	2301      	movs	r3, #1
    4b56:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4b5a:	4b09      	ldr	r3, [pc, #36]	; (4b80 <usb_dc_attach+0x5c>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	b10b      	cbz	r3, 4b64 <usb_dc_attach+0x40>
		usbd_work_schedule();
    4b60:	f7ff fc5e 	bl	4420 <usbd_work_schedule>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4b64:	4b07      	ldr	r3, [pc, #28]	; (4b84 <usb_dc_attach+0x60>)
    4b66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    4b6a:	07db      	lsls	r3, r3, #31
    4b6c:	d502      	bpl.n	4b74 <usb_dc_attach+0x50>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4b6e:	2000      	movs	r0, #0
    4b70:	f7ff fd30 	bl	45d4 <usb_dc_power_event_handler>
}
    4b74:	4620      	mov	r0, r4
    4b76:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4b78:	2400      	movs	r4, #0
    4b7a:	e7fb      	b.n	4b74 <usb_dc_attach+0x50>
    4b7c:	200137d8 	.word	0x200137d8
    4b80:	20002378 	.word	0x20002378
    4b84:	50037000 	.word	0x50037000

00004b88 <usb_dc_detach>:
{
    4b88:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b92:	480b      	ldr	r0, [pc, #44]	; (4bc0 <usb_dc_detach+0x38>)
    4b94:	f006 fdb9 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
	usbd_evt_flush();
    4b98:	f7ff fc82 	bl	44a0 <usbd_evt_flush>
	if (nrfx_usbd_is_enabled()) {
    4b9c:	f003 fc36 	bl	840c <nrfx_usbd_is_enabled>
    4ba0:	b108      	cbz	r0, 4ba6 <usb_dc_detach+0x1e>
		nrfx_usbd_disable();
    4ba2:	f004 f83f 	bl	8c24 <nrfx_usbd_disable>
	ctx->attached = false;
    4ba6:	2400      	movs	r4, #0
	(void)hfxo_stop(ctx);
    4ba8:	f7ff fd70 	bl	468c <hfxo_stop.constprop.0.isra.0>
	nrfx_power_usbevt_disable();
    4bac:	f004 f8e8 	bl	8d80 <nrfx_usbreg_disable>
	ctx->attached = false;
    4bb0:	4804      	ldr	r0, [pc, #16]	; (4bc4 <usb_dc_detach+0x3c>)
    4bb2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    4bb6:	3038      	adds	r0, #56	; 0x38
    4bb8:	f006 fda9 	bl	b70e <k_mutex_unlock.isra.0>
}
    4bbc:	4620      	mov	r0, r4
    4bbe:	bd10      	pop	{r4, pc}
    4bc0:	20013810 	.word	0x20013810
    4bc4:	200137d8 	.word	0x200137d8

00004bc8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4bc8:	4b07      	ldr	r3, [pc, #28]	; (4be8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4bca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4bce:	b13a      	cbz	r2, 4be0 <usb_dc_set_address+0x18>
    4bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	bf14      	ite	ne
    4bd8:	2000      	movne	r0, #0
    4bda:	f06f 0012 	mvneq.w	r0, #18
    4bde:	4770      	bx	lr
    4be0:	f06f 0012 	mvn.w	r0, #18
}
    4be4:	4770      	bx	lr
    4be6:	bf00      	nop
    4be8:	200137d8 	.word	0x200137d8

00004bec <usb_dc_ep_configure>:
{
    4bec:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4bee:	4b10      	ldr	r3, [pc, #64]	; (4c30 <usb_dc_ep_configure+0x44>)
{
    4bf0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4bf6:	b1c3      	cbz	r3, 4c2a <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4bf8:	7805      	ldrb	r5, [r0, #0]
    4bfa:	4628      	mov	r0, r5
    4bfc:	f7ff fc18 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4c00:	b910      	cbnz	r0, 4c08 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4c02:	f06f 0015 	mvn.w	r0, #21
}
    4c06:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4c08:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4c0a:	7923      	ldrb	r3, [r4, #4]
    4c0c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4c0e:	8863      	ldrh	r3, [r4, #2]
    4c10:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4c12:	7820      	ldrb	r0, [r4, #0]
    4c14:	8861      	ldrh	r1, [r4, #2]
    4c16:	f010 0f08 	tst.w	r0, #8
    4c1a:	d102      	bne.n	4c22 <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4c1c:	1e4b      	subs	r3, r1, #1
    4c1e:	420b      	tst	r3, r1
    4c20:	d1ef      	bne.n	4c02 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4c22:	f008 feb6 	bl	d992 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4c26:	2000      	movs	r0, #0
    4c28:	e7ed      	b.n	4c06 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    4c2a:	f06f 0012 	mvn.w	r0, #18
    4c2e:	e7ea      	b.n	4c06 <usb_dc_ep_configure+0x1a>
    4c30:	200137d8 	.word	0x200137d8

00004c34 <usb_dc_ep_set_stall>:
{
    4c34:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4c36:	4b12      	ldr	r3, [pc, #72]	; (4c80 <usb_dc_ep_set_stall+0x4c>)
{
    4c38:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4c3a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4c3e:	b1ca      	cbz	r2, 4c74 <usb_dc_ep_set_stall+0x40>
    4c40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4c44:	b1b3      	cbz	r3, 4c74 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4c46:	f7ff fbf3 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4c4a:	4604      	mov	r4, r0
    4c4c:	b1a8      	cbz	r0, 4c7a <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    4c4e:	7a83      	ldrb	r3, [r0, #10]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d012      	beq.n	4c7a <usb_dc_ep_set_stall+0x46>
    4c54:	d907      	bls.n	4c66 <usb_dc_ep_set_stall+0x32>
    4c56:	3b02      	subs	r3, #2
    4c58:	2b01      	cmp	r3, #1
    4c5a:	d907      	bls.n	4c6c <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.len = 0U;
    4c5c:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4c5e:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
    4c60:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4c62:	61a3      	str	r3, [r4, #24]
}
    4c64:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4c66:	f003 fe79 	bl	895c <nrfx_usbd_setup_stall>
		break;
    4c6a:	e7f7      	b.n	4c5c <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4c6c:	4628      	mov	r0, r5
    4c6e:	f003 fde5 	bl	883c <nrfx_usbd_ep_stall>
		break;
    4c72:	e7f3      	b.n	4c5c <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4c74:	f06f 0012 	mvn.w	r0, #18
    4c78:	e7f4      	b.n	4c64 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    4c7a:	f06f 0015 	mvn.w	r0, #21
    4c7e:	e7f1      	b.n	4c64 <usb_dc_ep_set_stall+0x30>
    4c80:	200137d8 	.word	0x200137d8

00004c84 <usb_dc_ep_clear_stall>:
{
    4c84:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4c86:	4b0e      	ldr	r3, [pc, #56]	; (4cc0 <usb_dc_ep_clear_stall+0x3c>)
{
    4c88:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4c8a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4c8e:	b182      	cbz	r2, 4cb2 <usb_dc_ep_clear_stall+0x2e>
    4c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4c94:	b16b      	cbz	r3, 4cb2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4c96:	f7ff fbcb 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4c9a:	b168      	cbz	r0, 4cb8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4c9c:	f015 0408 	ands.w	r4, r5, #8
    4ca0:	d10a      	bne.n	4cb8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4ca2:	4628      	mov	r0, r5
    4ca4:	f003 fdec 	bl	8880 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4ca8:	4628      	mov	r0, r5
    4caa:	f004 f851 	bl	8d50 <nrfx_usbd_ep_stall_clear>
	return 0;
    4cae:	4620      	mov	r0, r4
}
    4cb0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4cb2:	f06f 0012 	mvn.w	r0, #18
    4cb6:	e7fb      	b.n	4cb0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4cb8:	f06f 0015 	mvn.w	r0, #21
    4cbc:	e7f8      	b.n	4cb0 <usb_dc_ep_clear_stall+0x2c>
    4cbe:	bf00      	nop
    4cc0:	200137d8 	.word	0x200137d8

00004cc4 <usb_dc_ep_is_stalled>:
{
    4cc4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4cc6:	4b0c      	ldr	r3, [pc, #48]	; (4cf8 <usb_dc_ep_is_stalled+0x34>)
{
    4cc8:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4cca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4cce:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4cd0:	b162      	cbz	r2, 4cec <usb_dc_ep_is_stalled+0x28>
    4cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4cd6:	b14b      	cbz	r3, 4cec <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4cd8:	f7ff fbaa 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4cdc:	b148      	cbz	r0, 4cf2 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4cde:	b144      	cbz	r4, 4cf2 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4ce0:	4628      	mov	r0, r5
    4ce2:	f003 fdb3 	bl	884c <nrfx_usbd_ep_stall_check>
    4ce6:	7020      	strb	r0, [r4, #0]
	return 0;
    4ce8:	2000      	movs	r0, #0
}
    4cea:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4cec:	f06f 0012 	mvn.w	r0, #18
    4cf0:	e7fb      	b.n	4cea <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4cf2:	f06f 0015 	mvn.w	r0, #21
    4cf6:	e7f8      	b.n	4cea <usb_dc_ep_is_stalled+0x26>
    4cf8:	200137d8 	.word	0x200137d8

00004cfc <usb_dc_ep_enable>:
{
    4cfc:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4cfe:	4e13      	ldr	r6, [pc, #76]	; (4d4c <usb_dc_ep_enable+0x50>)
{
    4d00:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4d02:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    4d06:	b1c3      	cbz	r3, 4d3a <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4d08:	f7ff fb92 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4d0c:	4605      	mov	r5, r0
    4d0e:	b1b8      	cbz	r0, 4d40 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4d10:	0723      	lsls	r3, r4, #28
    4d12:	d405      	bmi.n	4d20 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4d14:	4620      	mov	r0, r4
    4d16:	f003 fdb3 	bl	8880 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4d1a:	4620      	mov	r0, r4
    4d1c:	f004 f818 	bl	8d50 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4d20:	7a2b      	ldrb	r3, [r5, #8]
    4d22:	b983      	cbnz	r3, 4d46 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4d24:	2301      	movs	r3, #1
    4d26:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4d28:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4d2c:	b90b      	cbnz	r3, 4d32 <usb_dc_ep_enable+0x36>
	return 0;
    4d2e:	2000      	movs	r0, #0
}
    4d30:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4d32:	4620      	mov	r0, r4
    4d34:	f003 ffb8 	bl	8ca8 <nrfx_usbd_ep_enable>
    4d38:	e7f9      	b.n	4d2e <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4d3a:	f06f 0012 	mvn.w	r0, #18
    4d3e:	e7f7      	b.n	4d30 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4d40:	f06f 0015 	mvn.w	r0, #21
    4d44:	e7f4      	b.n	4d30 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4d46:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4d4a:	e7f1      	b.n	4d30 <usb_dc_ep_enable+0x34>
    4d4c:	200137d8 	.word	0x200137d8

00004d50 <usb_dc_ep_write>:
{
    4d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4d54:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4e3c <usb_dc_ep_write+0xec>
{
    4d58:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    4d5a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4d5e:	4607      	mov	r7, r0
    4d60:	4689      	mov	r9, r1
    4d62:	4615      	mov	r5, r2
    4d64:	b085      	sub	sp, #20
	if (!dev_attached() || !dev_ready()) {
    4d66:	2b00      	cmp	r3, #0
    4d68:	d061      	beq.n	4e2e <usb_dc_ep_write+0xde>
    4d6a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d05d      	beq.n	4e2e <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4d72:	0603      	lsls	r3, r0, #24
    4d74:	d55e      	bpl.n	4e34 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    4d76:	f7ff fb5b 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4d7a:	4604      	mov	r4, r0
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d059      	beq.n	4e34 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    4d80:	7a03      	ldrb	r3, [r0, #8]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d056      	beq.n	4e34 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4d8e:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4d92:	f006 fcba 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4d96:	7fa3      	ldrb	r3, [r4, #30]
    4d98:	b14b      	cbz	r3, 4dae <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    4d9a:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4d9e:	f006 fcb6 	bl	b70e <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4da2:	f06f 040a 	mvn.w	r4, #10
}
    4da6:	4620      	mov	r0, r4
    4da8:	b005      	add	sp, #20
    4daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4dae:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    4db0:	b1c5      	cbz	r5, 4de4 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4db2:	b33b      	cbz	r3, 4e04 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    4db4:	2301      	movs	r3, #1
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4db6:	f04f 0800 	mov.w	r8, #0
	ep_ctx->write_in_progress = true;
    4dba:	77a3      	strb	r3, [r4, #30]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4dbc:	4638      	mov	r0, r7
    4dbe:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4dc0:	e9cd 9501 	strd	r9, r5, [sp, #4]
    4dc4:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4dc8:	f003 fb98 	bl	84fc <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4dcc:	4b1c      	ldr	r3, [pc, #112]	; (4e40 <usb_dc_ep_write+0xf0>)
    4dce:	4298      	cmp	r0, r3
    4dd0:	d029      	beq.n	4e26 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    4dd2:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    4dd6:	bb1e      	cbnz	r6, 4e20 <usb_dc_ep_write+0xd0>
		result = -EIO;
    4dd8:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4ddc:	4819      	ldr	r0, [pc, #100]	; (4e44 <usb_dc_ep_write+0xf4>)
    4dde:	f006 fc96 	bl	b70e <k_mutex_unlock.isra.0>
	return result;
    4de2:	e7e0      	b.n	4da6 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4de4:	7fe2      	ldrb	r2, [r4, #31]
    4de6:	b102      	cbz	r2, 4dea <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    4de8:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4dea:	2b00      	cmp	r3, #0
    4dec:	d1e2      	bne.n	4db4 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4dee:	f003 fdbd 	bl	896c <nrfx_usbd_last_setup_dir_get>
    4df2:	42b8      	cmp	r0, r7
    4df4:	d0de      	beq.n	4db4 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    4df6:	f003 fda9 	bl	894c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4dfa:	4812      	ldr	r0, [pc, #72]	; (4e44 <usb_dc_ep_write+0xf4>)
    4dfc:	f006 fc87 	bl	b70e <k_mutex_unlock.isra.0>
		return 0;
    4e00:	2400      	movs	r4, #0
    4e02:	e7d0      	b.n	4da6 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e04:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4e08:	42ab      	cmp	r3, r5
    4e0a:	d9f0      	bls.n	4dee <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4e0c:	6862      	ldr	r2, [r4, #4]
    4e0e:	fbb5 f3f2 	udiv	r3, r5, r2
    4e12:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e16:	2b00      	cmp	r3, #0
    4e18:	d1e9      	bne.n	4dee <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    4e1a:	2301      	movs	r3, #1
    4e1c:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    4e1e:	e7e6      	b.n	4dee <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    4e20:	f8c6 8000 	str.w	r8, [r6]
    4e24:	e7d8      	b.n	4dd8 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4e26:	b106      	cbz	r6, 4e2a <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4e28:	6035      	str	r5, [r6, #0]
	int result = 0;
    4e2a:	2400      	movs	r4, #0
    4e2c:	e7d6      	b.n	4ddc <usb_dc_ep_write+0x8c>
		return -ENODEV;
    4e2e:	f06f 0412 	mvn.w	r4, #18
    4e32:	e7b8      	b.n	4da6 <usb_dc_ep_write+0x56>
		return -EINVAL;
    4e34:	f06f 0415 	mvn.w	r4, #21
    4e38:	e7b5      	b.n	4da6 <usb_dc_ep_write+0x56>
    4e3a:	bf00      	nop
    4e3c:	200137d8 	.word	0x200137d8
    4e40:	0bad0000 	.word	0x0bad0000
    4e44:	20013810 	.word	0x20013810

00004e48 <usb_dc_ep_read_wait>:
{
    4e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e4c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4e4e:	4b20      	ldr	r3, [pc, #128]	; (4ed0 <usb_dc_ep_read_wait+0x88>)
{
    4e50:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4e52:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4e56:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4e58:	2a00      	cmp	r2, #0
    4e5a:	d033      	beq.n	4ec4 <usb_dc_ep_read_wait+0x7c>
    4e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4e60:	b383      	cbz	r3, 4ec4 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4e62:	0603      	lsls	r3, r0, #24
    4e64:	d431      	bmi.n	4eca <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4e66:	b901      	cbnz	r1, 4e6a <usb_dc_ep_read_wait+0x22>
    4e68:	bb7f      	cbnz	r7, 4eca <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    4e6a:	f7ff fae1 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4e6e:	4604      	mov	r4, r0
    4e70:	b358      	cbz	r0, 4eca <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4e72:	7a03      	ldrb	r3, [r0, #8]
    4e74:	b34b      	cbz	r3, 4eca <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e7e:	4815      	ldr	r0, [pc, #84]	; (4ed4 <usb_dc_ep_read_wait+0x8c>)
    4e80:	f006 fc43 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4e84:	68e3      	ldr	r3, [r4, #12]
    4e86:	46b8      	mov	r8, r7
    4e88:	429f      	cmp	r7, r3
    4e8a:	bf28      	it	cs
    4e8c:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    4e8e:	b946      	cbnz	r6, 4ea2 <usb_dc_ep_read_wait+0x5a>
    4e90:	b93f      	cbnz	r7, 4ea2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    4e92:	b105      	cbz	r5, 4e96 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4e94:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4e96:	480f      	ldr	r0, [pc, #60]	; (4ed4 <usb_dc_ep_read_wait+0x8c>)
    4e98:	f006 fc39 	bl	b70e <k_mutex_unlock.isra.0>
		return 0;
    4e9c:	2000      	movs	r0, #0
}
    4e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4ea2:	4642      	mov	r2, r8
    4ea4:	4630      	mov	r0, r6
    4ea6:	69a1      	ldr	r1, [r4, #24]
    4ea8:	f006 fbf6 	bl	b698 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4eac:	69a3      	ldr	r3, [r4, #24]
    4eae:	4443      	add	r3, r8
    4eb0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4eb2:	68e3      	ldr	r3, [r4, #12]
    4eb4:	eba3 0308 	sub.w	r3, r3, r8
    4eb8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    4eba:	2d00      	cmp	r5, #0
    4ebc:	d0eb      	beq.n	4e96 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    4ebe:	f8c5 8000 	str.w	r8, [r5]
    4ec2:	e7e8      	b.n	4e96 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    4ec4:	f06f 0012 	mvn.w	r0, #18
    4ec8:	e7e9      	b.n	4e9e <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    4eca:	f06f 0015 	mvn.w	r0, #21
    4ece:	e7e6      	b.n	4e9e <usb_dc_ep_read_wait+0x56>
    4ed0:	200137d8 	.word	0x200137d8
    4ed4:	20013810 	.word	0x20013810

00004ed8 <usb_dc_ep_read_continue>:
{
    4ed8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4eda:	4d1e      	ldr	r5, [pc, #120]	; (4f54 <usb_dc_ep_read_continue+0x7c>)
{
    4edc:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4ede:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    4ee2:	b382      	cbz	r2, 4f46 <usb_dc_ep_read_continue+0x6e>
    4ee4:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    4ee8:	b36a      	cbz	r2, 4f46 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4eea:	061b      	lsls	r3, r3, #24
    4eec:	d42e      	bmi.n	4f4c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    4eee:	f7ff fa9f 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4ef2:	4604      	mov	r4, r0
    4ef4:	b350      	cbz	r0, 4f4c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    4ef6:	7a03      	ldrb	r3, [r0, #8]
    4ef8:	b343      	cbz	r3, 4f4c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f02:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4f06:	f006 fc00 	bl	b70a <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    4f0a:	68e3      	ldr	r3, [r4, #12]
    4f0c:	b9b3      	cbnz	r3, 4f3c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    4f0e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4f10:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4f12:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4f14:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4f16:	7f63      	ldrb	r3, [r4, #29]
    4f18:	b183      	cbz	r3, 4f3c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    4f1a:	f7ff facf 	bl	44bc <usbd_evt_alloc>
			if (!ev) {
    4f1e:	b930      	cbnz	r0, 4f2e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4f20:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4f24:	f006 fbf3 	bl	b70e <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4f28:	f06f 000b 	mvn.w	r0, #11
}
    4f2c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    4f2e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4f30:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4f32:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4f34:	f7ff fa6e 	bl	4414 <usbd_evt_put>
			usbd_work_schedule();
    4f38:	f7ff fa72 	bl	4420 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4f3c:	4806      	ldr	r0, [pc, #24]	; (4f58 <usb_dc_ep_read_continue+0x80>)
    4f3e:	f006 fbe6 	bl	b70e <k_mutex_unlock.isra.0>
	return 0;
    4f42:	2000      	movs	r0, #0
    4f44:	e7f2      	b.n	4f2c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4f46:	f06f 0012 	mvn.w	r0, #18
    4f4a:	e7ef      	b.n	4f2c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    4f4c:	f06f 0015 	mvn.w	r0, #21
    4f50:	e7ec      	b.n	4f2c <usb_dc_ep_read_continue+0x54>
    4f52:	bf00      	nop
    4f54:	200137d8 	.word	0x200137d8
    4f58:	20013810 	.word	0x20013810

00004f5c <usb_dc_ep_set_callback>:
{
    4f5c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    4f5e:	4b08      	ldr	r3, [pc, #32]	; (4f80 <usb_dc_ep_set_callback+0x24>)
{
    4f60:	460c      	mov	r4, r1
	if (!dev_attached()) {
    4f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4f66:	b12b      	cbz	r3, 4f74 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    4f68:	f7ff fa62 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4f6c:	b128      	cbz	r0, 4f7a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    4f6e:	6004      	str	r4, [r0, #0]
	return 0;
    4f70:	2000      	movs	r0, #0
}
    4f72:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4f74:	f06f 0012 	mvn.w	r0, #18
    4f78:	e7fb      	b.n	4f72 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    4f7a:	f06f 0015 	mvn.w	r0, #21
    4f7e:	e7f8      	b.n	4f72 <usb_dc_ep_set_callback+0x16>
    4f80:	200137d8 	.word	0x200137d8

00004f84 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4f84:	4b01      	ldr	r3, [pc, #4]	; (4f8c <usb_dc_set_status_callback+0x8>)
    4f86:	6018      	str	r0, [r3, #0]
}
    4f88:	4770      	bx	lr
    4f8a:	bf00      	nop
    4f8c:	200137d8 	.word	0x200137d8

00004f90 <usb_dc_ep_mps>:
{
    4f90:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4f92:	4b07      	ldr	r3, [pc, #28]	; (4fb0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4f98:	b123      	cbz	r3, 4fa4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    4f9a:	f7ff fa49 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    4f9e:	b120      	cbz	r0, 4faa <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    4fa0:	6840      	ldr	r0, [r0, #4]
}
    4fa2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4fa4:	f06f 0012 	mvn.w	r0, #18
    4fa8:	e7fb      	b.n	4fa2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    4faa:	f06f 0015 	mvn.w	r0, #21
    4fae:	e7f8      	b.n	4fa2 <usb_dc_ep_mps+0x12>
    4fb0:	200137d8 	.word	0x200137d8

00004fb4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4fb4:	4b08      	ldr	r3, [pc, #32]	; (4fd8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4fb6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4fb8:	1ac3      	subs	r3, r0, r3
{
    4fba:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4fbc:	4907      	ldr	r1, [pc, #28]	; (4fdc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4fbe:	109b      	asrs	r3, r3, #2
{
    4fc0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4fc2:	4359      	muls	r1, r3
    4fc4:	2240      	movs	r2, #64	; 0x40
    4fc6:	4806      	ldr	r0, [pc, #24]	; (4fe0 <onoff_stop+0x2c>)
    4fc8:	f006 fbff 	bl	b7ca <stop>
	notify(mgr, res);
    4fcc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4fce:	4601      	mov	r1, r0
	notify(mgr, res);
    4fd0:	4620      	mov	r0, r4
}
    4fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4fd6:	4718      	bx	r3
    4fd8:	2001407c 	.word	0x2001407c
    4fdc:	b6db6db7 	.word	0xb6db6db7
    4fe0:	0000e730 	.word	0x0000e730

00004fe4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4fe4:	2340      	movs	r3, #64	; 0x40
{
    4fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4fe8:	4c0b      	ldr	r4, [pc, #44]	; (5018 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4fea:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    4fec:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4fee:	460b      	mov	r3, r1
{
    4ff0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4ff2:	490a      	ldr	r1, [pc, #40]	; (501c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    4ff4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4ff6:	4361      	muls	r1, r4
{
    4ff8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4ffa:	4a09      	ldr	r2, [pc, #36]	; (5020 <onoff_start+0x3c>)
    4ffc:	4809      	ldr	r0, [pc, #36]	; (5024 <onoff_start+0x40>)
    4ffe:	f006 fc11 	bl	b824 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5002:	1e01      	subs	r1, r0, #0
    5004:	da05      	bge.n	5012 <onoff_start+0x2e>
		notify(mgr, err);
    5006:	4630      	mov	r0, r6
    5008:	462b      	mov	r3, r5
	}
}
    500a:	b002      	add	sp, #8
    500c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5010:	4718      	bx	r3
}
    5012:	b002      	add	sp, #8
    5014:	bd70      	pop	{r4, r5, r6, pc}
    5016:	bf00      	nop
    5018:	2001407c 	.word	0x2001407c
    501c:	b6db6db7 	.word	0xb6db6db7
    5020:	0000b891 	.word	0x0000b891
    5024:	0000e730 	.word	0x0000e730

00005028 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    502c:	2200      	movs	r2, #0
    502e:	2101      	movs	r1, #1
{
    5030:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5032:	2005      	movs	r0, #5
    5034:	f7fe ff1a 	bl	3e6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5038:	4811      	ldr	r0, [pc, #68]	; (5080 <clk_init+0x58>)
    503a:	f001 ffed 	bl	7018 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    503e:	4b11      	ldr	r3, [pc, #68]	; (5084 <clk_init+0x5c>)
    5040:	4298      	cmp	r0, r3
    5042:	d119      	bne.n	5078 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5044:	f001 fff8 	bl	7038 <nrfx_clock_enable>
    5048:	2400      	movs	r4, #0
	return &data->mgr[type];
    504a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    504e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5050:	f8df 8034 	ldr.w	r8, [pc, #52]	; 5088 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    5054:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5056:	4641      	mov	r1, r8
    5058:	fb09 5004 	mla	r0, r9, r4, r5
    505c:	f005 ff34 	bl	aec8 <onoff_manager_init>
		if (err < 0) {
    5060:	2800      	cmp	r0, #0
    5062:	db07      	blt.n	5074 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5064:	2301      	movs	r3, #1
    5066:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    506a:	441c      	add	r4, r3
    506c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    506e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5070:	d1f0      	bne.n	5054 <clk_init+0x2c>
	}

	return 0;
    5072:	2000      	movs	r0, #0
}
    5074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    5078:	f06f 0004 	mvn.w	r0, #4
    507c:	e7fa      	b.n	5074 <clk_init+0x4c>
    507e:	bf00      	nop
    5080:	000050c1 	.word	0x000050c1
    5084:	0bad0000 	.word	0x0bad0000
    5088:	0000ecac 	.word	0x0000ecac

0000508c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    508c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    508e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    5090:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    5092:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5094:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5096:	4808      	ldr	r0, [pc, #32]	; (50b8 <clkstarted_handle.constprop.0+0x2c>)
    5098:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    509a:	3378      	adds	r3, #120	; 0x78
    509c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    509e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    50a2:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    50a4:	f006 fb7e 	bl	b7a4 <set_on_state>
	if (callback) {
    50a8:	b12d      	cbz	r5, 50b6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    50aa:	4632      	mov	r2, r6
    50ac:	462b      	mov	r3, r5
}
    50ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    50b2:	4802      	ldr	r0, [pc, #8]	; (50bc <clkstarted_handle.constprop.0+0x30>)
    50b4:	4718      	bx	r3
}
    50b6:	bd70      	pop	{r4, r5, r6, pc}
    50b8:	2001407c 	.word	0x2001407c
    50bc:	0000e730 	.word	0x0000e730

000050c0 <clock_event_handler>:
	switch (event) {
    50c0:	2805      	cmp	r0, #5
    50c2:	d811      	bhi.n	50e8 <clock_event_handler+0x28>
    50c4:	e8df f000 	tbb	[pc, r0]
    50c8:	10100e03 	.word	0x10100e03
    50cc:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    50ce:	4b07      	ldr	r3, [pc, #28]	; (50ec <clock_event_handler+0x2c>)
    50d0:	6f98      	ldr	r0, [r3, #120]	; 0x78
    50d2:	f010 0007 	ands.w	r0, r0, #7
    50d6:	d107      	bne.n	50e8 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    50d8:	f7ff bfd8 	b.w	508c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    50dc:	2002      	movs	r0, #2
    50de:	e7fb      	b.n	50d8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    50e0:	2003      	movs	r0, #3
    50e2:	e7f9      	b.n	50d8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    50e4:	2001      	movs	r0, #1
    50e6:	e7f7      	b.n	50d8 <clock_event_handler+0x18>
}
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop
    50ec:	2001407c 	.word	0x2001407c

000050f0 <generic_hfclk_start>:
{
    50f0:	b508      	push	{r3, lr}
	__asm__ volatile(
    50f2:	f04f 0320 	mov.w	r3, #32
    50f6:	f3ef 8111 	mrs	r1, BASEPRI
    50fa:	f383 8812 	msr	BASEPRI_MAX, r3
    50fe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5102:	4a12      	ldr	r2, [pc, #72]	; (514c <generic_hfclk_start+0x5c>)
    5104:	6813      	ldr	r3, [r2, #0]
    5106:	f043 0002 	orr.w	r0, r3, #2
    510a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    510c:	07da      	lsls	r2, r3, #31
    510e:	d408      	bmi.n	5122 <generic_hfclk_start+0x32>
	__asm__ volatile(
    5110:	f381 8811 	msr	BASEPRI, r1
    5114:	f3bf 8f6f 	isb	sy
}
    5118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    511c:	2001      	movs	r0, #1
    511e:	f008 baf0 	b.w	d702 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5122:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5126:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    512a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    512e:	07d3      	lsls	r3, r2, #31
    5130:	d5ee      	bpl.n	5110 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    5132:	4807      	ldr	r0, [pc, #28]	; (5150 <generic_hfclk_start+0x60>)
    5134:	f006 fb36 	bl	b7a4 <set_on_state>
    5138:	f381 8811 	msr	BASEPRI, r1
    513c:	f3bf 8f6f 	isb	sy
}
    5140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5144:	2000      	movs	r0, #0
    5146:	f7ff bfa1 	b.w	508c <clkstarted_handle.constprop.0>
    514a:	bf00      	nop
    514c:	2001411c 	.word	0x2001411c
    5150:	200140f4 	.word	0x200140f4

00005154 <api_blocking_start>:
{
    5154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5156:	2200      	movs	r2, #0
    5158:	2301      	movs	r3, #1
    515a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    515e:	466b      	mov	r3, sp
    5160:	4a08      	ldr	r2, [pc, #32]	; (5184 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5162:	f8cd d000 	str.w	sp, [sp]
    5166:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    516a:	f006 fb8a 	bl	b882 <api_start>
	if (err < 0) {
    516e:	2800      	cmp	r0, #0
    5170:	db05      	blt.n	517e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    5172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5176:	2300      	movs	r3, #0
    5178:	4668      	mov	r0, sp
    517a:	f004 f997 	bl	94ac <z_impl_k_sem_take>
}
    517e:	b005      	add	sp, #20
    5180:	f85d fb04 	ldr.w	pc, [sp], #4
    5184:	0000b8c7 	.word	0x0000b8c7

00005188 <generic_hfclk_stop>:
{
    5188:	b510      	push	{r4, lr}
	__asm__ volatile(
    518a:	f04f 0320 	mov.w	r3, #32
    518e:	f3ef 8411 	mrs	r4, BASEPRI
    5192:	f383 8812 	msr	BASEPRI_MAX, r3
    5196:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    519a:	4a07      	ldr	r2, [pc, #28]	; (51b8 <generic_hfclk_stop+0x30>)
    519c:	6813      	ldr	r3, [r2, #0]
    519e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    51a2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    51a4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    51a6:	d402      	bmi.n	51ae <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    51a8:	2001      	movs	r0, #1
    51aa:	f008 fb09 	bl	d7c0 <nrfx_clock_stop>
	__asm__ volatile(
    51ae:	f384 8811 	msr	BASEPRI, r4
    51b2:	f3bf 8f6f 	isb	sy
}
    51b6:	bd10      	pop	{r4, pc}
    51b8:	2001411c 	.word	0x2001411c

000051bc <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    51bc:	b2c3      	uxtb	r3, r0
}
    51be:	201c      	movs	r0, #28
    51c0:	4a01      	ldr	r2, [pc, #4]	; (51c8 <z_nrf_clock_control_get_onoff+0xc>)
    51c2:	fb03 2000 	mla	r0, r3, r0, r2
    51c6:	4770      	bx	lr
    51c8:	2001407c 	.word	0x2001407c

000051cc <z_nrf_clock_control_lf_on>:
{
    51cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    51d0:	2201      	movs	r2, #1
    51d2:	4607      	mov	r7, r0
    51d4:	4937      	ldr	r1, [pc, #220]	; (52b4 <z_nrf_clock_control_lf_on+0xe8>)
    51d6:	e8d1 3fef 	ldaex	r3, [r1]
    51da:	e8c1 2fe0 	stlex	r0, r2, [r1]
    51de:	2800      	cmp	r0, #0
    51e0:	d1f9      	bne.n	51d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    51e2:	b933      	cbnz	r3, 51f2 <z_nrf_clock_control_lf_on+0x26>
    51e4:	4934      	ldr	r1, [pc, #208]	; (52b8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    51e6:	4835      	ldr	r0, [pc, #212]	; (52bc <z_nrf_clock_control_lf_on+0xf0>)
    51e8:	604b      	str	r3, [r1, #4]
    51ea:	60cb      	str	r3, [r1, #12]
    51ec:	608a      	str	r2, [r1, #8]
    51ee:	f005 fe7e 	bl	aeee <onoff_request>
	switch (start_mode) {
    51f2:	1e7b      	subs	r3, r7, #1
    51f4:	2b01      	cmp	r3, #1
    51f6:	d82b      	bhi.n	5250 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    51f8:	2f01      	cmp	r7, #1
    51fa:	d107      	bne.n	520c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    51fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5200:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5204:	f003 0303 	and.w	r3, r3, #3
    5208:	2b02      	cmp	r3, #2
    520a:	d021      	beq.n	5250 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    520c:	f008 ff32 	bl	e074 <k_is_in_isr>
    5210:	4605      	mov	r5, r0
    5212:	b9f8      	cbnz	r0, 5254 <z_nrf_clock_control_lf_on+0x88>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5214:	4b2a      	ldr	r3, [pc, #168]	; (52c0 <z_nrf_clock_control_lf_on+0xf4>)
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	b1e3      	cbz	r3, 5254 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    521a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    521e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    5220:	4606      	mov	r6, r0
    5222:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5226:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    522a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 52c4 <z_nrf_clock_control_lf_on+0xf8>
    522e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5232:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    5236:	03d2      	lsls	r2, r2, #15
    5238:	d516      	bpl.n	5268 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    523a:	f003 0303 	and.w	r3, r3, #3
    523e:	2b02      	cmp	r3, #2
    5240:	d001      	beq.n	5246 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5242:	2f01      	cmp	r7, #1
    5244:	d110      	bne.n	5268 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    5246:	b375      	cbz	r5, 52a6 <z_nrf_clock_control_lf_on+0xda>
    5248:	f386 8811 	msr	BASEPRI, r6
    524c:	f3bf 8f6f 	isb	sy
}
    5250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    5254:	f04f 0320 	mov.w	r3, #32
    5258:	f3ef 8611 	mrs	r6, BASEPRI
    525c:	f383 8812 	msr	BASEPRI_MAX, r3
    5260:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5264:	2501      	movs	r5, #1
    5266:	e7de      	b.n	5226 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5268:	b1c5      	cbz	r5, 529c <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    526a:	4630      	mov	r0, r6
    526c:	f7fe fdbc 	bl	3de8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5270:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5274:	b2db      	uxtb	r3, r3
    5276:	2b01      	cmp	r3, #1
    5278:	d1d9      	bne.n	522e <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    527a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    527e:	2a00      	cmp	r2, #0
    5280:	d0d5      	beq.n	522e <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5282:	2200      	movs	r2, #0
    5284:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5288:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    528c:	2202      	movs	r2, #2
    528e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    5292:	2220      	movs	r2, #32
    5294:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5298:	60a3      	str	r3, [r4, #8]
}
    529a:	e7c8      	b.n	522e <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    529c:	2100      	movs	r1, #0
    529e:	2021      	movs	r0, #33	; 0x21
    52a0:	f004 fc70 	bl	9b84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    52a4:	e7e4      	b.n	5270 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    52a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    52aa:	2202      	movs	r2, #2
    52ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    52b0:	e7ce      	b.n	5250 <z_nrf_clock_control_lf_on+0x84>
    52b2:	bf00      	nop
    52b4:	20014078 	.word	0x20014078
    52b8:	20014068 	.word	0x20014068
    52bc:	20014098 	.word	0x20014098
    52c0:	20056890 	.word	0x20056890
    52c4:	e000e100 	.word	0xe000e100

000052c8 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    52c8:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    52cc:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    52d0:	280a      	cmp	r0, #10
    52d2:	bf9a      	itte	ls
    52d4:	4b02      	ldrls	r3, [pc, #8]	; (52e0 <qspi_get_zephyr_ret_code+0x18>)
    52d6:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    52da:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    52de:	4770      	bx	lr
    52e0:	0000f074 	.word	0x0000f074

000052e4 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    52e4:	4b02      	ldr	r3, [pc, #8]	; (52f0 <qspi_nor_pages_layout+0xc>)
    52e6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    52e8:	2301      	movs	r3, #1
    52ea:	6013      	str	r3, [r2, #0]
}
    52ec:	4770      	bx	lr
    52ee:	bf00      	nop
    52f0:	0000ed58 	.word	0x0000ed58

000052f4 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    52f4:	4800      	ldr	r0, [pc, #0]	; (52f8 <qspi_flash_get_parameters+0x4>)
    52f6:	4770      	bx	lr
    52f8:	0000ecf4 	.word	0x0000ecf4

000052fc <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    52fc:	4b05      	ldr	r3, [pc, #20]	; (5314 <CONFIG_USB_DEVICE_PID+0x14>)
    52fe:	4299      	cmp	r1, r3
    5300:	d106      	bne.n	5310 <CONFIG_USB_DEVICE_PID+0x10>
	return z_impl_k_sem_take(sem, timeout);
    5302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    530a:	3020      	adds	r0, #32
    530c:	f004 b8ce 	b.w	94ac <z_impl_k_sem_take>
}
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	0bad0000 	.word	0x0bad0000

00005318 <qspi_device_uninit>:
{
    5318:	b538      	push	{r3, r4, r5, lr}
	struct qspi_nor_data *dev_data = dev->data;
    531a:	6905      	ldr	r5, [r0, #16]
{
    531c:	4604      	mov	r4, r0
	if (dev_data->xip_enabled) {
    531e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    5322:	b9fb      	cbnz	r3, 5364 <qspi_device_uninit+0x4c>
	qspi_lock(dev);
    5324:	4628      	mov	r0, r5
    5326:	f006 fad7 	bl	b8d8 <qspi_lock.isra.0>
    532a:	2200      	movs	r2, #0
    532c:	2300      	movs	r3, #0
    532e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5332:	f004 f8bb 	bl	94ac <z_impl_k_sem_take>
	if (last) {
    5336:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5338:	b94b      	cbnz	r3, 534e <qspi_device_uninit+0x36>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    533a:	4d0b      	ldr	r5, [pc, #44]	; (5368 <qspi_device_uninit+0x50>)
    533c:	f002 fd96 	bl	7e6c <nrfx_qspi_mem_busy_check>
    5340:	42a8      	cmp	r0, r5
    5342:	d109      	bne.n	5358 <qspi_device_uninit+0x40>
		nrfx_qspi_uninit();
    5344:	f002 fdb4 	bl	7eb0 <nrfx_qspi_uninit>
		qspi_initialized = false;
    5348:	2200      	movs	r2, #0
    534a:	4b08      	ldr	r3, [pc, #32]	; (536c <qspi_device_uninit+0x54>)
    534c:	701a      	strb	r2, [r3, #0]
	qspi_unlock(dev);
    534e:	6920      	ldr	r0, [r4, #16]
}
    5350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
    5354:	f006 bad8 	b.w	b908 <qspi_unlock.isra.0>
	return z_impl_k_sleep(timeout);
    5358:	2100      	movs	r1, #0
    535a:	f240 6067 	movw	r0, #1639	; 0x667
    535e:	f004 fc11 	bl	9b84 <z_impl_k_sleep>
    5362:	e7eb      	b.n	533c <qspi_device_uninit+0x24>
}
    5364:	bd38      	pop	{r3, r4, r5, pc}
    5366:	bf00      	nop
    5368:	0bad0000 	.word	0x0bad0000
    536c:	20016889 	.word	0x20016889

00005370 <qspi_device_init>:
{
    5370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct qspi_nor_data *dev_data = dev->data;
    5372:	6906      	ldr	r6, [r0, #16]
{
    5374:	4605      	mov	r5, r0
	if (dev_data->xip_enabled) {
    5376:	f896 4040 	ldrb.w	r4, [r6, #64]	; 0x40
    537a:	b9d4      	cbnz	r4, 53b2 <qspi_device_init+0x42>
	qspi_lock(dev);
    537c:	4630      	mov	r0, r6
    537e:	f006 faab 	bl	b8d8 <qspi_lock.isra.0>
	if (!qspi_initialized) {
    5382:	4f0d      	ldr	r7, [pc, #52]	; (53b8 <qspi_device_init+0x48>)
	z_impl_k_sem_give(sem);
    5384:	f106 0030 	add.w	r0, r6, #48	; 0x30
    5388:	f004 f870 	bl	946c <z_impl_k_sem_give>
    538c:	783b      	ldrb	r3, [r7, #0]
    538e:	b95b      	cbnz	r3, 53a8 <qspi_device_init+0x38>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    5390:	4632      	mov	r2, r6
    5392:	490a      	ldr	r1, [pc, #40]	; (53bc <qspi_device_init+0x4c>)
    5394:	6868      	ldr	r0, [r5, #4]
    5396:	f002 fc33 	bl	7c00 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    539a:	f7ff ff95 	bl	52c8 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    539e:	fab0 f380 	clz	r3, r0
    53a2:	4604      	mov	r4, r0
    53a4:	095b      	lsrs	r3, r3, #5
    53a6:	703b      	strb	r3, [r7, #0]
	qspi_unlock(dev);
    53a8:	6928      	ldr	r0, [r5, #16]
    53aa:	f006 faad 	bl	b908 <qspi_unlock.isra.0>
}
    53ae:	4620      	mov	r0, r4
    53b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
    53b2:	2400      	movs	r4, #0
    53b4:	e7fb      	b.n	53ae <qspi_device_init+0x3e>
    53b6:	bf00      	nop
    53b8:	20016889 	.word	0x20016889
    53bc:	0000b8cd 	.word	0x0000b8cd

000053c0 <qspi_nor_erase>:
{
    53c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    53c4:	1e0d      	subs	r5, r1, #0
{
    53c6:	4606      	mov	r6, r0
    53c8:	4690      	mov	r8, r2
	const struct qspi_nor_config *params = dev->config;
    53ca:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    53ce:	db69      	blt.n	54a4 <qspi_nor_erase+0xe4>
    53d0:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    53d4:	18aa      	adds	r2, r5, r2
	if (addr < 0 ||
    53d6:	429a      	cmp	r2, r3
    53d8:	d864      	bhi.n	54a4 <qspi_nor_erase+0xe4>
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    53da:	f3c5 020b 	ubfx	r2, r5, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    53de:	f1b8 0f00 	cmp.w	r8, #0
    53e2:	d05f      	beq.n	54a4 <qspi_nor_erase+0xe4>
    53e4:	f3c8 030b 	ubfx	r3, r8, #0, #12
    53e8:	4313      	orrs	r3, r2
    53ea:	d15b      	bne.n	54a4 <qspi_nor_erase+0xe4>
	rv = qspi_device_init(dev);
    53ec:	f7ff ffc0 	bl	5370 <qspi_device_init>
	if (rv != 0) {
    53f0:	4604      	mov	r4, r0
    53f2:	bb60      	cbnz	r0, 544e <qspi_nor_erase+0x8e>
	qspi_trans_lock(dev);
    53f4:	6930      	ldr	r0, [r6, #16]
    53f6:	f006 fa81 	bl	b8fc <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    53fa:	4621      	mov	r1, r4
    53fc:	4630      	mov	r0, r6
    53fe:	f006 fac9 	bl	b994 <qspi_nor_write_protection_set>
	if (rv != 0) {
    5402:	4604      	mov	r4, r0
    5404:	bb00      	cbnz	r0, 5448 <qspi_nor_erase+0x88>
	qspi_lock(dev);
    5406:	6930      	ldr	r0, [r6, #16]
    5408:	f006 fa66 	bl	b8d8 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    540c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 54ac <qspi_nor_erase+0xec>
		if (size == params->size) {
    5410:	f8d9 3018 	ldr.w	r3, [r9, #24]
    5414:	4543      	cmp	r3, r8
    5416:	d120      	bne.n	545a <qspi_nor_erase+0x9a>
			res = nrfx_qspi_chip_erase();
    5418:	f008 fa58 	bl	d8cc <nrfx_qspi_chip_erase>
    541c:	46c3      	mov	fp, r8
    541e:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    5420:	4639      	mov	r1, r7
    5422:	6930      	ldr	r0, [r6, #16]
    5424:	f7ff ff6a 	bl	52fc <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    5428:	4557      	cmp	r7, sl
    542a:	d12b      	bne.n	5484 <qspi_nor_erase+0xc4>
	while (size > 0) {
    542c:	ebb8 080b 	subs.w	r8, r8, fp
			addr += adj;
    5430:	445d      	add	r5, fp
	while (size > 0) {
    5432:	d1ed      	bne.n	5410 <qspi_nor_erase+0x50>
	qspi_unlock(dev);
    5434:	6930      	ldr	r0, [r6, #16]
    5436:	f006 fa67 	bl	b908 <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    543a:	2101      	movs	r1, #1
    543c:	4630      	mov	r0, r6
    543e:	f006 faa9 	bl	b994 <qspi_nor_write_protection_set>
    5442:	2c00      	cmp	r4, #0
    5444:	bf08      	it	eq
    5446:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    5448:	6930      	ldr	r0, [r6, #16]
    544a:	f004 f80f 	bl	946c <z_impl_k_sem_give>
	qspi_device_uninit(dev);
    544e:	4630      	mov	r0, r6
    5450:	f7ff ff62 	bl	5318 <qspi_device_uninit>
}
    5454:	4620      	mov	r0, r4
    5456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    545a:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
    545e:	d309      	bcc.n	5474 <qspi_nor_erase+0xb4>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    5460:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    5462:	b9a3      	cbnz	r3, 548e <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    5464:	4629      	mov	r1, r5
    5466:	2001      	movs	r0, #1
    5468:	f002 fd70 	bl	7f4c <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    546c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    5470:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    5472:	e7d5      	b.n	5420 <qspi_nor_erase+0x60>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    5474:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
    5478:	d209      	bcs.n	548e <qspi_nor_erase+0xce>
		qspi_wait_for_completion(dev, res);
    547a:	490d      	ldr	r1, [pc, #52]	; (54b0 <qspi_nor_erase+0xf0>)
    547c:	6930      	ldr	r0, [r6, #16]
    547e:	f7ff ff3d 	bl	52fc <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    5482:	4f0b      	ldr	r7, [pc, #44]	; (54b0 <qspi_nor_erase+0xf0>)
			rv = qspi_get_zephyr_ret_code(res);
    5484:	4638      	mov	r0, r7
    5486:	f7ff ff1f 	bl	52c8 <qspi_get_zephyr_ret_code>
    548a:	4604      	mov	r4, r0
			break;
    548c:	e7d2      	b.n	5434 <qspi_nor_erase+0x74>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    548e:	f3c5 000b 	ubfx	r0, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    5492:	2800      	cmp	r0, #0
    5494:	d1f1      	bne.n	547a <qspi_nor_erase+0xba>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    5496:	4629      	mov	r1, r5
    5498:	f002 fd58 	bl	7f4c <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    549c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    54a0:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    54a2:	e7bd      	b.n	5420 <qspi_nor_erase+0x60>
		return -EINVAL;
    54a4:	f06f 0415 	mvn.w	r4, #21
    54a8:	e7d4      	b.n	5454 <qspi_nor_erase+0x94>
    54aa:	bf00      	nop
    54ac:	0bad0000 	.word	0x0bad0000
    54b0:	0bad0004 	.word	0x0bad0004

000054b4 <qspi_nor_init>:
{
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    54b6:	6843      	ldr	r3, [r0, #4]
{
    54b8:	b087      	sub	sp, #28
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    54ba:	6a1d      	ldr	r5, [r3, #32]
{
    54bc:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    54be:	2100      	movs	r1, #0
    54c0:	4628      	mov	r0, r5
    54c2:	aa03      	add	r2, sp, #12
    54c4:	f006 fb7f 	bl	bbc6 <pinctrl_lookup_state>
	if (ret < 0) {
    54c8:	2800      	cmp	r0, #0
    54ca:	db66      	blt.n	559a <qspi_nor_init+0xe6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    54cc:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    54ce:	682a      	ldr	r2, [r5, #0]
    54d0:	7919      	ldrb	r1, [r3, #4]
    54d2:	6818      	ldr	r0, [r3, #0]
    54d4:	f000 fc34 	bl	5d40 <pinctrl_configure_pins>
	if (ret < 0) {
    54d8:	2800      	cmp	r0, #0
    54da:	db5e      	blt.n	559a <qspi_nor_init+0xe6>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    54dc:	f04f 2750 	mov.w	r7, #1342197760	; 0x50005000
    54e0:	2501      	movs	r5, #1
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    54e2:	2200      	movs	r2, #0
    54e4:	2101      	movs	r1, #1
    54e6:	202b      	movs	r0, #43	; 0x2b
    54e8:	f7fe fcc0 	bl	3e6c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    54ec:	6866      	ldr	r6, [r4, #4]
	struct qspi_nor_data *dev_data = dev->data;
    54ee:	6922      	ldr	r2, [r4, #16]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    54f0:	4630      	mov	r0, r6
    54f2:	493d      	ldr	r1, [pc, #244]	; (55e8 <qspi_nor_init+0x134>)
    54f4:	f8c7 55b8 	str.w	r5, [r7, #1464]	; 0x5b8
    54f8:	f002 fb82 	bl	7c00 <nrfx_qspi_init>
    54fc:	2302      	movs	r3, #2
    54fe:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
	int ret = qspi_get_zephyr_ret_code(res);
    5502:	f7ff fee1 	bl	52c8 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    5506:	2800      	cmp	r0, #0
    5508:	db47      	blt.n	559a <qspi_nor_init+0xe6>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
    550a:	2200      	movs	r2, #0
    550c:	23ab      	movs	r3, #171	; 0xab
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
    550e:	4620      	mov	r0, r4
    5510:	a903      	add	r1, sp, #12
		struct qspi_cmd cmd = {
    5512:	e9cd 2203 	strd	r2, r2, [sp, #12]
    5516:	9205      	str	r2, [sp, #20]
    5518:	f88d 300c 	strb.w	r3, [sp, #12]
		ret = qspi_send_cmd(dev, &cmd, false);
    551c:	f006 f9ff 	bl	b91e <qspi_send_cmd>
		if (ret < 0) {
    5520:	2800      	cmp	r0, #0
    5522:	db3a      	blt.n	559a <qspi_nor_init+0xe6>
	z_impl_k_busy_wait(usec_to_wait);
    5524:	2023      	movs	r0, #35	; 0x23
    5526:	f008 ffed 	bl	e504 <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    552a:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    552c:	3b02      	subs	r3, #2
    552e:	42ab      	cmp	r3, r5
    5530:	d905      	bls.n	553e <qspi_nor_init+0x8a>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    5532:	7ab5      	ldrb	r5, [r6, #10]
    5534:	3d03      	subs	r5, #3
    5536:	2d01      	cmp	r5, #1
    5538:	bf8c      	ite	hi
    553a:	2500      	movhi	r5, #0
    553c:	2501      	movls	r5, #1
		ret = qspi_rdsr(dev, sr_num);
    553e:	4620      	mov	r0, r4
    5540:	f006 fa3d 	bl	b9be <qspi_rdsr.constprop.0>
		if (ret < 0) {
    5544:	2800      	cmp	r0, #0
    5546:	db28      	blt.n	559a <qspi_nor_init+0xe6>
		uint8_t sr = (uint8_t)ret;
    5548:	b2c2      	uxtb	r2, r0
		if (qe_state != qe_value) {
    554a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    554e:	4285      	cmp	r5, r0
    5550:	ad01      	add	r5, sp, #4
    5552:	d124      	bne.n	559e <qspi_nor_init+0xea>
	qspi_device_uninit(dev);
    5554:	4620      	mov	r0, r4
    5556:	f7ff fedf 	bl	5318 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    555a:	2603      	movs	r6, #3
    555c:	2300      	movs	r3, #0
    555e:	e9cd 6302 	strd	r6, r3, [sp, #8]
    5562:	9304      	str	r3, [sp, #16]
    5564:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    5566:	4620      	mov	r0, r4
	const struct qspi_buf rx_buf = {
    5568:	f8cd d004 	str.w	sp, [sp, #4]
	const struct qspi_cmd cmd = {
    556c:	f88d 300c 	strb.w	r3, [sp, #12]
    5570:	9505      	str	r5, [sp, #20]
	int ret = qspi_device_init(dev);
    5572:	f7ff fefd 	bl	5370 <qspi_device_init>
	if (ret == 0) {
    5576:	4602      	mov	r2, r0
    5578:	bb78      	cbnz	r0, 55da <qspi_nor_init+0x126>
		ret = qspi_send_cmd(dev, &cmd, false);
    557a:	4620      	mov	r0, r4
    557c:	a903      	add	r1, sp, #12
    557e:	f006 f9ce 	bl	b91e <qspi_send_cmd>
    5582:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    5584:	4620      	mov	r0, r4
    5586:	f7ff fec7 	bl	5318 <qspi_device_uninit>
	if (ret != 0) {
    558a:	bb4d      	cbnz	r5, 55e0 <qspi_nor_init+0x12c>
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    558c:	6860      	ldr	r0, [r4, #4]
    558e:	4632      	mov	r2, r6
    5590:	4669      	mov	r1, sp
    5592:	301c      	adds	r0, #28
    5594:	f006 f859 	bl	b64a <memcmp>
    5598:	bb10      	cbnz	r0, 55e0 <qspi_nor_init+0x12c>
}
    559a:	b007      	add	sp, #28
    559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t sr_array[2] = {0};
    559e:	2300      	movs	r3, #0
			sr ^= qe_mask;
    55a0:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    55a4:	f8ad 3000 	strh.w	r3, [sp]
		sr_array[0] = sr_val;
    55a8:	f88d 2000 	strb.w	r2, [sp]
	const struct qspi_buf sr_buf = {
    55ac:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    55ae:	4620      	mov	r0, r4
    55b0:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    55b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct qspi_buf sr_buf = {
    55b6:	f8cd d004 	str.w	sp, [sp, #4]
	struct qspi_cmd cmd = {
    55ba:	9305      	str	r3, [sp, #20]
    55bc:	f88d 200c 	strb.w	r2, [sp, #12]
    55c0:	9504      	str	r5, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
    55c2:	f006 f9ac 	bl	b91e <qspi_send_cmd>
	if (ret == 0) {
    55c6:	2800      	cmp	r0, #0
    55c8:	d1e7      	bne.n	559a <qspi_nor_init+0xe6>
		ret = qspi_rdsr(dev, 1);
    55ca:	4620      	mov	r0, r4
    55cc:	f006 f9f7 	bl	b9be <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    55d0:	2800      	cmp	r0, #0
    55d2:	dbe2      	blt.n	559a <qspi_nor_init+0xe6>
    55d4:	07c3      	lsls	r3, r0, #31
    55d6:	d4f8      	bmi.n	55ca <qspi_nor_init+0x116>
    55d8:	e7bc      	b.n	5554 <qspi_nor_init+0xa0>
	qspi_device_uninit(dev);
    55da:	4620      	mov	r0, r4
    55dc:	f7ff fe9c 	bl	5318 <qspi_device_uninit>
		return -ENODEV;
    55e0:	f06f 0012 	mvn.w	r0, #18
    55e4:	e7d9      	b.n	559a <qspi_nor_init+0xe6>
    55e6:	bf00      	nop
    55e8:	0000b8cd 	.word	0x0000b8cd

000055ec <qspi_nor_write>:
{
    55ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    55f0:	4605      	mov	r5, r0
    55f2:	460f      	mov	r7, r1
    55f4:	461e      	mov	r6, r3
	if (!src) {
    55f6:	4690      	mov	r8, r2
    55f8:	2a00      	cmp	r2, #0
    55fa:	d07f      	beq.n	56fc <qspi_nor_write+0x110>
	if ((size == 0)
    55fc:	2b00      	cmp	r3, #0
    55fe:	d07d      	beq.n	56fc <qspi_nor_write+0x110>
	    || ((size > 4) && ((size % 4U) != 0))) {
    5600:	2b04      	cmp	r3, #4
    5602:	d901      	bls.n	5608 <qspi_nor_write+0x1c>
    5604:	079a      	lsls	r2, r3, #30
    5606:	d179      	bne.n	56fc <qspi_nor_write+0x110>
	if ((addr % 4U) != 0) {
    5608:	07bb      	lsls	r3, r7, #30
    560a:	d177      	bne.n	56fc <qspi_nor_write+0x110>
	if (addr < 0 ||
    560c:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    560e:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    5610:	db74      	blt.n	56fc <qspi_nor_write+0x110>
    5612:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    5614:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    5616:	4293      	cmp	r3, r2
    5618:	d870      	bhi.n	56fc <qspi_nor_write+0x110>
	int rc = qspi_device_init(dev);
    561a:	4628      	mov	r0, r5
    561c:	f7ff fea8 	bl	5370 <qspi_device_init>
	if (rc != 0) {
    5620:	4604      	mov	r4, r0
    5622:	2800      	cmp	r0, #0
    5624:	d15f      	bne.n	56e6 <qspi_nor_write+0xfa>
	qspi_trans_lock(dev);
    5626:	6928      	ldr	r0, [r5, #16]
    5628:	f006 f968 	bl	b8fc <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    562c:	4621      	mov	r1, r4
    562e:	4628      	mov	r0, r5
    5630:	f006 f9b0 	bl	b994 <qspi_nor_write_protection_set>
    5634:	4604      	mov	r4, r0
	qspi_lock(dev);
    5636:	6928      	ldr	r0, [r5, #16]
    5638:	f006 f94e 	bl	b8d8 <qspi_lock.isra.0>
	if (!res) {
    563c:	2c00      	cmp	r4, #0
    563e:	d140      	bne.n	56c2 <qspi_nor_write+0xd6>
		if (size < 4U) {
    5640:	2e03      	cmp	r6, #3
    5642:	d81c      	bhi.n	567e <qspi_nor_write+0x92>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    5644:	463a      	mov	r2, r7
    5646:	2104      	movs	r1, #4
    5648:	4668      	mov	r0, sp
    564a:	f008 f93c 	bl	d8c6 <nrfx_qspi_read>
    564e:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    5650:	4601      	mov	r1, r0
    5652:	6928      	ldr	r0, [r5, #16]
    5654:	f7ff fe52 	bl	52fc <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    5658:	4b2a      	ldr	r3, [pc, #168]	; (5704 <qspi_nor_write+0x118>)
    565a:	429c      	cmp	r4, r3
    565c:	d131      	bne.n	56c2 <qspi_nor_write+0xd6>
		memcpy(buf, sptr, slen);
    565e:	4632      	mov	r2, r6
    5660:	4641      	mov	r1, r8
    5662:	4668      	mov	r0, sp
    5664:	f006 f818 	bl	b698 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5668:	463a      	mov	r2, r7
    566a:	2104      	movs	r1, #4
    566c:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    566e:	f008 f927 	bl	d8c0 <nrfx_qspi_write>
    5672:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    5674:	4601      	mov	r1, r0
    5676:	6928      	ldr	r0, [r5, #16]
    5678:	f7ff fe40 	bl	52fc <qspi_wait_for_completion.isra.0>
    567c:	e021      	b.n	56c2 <qspi_nor_write+0xd6>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    567e:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    5682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5686:	d035      	beq.n	56f4 <qspi_nor_write+0x108>
			if (res == NRFX_SUCCESS) {
    5688:	f8df a078 	ldr.w	sl, [pc, #120]	; 5704 <qspi_nor_write+0x118>
			size_t len = MIN(slen, sizeof(buf));
    568c:	2e10      	cmp	r6, #16
    568e:	46b1      	mov	r9, r6
    5690:	bf28      	it	cs
    5692:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    5696:	4641      	mov	r1, r8
    5698:	464a      	mov	r2, r9
    569a:	4668      	mov	r0, sp
    569c:	f005 fffc 	bl	b698 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    56a0:	463a      	mov	r2, r7
    56a2:	2110      	movs	r1, #16
    56a4:	4668      	mov	r0, sp
    56a6:	f008 f90b 	bl	d8c0 <nrfx_qspi_write>
    56aa:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    56ac:	4601      	mov	r1, r0
    56ae:	6928      	ldr	r0, [r5, #16]
    56b0:	f7ff fe24 	bl	52fc <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    56b4:	4554      	cmp	r4, sl
    56b6:	d104      	bne.n	56c2 <qspi_nor_write+0xd6>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    56b8:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    56bc:	44c8      	add	r8, r9
				addr += len;
    56be:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    56c0:	d1e4      	bne.n	568c <qspi_nor_write+0xa0>
	qspi_unlock(dev);
    56c2:	6928      	ldr	r0, [r5, #16]
    56c4:	f006 f920 	bl	b908 <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
    56c8:	2101      	movs	r1, #1
    56ca:	4628      	mov	r0, r5
    56cc:	f006 f962 	bl	b994 <qspi_nor_write_protection_set>
    56d0:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    56d2:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
    56d4:	f003 feca 	bl	946c <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    56d8:	2c00      	cmp	r4, #0
    56da:	bf14      	ite	ne
    56dc:	4620      	movne	r0, r4
    56de:	4630      	moveq	r0, r6
    56e0:	f7ff fdf2 	bl	52c8 <qspi_get_zephyr_ret_code>
    56e4:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    56e6:	4628      	mov	r0, r5
    56e8:	f7ff fe16 	bl	5318 <qspi_device_uninit>
}
    56ec:	4620      	mov	r0, r4
    56ee:	b004      	add	sp, #16
    56f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
    56f4:	463a      	mov	r2, r7
    56f6:	4631      	mov	r1, r6
    56f8:	4640      	mov	r0, r8
    56fa:	e7b8      	b.n	566e <qspi_nor_write+0x82>
		return -EINVAL;
    56fc:	f06f 0415 	mvn.w	r4, #21
    5700:	e7f4      	b.n	56ec <qspi_nor_write+0x100>
    5702:	bf00      	nop
    5704:	0bad0000 	.word	0x0bad0000

00005708 <qspi_nor_read>:
{
    5708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    570c:	4607      	mov	r7, r0
    570e:	4688      	mov	r8, r1
    5710:	461c      	mov	r4, r3
	if (!dest) {
    5712:	4616      	mov	r6, r2
{
    5714:	b085      	sub	sp, #20
	if (!dest) {
    5716:	2a00      	cmp	r2, #0
    5718:	f000 8099 	beq.w	584e <qspi_nor_read+0x146>
	if (!size) {
    571c:	2b00      	cmp	r3, #0
    571e:	f000 8094 	beq.w	584a <qspi_nor_read+0x142>
	if (addr < 0 ||
    5722:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    5724:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    5726:	f2c0 8092 	blt.w	584e <qspi_nor_read+0x146>
    572a:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    572c:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    572e:	4293      	cmp	r3, r2
    5730:	f200 808d 	bhi.w	584e <qspi_nor_read+0x146>
	int rc = qspi_device_init(dev);
    5734:	f7ff fe1c 	bl	5370 <qspi_device_init>
	if (rc != 0) {
    5738:	4605      	mov	r5, r0
    573a:	2800      	cmp	r0, #0
    573c:	d17e      	bne.n	583c <qspi_nor_read+0x134>
	qspi_lock(dev);
    573e:	f1c8 0500 	rsb	r5, r8, #0
    5742:	f005 0503 	and.w	r5, r5, #3
    5746:	6938      	ldr	r0, [r7, #16]
    5748:	f006 f8c6 	bl	b8d8 <qspi_lock.isra.0>
	if (flash_prefix > size) {
    574c:	42a5      	cmp	r5, r4
    574e:	bf28      	it	cs
    5750:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    5752:	4273      	negs	r3, r6
    5754:	f003 0303 	and.w	r3, r3, #3
    5758:	f006 0903 	and.w	r9, r6, #3
    575c:	bf58      	it	pl
    575e:	f1c3 0900 	rsbpl	r9, r3, #0
    5762:	f1c9 0900 	rsb	r9, r9, #0
    5766:	f009 0903 	and.w	r9, r9, #3
    576a:	45a1      	cmp	r9, r4
    576c:	bf28      	it	cs
    576e:	46a1      	movcs	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5770:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    5772:	eba4 0409 	sub.w	r4, r4, r9
    5776:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    577a:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    577e:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    5780:	bfc8      	it	gt
    5782:	46a2      	movgt	sl, r4
    5784:	f003 0b03 	and.w	fp, r3, #3
    5788:	bfc8      	it	gt
    578a:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    578e:	f1ba 0f00 	cmp.w	sl, #0
    5792:	d018      	beq.n	57c6 <qspi_nor_read+0xbe>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    5794:	eb06 0309 	add.w	r3, r6, r9
    5798:	eb08 0205 	add.w	r2, r8, r5
    579c:	4651      	mov	r1, sl
    579e:	4618      	mov	r0, r3
    57a0:	9301      	str	r3, [sp, #4]
    57a2:	f008 f890 	bl	d8c6 <nrfx_qspi_read>
    57a6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    57a8:	4601      	mov	r1, r0
    57aa:	6938      	ldr	r0, [r7, #16]
    57ac:	f7ff fda6 	bl	52fc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    57b0:	4a28      	ldr	r2, [pc, #160]	; (5854 <qspi_nor_read+0x14c>)
    57b2:	4294      	cmp	r4, r2
    57b4:	d13b      	bne.n	582e <qspi_nor_read+0x126>
		if (flash_prefix != dest_prefix) {
    57b6:	454d      	cmp	r5, r9
    57b8:	d005      	beq.n	57c6 <qspi_nor_read+0xbe>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    57ba:	9b01      	ldr	r3, [sp, #4]
    57bc:	4652      	mov	r2, sl
    57be:	4619      	mov	r1, r3
    57c0:	1970      	adds	r0, r6, r5
    57c2:	f005 ff52 	bl	b66a <memmove>
	if (flash_prefix != 0) {
    57c6:	b1bd      	cbz	r5, 57f8 <qspi_nor_read+0xf0>
				     (WORD_SIZE - flash_prefix));
    57c8:	f1c5 0904 	rsb	r9, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    57cc:	2104      	movs	r1, #4
    57ce:	eba8 0209 	sub.w	r2, r8, r9
    57d2:	a802      	add	r0, sp, #8
    57d4:	f008 f877 	bl	d8c6 <nrfx_qspi_read>
    57d8:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    57da:	4601      	mov	r1, r0
    57dc:	6938      	ldr	r0, [r7, #16]
    57de:	f7ff fd8d 	bl	52fc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    57e2:	4b1c      	ldr	r3, [pc, #112]	; (5854 <qspi_nor_read+0x14c>)
    57e4:	429c      	cmp	r4, r3
    57e6:	d122      	bne.n	582e <qspi_nor_read+0x126>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    57e8:	f109 0308 	add.w	r3, r9, #8
    57ec:	462a      	mov	r2, r5
    57ee:	4630      	mov	r0, r6
    57f0:	eb0d 0103 	add.w	r1, sp, r3
    57f4:	f005 ff50 	bl	b698 <memcpy>
	if (flash_suffix != 0) {
    57f8:	f1bb 0f00 	cmp.w	fp, #0
    57fc:	d016      	beq.n	582c <qspi_nor_read+0x124>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    57fe:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    5800:	eb08 0205 	add.w	r2, r8, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    5804:	4452      	add	r2, sl
    5806:	eb0d 0001 	add.w	r0, sp, r1
    580a:	f008 f85c 	bl	d8c6 <nrfx_qspi_read>
    580e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5810:	4601      	mov	r1, r0
    5812:	6938      	ldr	r0, [r7, #16]
    5814:	f7ff fd72 	bl	52fc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5818:	4b0e      	ldr	r3, [pc, #56]	; (5854 <qspi_nor_read+0x14c>)
    581a:	429c      	cmp	r4, r3
    581c:	d107      	bne.n	582e <qspi_nor_read+0x126>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    581e:	eb0a 0005 	add.w	r0, sl, r5
    5822:	465a      	mov	r2, fp
    5824:	a902      	add	r1, sp, #8
    5826:	4430      	add	r0, r6
    5828:	f005 ff36 	bl	b698 <memcpy>
	return res;
    582c:	4c09      	ldr	r4, [pc, #36]	; (5854 <qspi_nor_read+0x14c>)
	qspi_unlock(dev);
    582e:	6938      	ldr	r0, [r7, #16]
    5830:	f006 f86a 	bl	b908 <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
    5834:	4620      	mov	r0, r4
    5836:	f7ff fd47 	bl	52c8 <qspi_get_zephyr_ret_code>
    583a:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    583c:	4638      	mov	r0, r7
    583e:	f7ff fd6b 	bl	5318 <qspi_device_uninit>
}
    5842:	4628      	mov	r0, r5
    5844:	b005      	add	sp, #20
    5846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
    584a:	461d      	mov	r5, r3
    584c:	e7f9      	b.n	5842 <qspi_nor_read+0x13a>
		return -EINVAL;
    584e:	f06f 0515 	mvn.w	r5, #21
    5852:	e7f6      	b.n	5842 <qspi_nor_read+0x13a>
    5854:	0bad0000 	.word	0x0bad0000

00005858 <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    5858:	4b02      	ldr	r3, [pc, #8]	; (5864 <flash_sim_page_layout+0xc>)
    585a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    585c:	2301      	movs	r3, #1
    585e:	6013      	str	r3, [r2, #0]
}
    5860:	4770      	bx	lr
    5862:	bf00      	nop
    5864:	0000ed60 	.word	0x0000ed60

00005868 <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    5868:	4800      	ldr	r0, [pc, #0]	; (586c <flash_sim_get_parameters+0x4>)
    586a:	4770      	bx	lr
    586c:	0000ed68 	.word	0x0000ed68

00005870 <flash_sim_write>:
{
    5870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5874:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5876:	440b      	add	r3, r1
    5878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    587c:	460d      	mov	r5, r1
    587e:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5880:	d82c      	bhi.n	58dc <flash_sim_write+0x6c>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    5882:	2900      	cmp	r1, #0
    5884:	db2a      	blt.n	58dc <flash_sim_write+0x6c>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    5886:	ea41 0604 	orr.w	r6, r1, r4
    588a:	f016 0603 	ands.w	r6, r6, #3
    588e:	d125      	bne.n	58dc <flash_sim_write+0x6c>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    5890:	2204      	movs	r2, #4
    5892:	21ff      	movs	r1, #255	; 0xff
    5894:	eb0d 0002 	add.w	r0, sp, r2
    5898:	f005 ff09 	bl	b6ae <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    589c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 58e4 <flash_sim_write+0x74>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    58a0:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    58a4:	42a6      	cmp	r6, r4
    58a6:	d309      	bcc.n	58bc <flash_sim_write+0x4c>
    58a8:	463a      	mov	r2, r7
    58aa:	eb08 0305 	add.w	r3, r8, r5
    58ae:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    58b0:	42a2      	cmp	r2, r4
    58b2:	d10c      	bne.n	58ce <flash_sim_write+0x5e>
	return 0;
    58b4:	2000      	movs	r0, #0
}
    58b6:	b003      	add	sp, #12
    58b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    58bc:	2204      	movs	r2, #4
    58be:	eb09 0106 	add.w	r1, r9, r6
    58c2:	eb0d 0002 	add.w	r0, sp, r2
    58c6:	f005 fec0 	bl	b64a <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    58ca:	3604      	adds	r6, #4
    58cc:	e7ea      	b.n	58a4 <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    58ce:	7819      	ldrb	r1, [r3, #0]
    58d0:	f812 0b01 	ldrb.w	r0, [r2], #1
    58d4:	4001      	ands	r1, r0
    58d6:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i = 0; i < len; i++) {
    58da:	e7e9      	b.n	58b0 <flash_sim_write+0x40>
		return -EINVAL;
    58dc:	f06f 0015 	mvn.w	r0, #21
    58e0:	e7e9      	b.n	58b6 <flash_sim_write+0x46>
    58e2:	bf00      	nop
    58e4:	2001688a 	.word	0x2001688a

000058e8 <flash_sim_read>:
{
    58e8:	4610      	mov	r0, r2
    58ea:	b508      	push	{r3, lr}
    58ec:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    58ee:	440b      	add	r3, r1
    58f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    58f4:	d807      	bhi.n	5906 <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    58f6:	2900      	cmp	r1, #0
    58f8:	db05      	blt.n	5906 <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    58fa:	4b04      	ldr	r3, [pc, #16]	; (590c <flash_sim_read+0x24>)
    58fc:	4419      	add	r1, r3
    58fe:	f005 fecb 	bl	b698 <memcpy>
	return 0;
    5902:	2000      	movs	r0, #0
}
    5904:	bd08      	pop	{r3, pc}
		return -EINVAL;
    5906:	f06f 0015 	mvn.w	r0, #21
    590a:	e7fb      	b.n	5904 <flash_sim_read+0x1c>
    590c:	2001688a 	.word	0x2001688a

00005910 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5910:	188b      	adds	r3, r1, r2
    5912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5916:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5918:	d81b      	bhi.n	5952 <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    591a:	2900      	cmp	r1, #0
    591c:	db19      	blt.n	5952 <flash_sim_erase+0x42>
	    (len % FLASH_SIMULATOR_ERASE_UNIT)) {
    591e:	ea42 0601 	orr.w	r6, r2, r1
    5922:	f3c6 060b 	ubfx	r6, r6, #0, #12
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    5926:	b9a6      	cbnz	r6, 5952 <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    5928:	4c0b      	ldr	r4, [pc, #44]	; (5958 <flash_sim_erase+0x48>)
    592a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    592e:	f021 010f 	bic.w	r1, r1, #15
    5932:	0b15      	lsrs	r5, r2, #12
    5934:	440c      	add	r4, r1
    5936:	42ae      	cmp	r6, r5
    5938:	d101      	bne.n	593e <flash_sim_erase+0x2e>
    593a:	2000      	movs	r0, #0
}
    593c:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    593e:	4620      	mov	r0, r4
    5940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5944:	21ff      	movs	r1, #255	; 0xff
    5946:	f005 feb2 	bl	b6ae <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    594a:	3601      	adds	r6, #1
    594c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    5950:	e7f1      	b.n	5936 <flash_sim_erase+0x26>
		return -EINVAL;
    5952:	f06f 0015 	mvn.w	r0, #21
    5956:	e7f1      	b.n	593c <flash_sim_erase+0x2c>
    5958:	2001688a 	.word	0x2001688a

0000595c <flash_init>:
}

#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    595c:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    595e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5962:	21ff      	movs	r1, #255	; 0xff
    5964:	4802      	ldr	r0, [pc, #8]	; (5970 <flash_init+0x14>)
    5966:	f005 fea2 	bl	b6ae <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    596a:	2000      	movs	r0, #0
    596c:	bd08      	pop	{r3, pc}
    596e:	bf00      	nop
    5970:	2001688a 	.word	0x2001688a

00005974 <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5974:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    5978:	4801      	ldr	r0, [pc, #4]	; (5980 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    597a:	600b      	str	r3, [r1, #0]
}
    597c:	4770      	bx	lr
    597e:	bf00      	nop
    5980:	2001688a 	.word	0x2001688a

00005984 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    5984:	4b02      	ldr	r3, [pc, #8]	; (5990 <flash_nrf_pages_layout+0xc>)
    5986:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5988:	2301      	movs	r3, #1
    598a:	6013      	str	r3, [r2, #0]
}
    598c:	4770      	bx	lr
    598e:	bf00      	nop
    5990:	20014120 	.word	0x20014120

00005994 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    5994:	4800      	ldr	r0, [pc, #0]	; (5998 <flash_nrf_get_parameters+0x4>)
    5996:	4770      	bx	lr
    5998:	0000ed98 	.word	0x0000ed98

0000599c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    599c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    599e:	2201      	movs	r2, #1
    59a0:	4806      	ldr	r0, [pc, #24]	; (59bc <nrf_flash_init+0x20>)
    59a2:	4611      	mov	r1, r2
    59a4:	f008 fc05 	bl	e1b2 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    59a8:	f007 ff7d 	bl	d8a6 <nrfx_nvmc_flash_page_count_get>
    59ac:	4c04      	ldr	r4, [pc, #16]	; (59c0 <nrf_flash_init+0x24>)
    59ae:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    59b0:	f007 ff76 	bl	d8a0 <nrfx_nvmc_flash_page_size_get>
    59b4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    59b6:	2000      	movs	r0, #0
    59b8:	bd10      	pop	{r4, pc}
    59ba:	bf00      	nop
    59bc:	20014128 	.word	0x20014128
    59c0:	20014120 	.word	0x20014120

000059c4 <flash_nrf_erase>:
{
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	460c      	mov	r4, r1
    59c8:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    59ca:	f007 ff69 	bl	d8a0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    59ce:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    59d0:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    59d2:	4620      	mov	r0, r4
    59d4:	f006 f80e 	bl	b9f4 <is_regular_addr_valid>
    59d8:	b308      	cbz	r0, 5a1e <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    59da:	fbb4 f3f6 	udiv	r3, r4, r6
    59de:	fb06 4313 	mls	r3, r6, r3, r4
    59e2:	b9e3      	cbnz	r3, 5a1e <flash_nrf_erase+0x5a>
    59e4:	fbb5 f3f6 	udiv	r3, r5, r6
    59e8:	fb06 5313 	mls	r3, r6, r3, r5
    59ec:	b9bb      	cbnz	r3, 5a1e <flash_nrf_erase+0x5a>
		if (!n_pages) {
    59ee:	42ae      	cmp	r6, r5
    59f0:	d901      	bls.n	59f6 <flash_nrf_erase+0x32>
			return 0;
    59f2:	2000      	movs	r0, #0
}
    59f4:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
    59f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    59fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59fe:	4809      	ldr	r0, [pc, #36]	; (5a24 <flash_nrf_erase+0x60>)
    5a00:	f003 fd54 	bl	94ac <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5a04:	f007 ff4c 	bl	d8a0 <nrfx_nvmc_flash_page_size_get>
    5a08:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5a0a:	4620      	mov	r0, r4
    5a0c:	f001 ff02 	bl	7814 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    5a10:	1bad      	subs	r5, r5, r6
    5a12:	4434      	add	r4, r6
    5a14:	d1f9      	bne.n	5a0a <flash_nrf_erase+0x46>
	z_impl_k_sem_give(sem);
    5a16:	4803      	ldr	r0, [pc, #12]	; (5a24 <flash_nrf_erase+0x60>)
    5a18:	f003 fd28 	bl	946c <z_impl_k_sem_give>
}
    5a1c:	e7e9      	b.n	59f2 <flash_nrf_erase+0x2e>
			return -EINVAL;
    5a1e:	f06f 0015 	mvn.w	r0, #21
    5a22:	e7e7      	b.n	59f4 <flash_nrf_erase+0x30>
    5a24:	20014128 	.word	0x20014128

00005a28 <flash_nrf_write>:
{
    5a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a2c:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5a2e:	4619      	mov	r1, r3
    5a30:	4628      	mov	r0, r5
{
    5a32:	4616      	mov	r6, r2
    5a34:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5a36:	f005 ffdd 	bl	b9f4 <is_regular_addr_valid>
    5a3a:	b3c8      	cbz	r0, 5ab0 <flash_nrf_write+0x88>
	if (!len) {
    5a3c:	b914      	cbnz	r4, 5a44 <flash_nrf_write+0x1c>
		return 0;
    5a3e:	2000      	movs	r0, #0
}
    5a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
    5a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a4c:	481a      	ldr	r0, [pc, #104]	; (5ab8 <flash_nrf_write+0x90>)
    5a4e:	f003 fd2d 	bl	94ac <z_impl_k_sem_take>
		nrf_flash_sync_get_timestamp_begin();
	}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
#if defined(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    5a52:	f015 0703 	ands.w	r7, r5, #3
    5a56:	d00c      	beq.n	5a72 <flash_nrf_write+0x4a>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
    5a58:	f1c7 0704 	rsb	r7, r7, #4
    5a5c:	42a7      	cmp	r7, r4
    5a5e:	bf28      	it	cs
    5a60:	4627      	movcs	r7, r4

		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5a62:	4631      	mov	r1, r6
    5a64:	4628      	mov	r0, r5
    5a66:	463a      	mov	r2, r7
    5a68:	f001 ff02 	bl	7870 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    5a6c:	443d      	add	r5, r7
	w_ctx->data_addr += shift;
    5a6e:	443e      	add	r6, r7
	w_ctx->len -= shift;
    5a70:	1be4      	subs	r4, r4, r7
{
    5a72:	2700      	movs	r7, #0
    5a74:	f024 0803 	bic.w	r8, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    5a78:	45b8      	cmp	r8, r7
    5a7a:	eb07 0005 	add.w	r0, r7, r5
    5a7e:	d112      	bne.n	5aa6 <flash_nrf_write+0x7e>
    5a80:	f06f 0203 	mvn.w	r2, #3
    5a84:	08a3      	lsrs	r3, r4, #2
    5a86:	fb02 4203 	mla	r2, r2, r3, r4
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#if defined(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* Write remaining unaligned data */
	if (w_ctx->len) {
    5a8a:	b11a      	cbz	r2, 5a94 <flash_nrf_write+0x6c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5a8c:	eb06 0108 	add.w	r1, r6, r8
    5a90:	f001 feee 	bl	7870 <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5a94:	4a09      	ldr	r2, [pc, #36]	; (5abc <flash_nrf_write+0x94>)
    5a96:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    5a9a:	07db      	lsls	r3, r3, #31
    5a9c:	d5fb      	bpl.n	5a96 <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
    5a9e:	4806      	ldr	r0, [pc, #24]	; (5ab8 <flash_nrf_write+0x90>)
    5aa0:	f003 fce4 	bl	946c <z_impl_k_sem_give>
	return ret;
    5aa4:	e7cb      	b.n	5a3e <flash_nrf_write+0x16>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5aa6:	59f1      	ldr	r1, [r6, r7]
    5aa8:	f001 fed2 	bl	7850 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    5aac:	3704      	adds	r7, #4
}
    5aae:	e7e3      	b.n	5a78 <flash_nrf_write+0x50>
		return -EINVAL;
    5ab0:	f06f 0015 	mvn.w	r0, #21
    5ab4:	e7c4      	b.n	5a40 <flash_nrf_write+0x18>
    5ab6:	bf00      	nop
    5ab8:	20014128 	.word	0x20014128
    5abc:	50039000 	.word	0x50039000

00005ac0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5ac0:	b530      	push	{r4, r5, lr}
	return port->config;
    5ac2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5ac4:	f001 041f 	and.w	r4, r1, #31
    5ac8:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5aca:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5ace:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5ad0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5ad4:	d105      	bne.n	5ae2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5ad6:	4620      	mov	r0, r4
    5ad8:	f001 fd5e 	bl	7598 <nrfx_gpiote_trigger_disable>

		return 0;
    5adc:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5ade:	b005      	add	sp, #20
    5ae0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ae2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5ae4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ae8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5aec:	d114      	bne.n	5b18 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5af2:	bf0c      	ite	eq
    5af4:	2304      	moveq	r3, #4
    5af6:	2305      	movne	r3, #5
    5af8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5afc:	2300      	movs	r3, #0
    5afe:	4620      	mov	r0, r4
    5b00:	4619      	mov	r1, r3
    5b02:	aa02      	add	r2, sp, #8
    5b04:	f001 fb86 	bl	7214 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5b08:	4b1f      	ldr	r3, [pc, #124]	; (5b88 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5b0a:	4298      	cmp	r0, r3
    5b0c:	d138      	bne.n	5b80 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5b0e:	2101      	movs	r1, #1
    5b10:	4620      	mov	r0, r4
    5b12:	f001 fcfb 	bl	750c <nrfx_gpiote_trigger_enable>
	return 0;
    5b16:	e7e1      	b.n	5adc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5b18:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5b1c:	d025      	beq.n	5b6a <gpio_nrfx_pin_interrupt_configure+0xaa>
    5b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5b22:	bf14      	ite	ne
    5b24:	2301      	movne	r3, #1
    5b26:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b28:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5b2c:	6883      	ldr	r3, [r0, #8]
    5b2e:	40cb      	lsrs	r3, r1
    5b30:	07d9      	lsls	r1, r3, #31
    5b32:	d4e3      	bmi.n	5afc <gpio_nrfx_pin_interrupt_configure+0x3c>
    5b34:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5b38:	d1e0      	bne.n	5afc <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    5b3a:	4a14      	ldr	r2, [pc, #80]	; (5b8c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    5b3c:	4814      	ldr	r0, [pc, #80]	; (5b90 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    5b3e:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    5b40:	2901      	cmp	r1, #1
    5b42:	bf08      	it	eq
    5b44:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    5b46:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5b4a:	3380      	adds	r3, #128	; 0x80
    5b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5b50:	07db      	lsls	r3, r3, #31
    5b52:	d4d3      	bmi.n	5afc <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5b54:	f10d 0507 	add.w	r5, sp, #7
    5b58:	4629      	mov	r1, r5
    5b5a:	4620      	mov	r0, r4
    5b5c:	f001 fc82 	bl	7464 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5b60:	4b0c      	ldr	r3, [pc, #48]	; (5b94 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    5b62:	4298      	cmp	r0, r3
    5b64:	d003      	beq.n	5b6e <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    5b66:	9503      	str	r5, [sp, #12]
    5b68:	e7c8      	b.n	5afc <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5b6a:	2303      	movs	r3, #3
    5b6c:	e7dc      	b.n	5b28 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    5b6e:	4628      	mov	r0, r5
    5b70:	f001 fcc6 	bl	7500 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5b74:	4b04      	ldr	r3, [pc, #16]	; (5b88 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5b76:	4298      	cmp	r0, r3
    5b78:	d0f5      	beq.n	5b66 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    5b7a:	f06f 000b 	mvn.w	r0, #11
    5b7e:	e7ae      	b.n	5ade <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5b80:	f06f 0015 	mvn.w	r0, #21
    5b84:	e7ab      	b.n	5ade <gpio_nrfx_pin_interrupt_configure+0x1e>
    5b86:	bf00      	nop
    5b88:	0bad0000 	.word	0x0bad0000
    5b8c:	50842500 	.word	0x50842500
    5b90:	50842800 	.word	0x50842800
    5b94:	0bad0004 	.word	0x0bad0004

00005b98 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5b98:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5b9a:	f001 fca1 	bl	74e0 <nrfx_gpiote_is_init>
    5b9e:	4604      	mov	r4, r0
    5ba0:	b968      	cbnz	r0, 5bbe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5ba2:	f001 fc75 	bl	7490 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5ba6:	4b08      	ldr	r3, [pc, #32]	; (5bc8 <gpio_nrfx_init+0x30>)
    5ba8:	4298      	cmp	r0, r3
    5baa:	d10a      	bne.n	5bc2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5bac:	4621      	mov	r1, r4
    5bae:	4807      	ldr	r0, [pc, #28]	; (5bcc <gpio_nrfx_init+0x34>)
    5bb0:	f001 fc52 	bl	7458 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5bb4:	4622      	mov	r2, r4
    5bb6:	2105      	movs	r1, #5
    5bb8:	200d      	movs	r0, #13
    5bba:	f7fe f957 	bl	3e6c <z_arm_irq_priority_set>
		return 0;
    5bbe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5bc0:	bd10      	pop	{r4, pc}
		return -EIO;
    5bc2:	f06f 0004 	mvn.w	r0, #4
    5bc6:	e7fb      	b.n	5bc0 <gpio_nrfx_init+0x28>
    5bc8:	0bad0000 	.word	0x0bad0000
    5bcc:	00005bd1 	.word	0x00005bd1

00005bd0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5bd0:	0942      	lsrs	r2, r0, #5
{
    5bd2:	4603      	mov	r3, r0
    5bd4:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5bd6:	d002      	beq.n	5bde <nrfx_gpio_handler+0xe>
    5bd8:	2a01      	cmp	r2, #1
    5bda:	d017      	beq.n	5c0c <nrfx_gpio_handler+0x3c>
}
    5bdc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5bde:	4e0d      	ldr	r6, [pc, #52]	; (5c14 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5be0:	6932      	ldr	r2, [r6, #16]
    5be2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5be4:	2900      	cmp	r1, #0
    5be6:	d0f9      	beq.n	5bdc <nrfx_gpio_handler+0xc>
    5be8:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    5bea:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    5bee:	680c      	ldr	r4, [r1, #0]
    5bf0:	409d      	lsls	r5, r3
    5bf2:	2900      	cmp	r1, #0
    5bf4:	d0f2      	beq.n	5bdc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    5bf6:	688a      	ldr	r2, [r1, #8]
    5bf8:	402a      	ands	r2, r5
    5bfa:	d002      	beq.n	5c02 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5bfc:	4630      	mov	r0, r6
    5bfe:	684b      	ldr	r3, [r1, #4]
    5c00:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c02:	b12c      	cbz	r4, 5c10 <nrfx_gpio_handler+0x40>
    5c04:	6823      	ldr	r3, [r4, #0]
    5c06:	4621      	mov	r1, r4
    5c08:	461c      	mov	r4, r3
    5c0a:	e7f2      	b.n	5bf2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c0c:	4e02      	ldr	r6, [pc, #8]	; (5c18 <nrfx_gpio_handler+0x48>)
    5c0e:	e7e7      	b.n	5be0 <nrfx_gpio_handler+0x10>
    5c10:	4623      	mov	r3, r4
    5c12:	e7f8      	b.n	5c06 <nrfx_gpio_handler+0x36>
    5c14:	0000e760 	.word	0x0000e760
    5c18:	0000e748 	.word	0x0000e748

00005c1c <gpio_nrfx_pin_configure>:
{
    5c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5c20:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5c22:	f001 051f 	and.w	r5, r1, #31
    5c26:	7b3b      	ldrb	r3, [r7, #12]
{
    5c28:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5c2a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    5c2e:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5c30:	4628      	mov	r0, r5
    5c32:	f10d 0103 	add.w	r1, sp, #3
    5c36:	f001 fc15 	bl	7464 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5c3a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5c3e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5c40:	d10b      	bne.n	5c5a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    5c42:	4628      	mov	r0, r5
    5c44:	f001 fcd0 	bl	75e8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    5c48:	4b3c      	ldr	r3, [pc, #240]	; (5d3c <gpio_nrfx_pin_configure+0x120>)
    5c4a:	4598      	cmp	r8, r3
    5c4c:	d103      	bne.n	5c56 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    5c4e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5c52:	f001 fc4f 	bl	74f4 <nrfx_gpiote_channel_free>
		return 0;
    5c56:	2000      	movs	r0, #0
    5c58:	e00c      	b.n	5c74 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5c5a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5c5c:	4628      	mov	r0, r5
    5c5e:	4619      	mov	r1, r3
    5c60:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    5c62:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5c66:	f001 fad5 	bl	7214 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5c6a:	4b34      	ldr	r3, [pc, #208]	; (5d3c <gpio_nrfx_pin_configure+0x120>)
    5c6c:	4298      	cmp	r0, r3
    5c6e:	d004      	beq.n	5c7a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    5c70:	f06f 0015 	mvn.w	r0, #21
}
    5c74:	b004      	add	sp, #16
    5c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    5c7a:	4580      	cmp	r8, r0
    5c7c:	d103      	bne.n	5c86 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    5c7e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5c82:	f001 fc37 	bl	74f4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5c86:	03a3      	lsls	r3, r4, #14
    5c88:	d549      	bpl.n	5d1e <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5c8a:	f240 3306 	movw	r3, #774	; 0x306
    5c8e:	4023      	ands	r3, r4
    5c90:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5c94:	d019      	beq.n	5cca <gpio_nrfx_pin_configure+0xae>
    5c96:	d80c      	bhi.n	5cb2 <gpio_nrfx_pin_configure+0x96>
    5c98:	2b06      	cmp	r3, #6
    5c9a:	d017      	beq.n	5ccc <gpio_nrfx_pin_configure+0xb0>
    5c9c:	d804      	bhi.n	5ca8 <gpio_nrfx_pin_configure+0x8c>
    5c9e:	b1ab      	cbz	r3, 5ccc <gpio_nrfx_pin_configure+0xb0>
    5ca0:	2b02      	cmp	r3, #2
    5ca2:	d1e5      	bne.n	5c70 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5ca4:	2304      	movs	r3, #4
    5ca6:	e011      	b.n	5ccc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5cac:	d1e0      	bne.n	5c70 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5cae:	2301      	movs	r3, #1
    5cb0:	e00c      	b.n	5ccc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5cb2:	f240 2202 	movw	r2, #514	; 0x202
    5cb6:	4293      	cmp	r3, r2
    5cb8:	d026      	beq.n	5d08 <gpio_nrfx_pin_configure+0xec>
    5cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5cbe:	d025      	beq.n	5d0c <gpio_nrfx_pin_configure+0xf0>
    5cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5cc4:	d1d4      	bne.n	5c70 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5cc6:	2302      	movs	r3, #2
    5cc8:	e000      	b.n	5ccc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    5cca:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5ccc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5cd0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5cd4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5cd8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5cda:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    5cde:	bf4c      	ite	mi
    5ce0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    5ce2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5ce6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5ce8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5cec:	d510      	bpl.n	5d10 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5cee:	2301      	movs	r3, #1
    5cf0:	687a      	ldr	r2, [r7, #4]
    5cf2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5cf4:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5cf6:	2200      	movs	r2, #0
    5cf8:	4628      	mov	r0, r5
    5cfa:	a901      	add	r1, sp, #4
    5cfc:	f001 fb38 	bl	7370 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5d00:	4b0e      	ldr	r3, [pc, #56]	; (5d3c <gpio_nrfx_pin_configure+0x120>)
    5d02:	4298      	cmp	r0, r3
    5d04:	d0a7      	beq.n	5c56 <gpio_nrfx_pin_configure+0x3a>
    5d06:	e7b3      	b.n	5c70 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5d08:	2305      	movs	r3, #5
    5d0a:	e7df      	b.n	5ccc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d0c:	2303      	movs	r3, #3
    5d0e:	e7dd      	b.n	5ccc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5d10:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5d12:	bf41      	itttt	mi
    5d14:	2301      	movmi	r3, #1
    5d16:	687a      	ldrmi	r2, [r7, #4]
    5d18:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5d1a:	60d3      	strmi	r3, [r2, #12]
}
    5d1c:	e7eb      	b.n	5cf6 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    5d1e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5d20:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5d24:	bf4c      	ite	mi
    5d26:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    5d28:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5d2c:	461a      	mov	r2, r3
    5d2e:	4628      	mov	r0, r5
    5d30:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    5d32:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5d36:	f001 fa6d 	bl	7214 <nrfx_gpiote_input_configure>
    5d3a:	e7e1      	b.n	5d00 <gpio_nrfx_pin_configure+0xe4>
    5d3c:	0bad0000 	.word	0x0bad0000

00005d40 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5d40:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    5d48:	4e56      	ldr	r6, [pc, #344]	; (5ea4 <pinctrl_configure_pins+0x164>)
    5d4a:	4f57      	ldr	r7, [pc, #348]	; (5ea8 <pinctrl_configure_pins+0x168>)
    5d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5d50:	4281      	cmp	r1, r0
    5d52:	d102      	bne.n	5d5a <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    5d54:	2000      	movs	r0, #0
}
    5d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5d5a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    5d5c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5d60:	f3c4 2543 	ubfx	r5, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    5d64:	0c24      	lsrs	r4, r4, #16
			pin = 0xFFFFFFFFU;
    5d66:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    5d68:	f1a4 0404 	sub.w	r4, r4, #4
			pin = 0xFFFFFFFFU;
    5d6c:	bf08      	it	eq
    5d6e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    5d72:	2c1e      	cmp	r4, #30
    5d74:	f200 8092 	bhi.w	5e9c <pinctrl_configure_pins+0x15c>
    5d78:	e8df f004 	tbb	[pc, r4]
    5d7c:	90272310 	.word	0x90272310
    5d80:	2b909090 	.word	0x2b909090
    5d84:	90909058 	.word	0x90909058
    5d88:	90909090 	.word	0x90909090
    5d8c:	725b9090 	.word	0x725b9090
    5d90:	90907875 	.word	0x90907875
    5d94:	84817b90 	.word	0x84817b90
    5d98:	8a87      	.short	0x8a87
    5d9a:	8d          	.byte	0x8d
    5d9b:	00          	.byte	0x00
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5d9c:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    5d9e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    5da2:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    5da6:	f1b9 0f01 	cmp.w	r9, #1
    5daa:	bf14      	ite	ne
    5dac:	46b0      	movne	r8, r6
    5dae:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    5db0:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5db4:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    5db8:	f8c8 e00c 	str.w	lr, [r8, #12]
    5dbc:	f04f 0e01 	mov.w	lr, #1
    5dc0:	e00e      	b.n	5de0 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    5dc2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    5dc6:	2401      	movs	r4, #1
    5dc8:	e7eb      	b.n	5da2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    5dca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5dce:	2400      	movs	r4, #0
    5dd0:	e044      	b.n	5e5c <pinctrl_configure_pins+0x11c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    5dd2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    5dd6:	2d00      	cmp	r5, #0
    5dd8:	d1f9      	bne.n	5dce <pinctrl_configure_pins+0x8e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5dda:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    5ddc:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5dde:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5de0:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    5de4:	f003 091f 	and.w	r9, r3, #31
    5de8:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5dec:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    5df0:	ea4f 1353 	mov.w	r3, r3, lsr #5
    5df4:	bf1c      	itt	ne
    5df6:	2401      	movne	r4, #1
    5df8:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    5dfc:	2b01      	cmp	r3, #1
    5dfe:	bf0c      	ite	eq
    5e00:	46b8      	moveq	r8, r7
    5e02:	46b0      	movne	r8, r6
    5e04:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5e08:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    5e0c:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    5e10:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    5e14:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5e16:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    5e1a:	ea43 030e 	orr.w	r3, r3, lr
    5e1e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5e22:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    5e26:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5e2a:	e791      	b.n	5d50 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    5e2c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    5e30:	e7d1      	b.n	5dd6 <pinctrl_configure_pins+0x96>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    5e32:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    5e36:	6804      	ldr	r4, [r0, #0]
    5e38:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    5e3c:	2c00      	cmp	r4, #0
    5e3e:	d0c2      	beq.n	5dc6 <pinctrl_configure_pins+0x86>
    return pin_number >> 5;
    5e40:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    5e44:	f1b8 0f01 	cmp.w	r8, #1
    5e48:	bf14      	ite	ne
    5e4a:	46b6      	movne	lr, r6
    5e4c:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    5e4e:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5e52:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    5e56:	f8ce 4008 	str.w	r4, [lr, #8]
    5e5a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5e5c:	46a6      	mov	lr, r4
    5e5e:	e7bf      	b.n	5de0 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    5e60:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    5e64:	e7e7      	b.n	5e36 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    5e66:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    5e6a:	e7e4      	b.n	5e36 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    5e6c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    5e70:	e7e1      	b.n	5e36 <pinctrl_configure_pins+0xf6>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    5e72:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5e76:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5e78:	f04f 0e00 	mov.w	lr, #0
    5e7c:	e7b0      	b.n	5de0 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    5e7e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    if (value == 0)
    5e82:	e7dd      	b.n	5e40 <pinctrl_configure_pins+0x100>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    5e84:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    5e88:	e7f5      	b.n	5e76 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    5e8a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
			if (write != NO_WRITE) {
    5e8e:	e7f2      	b.n	5e76 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    5e90:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    5e94:	e7ef      	b.n	5e76 <pinctrl_configure_pins+0x136>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    5e96:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    5e9a:	e7ec      	b.n	5e76 <pinctrl_configure_pins+0x136>
		switch (NRF_GET_FUN(pins[i])) {
    5e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5ea0:	e759      	b.n	5d56 <pinctrl_configure_pins+0x16>
    5ea2:	bf00      	nop
    5ea4:	50842500 	.word	0x50842500
    5ea8:	50842800 	.word	0x50842800

00005eac <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
    5eac:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    5eae:	6844      	ldr	r4, [r0, #4]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    5eb0:	2201      	movs	r2, #1
    5eb2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    5eb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5eb8:	f005 ff3d 	bl	bd36 <gpio_pin_set>
	int ret;

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
    5ebc:	2800      	cmp	r0, #0
    5ebe:	db02      	blt.n	5ec6 <regulator_fixed_enable+0x1a>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
    5ec0:	6a24      	ldr	r4, [r4, #32]
    5ec2:	b90c      	cbnz	r4, 5ec8 <regulator_fixed_enable+0x1c>
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
    5ec4:	2000      	movs	r0, #0
}
    5ec6:	bd38      	pop	{r3, r4, r5, pc}
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5ec8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    5ecc:	2100      	movs	r1, #0
    5ece:	4805      	ldr	r0, [pc, #20]	; (5ee4 <regulator_fixed_enable+0x38>)
    5ed0:	2300      	movs	r3, #0
    5ed2:	fbe4 0105 	umlal	r0, r1, r4, r5
    5ed6:	4a04      	ldr	r2, [pc, #16]	; (5ee8 <regulator_fixed_enable+0x3c>)
    5ed8:	f7fa f93c 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5edc:	f003 fe52 	bl	9b84 <z_impl_k_sleep>
    5ee0:	e7f0      	b.n	5ec4 <regulator_fixed_enable+0x18>
    5ee2:	bf00      	nop
    5ee4:	000f423f 	.word	0x000f423f
    5ee8:	000f4240 	.word	0x000f4240

00005eec <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5eec:	2301      	movs	r3, #1
    5eee:	4083      	lsls	r3, r0
{
    5ef0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5ef2:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ef4:	4a0b      	ldr	r2, [pc, #44]	; (5f24 <compare_int_lock+0x38>)
    5ef6:	e8d2 1fef 	ldaex	r1, [r2]
    5efa:	ea01 0504 	and.w	r5, r1, r4
    5efe:	e8c2 5fe6 	stlex	r6, r5, [r2]
    5f02:	2e00      	cmp	r6, #0
    5f04:	d1f7      	bne.n	5ef6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5f0a:	4082      	lsls	r2, r0
    5f0c:	4806      	ldr	r0, [pc, #24]	; (5f28 <compare_int_lock+0x3c>)
    5f0e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5f12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f16:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5f1a:	420b      	tst	r3, r1
}
    5f1c:	bf14      	ite	ne
    5f1e:	2001      	movne	r0, #1
    5f20:	2000      	moveq	r0, #0
    5f22:	bd70      	pop	{r4, r5, r6, pc}
    5f24:	20014184 	.word	0x20014184
    5f28:	50015000 	.word	0x50015000

00005f2c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    5f2c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5f2e:	490e      	ldr	r1, [pc, #56]	; (5f68 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    5f30:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5f34:	e9d1 3400 	ldrd	r3, r4, [r1]
    5f38:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    5f3a:	18c3      	adds	r3, r0, r3
    5f3c:	f144 0400 	adc.w	r4, r4, #0
    5f40:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5f44:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5f48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5f4c:	d209      	bcs.n	5f62 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5f4e:	4b07      	ldr	r3, [pc, #28]	; (5f6c <sys_clock_timeout_handler+0x40>)
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	0a1a      	lsrs	r2, r3, #8
    5f54:	061b      	lsls	r3, r3, #24
    5f56:	199c      	adds	r4, r3, r6
    5f58:	4b05      	ldr	r3, [pc, #20]	; (5f70 <sys_clock_timeout_handler+0x44>)
    5f5a:	f142 0500 	adc.w	r5, r2, #0
    5f5e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    5f62:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    5f64:	f003 bf90 	b.w	9e88 <sys_clock_announce>
    5f68:	200025d0 	.word	0x200025d0
    5f6c:	20014188 	.word	0x20014188
    5f70:	200025d8 	.word	0x200025d8

00005f74 <compare_int_unlock>:
	if (key) {
    5f74:	b1d9      	cbz	r1, 5fae <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    5f76:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f78:	4a0d      	ldr	r2, [pc, #52]	; (5fb0 <compare_int_unlock+0x3c>)
    5f7a:	4083      	lsls	r3, r0
    5f7c:	e8d2 cfef 	ldaex	ip, [r2]
    5f80:	ea4c 0c03 	orr.w	ip, ip, r3
    5f84:	e8c2 cfe1 	stlex	r1, ip, [r2]
    5f88:	2900      	cmp	r1, #0
    5f8a:	d1f7      	bne.n	5f7c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    5f90:	4a08      	ldr	r2, [pc, #32]	; (5fb4 <compare_int_unlock+0x40>)
    5f92:	4083      	lsls	r3, r0
    5f94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f98:	4b07      	ldr	r3, [pc, #28]	; (5fb8 <compare_int_unlock+0x44>)
    5f9a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5f9e:	40c3      	lsrs	r3, r0
    5fa0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fa2:	bf42      	ittt	mi
    5fa4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    5fa8:	4b04      	ldrmi	r3, [pc, #16]	; (5fbc <compare_int_unlock+0x48>)
    5faa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5fae:	4770      	bx	lr
    5fb0:	20014184 	.word	0x20014184
    5fb4:	50015000 	.word	0x50015000
    5fb8:	20014180 	.word	0x20014180
    5fbc:	e000e100 	.word	0xe000e100

00005fc0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5fc0:	4b0d      	ldr	r3, [pc, #52]	; (5ff8 <z_nrf_rtc_timer_read+0x38>)
    5fc2:	6818      	ldr	r0, [r3, #0]
    5fc4:	0a01      	lsrs	r1, r0, #8
    5fc6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5fc8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5fcc:	4b0b      	ldr	r3, [pc, #44]	; (5ffc <z_nrf_rtc_timer_read+0x3c>)
    5fce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5fd2:	1818      	adds	r0, r3, r0
    5fd4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5fdc:	d20a      	bcs.n	5ff4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5fde:	4b08      	ldr	r3, [pc, #32]	; (6000 <z_nrf_rtc_timer_read+0x40>)
    5fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    5fe4:	4290      	cmp	r0, r2
    5fe6:	eb71 0303 	sbcs.w	r3, r1, r3
    5fea:	d203      	bcs.n	5ff4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5fec:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5ff0:	f141 0100 	adc.w	r1, r1, #0
}
    5ff4:	4770      	bx	lr
    5ff6:	bf00      	nop
    5ff8:	20014188 	.word	0x20014188
    5ffc:	50015000 	.word	0x50015000
    6000:	200025d8 	.word	0x200025d8

00006004 <compare_set>:
{
    6004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6008:	4616      	mov	r6, r2
    600a:	461f      	mov	r7, r3
    600c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    600e:	f7ff ff6d 	bl	5eec <compare_int_lock>
    6012:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6014:	f7ff ffd4 	bl	5fc0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6018:	42b0      	cmp	r0, r6
    601a:	eb71 0307 	sbcs.w	r3, r1, r7
    601e:	d250      	bcs.n	60c2 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    6020:	4b38      	ldr	r3, [pc, #224]	; (6104 <compare_set+0x100>)
    6022:	1a30      	subs	r0, r6, r0
    6024:	eb67 0101 	sbc.w	r1, r7, r1
    6028:	4298      	cmp	r0, r3
    602a:	f171 0100 	sbcs.w	r1, r1, #0
    602e:	d265      	bcs.n	60fc <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    6030:	4b35      	ldr	r3, [pc, #212]	; (6108 <compare_set+0x104>)
    6032:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    603a:	429f      	cmp	r7, r3
    603c:	bf08      	it	eq
    603e:	4296      	cmpeq	r6, r2
    6040:	d049      	beq.n	60d6 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6042:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    6046:	4931      	ldr	r1, [pc, #196]	; (610c <compare_set+0x108>)
    6048:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    604c:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    604e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    6052:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    6056:	f005 fec0 	bl	bdda <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    605a:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    605e:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6060:	f104 0550 	add.w	r5, r4, #80	; 0x50
    6064:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6066:	b2ad      	uxth	r5, r5
    6068:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    606c:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6070:	4a27      	ldr	r2, [pc, #156]	; (6110 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6072:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    6076:	9301      	str	r3, [sp, #4]
    6078:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    607c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6080:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    6084:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    6088:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    608c:	eba0 0008 	sub.w	r0, r0, r8
    6090:	3803      	subs	r0, #3
    6092:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6096:	4290      	cmp	r0, r2
    6098:	d91d      	bls.n	60d6 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    609a:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    609c:	b160      	cbz	r0, 60b8 <compare_set+0xb4>
     return p_reg->COUNTER;
    609e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    60a2:	eba8 000b 	sub.w	r0, r8, fp
    60a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    60aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    60ae:	d912      	bls.n	60d6 <compare_set+0xd2>
					event_clear(chan);
    60b0:	4620      	mov	r0, r4
    60b2:	f005 fe92 	bl	bdda <event_clear>
    60b6:	4a16      	ldr	r2, [pc, #88]	; (6110 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    60b8:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    60bc:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    60c0:	e7da      	b.n	6078 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    60c2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60c4:	4a13      	ldr	r2, [pc, #76]	; (6114 <compare_set+0x110>)
    60c6:	40a3      	lsls	r3, r4
    60c8:	e8d2 0fef 	ldaex	r0, [r2]
    60cc:	4318      	orrs	r0, r3
    60ce:	e8c2 0fe1 	stlex	r1, r0, [r2]
    60d2:	2900      	cmp	r1, #0
    60d4:	d1f8      	bne.n	60c8 <compare_set+0xc4>
	return ret;
    60d6:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    60d8:	490b      	ldr	r1, [pc, #44]	; (6108 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    60da:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    60dc:	0123      	lsls	r3, r4, #4
    60de:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    60e2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    60e4:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    60e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60ea:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    60ec:	4620      	mov	r0, r4
    60ee:	9900      	ldr	r1, [sp, #0]
    60f0:	f7ff ff40 	bl	5f74 <compare_int_unlock>
}
    60f4:	4628      	mov	r0, r5
    60f6:	b003      	add	sp, #12
    60f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    60fc:	f06f 0515 	mvn.w	r5, #21
    6100:	e7f4      	b.n	60ec <compare_set+0xe8>
    6102:	bf00      	nop
    6104:	00800001 	.word	0x00800001
    6108:	200025c0 	.word	0x200025c0
    610c:	50015000 	.word	0x50015000
    6110:	007ffffd 	.word	0x007ffffd
    6114:	20014180 	.word	0x20014180

00006118 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    6118:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PRESCALER = val;
    611a:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    611c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    6124:	4c18      	ldr	r4, [pc, #96]	; (6188 <sys_clock_driver_init+0x70>)
    6126:	4b19      	ldr	r3, [pc, #100]	; (618c <sys_clock_driver_init+0x74>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6128:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    612c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6130:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    6134:	4b16      	ldr	r3, [pc, #88]	; (6190 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    6136:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    613a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    613e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6142:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    6146:	2302      	movs	r3, #2
    6148:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    614c:	4b11      	ldr	r3, [pc, #68]	; (6194 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    614e:	2101      	movs	r1, #1
    6150:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6154:	2015      	movs	r0, #21
    6156:	462a      	mov	r2, r5
    6158:	f7fd fe88 	bl	3e6c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    615c:	2015      	movs	r0, #21
    615e:	f7fd fe55 	bl	3e0c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6162:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6164:	4a0c      	ldr	r2, [pc, #48]	; (6198 <sys_clock_driver_init+0x80>)
    6166:	60a3      	str	r3, [r4, #8]
    6168:	6023      	str	r3, [r4, #0]
    616a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    616c:	4b0b      	ldr	r3, [pc, #44]	; (619c <sys_clock_driver_init+0x84>)
    616e:	4a0c      	ldr	r2, [pc, #48]	; (61a0 <sys_clock_driver_init+0x88>)
    6170:	9300      	str	r3, [sp, #0]
    6172:	4628      	mov	r0, r5
    6174:	2300      	movs	r3, #0
    6176:	9501      	str	r5, [sp, #4]
    6178:	f7ff ff44 	bl	6004 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    617c:	4628      	mov	r0, r5
    617e:	f7ff f825 	bl	51cc <z_nrf_clock_control_lf_on>

	return 0;
}
    6182:	4628      	mov	r0, r5
    6184:	b003      	add	sp, #12
    6186:	bd30      	pop	{r4, r5, pc}
    6188:	50015000 	.word	0x50015000
    618c:	000f0003 	.word	0x000f0003
    6190:	200025c0 	.word	0x200025c0
    6194:	e000e100 	.word	0xe000e100
    6198:	20014184 	.word	0x20014184
    619c:	00005f2d 	.word	0x00005f2d
    61a0:	007fffff 	.word	0x007fffff

000061a4 <rtc_nrf_isr>:
{
    61a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    61a8:	4b2e      	ldr	r3, [pc, #184]	; (6264 <rtc_nrf_isr+0xc0>)
    61aa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    61ae:	0790      	lsls	r0, r2, #30
    61b0:	d50b      	bpl.n	61ca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    61b6:	b142      	cbz	r2, 61ca <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    61b8:	2200      	movs	r2, #0
    61ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    61be:	4a2a      	ldr	r2, [pc, #168]	; (6268 <rtc_nrf_isr+0xc4>)
    61c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    61c4:	6813      	ldr	r3, [r2, #0]
    61c6:	3301      	adds	r3, #1
    61c8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    61ca:	4a26      	ldr	r2, [pc, #152]	; (6264 <rtc_nrf_isr+0xc0>)
    61cc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    61d0:	03d9      	lsls	r1, r3, #15
    61d2:	d527      	bpl.n	6224 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61d4:	4b25      	ldr	r3, [pc, #148]	; (626c <rtc_nrf_isr+0xc8>)
    61d6:	e8d3 1fef 	ldaex	r1, [r3]
    61da:	f021 0001 	bic.w	r0, r1, #1
    61de:	e8c3 0fe4 	stlex	r4, r0, [r3]
    61e2:	2c00      	cmp	r4, #0
    61e4:	d1f7      	bne.n	61d6 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    61e6:	07cb      	lsls	r3, r1, #31
    61e8:	d402      	bmi.n	61f0 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61ea:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    61ee:	b1cb      	cbz	r3, 6224 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    61f0:	2500      	movs	r5, #0
    61f2:	4c1c      	ldr	r4, [pc, #112]	; (6264 <rtc_nrf_isr+0xc0>)
    61f4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    61f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    61fc:	f7ff fee0 	bl	5fc0 <z_nrf_rtc_timer_read>
    6200:	f04f 0320 	mov.w	r3, #32
    6204:	f3ef 8211 	mrs	r2, BASEPRI
    6208:	f383 8812 	msr	BASEPRI_MAX, r3
    620c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    6210:	4b17      	ldr	r3, [pc, #92]	; (6270 <rtc_nrf_isr+0xcc>)
    6212:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    6216:	42b0      	cmp	r0, r6
    6218:	41b9      	sbcs	r1, r7
    621a:	d206      	bcs.n	622a <rtc_nrf_isr+0x86>
	__asm__ volatile(
    621c:	f382 8811 	msr	BASEPRI, r2
    6220:	f3bf 8f6f 	isb	sy
}
    6224:	b003      	add	sp, #12
    6226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    622a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    622e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6232:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    6236:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6238:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    623c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6240:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6244:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6248:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    624c:	f382 8811 	msr	BASEPRI, r2
    6250:	f3bf 8f6f 	isb	sy
		if (handler) {
    6254:	2900      	cmp	r1, #0
    6256:	d0e5      	beq.n	6224 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    6258:	9000      	str	r0, [sp, #0]
    625a:	4632      	mov	r2, r6
    625c:	463b      	mov	r3, r7
    625e:	4628      	mov	r0, r5
    6260:	4788      	blx	r1
    6262:	e7df      	b.n	6224 <rtc_nrf_isr+0x80>
    6264:	50015000 	.word	0x50015000
    6268:	20014188 	.word	0x20014188
    626c:	20014180 	.word	0x20014180
    6270:	200025c0 	.word	0x200025c0

00006274 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    6274:	1c43      	adds	r3, r0, #1
{
    6276:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    6278:	d021      	beq.n	62be <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    627a:	2801      	cmp	r0, #1
    627c:	dd21      	ble.n	62c2 <sys_clock_set_timeout+0x4e>
    627e:	4a12      	ldr	r2, [pc, #72]	; (62c8 <sys_clock_set_timeout+0x54>)
    6280:	4b12      	ldr	r3, [pc, #72]	; (62cc <sys_clock_set_timeout+0x58>)
    6282:	4290      	cmp	r0, r2
    6284:	bfd4      	ite	le
    6286:	4604      	movle	r4, r0
    6288:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    628a:	f7ff fe99 	bl	5fc0 <z_nrf_rtc_timer_read>
    628e:	4b10      	ldr	r3, [pc, #64]	; (62d0 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6290:	490e      	ldr	r1, [pc, #56]	; (62cc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6292:	e9d3 2300 	ldrd	r2, r3, [r3]
    6296:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6298:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    629c:	bf28      	it	cs
    629e:	2400      	movcs	r4, #0
	cyc += unannounced;
    62a0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    62a2:	428c      	cmp	r4, r1
    62a4:	bf28      	it	cs
    62a6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    62a8:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    62aa:	490a      	ldr	r1, [pc, #40]	; (62d4 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    62ac:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    62ae:	9001      	str	r0, [sp, #4]
    62b0:	9100      	str	r1, [sp, #0]
    62b2:	f143 0300 	adc.w	r3, r3, #0
    62b6:	f7ff fea5 	bl	6004 <compare_set>
}
    62ba:	b002      	add	sp, #8
    62bc:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    62be:	4c03      	ldr	r4, [pc, #12]	; (62cc <sys_clock_set_timeout+0x58>)
    62c0:	e7e3      	b.n	628a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    62c2:	2401      	movs	r4, #1
    62c4:	e7e1      	b.n	628a <sys_clock_set_timeout+0x16>
    62c6:	bf00      	nop
    62c8:	007ffffe 	.word	0x007ffffe
    62cc:	007fffff 	.word	0x007fffff
    62d0:	200025d0 	.word	0x200025d0
    62d4:	00005f2d 	.word	0x00005f2d

000062d8 <sys_clock_elapsed>:
{
    62d8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    62da:	f7ff fe71 	bl	5fc0 <z_nrf_rtc_timer_read>
    62de:	4b02      	ldr	r3, [pc, #8]	; (62e8 <sys_clock_elapsed+0x10>)
    62e0:	681b      	ldr	r3, [r3, #0]
}
    62e2:	1ac0      	subs	r0, r0, r3
    62e4:	bd08      	pop	{r3, pc}
    62e6:	bf00      	nop
    62e8:	200025d0 	.word	0x200025d0

000062ec <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    62ec:	2301      	movs	r3, #1
{
    62ee:	b510      	push	{r4, lr}
    62f0:	4c07      	ldr	r4, [pc, #28]	; (6310 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    62f2:	2015      	movs	r0, #21
    62f4:	6063      	str	r3, [r4, #4]
    62f6:	f7fd fd97 	bl	3e28 <arch_irq_disable>
    62fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    62fe:	4b05      	ldr	r3, [pc, #20]	; (6314 <sys_clock_disable+0x28>)
    6300:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6304:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    6308:	4b03      	ldr	r3, [pc, #12]	; (6318 <sys_clock_disable+0x2c>)
    630a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    630e:	bd10      	pop	{r4, pc}
    6310:	50015000 	.word	0x50015000
    6314:	000f0003 	.word	0x000f0003
    6318:	e000e100 	.word	0xe000e100

0000631c <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    631c:	ea40 0301 	orr.w	r3, r0, r1
    6320:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    6324:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    6326:	b98b      	cbnz	r3, 634c <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    6328:	f240 1515 	movw	r5, #277	; 0x115
    632c:	4c09      	ldr	r4, [pc, #36]	; (6354 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    632e:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    6330:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6334:	4299      	cmp	r1, r3
    6336:	d101      	bne.n	633c <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    6338:	2000      	movs	r0, #0
}
    633a:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    633c:	18c2      	adds	r2, r0, r3
    633e:	b2d2      	uxtb	r2, r2
    6340:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    6344:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    6348:	3301      	adds	r3, #1
    634a:	e7f3      	b.n	6334 <fprotect_area+0x18>
		return -EINVAL;
    634c:	f06f 0015 	mvn.w	r0, #21
    6350:	e7f3      	b.n	633a <fprotect_area+0x1e>
    6352:	bf00      	nop
    6354:	50003000 	.word	0x50003000

00006358 <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    6358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    635c:	6818      	ldr	r0, [r3, #0]
    635e:	4b05      	ldr	r3, [pc, #20]	; (6374 <pcd_fw_copy_status_get+0x1c>)
    6360:	4298      	cmp	r0, r3
    6362:	d005      	beq.n	6370 <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
    6364:	4b04      	ldr	r3, [pc, #16]	; (6378 <pcd_fw_copy_status_get+0x20>)
    6366:	4298      	cmp	r0, r3
    6368:	bf0c      	ite	eq
    636a:	2001      	moveq	r0, #1
    636c:	2002      	movne	r0, #2
    636e:	4770      	bx	lr
		return PCD_STATUS_COPY;
    6370:	2000      	movs	r0, #0
}
    6372:	4770      	bx	lr
    6374:	b5b4b3b6 	.word	0xb5b4b3b6
    6378:	f103ce5d 	.word	0xf103ce5d

0000637c <network_core_finished_check_handler>:
	 */
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
}

static void network_core_finished_check_handler(struct k_timer *timer)
{
    637c:	b508      	push	{r3, lr}
	if (pcd_fw_copy_status_get() != PCD_STATUS_COPY) {
    637e:	f7ff ffeb 	bl	6358 <pcd_fw_copy_status_get>
    6382:	b130      	cbz	r0, 6392 <network_core_finished_check_handler+0x16>
	z_impl_k_timer_stop(timer);
    6384:	4803      	ldr	r0, [pc, #12]	; (6394 <network_core_finished_check_handler+0x18>)
    6386:	f008 f8e3 	bl	e550 <z_impl_k_timer_stop>
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    638a:	2200      	movs	r2, #0
    638c:	4b02      	ldr	r3, [pc, #8]	; (6398 <network_core_finished_check_handler+0x1c>)
    638e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		 * successfully, tidy up and cancel timer
		 */
		k_timer_stop(&network_core_finished_check_timer);
		network_core_pcd_tidy();
	}
}
    6392:	bd08      	pop	{r3, pc}
    6394:	200022c0 	.word	0x200022c0
    6398:	50003000 	.word	0x50003000

0000639c <pcd_network_core_update_initiate>:
    639c:	2210      	movs	r2, #16
    639e:	4b14      	ldr	r3, [pc, #80]	; (63f0 <pcd_network_core_update_initiate+0x54>)

	return network_core_pcd_cmdset(src_addr, len, wait);
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    63a0:	b513      	push	{r0, r1, r4, lr}
    63a2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    if (hold)
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    63a6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    63aa:	2301      	movs	r3, #1
    63ac:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    63b0:	b1d0      	cbz	r0, 63e8 <pcd_network_core_update_initiate+0x4c>
    63b2:	b1c9      	cbz	r1, 63e8 <pcd_network_core_update_initiate+0x4c>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    63b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    63b8:	4c0e      	ldr	r4, [pc, #56]	; (63f4 <pcd_network_core_update_initiate+0x58>)
	cmd->len = len;
    63ba:	6099      	str	r1, [r3, #8]
	cmd->data = data;
    63bc:	e9c3 4000 	strd	r4, r0, [r3]
	cmd->offset = offset;
    63c0:	f44f 4108 	mov.w	r1, #34816	; 0x8800
                                  RESET_NETWORK_FORCEOFF_FORCEOFF_Pos;
        *(volatile uint32_t *)0x50005618UL = 0UL;
    }
    else
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    63c4:	2400      	movs	r4, #0
    63c6:	60d9      	str	r1, [r3, #12]
    63c8:	f8c2 4614 	str.w	r4, [r2, #1556]	; 0x614
	int rc = network_core_update(src_addr, len, false);

	if (rc == 0) {
		k_timer_start(&network_core_finished_check_timer,
    63cc:	2300      	movs	r3, #0
	compiler_barrier();
    63ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
    63d2:	4809      	ldr	r0, [pc, #36]	; (63f8 <pcd_network_core_update_initiate+0x5c>)
    63d4:	e9cd 2300 	strd	r2, r3, [sp]
    63d8:	f003 fe4a 	bl	a070 <z_impl_k_timer_start>
	z_impl_k_busy_wait(usec_to_wait);
    63dc:	4807      	ldr	r0, [pc, #28]	; (63fc <pcd_network_core_update_initiate+0x60>)
    63de:	f008 f891 	bl	e504 <z_impl_k_busy_wait>
    63e2:	4620      	mov	r0, r4
			      NETWORK_CORE_UPDATE_CHECK_TIME);
		k_busy_wait(1 * USEC_PER_SEC);
	}

	return rc;
}
    63e4:	b002      	add	sp, #8
    63e6:	bd10      	pop	{r4, pc}
    63e8:	f06f 0015 	mvn.w	r0, #21
	return rc;
    63ec:	e7fa      	b.n	63e4 <pcd_network_core_update_initiate+0x48>
    63ee:	bf00      	nop
    63f0:	50003000 	.word	0x50003000
    63f4:	b5b4b3b6 	.word	0xb5b4b3b6
    63f8:	200022c0 	.word	0x200022c0
    63fc:	000f4240 	.word	0x000f4240

00006400 <pcd_network_core_update>:
    6400:	2210      	movs	r2, #16
    6402:	4b17      	ldr	r3, [pc, #92]	; (6460 <pcd_network_core_update+0x60>)

int pcd_network_core_update(const void *src_addr, size_t len)
{
    6404:	b510      	push	{r4, lr}
    6406:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    640a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    640e:	2301      	movs	r3, #1
    6410:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    6414:	b308      	cbz	r0, 645a <pcd_network_core_update+0x5a>
    6416:	b301      	cbz	r1, 645a <pcd_network_core_update+0x5a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    6418:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    641c:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    641e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    6422:	4c10      	ldr	r4, [pc, #64]	; (6464 <pcd_network_core_update+0x64>)
	cmd->offset = offset;
    6424:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    6426:	e9c3 4000 	strd	r4, r0, [r3]
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    642a:	2300      	movs	r3, #0
    642c:	4c0e      	ldr	r4, [pc, #56]	; (6468 <pcd_network_core_update+0x68>)
    642e:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    6432:	4620      	mov	r0, r4
    6434:	f008 f866 	bl	e504 <z_impl_k_busy_wait>
		err = pcd_fw_copy_status_get();
    6438:	f7ff ff8e 	bl	6358 <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    643c:	2800      	cmp	r0, #0
    643e:	d0f8      	beq.n	6432 <pcd_network_core_update+0x32>
	if (err == PCD_STATUS_COPY_FAILED) {
    6440:	2802      	cmp	r0, #2
    6442:	d009      	beq.n	6458 <pcd_network_core_update+0x58>
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    6444:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6448:	2201      	movs	r2, #1
    644a:	2000      	movs	r0, #0
    644c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    6450:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    6454:	f8c3 0440 	str.w	r0, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, true);
}
    6458:	bd10      	pop	{r4, pc}
		return -EINVAL;
    645a:	f06f 0015 	mvn.w	r0, #21
	return network_core_update(src_addr, len, true);
    645e:	e7fb      	b.n	6458 <pcd_network_core_update+0x58>
    6460:	50003000 	.word	0x50003000
    6464:	b5b4b3b6 	.word	0xb5b4b3b6
    6468:	000f4240 	.word	0x000f4240

0000646c <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    646c:	f44f 7282 	mov.w	r2, #260	; 0x104
    6470:	4b01      	ldr	r3, [pc, #4]	; (6478 <pcd_lock_ram+0xc>)
    6472:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    6476:	4770      	bx	lr
    6478:	50003000 	.word	0x50003000

0000647c <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    647c:	2801      	cmp	r0, #1
    647e:	d10f      	bne.n	64a0 <boot_read_image_header_hook+0x24>
    6480:	b979      	cbnz	r1, 64a2 <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    6482:	4b08      	ldr	r3, [pc, #32]	; (64a4 <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    6484:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    6486:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    6488:	f44f 7300 	mov.w	r3, #512	; 0x200
    648c:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    648e:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    6492:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    6496:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    649a:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    649c:	61d1      	str	r1, [r2, #28]
		return 0;
    649e:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    64a0:	2001      	movs	r0, #1
}
    64a2:	4770      	bx	lr
    64a4:	96f3b83d 	.word	0x96f3b83d

000064a8 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    64a8:	2801      	cmp	r0, #1
{
    64aa:	b508      	push	{r3, lr}
	if (img_index == 1 && slot == 0) {
    64ac:	d105      	bne.n	64ba <boot_image_check_hook+0x12>
    64ae:	b921      	cbnz	r1, 64ba <boot_image_check_hook+0x12>
		FIH_RET(FIH_SUCCESS);
    64b0:	f7fa fabc 	bl	a2c <fih_cfi_decrement>
    64b4:	4b03      	ldr	r3, [pc, #12]	; (64c4 <boot_image_check_hook+0x1c>)
    64b6:	6818      	ldr	r0, [r3, #0]
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
}
    64b8:	bd08      	pop	{r3, pc}
	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    64ba:	f7fa fab7 	bl	a2c <fih_cfi_decrement>
    64be:	2001      	movs	r0, #1
    64c0:	e7fa      	b.n	64b8 <boot_image_check_hook+0x10>
    64c2:	bf00      	nop
    64c4:	200020bc 	.word	0x200020bc

000064c8 <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    64c8:	b513      	push	{r0, r1, r4, lr}
    64ca:	4604      	mov	r4, r0
    64cc:	4810      	ldr	r0, [pc, #64]	; (6510 <network_core_update+0x48>)
    64ce:	f007 fd4e 	bl	df6e <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    64d2:	b1b0      	cbz	r0, 6502 <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    64d4:	2000      	movs	r0, #0
    64d6:	a901      	add	r1, sp, #4
    64d8:	f7ff fa4c 	bl	5974 <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    64dc:	4b0d      	ldr	r3, [pc, #52]	; (6514 <network_core_update+0x4c>)
    64de:	6802      	ldr	r2, [r0, #0]
    64e0:	429a      	cmp	r2, r3
    64e2:	d111      	bne.n	6508 <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    64e4:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    64e6:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    64e8:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    64ea:	6843      	ldr	r3, [r0, #4]
    64ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    64f0:	d90a      	bls.n	6508 <network_core_update+0x40>
			if (wait) {
    64f2:	b11c      	cbz	r4, 64fc <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    64f4:	f7ff ff84 	bl	6400 <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    64f8:	b002      	add	sp, #8
    64fa:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    64fc:	f7ff ff4e 	bl	639c <pcd_network_core_update_initiate>
    6500:	e7fa      	b.n	64f8 <network_core_update+0x30>
		return -ENODEV;
    6502:	f06f 0012 	mvn.w	r0, #18
    6506:	e7f7      	b.n	64f8 <network_core_update+0x30>
	return -ENODATA;
    6508:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    650c:	e7f4      	b.n	64f8 <network_core_update+0x30>
    650e:	bf00      	nop
    6510:	0000e790 	.word	0x0000e790
    6514:	96f3b83d 	.word	0x96f3b83d

00006518 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    6518:	b530      	push	{r4, r5, lr}
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    651a:	6881      	ldr	r1, [r0, #8]
    651c:	b085      	sub	sp, #20
    651e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    6520:	f021 0407 	bic.w	r4, r1, #7
{
    6524:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    6526:	f004 fea8 	bl	b27a <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    652a:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    652c:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    652e:	4668      	mov	r0, sp
    6530:	f005 f8bd 	bl	b6ae <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    6534:	2210      	movs	r2, #16
    6536:	4668      	mov	r0, sp
    6538:	4906      	ldr	r1, [pc, #24]	; (6554 <boot_write_magic+0x3c>)
    653a:	f005 f8ad 	bl	b698 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    653e:	2310      	movs	r3, #16
    6540:	466a      	mov	r2, sp
    6542:	4621      	mov	r1, r4
    6544:	4628      	mov	r0, r5
    6546:	f004 fe68 	bl	b21a <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    654a:	3800      	subs	r0, #0
    654c:	bf18      	it	ne
    654e:	2001      	movne	r0, #1
    6550:	b005      	add	sp, #20
    6552:	bd30      	pop	{r4, r5, pc}
    6554:	0000f08a 	.word	0x0000f08a

00006558 <boot_read_swap_state>:
{
    6558:	b530      	push	{r4, r5, lr}
    655a:	460d      	mov	r5, r1
    655c:	6881      	ldr	r1, [r0, #8]
    655e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6560:	2310      	movs	r3, #16
    6562:	aa02      	add	r2, sp, #8
    6564:	3910      	subs	r1, #16
{
    6566:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6568:	f004 fe42 	bl	b1f0 <flash_area_read>
    if (rc < 0) {
    656c:	2800      	cmp	r0, #0
    656e:	da02      	bge.n	6576 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    6570:	2001      	movs	r0, #1
}
    6572:	b007      	add	sp, #28
    6574:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    6576:	2210      	movs	r2, #16
    6578:	4620      	mov	r0, r4
    657a:	a902      	add	r1, sp, #8
    657c:	f005 fc7e 	bl	be7c <bootutil_buffer_is_erased>
    6580:	2800      	cmp	r0, #0
    6582:	d13a      	bne.n	65fa <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    6584:	2210      	movs	r2, #16
    6586:	491e      	ldr	r1, [pc, #120]	; (6600 <boot_read_swap_state+0xa8>)
    6588:	a802      	add	r0, sp, #8
    658a:	f005 f85e 	bl	b64a <memcmp>
    return BOOT_MAGIC_BAD;
    658e:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    6590:	bf0c      	ite	eq
    6592:	2301      	moveq	r3, #1
    6594:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    6596:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    6598:	4620      	mov	r0, r4
    659a:	f005 fc5b 	bl	be54 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    659e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    65a0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    65a2:	f10d 0207 	add.w	r2, sp, #7
    65a6:	4620      	mov	r0, r4
    65a8:	f004 fe22 	bl	b1f0 <flash_area_read>
    if (rc < 0) {
    65ac:	2800      	cmp	r0, #0
    65ae:	dbdf      	blt.n	6570 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    65b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    65b4:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    65b6:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    65ba:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    65bc:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    65be:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    65c0:	2201      	movs	r2, #1
    65c2:	f10d 0107 	add.w	r1, sp, #7
    65c6:	f005 fc59 	bl	be7c <bootutil_buffer_is_erased>
    65ca:	b910      	cbnz	r0, 65d2 <boot_read_swap_state+0x7a>
    65cc:	786b      	ldrb	r3, [r5, #1]
    65ce:	2b04      	cmp	r3, #4
    65d0:	d903      	bls.n	65da <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    65d2:	2301      	movs	r3, #1
    65d4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    65d6:	2300      	movs	r3, #0
    65d8:	712b      	strb	r3, [r5, #4]
}

static inline uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    65da:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    65dc:	4620      	mov	r0, r4
    65de:	3a18      	subs	r2, #24
    65e0:	f022 0207 	bic.w	r2, r2, #7
    65e4:	3a08      	subs	r2, #8
    65e6:	1ca9      	adds	r1, r5, #2
    65e8:	f005 fc5b 	bl	bea2 <boot_read_flag>
    if (rc) {
    65ec:	2800      	cmp	r0, #0
    65ee:	d1bf      	bne.n	6570 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    65f0:	4620      	mov	r0, r4
    65f2:	1ce9      	adds	r1, r5, #3
    65f4:	f005 fc71 	bl	beda <boot_read_image_ok>
    65f8:	e7bb      	b.n	6572 <boot_read_swap_state+0x1a>
    65fa:	2303      	movs	r3, #3
    65fc:	e7cb      	b.n	6596 <boot_read_swap_state+0x3e>
    65fe:	bf00      	nop
    6600:	0000f08a 	.word	0x0000f08a

00006604 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    6604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    6606:	4669      	mov	r1, sp
{
    6608:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    660a:	f005 fbf8 	bl	bdfe <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    660e:	2801      	cmp	r0, #1
    6610:	d14a      	bne.n	66a8 <boot_swap_type_multi+0xa4>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6612:	4669      	mov	r1, sp
    6614:	2c00      	cmp	r4, #0
    6616:	d041      	beq.n	669c <boot_swap_type_multi+0x98>
    6618:	2c01      	cmp	r4, #1
    661a:	d03a      	beq.n	6692 <boot_swap_type_multi+0x8e>
    661c:	20ff      	movs	r0, #255	; 0xff
    661e:	f005 fc62 	bl	bee6 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    6622:	2800      	cmp	r0, #0
    6624:	d148      	bne.n	66b8 <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6626:	20ff      	movs	r0, #255	; 0xff
    6628:	a902      	add	r1, sp, #8
    662a:	f005 fc5c 	bl	bee6 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    662e:	2801      	cmp	r0, #1
    6630:	d140      	bne.n	66b4 <boot_swap_type_multi+0xb0>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    6632:	2303      	movs	r3, #3
    6634:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    6638:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    663c:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    663e:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    6642:	f89d 6008 	ldrb.w	r6, [sp, #8]
    6646:	4a21      	ldr	r2, [pc, #132]	; (66cc <boot_swap_type_multi+0xc8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6648:	4629      	mov	r1, r5
    664a:	7810      	ldrb	r0, [r2, #0]
    664c:	f005 fc08 	bl	be60 <boot_magic_compatible_check>
    6650:	b3a0      	cbz	r0, 66bc <boot_swap_type_multi+0xb8>
            boot_magic_compatible_check(table->magic_secondary_slot,
    6652:	4631      	mov	r1, r6
    6654:	7850      	ldrb	r0, [r2, #1]
    6656:	f005 fc03 	bl	be60 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    665a:	b378      	cbz	r0, 66bc <boot_swap_type_multi+0xb8>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    665c:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    665e:	2b04      	cmp	r3, #4
    6660:	d003      	beq.n	666a <boot_swap_type_multi+0x66>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    6662:	f89d 1003 	ldrb.w	r1, [sp, #3]
    6666:	4299      	cmp	r1, r3
    6668:	d128      	bne.n	66bc <boot_swap_type_multi+0xb8>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    666a:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    666c:	2b04      	cmp	r3, #4
    666e:	d003      	beq.n	6678 <boot_swap_type_multi+0x74>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    6670:	f89d 100b 	ldrb.w	r1, [sp, #11]
    6674:	4299      	cmp	r1, r3
    6676:	d121      	bne.n	66bc <boot_swap_type_multi+0xb8>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    6678:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    667a:	2b04      	cmp	r3, #4
    667c:	d003      	beq.n	6686 <boot_swap_type_multi+0x82>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    667e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    6682:	4299      	cmp	r1, r3
    6684:	d11a      	bne.n	66bc <boot_swap_type_multi+0xb8>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    6686:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    6688:	1e83      	subs	r3, r0, #2
    668a:	2b02      	cmp	r3, #2
    668c:	d814      	bhi.n	66b8 <boot_swap_type_multi+0xb4>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    668e:	b004      	add	sp, #16
    6690:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6692:	f005 fc28 	bl	bee6 <boot_read_swap_state_by_id>
    if (rc) {
    6696:	b978      	cbnz	r0, 66b8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6698:	200b      	movs	r0, #11
    669a:	e7c5      	b.n	6628 <boot_swap_type_multi+0x24>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    669c:	2004      	movs	r0, #4
    669e:	f005 fc22 	bl	bee6 <boot_read_swap_state_by_id>
    if (rc) {
    66a2:	b948      	cbnz	r0, 66b8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    66a4:	2002      	movs	r0, #2
    66a6:	e7bf      	b.n	6628 <boot_swap_type_multi+0x24>
    if (rc) {
    66a8:	b930      	cbnz	r0, 66b8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    66aa:	2c00      	cmp	r4, #0
    66ac:	d0fa      	beq.n	66a4 <boot_swap_type_multi+0xa0>
    66ae:	2c01      	cmp	r4, #1
    66b0:	d1b9      	bne.n	6626 <boot_swap_type_multi+0x22>
    66b2:	e7f1      	b.n	6698 <boot_swap_type_multi+0x94>
    } else if (rc) {
    66b4:	2800      	cmp	r0, #0
    66b6:	d0c1      	beq.n	663c <boot_swap_type_multi+0x38>
        return BOOT_SWAP_TYPE_PANIC;
    66b8:	20ff      	movs	r0, #255	; 0xff
    66ba:	e7e8      	b.n	668e <boot_swap_type_multi+0x8a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    66bc:	3401      	adds	r4, #1
    66be:	2c03      	cmp	r4, #3
    66c0:	f102 0206 	add.w	r2, r2, #6
    66c4:	d1c0      	bne.n	6648 <boot_swap_type_multi+0x44>
    return BOOT_SWAP_TYPE_NONE;
    66c6:	2001      	movs	r0, #1
    66c8:	e7e1      	b.n	668e <boot_swap_type_multi+0x8a>
    66ca:	bf00      	nop
    66cc:	0000f497 	.word	0x0000f497

000066d0 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    66d0:	6801      	ldr	r1, [r0, #0]
    66d2:	4a0e      	ldr	r2, [pc, #56]	; (670c <verify_header+0x3c>)
{
    66d4:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    66d6:	4291      	cmp	r1, r2
    66d8:	d115      	bne.n	6706 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    66da:	69c1      	ldr	r1, [r0, #28]
    66dc:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    66e0:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    66e4:	4291      	cmp	r1, r2
    66e6:	d10e      	bne.n	6706 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    66e8:	6882      	ldr	r2, [r0, #8]
    66ea:	2a01      	cmp	r2, #1
    66ec:	d80b      	bhi.n	6706 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    66ee:	68c2      	ldr	r2, [r0, #12]
    66f0:	b112      	cbz	r2, 66f8 <verify_header+0x28>
    66f2:	6901      	ldr	r1, [r0, #16]
    66f4:	428a      	cmp	r2, r1
    66f6:	d006      	beq.n	6706 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    66f8:	6958      	ldr	r0, [r3, #20]
    66fa:	b128      	cbz	r0, 6708 <verify_header+0x38>
    66fc:	699b      	ldr	r3, [r3, #24]
    66fe:	1a1b      	subs	r3, r3, r0
    6700:	4258      	negs	r0, r3
    6702:	4158      	adcs	r0, r3
    6704:	4770      	bx	lr
        return( 1 );
    6706:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    6708:	4770      	bx	lr
    670a:	bf00      	nop
    670c:	ff00aa55 	.word	0xff00aa55

00006710 <verify_chain>:

static int verify_chain( void )
{
    6710:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    6712:	4b0d      	ldr	r3, [pc, #52]	; (6748 <verify_chain+0x38>)
    6714:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    6716:	b1a6      	cbz	r6, 6742 <verify_chain+0x32>
    6718:	4630      	mov	r0, r6
    671a:	f7ff ffd9 	bl	66d0 <verify_header>
    671e:	4604      	mov	r4, r0
    6720:	b978      	cbnz	r0, 6742 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    6722:	68f3      	ldr	r3, [r6, #12]
    6724:	b96b      	cbnz	r3, 6742 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    6726:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    6728:	b90d      	cbnz	r5, 672e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    672a:	4620      	mov	r0, r4
    672c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    672e:	4628      	mov	r0, r5
    6730:	f7ff ffce 	bl	66d0 <verify_header>
    6734:	b928      	cbnz	r0, 6742 <verify_chain+0x32>
        if( cur->prev != prv )
    6736:	68eb      	ldr	r3, [r5, #12]
    6738:	42b3      	cmp	r3, r6
    673a:	d102      	bne.n	6742 <verify_chain+0x32>
        cur = cur->next;
    673c:	462e      	mov	r6, r5
    673e:	692d      	ldr	r5, [r5, #16]
    6740:	e7f2      	b.n	6728 <verify_chain+0x18>
        return( 1 );
    6742:	2401      	movs	r4, #1
    6744:	e7f1      	b.n	672a <verify_chain+0x1a>
    6746:	bf00      	nop
    6748:	2001418c 	.word	0x2001418c

0000674c <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    6750:	4f3f      	ldr	r7, [pc, #252]	; (6850 <buffer_alloc_calloc+0x104>)
    6752:	683c      	ldr	r4, [r7, #0]
    6754:	b1d4      	cbz	r4, 678c <buffer_alloc_calloc+0x40>
    6756:	68bc      	ldr	r4, [r7, #8]
    6758:	b1c4      	cbz	r4, 678c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    675a:	2800      	cmp	r0, #0
    675c:	d04a      	beq.n	67f4 <buffer_alloc_calloc+0xa8>
    675e:	2900      	cmp	r1, #0
    6760:	d048      	beq.n	67f4 <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    6762:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    6766:	fbb5 f0f0 	udiv	r0, r5, r0
    676a:	4288      	cmp	r0, r1
    676c:	d142      	bne.n	67f4 <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    676e:	1d28      	adds	r0, r5, #4
    6770:	d840      	bhi.n	67f4 <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    6772:	07a9      	lsls	r1, r5, #30
    6774:	d00d      	beq.n	6792 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    6776:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    677a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    677c:	68fc      	ldr	r4, [r7, #12]
    677e:	e003      	b.n	6788 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    6780:	6863      	ldr	r3, [r4, #4]
    6782:	42b3      	cmp	r3, r6
    6784:	d238      	bcs.n	67f8 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    6786:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    6788:	2c00      	cmp	r4, #0
    678a:	d1f9      	bne.n	6780 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    678c:	4620      	mov	r0, r4
    678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6792:	462e      	mov	r6, r5
    6794:	e7f2      	b.n	677c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    6796:	60fb      	str	r3, [r7, #12]
    6798:	e041      	b.n	681e <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    679a:	f106 0120 	add.w	r1, r6, #32
    679e:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    67a0:	3a20      	subs	r2, #32
    67a2:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    67a4:	2200      	movs	r2, #0
    new->prev = cur;
    67a6:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    67aa:	482a      	ldr	r0, [pc, #168]	; (6854 <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    67ac:	6922      	ldr	r2, [r4, #16]
    67ae:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    67b0:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    67b2:	4929      	ldr	r1, [pc, #164]	; (6858 <buffer_alloc_calloc+0x10c>)
    67b4:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    67b6:	b102      	cbz	r2, 67ba <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    67b8:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    67ba:	6962      	ldr	r2, [r4, #20]
    67bc:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    67be:	69a1      	ldr	r1, [r4, #24]
    67c0:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    67c2:	b1aa      	cbz	r2, 67f0 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    67c4:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    67c6:	699a      	ldr	r2, [r3, #24]
    67c8:	b102      	cbz	r2, 67cc <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    67ca:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    67cc:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    67d0:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    67d2:	2300      	movs	r3, #0
    cur->size = len;
    67d4:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    67d8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    67dc:	693b      	ldr	r3, [r7, #16]
    67de:	07db      	lsls	r3, r3, #31
    67e0:	d52e      	bpl.n	6840 <buffer_alloc_calloc+0xf4>
    67e2:	f7ff ff95 	bl	6710 <verify_chain>
    67e6:	b358      	cbz	r0, 6840 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    67e8:	4b1c      	ldr	r3, [pc, #112]	; (685c <buffer_alloc_calloc+0x110>)
    67ea:	4648      	mov	r0, r9
    67ec:	681b      	ldr	r3, [r3, #0]
    67ee:	e026      	b.n	683e <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    67f0:	60fb      	str	r3, [r7, #12]
    67f2:	e7e8      	b.n	67c6 <buffer_alloc_calloc+0x7a>
        return( NULL );
    67f4:	2400      	movs	r4, #0
    67f6:	e7c9      	b.n	678c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    67f8:	68a3      	ldr	r3, [r4, #8]
    67fa:	b11b      	cbz	r3, 6804 <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    67fc:	4b17      	ldr	r3, [pc, #92]	; (685c <buffer_alloc_calloc+0x110>)
    67fe:	2001      	movs	r0, #1
    6800:	681b      	ldr	r3, [r3, #0]
    6802:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    6804:	6862      	ldr	r2, [r4, #4]
    6806:	f104 0820 	add.w	r8, r4, #32
    680a:	1b92      	subs	r2, r2, r6
    680c:	2a23      	cmp	r2, #35	; 0x23
    680e:	d8c4      	bhi.n	679a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    6810:	2301      	movs	r3, #1
    6812:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    6814:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    6818:	2a00      	cmp	r2, #0
    681a:	d0bc      	beq.n	6796 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    681c:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    681e:	69a3      	ldr	r3, [r4, #24]
    6820:	b10b      	cbz	r3, 6826 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    6822:	6962      	ldr	r2, [r4, #20]
    6824:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    6826:	2300      	movs	r3, #0
        cur->next_free = NULL;
    6828:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    682c:	693b      	ldr	r3, [r7, #16]
    682e:	07da      	lsls	r2, r3, #31
    6830:	d506      	bpl.n	6840 <buffer_alloc_calloc+0xf4>
    6832:	f7ff ff6d 	bl	6710 <verify_chain>
    6836:	b118      	cbz	r0, 6840 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    6838:	2001      	movs	r0, #1
    683a:	4b08      	ldr	r3, [pc, #32]	; (685c <buffer_alloc_calloc+0x110>)
    683c:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    683e:	4798      	blx	r3
    memset( ret, 0, original_len );
    6840:	462a      	mov	r2, r5
    6842:	2100      	movs	r1, #0
    6844:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    6846:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    6848:	f004 ff31 	bl	b6ae <memset>
    return( ret );
    684c:	e79e      	b.n	678c <buffer_alloc_calloc+0x40>
    684e:	bf00      	nop
    6850:	2001418c 	.word	0x2001418c
    6854:	ff00aa55 	.word	0xff00aa55
    6858:	ee119966 	.word	0xee119966
    685c:	20002180 	.word	0x20002180

00006860 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    6860:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    6862:	4605      	mov	r5, r0
    6864:	2800      	cmp	r0, #0
    6866:	f000 8088 	beq.w	697a <buffer_alloc_free+0x11a>
    686a:	4e44      	ldr	r6, [pc, #272]	; (697c <buffer_alloc_free+0x11c>)
    686c:	6833      	ldr	r3, [r6, #0]
    686e:	2b00      	cmp	r3, #0
    6870:	f000 8083 	beq.w	697a <buffer_alloc_free+0x11a>
    6874:	68b2      	ldr	r2, [r6, #8]
    6876:	2a00      	cmp	r2, #0
    6878:	d07f      	beq.n	697a <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    687a:	4283      	cmp	r3, r0
    687c:	d803      	bhi.n	6886 <buffer_alloc_free+0x26>
    687e:	6872      	ldr	r2, [r6, #4]
    6880:	4413      	add	r3, r2
    6882:	4298      	cmp	r0, r3
    6884:	d303      	bcc.n	688e <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    6886:	4b3e      	ldr	r3, [pc, #248]	; (6980 <buffer_alloc_free+0x120>)
    6888:	2001      	movs	r0, #1
    688a:	681b      	ldr	r3, [r3, #0]
    688c:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    688e:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    6892:	4620      	mov	r0, r4
    6894:	f7ff ff1c 	bl	66d0 <verify_header>
    6898:	b118      	cbz	r0, 68a2 <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    689a:	4b39      	ldr	r3, [pc, #228]	; (6980 <buffer_alloc_free+0x120>)
    689c:	2001      	movs	r0, #1
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	4798      	blx	r3

    if( hdr->alloc != 1 )
    68a2:	f855 3c18 	ldr.w	r3, [r5, #-24]
    68a6:	2b01      	cmp	r3, #1
    68a8:	d003      	beq.n	68b2 <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    68aa:	4b35      	ldr	r3, [pc, #212]	; (6980 <buffer_alloc_free+0x120>)
    68ac:	2001      	movs	r0, #1
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	4798      	blx	r3
    }

    hdr->alloc = 0;
    68b2:	2300      	movs	r3, #0
    68b4:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    68b8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    68bc:	b33b      	cbz	r3, 690e <buffer_alloc_free+0xae>
    68be:	689a      	ldr	r2, [r3, #8]
    68c0:	bb2a      	cbnz	r2, 690e <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    68c2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    68c6:	f102 0120 	add.w	r1, r2, #32
    68ca:	685a      	ldr	r2, [r3, #4]
    68cc:	440a      	add	r2, r1
    68ce:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    68d0:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    68d4:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    68d6:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    68da:	692b      	ldr	r3, [r5, #16]
    68dc:	b103      	cbz	r3, 68e0 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    68de:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    68e0:	2220      	movs	r2, #32
    68e2:	2100      	movs	r1, #0
    68e4:	4620      	mov	r0, r4
    68e6:	f004 fee2 	bl	b6ae <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    68ea:	6928      	ldr	r0, [r5, #16]
    68ec:	b110      	cbz	r0, 68f4 <buffer_alloc_free+0x94>
    68ee:	6883      	ldr	r3, [r0, #8]
    68f0:	2b00      	cmp	r3, #0
    68f2:	d02e      	beq.n	6952 <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    68f4:	6933      	ldr	r3, [r6, #16]
    68f6:	079b      	lsls	r3, r3, #30
    68f8:	d53f      	bpl.n	697a <buffer_alloc_free+0x11a>
    68fa:	f7ff ff09 	bl	6710 <verify_chain>
    68fe:	2800      	cmp	r0, #0
    6900:	d03b      	beq.n	697a <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    6902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    6906:	4b1e      	ldr	r3, [pc, #120]	; (6980 <buffer_alloc_free+0x120>)
    6908:	2001      	movs	r0, #1
    690a:	681b      	ldr	r3, [r3, #0]
    690c:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    690e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6912:	2800      	cmp	r0, #0
    6914:	d02a      	beq.n	696c <buffer_alloc_free+0x10c>
    6916:	6883      	ldr	r3, [r0, #8]
    6918:	bb43      	cbnz	r3, 696c <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    691a:	6842      	ldr	r2, [r0, #4]
    691c:	6863      	ldr	r3, [r4, #4]
    691e:	4413      	add	r3, r2
    6920:	3320      	adds	r3, #32
    6922:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    6924:	6903      	ldr	r3, [r0, #16]
    6926:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    6928:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    692c:	b99a      	cbnz	r2, 6956 <buffer_alloc_free+0xf6>
    692e:	b9cb      	cbnz	r3, 6964 <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    6930:	6943      	ldr	r3, [r0, #20]
    6932:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    6934:	6982      	ldr	r2, [r0, #24]
    6936:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    6938:	b1b3      	cbz	r3, 6968 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    693a:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    693c:	69a3      	ldr	r3, [r4, #24]
    693e:	b103      	cbz	r3, 6942 <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    6940:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    6942:	6923      	ldr	r3, [r4, #16]
    6944:	b103      	cbz	r3, 6948 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    6946:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    6948:	2220      	movs	r2, #32
    694a:	2100      	movs	r1, #0
    694c:	f004 feaf 	bl	b6ae <memset>
    if( old == NULL )
    6950:	e7d0      	b.n	68f4 <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6952:	462c      	mov	r4, r5
    6954:	e7e1      	b.n	691a <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    6956:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    6958:	69a3      	ldr	r3, [r4, #24]
    695a:	2b00      	cmp	r3, #0
    695c:	d0e8      	beq.n	6930 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    695e:	6962      	ldr	r2, [r4, #20]
    6960:	615a      	str	r2, [r3, #20]
    6962:	e7e5      	b.n	6930 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    6964:	60f3      	str	r3, [r6, #12]
    6966:	e7f7      	b.n	6958 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    6968:	60f4      	str	r4, [r6, #12]
    696a:	e7e7      	b.n	693c <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    696c:	68f3      	ldr	r3, [r6, #12]
    696e:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    6972:	b103      	cbz	r3, 6976 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    6974:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    6976:	60f4      	str	r4, [r6, #12]
    6978:	e7bc      	b.n	68f4 <buffer_alloc_free+0x94>
}
    697a:	bd70      	pop	{r4, r5, r6, pc}
    697c:	2001418c 	.word	0x2001418c
    6980:	20002180 	.word	0x20002180

00006984 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    6984:	b538      	push	{r3, r4, r5, lr}
    6986:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    6988:	2214      	movs	r2, #20
    698a:	2100      	movs	r1, #0
{
    698c:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    698e:	4813      	ldr	r0, [pc, #76]	; (69dc <mbedtls_memory_buffer_alloc_init+0x58>)
    6990:	f004 fe8d 	bl	b6ae <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    6994:	4912      	ldr	r1, [pc, #72]	; (69e0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    6996:	4813      	ldr	r0, [pc, #76]	; (69e4 <mbedtls_memory_buffer_alloc_init+0x60>)
    6998:	f000 f834 	bl	6a04 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    699c:	2c23      	cmp	r4, #35	; 0x23
    699e:	d91c      	bls.n	69da <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    69a0:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    69a4:	bf1f      	itttt	ne
    69a6:	3c04      	subne	r4, #4
    69a8:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    69aa:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    69ae:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    69b0:	4622      	mov	r2, r4
    69b2:	2100      	movs	r1, #0
    69b4:	4628      	mov	r0, r5
    69b6:	f004 fe7a 	bl	b6ae <memset>

    heap.buf = buf;
    69ba:	4b08      	ldr	r3, [pc, #32]	; (69dc <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    69bc:	490a      	ldr	r1, [pc, #40]	; (69e8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    69be:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    69c2:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    69c4:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    69c6:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    69c8:	689a      	ldr	r2, [r3, #8]
    69ca:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    69cc:	689a      	ldr	r2, [r3, #8]
    69ce:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    69d2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    69d6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    69d8:	60da      	str	r2, [r3, #12]
}
    69da:	bd38      	pop	{r3, r4, r5, pc}
    69dc:	2001418c 	.word	0x2001418c
    69e0:	00006861 	.word	0x00006861
    69e4:	0000674d 	.word	0x0000674d
    69e8:	ff00aa55 	.word	0xff00aa55

000069ec <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    69ec:	4b01      	ldr	r3, [pc, #4]	; (69f4 <mbedtls_calloc+0x8>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	4718      	bx	r3
    69f2:	bf00      	nop
    69f4:	20002188 	.word	0x20002188

000069f8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    69f8:	4b01      	ldr	r3, [pc, #4]	; (6a00 <mbedtls_free+0x8>)
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	4718      	bx	r3
    69fe:	bf00      	nop
    6a00:	20002184 	.word	0x20002184

00006a04 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    6a04:	4b02      	ldr	r3, [pc, #8]	; (6a10 <mbedtls_platform_set_calloc_free+0xc>)
    6a06:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    6a08:	4b02      	ldr	r3, [pc, #8]	; (6a14 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    6a0a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    6a0c:	6019      	str	r1, [r3, #0]
}
    6a0e:	4770      	bx	lr
    6a10:	20002188 	.word	0x20002188
    6a14:	20002184 	.word	0x20002184

00006a18 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6a1a:	f100 0608 	add.w	r6, r0, #8
    6a1e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6a20:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6a22:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6a24:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6a26:	f005 fbcb 	bl	c1c0 <mbedtls_mpi_size>
    6a2a:	4287      	cmp	r7, r0
    6a2c:	d14b      	bne.n	6ac6 <rsa_check_context.constprop.0+0xae>
    6a2e:	6863      	ldr	r3, [r4, #4]
    6a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6a34:	d847      	bhi.n	6ac6 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6a36:	2100      	movs	r1, #0
    6a38:	4630      	mov	r0, r6
    6a3a:	f005 fcb9 	bl	c3b0 <mbedtls_mpi_cmp_int>
    6a3e:	2800      	cmp	r0, #0
    6a40:	dd41      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    6a42:	2100      	movs	r1, #0
    6a44:	4630      	mov	r0, r6
    6a46:	f005 fba7 	bl	c198 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6a4a:	b3e0      	cbz	r0, 6ac6 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    6a4c:	b945      	cbnz	r5, 6a60 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6a4e:	4629      	mov	r1, r5
    6a50:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6a54:	f005 fcac 	bl	c3b0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6a58:	2800      	cmp	r0, #0
    6a5a:	dd34      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    6a5c:	2000      	movs	r0, #0
}
    6a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6a60:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6a64:	2100      	movs	r1, #0
    6a66:	4628      	mov	r0, r5
    6a68:	f005 fca2 	bl	c3b0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6a6c:	2800      	cmp	r0, #0
    6a6e:	dd2a      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6a70:	2100      	movs	r1, #0
    6a72:	4628      	mov	r0, r5
    6a74:	f005 fb90 	bl	c198 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6a78:	b328      	cbz	r0, 6ac6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6a7a:	f104 0538 	add.w	r5, r4, #56	; 0x38
    6a7e:	2100      	movs	r1, #0
    6a80:	4628      	mov	r0, r5
    6a82:	f005 fc95 	bl	c3b0 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    6a86:	2800      	cmp	r0, #0
    6a88:	dd1d      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    6a8a:	2100      	movs	r1, #0
    6a8c:	4628      	mov	r0, r5
    6a8e:	f005 fb83 	bl	c198 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    6a92:	b1c0      	cbz	r0, 6ac6 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    6a94:	2100      	movs	r1, #0
    6a96:	f104 0014 	add.w	r0, r4, #20
    6a9a:	f005 fc89 	bl	c3b0 <mbedtls_mpi_cmp_int>
    6a9e:	2800      	cmp	r0, #0
    6aa0:	dd11      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6aa2:	2100      	movs	r1, #0
    6aa4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6aa8:	f005 fc82 	bl	c3b0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    6aac:	2800      	cmp	r0, #0
    6aae:	dd0a      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    6ab0:	2100      	movs	r1, #0
    6ab2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6ab6:	f005 fc7b 	bl	c3b0 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    6aba:	2800      	cmp	r0, #0
    6abc:	dd03      	ble.n	6ac6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    6abe:	2100      	movs	r1, #0
    6ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6ac4:	e7c6      	b.n	6a54 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6ac6:	4801      	ldr	r0, [pc, #4]	; (6acc <rsa_check_context.constprop.0+0xb4>)
    6ac8:	e7c9      	b.n	6a5e <rsa_check_context.constprop.0+0x46>
    6aca:	bf00      	nop
    6acc:	ffffbf80 	.word	0xffffbf80

00006ad0 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    6ad0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6ad2:	2100      	movs	r1, #0
{
    6ad4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6ad6:	f7ff ff9f 	bl	6a18 <rsa_check_context.constprop.0>
    6ada:	4605      	mov	r5, r0
    6adc:	b110      	cbz	r0, 6ae4 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    6ade:	4d0e      	ldr	r5, [pc, #56]	; (6b18 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    6ae0:	4628      	mov	r0, r5
    6ae2:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    6ae4:	f104 0608 	add.w	r6, r4, #8
    6ae8:	4630      	mov	r0, r6
    6aea:	f005 fb65 	bl	c1b8 <mbedtls_mpi_bitlen>
    6aee:	287f      	cmp	r0, #127	; 0x7f
    6af0:	d9f5      	bls.n	6ade <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6af2:	3414      	adds	r4, #20
    6af4:	4629      	mov	r1, r5
    6af6:	4620      	mov	r0, r4
    6af8:	f005 fb4e 	bl	c198 <mbedtls_mpi_get_bit>
    6afc:	2800      	cmp	r0, #0
    6afe:	d0ee      	beq.n	6ade <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6b00:	4620      	mov	r0, r4
    6b02:	f005 fb59 	bl	c1b8 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    6b06:	2801      	cmp	r0, #1
    6b08:	d9e9      	bls.n	6ade <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    6b0a:	4631      	mov	r1, r6
    6b0c:	4620      	mov	r0, r4
    6b0e:	f005 fc0e 	bl	c32e <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6b12:	2800      	cmp	r0, #0
    6b14:	dbe4      	blt.n	6ae0 <mbedtls_rsa_check_pubkey+0x10>
    6b16:	e7e2      	b.n	6ade <mbedtls_rsa_check_pubkey+0xe>
    6b18:	ffffbe00 	.word	0xffffbe00

00006b1c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    6b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b1e:	460c      	mov	r4, r1
    6b20:	b087      	sub	sp, #28
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6b22:	2100      	movs	r1, #0
{
    6b24:	4605      	mov	r5, r0
    6b26:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6b28:	f7ff ff76 	bl	6a18 <rsa_check_context.constprop.0>
    6b2c:	2800      	cmp	r0, #0
    6b2e:	d139      	bne.n	6ba4 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    6b30:	a803      	add	r0, sp, #12
    6b32:	f005 fa89 	bl	c048 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    6b36:	4621      	mov	r1, r4
    6b38:	686a      	ldr	r2, [r5, #4]
    6b3a:	a803      	add	r0, sp, #12
    6b3c:	f005 fb46 	bl	c1cc <mbedtls_mpi_read_binary>
    6b40:	4604      	mov	r4, r0
    6b42:	b118      	cbz	r0, 6b4c <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    6b44:	a803      	add	r0, sp, #12
    6b46:	f005 fa85 	bl	c054 <mbedtls_mpi_free>

    if( ret != 0 )
    6b4a:	e00c      	b.n	6b66 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    6b4c:	f105 0408 	add.w	r4, r5, #8
    6b50:	4621      	mov	r1, r4
    6b52:	a803      	add	r0, sp, #12
    6b54:	f005 fbeb 	bl	c32e <mbedtls_mpi_cmp_mpi>
    6b58:	2800      	cmp	r0, #0
    6b5a:	db07      	blt.n	6b6c <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    6b5c:	a803      	add	r0, sp, #12
    6b5e:	f005 fa79 	bl	c054 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    6b62:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    6b66:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    6b6a:	e018      	b.n	6b9e <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6b6c:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6b70:	a903      	add	r1, sp, #12
    olen = ctx->len;
    6b72:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6b74:	4608      	mov	r0, r1
    6b76:	9300      	str	r3, [sp, #0]
    6b78:	f105 0214 	add.w	r2, r5, #20
    6b7c:	4623      	mov	r3, r4
    6b7e:	f005 fef1 	bl	c964 <mbedtls_mpi_exp_mod>
    6b82:	4604      	mov	r4, r0
    6b84:	2800      	cmp	r0, #0
    6b86:	d1dd      	bne.n	6b44 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    6b88:	463a      	mov	r2, r7
    6b8a:	4631      	mov	r1, r6
    6b8c:	a803      	add	r0, sp, #12
    6b8e:	f005 fb33 	bl	c1f8 <mbedtls_mpi_write_binary>
    6b92:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    6b94:	a803      	add	r0, sp, #12
    6b96:	f005 fa5d 	bl	c054 <mbedtls_mpi_free>
    if( ret != 0 )
    6b9a:	2c00      	cmp	r4, #0
    6b9c:	d1e3      	bne.n	6b66 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    6b9e:	4620      	mov	r0, r4
    6ba0:	b007      	add	sp, #28
    6ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    6ba4:	4c00      	ldr	r4, [pc, #0]	; (6ba8 <mbedtls_rsa_public+0x8c>)
    6ba6:	e7fa      	b.n	6b9e <mbedtls_rsa_public+0x82>
    6ba8:	ffffbf80 	.word	0xffffbf80

00006bac <mbedtls_sha256_starts>:
 * SHA-256 context setup
 */
int mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
#if defined(MBEDTLS_SHA224_C)
    if( is224 != 0 && is224 != 1 )
    6bac:	2901      	cmp	r1, #1
{
    6bae:	4603      	mov	r3, r0
    6bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 != 0 && is224 != 1 )
    6bb4:	d843      	bhi.n	6c3e <mbedtls_sha256_starts+0x92>
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    6bb6:	4a23      	ldr	r2, [pc, #140]	; (6c44 <mbedtls_sha256_starts+0x98>)
    6bb8:	2900      	cmp	r1, #0
    6bba:	bf18      	it	ne
    6bbc:	4690      	movne	r8, r2
    6bbe:	4a22      	ldr	r2, [pc, #136]	; (6c48 <mbedtls_sha256_starts+0x9c>)
    6bc0:	4f22      	ldr	r7, [pc, #136]	; (6c4c <mbedtls_sha256_starts+0xa0>)
    6bc2:	bf18      	it	ne
    6bc4:	4696      	movne	lr, r2
    6bc6:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    6bca:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    6bce:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    6bd2:	bf18      	it	ne
    6bd4:	4694      	movne	ip, r2
    6bd6:	4a1e      	ldr	r2, [pc, #120]	; (6c50 <mbedtls_sha256_starts+0xa4>)
    6bd8:	481e      	ldr	r0, [pc, #120]	; (6c54 <mbedtls_sha256_starts+0xa8>)
    6bda:	bf18      	it	ne
    6bdc:	4617      	movne	r7, r2
    6bde:	4a1e      	ldr	r2, [pc, #120]	; (6c58 <mbedtls_sha256_starts+0xac>)
    6be0:	4e1e      	ldr	r6, [pc, #120]	; (6c5c <mbedtls_sha256_starts+0xb0>)
    6be2:	bf18      	it	ne
    6be4:	4616      	movne	r6, r2
    6be6:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    6bea:	bf08      	it	eq
    6bec:	4680      	moveq	r8, r0
    6bee:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    6bf2:	481b      	ldr	r0, [pc, #108]	; (6c60 <mbedtls_sha256_starts+0xb4>)
    6bf4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    6bf8:	bf08      	it	eq
    6bfa:	4686      	moveq	lr, r0
    6bfc:	4d19      	ldr	r5, [pc, #100]	; (6c64 <mbedtls_sha256_starts+0xb8>)
    6bfe:	481a      	ldr	r0, [pc, #104]	; (6c68 <mbedtls_sha256_starts+0xbc>)
    6c00:	bf18      	it	ne
    6c02:	4615      	movne	r5, r2
    6c04:	4a19      	ldr	r2, [pc, #100]	; (6c6c <mbedtls_sha256_starts+0xc0>)
    6c06:	bf08      	it	eq
    6c08:	4684      	moveq	ip, r0
    6c0a:	4c19      	ldr	r4, [pc, #100]	; (6c70 <mbedtls_sha256_starts+0xc4>)
    6c0c:	4819      	ldr	r0, [pc, #100]	; (6c74 <mbedtls_sha256_starts+0xc8>)
    6c0e:	bf18      	it	ne
    6c10:	4614      	movne	r4, r2
    6c12:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    6c16:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    6c1a:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    6c1e:	bf18      	it	ne
    6c20:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    6c22:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    6c24:	e9c3 8e02 	strd	r8, lr, [r3, #8]
    ctx->total[1] = 0;
    6c28:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    6c2c:	e9c3 c704 	strd	ip, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    6c30:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    6c34:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    6c38:	6699      	str	r1, [r3, #104]	; 0x68

    return( 0 );
}
    6c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    6c3e:	f06f 0073 	mvn.w	r0, #115	; 0x73
    6c42:	e7fa      	b.n	6c3a <mbedtls_sha256_starts+0x8e>
    6c44:	c1059ed8 	.word	0xc1059ed8
    6c48:	367cd507 	.word	0x367cd507
    6c4c:	a54ff53a 	.word	0xa54ff53a
    6c50:	f70e5939 	.word	0xf70e5939
    6c54:	6a09e667 	.word	0x6a09e667
    6c58:	ffc00b31 	.word	0xffc00b31
    6c5c:	510e527f 	.word	0x510e527f
    6c60:	bb67ae85 	.word	0xbb67ae85
    6c64:	9b05688c 	.word	0x9b05688c
    6c68:	3c6ef372 	.word	0x3c6ef372
    6c6c:	64f98fa7 	.word	0x64f98fa7
    6c70:	1f83d9ab 	.word	0x1f83d9ab
    6c74:	befa4fa4 	.word	0xbefa4fa4

00006c78 <mbedtls_internal_sha256_process>:
 */
static
#endif
int mbedtls_internal_sha256_process_c( mbedtls_sha256_context *ctx,
                                const unsigned char data[SHA256_BLOCK_SIZE] )
{
    6c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c7c:	b0d1      	sub	sp, #324	; 0x144
    6c7e:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    6c82:	465a      	mov	r2, fp
    6c84:	1d03      	adds	r3, r0, #4
    6c86:	9301      	str	r3, [sp, #4]
    6c88:	f100 0324 	add.w	r3, r0, #36	; 0x24
    6c8c:	9303      	str	r3, [sp, #12]
    6c8e:	9b01      	ldr	r3, [sp, #4]
    } local;

    unsigned int i;

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    6c90:	f853 0f04 	ldr.w	r0, [r3, #4]!
    6c94:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    6c98:	9803      	ldr	r0, [sp, #12]
    6c9a:	4298      	cmp	r0, r3
    6c9c:	d1f8      	bne.n	6c90 <mbedtls_internal_sha256_process+0x18>
    6c9e:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    6ca2:	f04f 0900 	mov.w	r9, #0
    6ca6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    6ca8:	ad4c      	add	r5, sp, #304	; 0x130
    6caa:	9302      	str	r3, [sp, #8]
    6cac:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    6cb0:	9304      	str	r3, [sp, #16]
    6cb2:	4b42      	ldr	r3, [pc, #264]	; (6dbc <mbedtls_internal_sha256_process+0x144>)
    6cb4:	aa06      	add	r2, sp, #24
    6cb6:	9305      	str	r3, [sp, #20]
    6cb8:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    6cbc:	f1b9 0f0f 	cmp.w	r9, #15
    6cc0:	d863      	bhi.n	6d8a <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    6cc2:	784c      	ldrb	r4, [r1, #1]
    6cc4:	780b      	ldrb	r3, [r1, #0]
    6cc6:	0424      	lsls	r4, r4, #16
    6cc8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    6ccc:	78cb      	ldrb	r3, [r1, #3]
    6cce:	4323      	orrs	r3, r4
    6cd0:	788c      	ldrb	r4, [r1, #2]
    6cd2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6cd6:	ea4f 2af5 	mov.w	sl, r5, ror #11
    6cda:	ea8c 0408 	eor.w	r4, ip, r8
    6cde:	9e05      	ldr	r6, [sp, #20]
    6ce0:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    6ce4:	402c      	ands	r4, r5
    6ce6:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    6cea:	ea84 040c 	eor.w	r4, r4, ip
    6cee:	4454      	add	r4, sl
    6cf0:	f856 ab04 	ldr.w	sl, [r6], #4
    6cf4:	6093      	str	r3, [r2, #8]
    6cf6:	4454      	add	r4, sl
    6cf8:	4423      	add	r3, r4
    6cfa:	9c02      	ldr	r4, [sp, #8]
    6cfc:	ea4f 3a70 	mov.w	sl, r0, ror #13
    6d00:	4423      	add	r3, r4
    6d02:	ea40 0407 	orr.w	r4, r0, r7
    6d06:	9605      	str	r6, [sp, #20]
    6d08:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    6d0c:	ea04 040e 	and.w	r4, r4, lr
    6d10:	ea00 0607 	and.w	r6, r0, r7
    6d14:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    6d18:	4334      	orrs	r4, r6
    6d1a:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    6d1c:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6d20:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    6d24:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6d28:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    6d2a:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6d2e:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    6d30:	f101 0104 	add.w	r1, r1, #4
    6d34:	f8cd c008 	str.w	ip, [sp, #8]
    6d38:	f8cd e010 	str.w	lr, [sp, #16]
    6d3c:	d11e      	bne.n	6d7c <mbedtls_internal_sha256_process+0x104>
    6d3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    6d42:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    6d46:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    6d4a:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    6d4e:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    6d52:	9a01      	ldr	r2, [sp, #4]
    6d54:	f852 3f04 	ldr.w	r3, [r2, #4]!
    6d58:	9201      	str	r2, [sp, #4]
    6d5a:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    6d5e:	4413      	add	r3, r2
    6d60:	9a01      	ldr	r2, [sp, #4]
    6d62:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    6d64:	9b03      	ldr	r3, [sp, #12]
    6d66:	4293      	cmp	r3, r2
    6d68:	d1f3      	bne.n	6d52 <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    6d6a:	a806      	add	r0, sp, #24
    6d6c:	f44f 7194 	mov.w	r1, #296	; 0x128
    6d70:	f003 faf8 	bl	a364 <mbedtls_platform_zeroize>

    return( 0 );
}
    6d74:	2000      	movs	r0, #0
    6d76:	b051      	add	sp, #324	; 0x144
    6d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d7c:	46be      	mov	lr, r7
    6d7e:	46c4      	mov	ip, r8
    6d80:	4607      	mov	r7, r0
    6d82:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6d84:	4618      	mov	r0, r3
    6d86:	4655      	mov	r5, sl
    6d88:	e798      	b.n	6cbc <mbedtls_internal_sha256_process+0x44>
            R( i );
    6d8a:	6813      	ldr	r3, [r2, #0]
    6d8c:	f852 4c38 	ldr.w	r4, [r2, #-56]
    6d90:	ea4f 4af3 	mov.w	sl, r3, ror #19
    6d94:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    6d98:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    6d9c:	f852 3c14 	ldr.w	r3, [r2, #-20]
    6da0:	f852 6c34 	ldr.w	r6, [r2, #-52]
    6da4:	4423      	add	r3, r4
    6da6:	f852 4c34 	ldr.w	r4, [r2, #-52]
    6daa:	4453      	add	r3, sl
    6dac:	ea4f 44b4 	mov.w	r4, r4, ror #18
    6db0:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    6db4:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    6db8:	4423      	add	r3, r4
    6dba:	e78c      	b.n	6cd6 <mbedtls_internal_sha256_process+0x5e>
    6dbc:	0000ee68 	.word	0x0000ee68

00006dc0 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6dc0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6dc4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6dc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6dcc:	2a07      	cmp	r2, #7
    6dce:	d105      	bne.n	6ddc <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    6dd0:	3b02      	subs	r3, #2
    6dd2:	2b03      	cmp	r3, #3
    6dd4:	d802      	bhi.n	6ddc <nrf53_errata_42+0x1c>
    6dd6:	4a02      	ldr	r2, [pc, #8]	; (6de0 <nrf53_errata_42+0x20>)
    6dd8:	5cd0      	ldrb	r0, [r2, r3]
    6dda:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    6ddc:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    6dde:	4770      	bx	lr
    6de0:	0000f4b1 	.word	0x0000f4b1

00006de4 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    6de4:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    6de6:	f7ff ffeb 	bl	6dc0 <nrf53_errata_42>
    6dea:	b158      	cbz	r0, 6e04 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    6dec:	4b64      	ldr	r3, [pc, #400]	; (6f80 <SystemInit+0x19c>)
    6dee:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    6df2:	b93a      	cbnz	r2, 6e04 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    6df4:	210d      	movs	r1, #13
    6df6:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    6dfa:	2101      	movs	r1, #1
    6dfc:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    6e00:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    6e04:	2200      	movs	r2, #0
    6e06:	00d3      	lsls	r3, r2, #3
    6e08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6e0c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    6e10:	3101      	adds	r1, #1
    6e12:	d007      	beq.n	6e24 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6e14:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6e18:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6e1a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6e1e:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6e20:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    6e22:	d1f0      	bne.n	6e06 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    6e24:	f7ff ffcc 	bl	6dc0 <nrf53_errata_42>
    6e28:	2800      	cmp	r0, #0
    6e2a:	f040 80a0 	bne.w	6f6e <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    6e2e:	f7ff ffc7 	bl	6dc0 <nrf53_errata_42>
    6e32:	b140      	cbz	r0, 6e46 <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    6e34:	4b53      	ldr	r3, [pc, #332]	; (6f84 <SystemInit+0x1a0>)
    6e36:	4a54      	ldr	r2, [pc, #336]	; (6f88 <SystemInit+0x1a4>)
    6e38:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    6e3c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e40:	2201      	movs	r2, #1
    6e42:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6e46:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6e4a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6e4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6e52:	2a07      	cmp	r2, #7
    6e54:	d109      	bne.n	6e6a <SystemInit+0x86>
                {
                    switch(var2)
    6e56:	3b02      	subs	r3, #2
    6e58:	2b03      	cmp	r3, #3
    6e5a:	d806      	bhi.n	6e6a <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    6e5c:	4a4b      	ldr	r2, [pc, #300]	; (6f8c <SystemInit+0x1a8>)
    6e5e:	5cd3      	ldrb	r3, [r2, r3]
    6e60:	b11b      	cbz	r3, 6e6a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    6e62:	2200      	movs	r2, #0
    6e64:	4b4a      	ldr	r3, [pc, #296]	; (6f90 <SystemInit+0x1ac>)
    6e66:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    6e6a:	f7ff ffa9 	bl	6dc0 <nrf53_errata_42>
    6e6e:	b150      	cbz	r0, 6e86 <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    6e70:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e74:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6e78:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    6e7a:	bf42      	ittt	mi
    6e7c:	2200      	movmi	r2, #0
    6e7e:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    6e82:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6e86:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6e8a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6e8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6e92:	2a07      	cmp	r2, #7
    6e94:	d109      	bne.n	6eaa <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    6e96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6e9e:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    6ea0:	bf44      	itt	mi
    6ea2:	f06f 0201 	mvnmi.w	r2, #1
    6ea6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    6eaa:	f7ff ff89 	bl	6dc0 <nrf53_errata_42>
    6eae:	b118      	cbz	r0, 6eb8 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    6eb0:	2265      	movs	r2, #101	; 0x65
    6eb2:	4b33      	ldr	r3, [pc, #204]	; (6f80 <SystemInit+0x19c>)
    6eb4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6eb8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6ebc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6ec0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    6ec4:	2a07      	cmp	r2, #7
    6ec6:	d116      	bne.n	6ef6 <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    6ec8:	4b31      	ldr	r3, [pc, #196]	; (6f90 <SystemInit+0x1ac>)
    6eca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    6ece:	2b00      	cmp	r3, #0
    6ed0:	da11      	bge.n	6ef6 <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    6ed2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ed6:	2203      	movs	r2, #3
    6ed8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    6edc:	2201      	movs	r2, #1
    6ede:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    6ee0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6ee4:	2a00      	cmp	r2, #0
    6ee6:	d0fb      	beq.n	6ee0 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    6ee8:	2200      	movs	r2, #0
    6eea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    6eee:	2201      	movs	r2, #1
    6ef0:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    6ef2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6ef6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6efa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6efe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6f02:	2a07      	cmp	r2, #7
    6f04:	d123      	bne.n	6f4e <SystemInit+0x16a>
                {
                    switch(var2)
    6f06:	3b02      	subs	r3, #2
    6f08:	2b03      	cmp	r3, #3
    6f0a:	d802      	bhi.n	6f12 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    6f0c:	4a21      	ldr	r2, [pc, #132]	; (6f94 <SystemInit+0x1b0>)
    6f0e:	5cd3      	ldrb	r3, [r2, r3]
    6f10:	b1eb      	cbz	r3, 6f4e <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    6f12:	227e      	movs	r2, #126	; 0x7e
    6f14:	4b1a      	ldr	r3, [pc, #104]	; (6f80 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    6f16:	491b      	ldr	r1, [pc, #108]	; (6f84 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    6f18:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    6f1c:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    6f20:	237f      	movs	r3, #127	; 0x7f
    6f22:	4a1d      	ldr	r2, [pc, #116]	; (6f98 <SystemInit+0x1b4>)
    6f24:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    6f28:	2300      	movs	r3, #0
    6f2a:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    6f2e:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    6f32:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    6f36:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    6f3a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    6f3e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    6f42:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    6f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6f4a:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    6f4e:	4a13      	ldr	r2, [pc, #76]	; (6f9c <SystemInit+0x1b8>)
    6f50:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    6f54:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    6f58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    6f5c:	4a10      	ldr	r2, [pc, #64]	; (6fa0 <SystemInit+0x1bc>)
    6f5e:	4b11      	ldr	r3, [pc, #68]	; (6fa4 <SystemInit+0x1c0>)
    6f60:	6811      	ldr	r1, [r2, #0]
    6f62:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    6f66:	69d2      	ldr	r2, [r2, #28]
    6f68:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    6f6c:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    6f6e:	2229      	movs	r2, #41	; 0x29
    6f70:	4b03      	ldr	r3, [pc, #12]	; (6f80 <SystemInit+0x19c>)
    6f72:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    6f76:	2203      	movs	r2, #3
    6f78:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    6f7c:	e757      	b.n	6e2e <SystemInit+0x4a>
    6f7e:	bf00      	nop
    6f80:	50004000 	.word	0x50004000
    6f84:	50039000 	.word	0x50039000
    6f88:	beef0044 	.word	0xbeef0044
    6f8c:	0000f4ad 	.word	0x0000f4ad
    6f90:	50032000 	.word	0x50032000
    6f94:	0000f4a9 	.word	0x0000f4a9
    6f98:	50002000 	.word	0x50002000
    6f9c:	e000ed00 	.word	0xe000ed00
    6fa0:	00ff8000 	.word	0x00ff8000
    6fa4:	50006000 	.word	0x50006000

00006fa8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6fa8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6faa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6fac:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6fae:	fab2 f382 	clz	r3, r2
    6fb2:	f1c3 031f 	rsb	r3, r3, #31
    6fb6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6fb8:	fa05 f403 	lsl.w	r4, r5, r3
    6fbc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6fc0:	e8d0 6fef 	ldaex	r6, [r0]
    6fc4:	4296      	cmp	r6, r2
    6fc6:	d104      	bne.n	6fd2 <nrfx_flag32_alloc+0x2a>
    6fc8:	e8c0 4fec 	stlex	ip, r4, [r0]
    6fcc:	f1bc 0f00 	cmp.w	ip, #0
    6fd0:	d1f6      	bne.n	6fc0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6fd2:	d1eb      	bne.n	6fac <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    6fd4:	4801      	ldr	r0, [pc, #4]	; (6fdc <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    6fd6:	700b      	strb	r3, [r1, #0]
}
    6fd8:	bd70      	pop	{r4, r5, r6, pc}
    6fda:	bf00      	nop
    6fdc:	0bad0000 	.word	0x0bad0000

00006fe0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    6fe0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6fe2:	6803      	ldr	r3, [r0, #0]
    6fe4:	40cb      	lsrs	r3, r1
    6fe6:	07db      	lsls	r3, r3, #31
    6fe8:	d410      	bmi.n	700c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6fea:	2301      	movs	r3, #1
    6fec:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    6fee:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    6ff0:	ea43 0102 	orr.w	r1, r3, r2
    6ff4:	e8d0 4fef 	ldaex	r4, [r0]
    6ff8:	4294      	cmp	r4, r2
    6ffa:	d104      	bne.n	7006 <nrfx_flag32_free+0x26>
    6ffc:	e8c0 1fec 	stlex	ip, r1, [r0]
    7000:	f1bc 0f00 	cmp.w	ip, #0
    7004:	d1f6      	bne.n	6ff4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7006:	d1f2      	bne.n	6fee <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    7008:	4801      	ldr	r0, [pc, #4]	; (7010 <nrfx_flag32_free+0x30>)
}
    700a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    700c:	4801      	ldr	r0, [pc, #4]	; (7014 <nrfx_flag32_free+0x34>)
    700e:	e7fc      	b.n	700a <nrfx_flag32_free+0x2a>
    7010:	0bad0000 	.word	0x0bad0000
    7014:	0bad0004 	.word	0x0bad0004

00007018 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7018:	4b04      	ldr	r3, [pc, #16]	; (702c <nrfx_clock_init+0x14>)
    701a:	791a      	ldrb	r2, [r3, #4]
    701c:	b922      	cbnz	r2, 7028 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    701e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    7020:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    7022:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7024:	4802      	ldr	r0, [pc, #8]	; (7030 <nrfx_clock_init+0x18>)
    7026:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7028:	4802      	ldr	r0, [pc, #8]	; (7034 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    702a:	4770      	bx	lr
    702c:	200141a0 	.word	0x200141a0
    7030:	0bad0000 	.word	0x0bad0000
    7034:	0bad000c 	.word	0x0bad000c

00007038 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7038:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    703a:	2005      	movs	r0, #5
    703c:	f7fc ff08 	bl	3e50 <arch_irq_is_enabled>
    7040:	b910      	cbnz	r0, 7048 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7042:	2005      	movs	r0, #5
    7044:	f7fc fee2 	bl	3e0c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7048:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    704c:	2301      	movs	r3, #1
    704e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    7052:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    7056:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    705a:	4a01      	ldr	r2, [pc, #4]	; (7060 <nrfx_clock_enable+0x28>)
    705c:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    705e:	bd08      	pop	{r3, pc}
    7060:	2005688a 	.word	0x2005688a

00007064 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7064:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7068:	b510      	push	{r4, lr}
    706a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    706e:	b152      	cbz	r2, 7086 <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7070:	2000      	movs	r0, #0
    7072:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    7076:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    707a:	2201      	movs	r2, #1
    707c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7080:	4b23      	ldr	r3, [pc, #140]	; (7110 <nrfx_clock_irq_handler+0xac>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7086:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    708a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    708e:	b18a      	cbz	r2, 70b4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7090:	2200      	movs	r2, #0
    7092:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7096:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    709a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    709e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    70a2:	f002 0203 	and.w	r2, r2, #3
    70a6:	2a01      	cmp	r2, #1
    70a8:	f04f 0102 	mov.w	r1, #2
    70ac:	d128      	bne.n	7100 <nrfx_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    70ae:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70b2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    70b8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    70bc:	b162      	cbz	r2, 70d8 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70be:	2200      	movs	r2, #0
    70c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    70c4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    70c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    70cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    70d0:	4b0f      	ldr	r3, [pc, #60]	; (7110 <nrfx_clock_irq_handler+0xac>)
    70d2:	2004      	movs	r0, #4
    70d4:	681b      	ldr	r3, [r3, #0]
    70d6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    70dc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    70e0:	b1aa      	cbz	r2, 710e <nrfx_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70e2:	2200      	movs	r2, #0
    70e4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    70e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    70ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    70f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    70f4:	4b06      	ldr	r3, [pc, #24]	; (7110 <nrfx_clock_irq_handler+0xac>)
    70f6:	2005      	movs	r0, #5
    }
#endif
}
    70f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    70fc:	681b      	ldr	r3, [r3, #0]
    70fe:	4718      	bx	r3
    7100:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7104:	4b02      	ldr	r3, [pc, #8]	; (7110 <nrfx_clock_irq_handler+0xac>)
    7106:	2001      	movs	r0, #1
    7108:	681b      	ldr	r3, [r3, #0]
    710a:	4798      	blx	r3
    710c:	e7d2      	b.n	70b4 <nrfx_clock_irq_handler+0x50>
}
    710e:	bd10      	pop	{r4, pc}
    7110:	200141a0 	.word	0x200141a0

00007114 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7114:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7116:	f003 021f 	and.w	r2, r3, #31
    711a:	6002      	str	r2, [r0, #0]
}
    711c:	4a03      	ldr	r2, [pc, #12]	; (712c <nrf_gpio_pin_port_decode+0x18>)
    711e:	4804      	ldr	r0, [pc, #16]	; (7130 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    7120:	095b      	lsrs	r3, r3, #5
}
    7122:	2b01      	cmp	r3, #1
    7124:	bf18      	it	ne
    7126:	4610      	movne	r0, r2
    7128:	4770      	bx	lr
    712a:	bf00      	nop
    712c:	50842500 	.word	0x50842500
    7130:	50842800 	.word	0x50842800

00007134 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7134:	4b03      	ldr	r3, [pc, #12]	; (7144 <pin_in_use_by_te+0x10>)
    7136:	3008      	adds	r0, #8
    7138:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    713c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	20002190 	.word	0x20002190

00007148 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7148:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    714a:	4c0d      	ldr	r4, [pc, #52]	; (7180 <call_handler+0x38>)
    714c:	f100 0308 	add.w	r3, r0, #8
    7150:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    7154:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7156:	05da      	lsls	r2, r3, #23
{
    7158:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    715a:	d507      	bpl.n	716c <call_handler+0x24>
    715c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7160:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    7164:	6852      	ldr	r2, [r2, #4]
    7166:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    716a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    716c:	68a3      	ldr	r3, [r4, #8]
    716e:	b12b      	cbz	r3, 717c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7170:	4631      	mov	r1, r6
    7172:	4628      	mov	r0, r5
    7174:	68e2      	ldr	r2, [r4, #12]
    }
}
    7176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    717a:	4718      	bx	r3
}
    717c:	bd70      	pop	{r4, r5, r6, pc}
    717e:	bf00      	nop
    7180:	20002190 	.word	0x20002190

00007184 <release_handler>:
{
    7184:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7186:	4a12      	ldr	r2, [pc, #72]	; (71d0 <release_handler+0x4c>)
    7188:	3008      	adds	r0, #8
    718a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    718e:	05d9      	lsls	r1, r3, #23
    7190:	d51b      	bpl.n	71ca <release_handler+0x46>
    7192:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7196:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    719a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    719e:	2000      	movs	r0, #0
    71a0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    71a4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    71a8:	f413 7f80 	tst.w	r3, #256	; 0x100
    71ac:	d003      	beq.n	71b6 <release_handler+0x32>
    71ae:	f3c3 2343 	ubfx	r3, r3, #9, #4
    71b2:	4299      	cmp	r1, r3
    71b4:	d009      	beq.n	71ca <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    71b6:	3001      	adds	r0, #1
    71b8:	2830      	cmp	r0, #48	; 0x30
    71ba:	d1f3      	bne.n	71a4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    71bc:	2300      	movs	r3, #0
    71be:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    71c2:	4804      	ldr	r0, [pc, #16]	; (71d4 <release_handler+0x50>)
}
    71c4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    71c6:	f7ff bf0b 	b.w	6fe0 <nrfx_flag32_free>
}
    71ca:	bc10      	pop	{r4}
    71cc:	4770      	bx	lr
    71ce:	bf00      	nop
    71d0:	20002190 	.word	0x20002190
    71d4:	20002204 	.word	0x20002204

000071d8 <pin_handler_trigger_uninit>:
{
    71d8:	b538      	push	{r3, r4, r5, lr}
    71da:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    71dc:	f7ff ffaa 	bl	7134 <pin_in_use_by_te>
    71e0:	4c0b      	ldr	r4, [pc, #44]	; (7210 <pin_handler_trigger_uninit+0x38>)
    71e2:	f102 0508 	add.w	r5, r2, #8
    71e6:	b160      	cbz	r0, 7202 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    71e8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    71ea:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    71ee:	0b5b      	lsrs	r3, r3, #13
    71f0:	009b      	lsls	r3, r3, #2
    71f2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    71f6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    71fa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    71fe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    7202:	4610      	mov	r0, r2
    7204:	f7ff ffbe 	bl	7184 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7208:	2300      	movs	r3, #0
    720a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    720e:	bd38      	pop	{r3, r4, r5, pc}
    7210:	20002190 	.word	0x20002190

00007214 <nrfx_gpiote_input_configure>:
{
    7214:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7218:	4604      	mov	r4, r0
    721a:	4690      	mov	r8, r2
    721c:	461d      	mov	r5, r3
    if (p_input_config)
    721e:	b301      	cbz	r1, 7262 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7220:	4e4f      	ldr	r6, [pc, #316]	; (7360 <nrfx_gpiote_input_configure+0x14c>)
    7222:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7226:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    722a:	079b      	lsls	r3, r3, #30
    722c:	d502      	bpl.n	7234 <nrfx_gpiote_input_configure+0x20>
    722e:	f7ff ff81 	bl	7134 <pin_in_use_by_te>
    7232:	bb28      	cbnz	r0, 7280 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7234:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7236:	4620      	mov	r0, r4
    7238:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    723c:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    7240:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7244:	f10d 020f 	add.w	r2, sp, #15
    7248:	460b      	mov	r3, r1
    724a:	f10d 010e 	add.w	r1, sp, #14
    724e:	f006 fab9 	bl	d7c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7252:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7256:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    725a:	f043 0301 	orr.w	r3, r3, #1
    725e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    7262:	f1b8 0f00 	cmp.w	r8, #0
    7266:	d02d      	beq.n	72c4 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7268:	4e3d      	ldr	r6, [pc, #244]	; (7360 <nrfx_gpiote_input_configure+0x14c>)
    726a:	f104 0708 	add.w	r7, r4, #8
    726e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7272:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    7276:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7278:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    727c:	d502      	bpl.n	7284 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    727e:	b1cb      	cbz	r3, 72b4 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    7280:	4838      	ldr	r0, [pc, #224]	; (7364 <nrfx_gpiote_input_configure+0x150>)
    7282:	e021      	b.n	72c8 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7284:	f021 0120 	bic.w	r1, r1, #32
    7288:	04c9      	lsls	r1, r1, #19
    728a:	0cc9      	lsrs	r1, r1, #19
    728c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    7290:	b183      	cbz	r3, 72b4 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    7292:	2803      	cmp	r0, #3
    7294:	d8f4      	bhi.n	7280 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7296:	f8d8 3004 	ldr.w	r3, [r8, #4]
    729a:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    729e:	4662      	mov	r2, ip
    72a0:	0092      	lsls	r2, r2, #2
    72a2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    72a6:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    72aa:	b980      	cbnz	r0, 72ce <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    72ac:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    72b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    72b4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    72b8:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    72bc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    72c0:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    72c4:	bb1d      	cbnz	r5, 730e <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    72c6:	4828      	ldr	r0, [pc, #160]	; (7368 <nrfx_gpiote_input_configure+0x154>)
}
    72c8:	b004      	add	sp, #16
    72ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    72ce:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    72d2:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    72d6:	f023 0303 	bic.w	r3, r3, #3
    72da:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    72de:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    72e2:	f041 0120 	orr.w	r1, r1, #32
    72e6:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    72ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    72ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    72f2:	0223      	lsls	r3, r4, #8
    72f4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    72f8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    72fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    7300:	ea43 030e 	orr.w	r3, r3, lr
    7304:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    7308:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    730c:	e7d2      	b.n	72b4 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    730e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7310:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    7314:	f7ff ff36 	bl	7184 <release_handler>
    if (!handler)
    7318:	2e00      	cmp	r6, #0
    731a:	d0d4      	beq.n	72c6 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    731c:	4d10      	ldr	r5, [pc, #64]	; (7360 <nrfx_gpiote_input_configure+0x14c>)
    731e:	e9d5 2300 	ldrd	r2, r3, [r5]
    7322:	4296      	cmp	r6, r2
    7324:	d101      	bne.n	732a <nrfx_gpiote_input_configure+0x116>
    7326:	429f      	cmp	r7, r3
    7328:	d018      	beq.n	735c <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    732a:	4810      	ldr	r0, [pc, #64]	; (736c <nrfx_gpiote_input_configure+0x158>)
    732c:	f10d 010f 	add.w	r1, sp, #15
    7330:	f7ff fe3a 	bl	6fa8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7334:	4b0c      	ldr	r3, [pc, #48]	; (7368 <nrfx_gpiote_input_configure+0x154>)
    7336:	4298      	cmp	r0, r3
    7338:	d1c6      	bne.n	72c8 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    733a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    733e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7342:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7344:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7346:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    734a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    734e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    7352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7356:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    735a:	e7b4      	b.n	72c6 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    735c:	2200      	movs	r2, #0
    735e:	e7ee      	b.n	733e <nrfx_gpiote_input_configure+0x12a>
    7360:	20002190 	.word	0x20002190
    7364:	0bad0004 	.word	0x0bad0004
    7368:	0bad0000 	.word	0x0bad0000
    736c:	20002204 	.word	0x20002204

00007370 <nrfx_gpiote_output_configure>:
{
    7370:	b5f0      	push	{r4, r5, r6, r7, lr}
    7372:	4604      	mov	r4, r0
    7374:	4615      	mov	r5, r2
    7376:	b085      	sub	sp, #20
    if (p_config)
    7378:	b319      	cbz	r1, 73c2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    737a:	4e34      	ldr	r6, [pc, #208]	; (744c <nrfx_gpiote_output_configure+0xdc>)
    737c:	f100 0708 	add.w	r7, r0, #8
    7380:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7384:	0793      	lsls	r3, r2, #30
    7386:	d403      	bmi.n	7390 <nrfx_gpiote_output_configure+0x20>
    7388:	f7ff fed4 	bl	7134 <pin_in_use_by_te>
    738c:	2800      	cmp	r0, #0
    738e:	d15a      	bne.n	7446 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7390:	f012 0f1c 	tst.w	r2, #28
    7394:	d002      	beq.n	739c <nrfx_gpiote_output_configure+0x2c>
    7396:	784b      	ldrb	r3, [r1, #1]
    7398:	2b01      	cmp	r3, #1
    739a:	d054      	beq.n	7446 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    739c:	2301      	movs	r3, #1
    739e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    73a2:	2300      	movs	r3, #0
    73a4:	1c4a      	adds	r2, r1, #1
    73a6:	e9cd 1300 	strd	r1, r3, [sp]
    73aa:	4620      	mov	r0, r4
    73ac:	1c8b      	adds	r3, r1, #2
    73ae:	f10d 010f 	add.w	r1, sp, #15
    73b2:	f006 fa07 	bl	d7c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    73b6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    73ba:	f043 0303 	orr.w	r3, r3, #3
    73be:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    73c2:	b915      	cbnz	r5, 73ca <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    73c4:	4822      	ldr	r0, [pc, #136]	; (7450 <nrfx_gpiote_output_configure+0xe0>)
}
    73c6:	b005      	add	sp, #20
    73c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    73ca:	4e20      	ldr	r6, [pc, #128]	; (744c <nrfx_gpiote_output_configure+0xdc>)
    73cc:	f104 0708 	add.w	r7, r4, #8
    73d0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    73d4:	0783      	lsls	r3, r0, #30
    73d6:	d536      	bpl.n	7446 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    73d8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    73dc:	2300      	movs	r3, #0
    73de:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    73e0:	f020 0020 	bic.w	r0, r0, #32
    73e4:	0089      	lsls	r1, r1, #2
    73e6:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    73ea:	04c0      	lsls	r0, r0, #19
    73ec:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    73f0:	0cc0      	lsrs	r0, r0, #19
    73f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    73f6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    73fa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    73fe:	786a      	ldrb	r2, [r5, #1]
    7400:	2a00      	cmp	r2, #0
    7402:	d0df      	beq.n	73c4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7404:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    7408:	78ad      	ldrb	r5, [r5, #2]
    740a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    740e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7412:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7416:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    741a:	0223      	lsls	r3, r4, #8
    741c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7420:	0412      	lsls	r2, r2, #16
    7422:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7426:	ea43 030e 	orr.w	r3, r3, lr
    742a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    742c:	052a      	lsls	r2, r5, #20
    742e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7432:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7436:	4313      	orrs	r3, r2
    7438:	f040 0020 	orr.w	r0, r0, #32
    743c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7440:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7444:	e7be      	b.n	73c4 <nrfx_gpiote_output_configure+0x54>
{
    7446:	4803      	ldr	r0, [pc, #12]	; (7454 <nrfx_gpiote_output_configure+0xe4>)
    7448:	e7bd      	b.n	73c6 <nrfx_gpiote_output_configure+0x56>
    744a:	bf00      	nop
    744c:	20002190 	.word	0x20002190
    7450:	0bad0000 	.word	0x0bad0000
    7454:	0bad0004 	.word	0x0bad0004

00007458 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7458:	4b01      	ldr	r3, [pc, #4]	; (7460 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    745a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    745e:	4770      	bx	lr
    7460:	20002190 	.word	0x20002190

00007464 <nrfx_gpiote_channel_get>:
{
    7464:	b508      	push	{r3, lr}
    7466:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7468:	f7ff fe64 	bl	7134 <pin_in_use_by_te>
    746c:	b138      	cbz	r0, 747e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    746e:	4b05      	ldr	r3, [pc, #20]	; (7484 <nrfx_gpiote_channel_get+0x20>)
    7470:	3208      	adds	r2, #8
    7472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    7476:	4804      	ldr	r0, [pc, #16]	; (7488 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7478:	0b5b      	lsrs	r3, r3, #13
    747a:	700b      	strb	r3, [r1, #0]
}
    747c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    747e:	4803      	ldr	r0, [pc, #12]	; (748c <nrfx_gpiote_channel_get+0x28>)
    7480:	e7fc      	b.n	747c <nrfx_gpiote_channel_get+0x18>
    7482:	bf00      	nop
    7484:	20002190 	.word	0x20002190
    7488:	0bad0000 	.word	0x0bad0000
    748c:	0bad0004 	.word	0x0bad0004

00007490 <nrfx_gpiote_init>:
{
    7490:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7492:	4c0f      	ldr	r4, [pc, #60]	; (74d0 <nrfx_gpiote_init+0x40>)
    7494:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    7498:	b9bd      	cbnz	r5, 74ca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    749a:	2260      	movs	r2, #96	; 0x60
    749c:	4629      	mov	r1, r5
    749e:	f104 0010 	add.w	r0, r4, #16
    74a2:	f004 f904 	bl	b6ae <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    74a6:	200d      	movs	r0, #13
    74a8:	f7fc fcb0 	bl	3e0c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    74ac:	4b09      	ldr	r3, [pc, #36]	; (74d4 <nrfx_gpiote_init+0x44>)
    return err_code;
    74ae:	480a      	ldr	r0, [pc, #40]	; (74d8 <nrfx_gpiote_init+0x48>)
    74b0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    74b4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    74b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    74bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    74c0:	2301      	movs	r3, #1
    74c2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    74c6:	6763      	str	r3, [r4, #116]	; 0x74
}
    74c8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    74ca:	4804      	ldr	r0, [pc, #16]	; (74dc <nrfx_gpiote_init+0x4c>)
    74cc:	e7fc      	b.n	74c8 <nrfx_gpiote_init+0x38>
    74ce:	bf00      	nop
    74d0:	20002190 	.word	0x20002190
    74d4:	5000d000 	.word	0x5000d000
    74d8:	0bad0000 	.word	0x0bad0000
    74dc:	0bad0005 	.word	0x0bad0005

000074e0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    74e0:	4b03      	ldr	r3, [pc, #12]	; (74f0 <nrfx_gpiote_is_init+0x10>)
    74e2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    74e6:	3800      	subs	r0, #0
    74e8:	bf18      	it	ne
    74ea:	2001      	movne	r0, #1
    74ec:	4770      	bx	lr
    74ee:	bf00      	nop
    74f0:	20002190 	.word	0x20002190

000074f4 <nrfx_gpiote_channel_free>:
{
    74f4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    74f6:	4801      	ldr	r0, [pc, #4]	; (74fc <nrfx_gpiote_channel_free+0x8>)
    74f8:	f7ff bd72 	b.w	6fe0 <nrfx_flag32_free>
    74fc:	20002200 	.word	0x20002200

00007500 <nrfx_gpiote_channel_alloc>:
{
    7500:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7502:	4801      	ldr	r0, [pc, #4]	; (7508 <nrfx_gpiote_channel_alloc+0x8>)
    7504:	f7ff bd50 	b.w	6fa8 <nrfx_flag32_alloc>
    7508:	20002200 	.word	0x20002200

0000750c <nrfx_gpiote_trigger_enable>:
{
    750c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    750e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7510:	f7ff fe10 	bl	7134 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7514:	4b1e      	ldr	r3, [pc, #120]	; (7590 <nrfx_gpiote_trigger_enable+0x84>)
    7516:	f104 0208 	add.w	r2, r4, #8
    751a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    751e:	b1e8      	cbz	r0, 755c <nrfx_gpiote_trigger_enable+0x50>
    7520:	f013 0502 	ands.w	r5, r3, #2
    7524:	d11a      	bne.n	755c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7526:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7528:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    752a:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    752e:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    7532:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7536:	6005      	str	r5, [r0, #0]
    7538:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    753c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    753e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7542:	f040 0001 	orr.w	r0, r0, #1
    7546:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    754a:	b129      	cbz	r1, 7558 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    754c:	2201      	movs	r2, #1
    754e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    7552:	4a10      	ldr	r2, [pc, #64]	; (7594 <nrfx_gpiote_trigger_enable+0x88>)
    7554:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7558:	b003      	add	sp, #12
    755a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    755c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7560:	2b04      	cmp	r3, #4
    7562:	d011      	beq.n	7588 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7564:	2b05      	cmp	r3, #5
    7566:	d011      	beq.n	758c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7568:	a801      	add	r0, sp, #4
    756a:	9401      	str	r4, [sp, #4]
    756c:	f7ff fdd2 	bl	7114 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7570:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    7572:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7574:	40d9      	lsrs	r1, r3
    7576:	f001 0101 	and.w	r1, r1, #1
    757a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    757c:	4620      	mov	r0, r4
}
    757e:	b003      	add	sp, #12
    7580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7584:	f006 b967 	b.w	d856 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7588:	2103      	movs	r1, #3
    758a:	e7f7      	b.n	757c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    758c:	2102      	movs	r1, #2
    758e:	e7f5      	b.n	757c <nrfx_gpiote_trigger_enable+0x70>
    7590:	20002190 	.word	0x20002190
    7594:	5000d000 	.word	0x5000d000

00007598 <nrfx_gpiote_trigger_disable>:
{
    7598:	b508      	push	{r3, lr}
    759a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    759c:	f7ff fdca 	bl	7134 <pin_in_use_by_te>
    75a0:	b1c0      	cbz	r0, 75d4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    75a2:	4b0f      	ldr	r3, [pc, #60]	; (75e0 <nrfx_gpiote_trigger_disable+0x48>)
    75a4:	f102 0108 	add.w	r1, r2, #8
    75a8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    75ac:	0799      	lsls	r1, r3, #30
    75ae:	d411      	bmi.n	75d4 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    75b0:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    75b2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    75b4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    75b6:	490b      	ldr	r1, [pc, #44]	; (75e4 <nrfx_gpiote_trigger_disable+0x4c>)
    75b8:	009b      	lsls	r3, r3, #2
    75ba:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    75be:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    75c2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    75c6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    75ca:	f022 0203 	bic.w	r2, r2, #3
    75ce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    75d2:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    75d4:	2100      	movs	r1, #0
}
    75d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    75da:	4610      	mov	r0, r2
    75dc:	f006 b93b 	b.w	d856 <nrf_gpio_cfg_sense_set>
    75e0:	20002190 	.word	0x20002190
    75e4:	5000d000 	.word	0x5000d000

000075e8 <nrfx_gpiote_pin_uninit>:
{
    75e8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    75ea:	4b10      	ldr	r3, [pc, #64]	; (762c <nrfx_gpiote_pin_uninit+0x44>)
    75ec:	f100 0208 	add.w	r2, r0, #8
    75f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    75f4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    75f6:	07db      	lsls	r3, r3, #31
    75f8:	d516      	bpl.n	7628 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    75fa:	f7ff ffcd 	bl	7598 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    75fe:	4620      	mov	r0, r4
    7600:	f7ff fdea 	bl	71d8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7604:	a801      	add	r0, sp, #4
    7606:	9401      	str	r4, [sp, #4]
    7608:	f7ff fd84 	bl	7114 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    760c:	9b01      	ldr	r3, [sp, #4]
    760e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7612:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    7616:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    761a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    761e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    7622:	4803      	ldr	r0, [pc, #12]	; (7630 <nrfx_gpiote_pin_uninit+0x48>)
}
    7624:	b002      	add	sp, #8
    7626:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7628:	4802      	ldr	r0, [pc, #8]	; (7634 <nrfx_gpiote_pin_uninit+0x4c>)
    762a:	e7fb      	b.n	7624 <nrfx_gpiote_pin_uninit+0x3c>
    762c:	20002190 	.word	0x20002190
    7630:	0bad0000 	.word	0x0bad0000
    7634:	0bad0004 	.word	0x0bad0004

00007638 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    763c:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    763e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7640:	4634      	mov	r4, r6
{
    7642:	4b63      	ldr	r3, [pc, #396]	; (77d0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    7644:	4863      	ldr	r0, [pc, #396]	; (77d4 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7646:	4964      	ldr	r1, [pc, #400]	; (77d8 <nrfx_gpiote_irq_handler+0x1a0>)
{
    7648:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    764a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    764c:	b135      	cbz	r5, 765c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    764e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    7652:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7654:	bf1e      	ittt	ne
    7656:	601c      	strne	r4, [r3, #0]
    7658:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    765a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    765c:	3304      	adds	r3, #4
    765e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7660:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7664:	d1f1      	bne.n	764a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7666:	f8df a16c 	ldr.w	sl, [pc, #364]	; 77d4 <nrfx_gpiote_irq_handler+0x19c>
    766a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    766e:	2b00      	cmp	r3, #0
    7670:	f000 8091 	beq.w	7796 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    7674:	f8df 8164 	ldr.w	r8, [pc, #356]	; 77dc <nrfx_gpiote_irq_handler+0x1a4>
    7678:	f8d8 3020 	ldr.w	r3, [r8, #32]
    767c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    767e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    7682:	4b57      	ldr	r3, [pc, #348]	; (77e0 <nrfx_gpiote_irq_handler+0x1a8>)
    7684:	6a1a      	ldr	r2, [r3, #32]
    7686:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7688:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    768a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    768e:	f10d 0b10 	add.w	fp, sp, #16
    7692:	ea4f 1349 	mov.w	r3, r9, lsl #5
    7696:	9300      	str	r3, [sp, #0]
    7698:	e048      	b.n	772c <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    769a:	fa94 f4a4 	rbit	r4, r4
    769e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    76a2:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    76a4:	4a4f      	ldr	r2, [pc, #316]	; (77e4 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    76a6:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    76a8:	f104 0308 	add.w	r3, r4, #8
    76ac:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    76b0:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    76b2:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    76b4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    76b8:	fa03 f202 	lsl.w	r2, r3, r2
    76bc:	f81b 3000 	ldrb.w	r3, [fp, r0]
    76c0:	9403      	str	r4, [sp, #12]
    76c2:	ea23 0302 	bic.w	r3, r3, r2
    76c6:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76ca:	a803      	add	r0, sp, #12
    76cc:	f7ff fd22 	bl	7114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    76d0:	9b03      	ldr	r3, [sp, #12]
    76d2:	08b9      	lsrs	r1, r7, #2
    76d4:	3380      	adds	r3, #128	; 0x80
    76d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    76da:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    76de:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    76e0:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    76e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    76e6:	d52b      	bpl.n	7740 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    76e8:	4620      	mov	r0, r4
    76ea:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    76ec:	b2dd      	uxtb	r5, r3
    76ee:	f7ff fd2b 	bl	7148 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76f2:	a803      	add	r0, sp, #12
    76f4:	9403      	str	r4, [sp, #12]
    76f6:	f7ff fd0d 	bl	7114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    76fa:	9b03      	ldr	r3, [sp, #12]
    76fc:	3380      	adds	r3, #128	; 0x80
    76fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7702:	f3c3 4301 	ubfx	r3, r3, #16, #2
    7706:	429d      	cmp	r5, r3
    7708:	d107      	bne.n	771a <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    770a:	2100      	movs	r1, #0
    770c:	4620      	mov	r0, r4
    770e:	f006 f8a2 	bl	d856 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7712:	4629      	mov	r1, r5
    7714:	4620      	mov	r0, r4
    7716:	f006 f89e 	bl	d856 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    771a:	a803      	add	r0, sp, #12
    771c:	9403      	str	r4, [sp, #12]
    771e:	f7ff fcf9 	bl	7114 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    7722:	2201      	movs	r2, #1
    7724:	9b03      	ldr	r3, [sp, #12]
    7726:	fa02 f303 	lsl.w	r3, r2, r3
    772a:	6203      	str	r3, [r0, #32]
            while (latch[i])
    772c:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    7730:	2c00      	cmp	r4, #0
    7732:	d1b2      	bne.n	769a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7734:	f1b9 0f00 	cmp.w	r9, #0
    7738:	d11d      	bne.n	7776 <nrfx_gpiote_irq_handler+0x13e>
    773a:	f04f 0901 	mov.w	r9, #1
    773e:	e7a8      	b.n	7692 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7740:	2b02      	cmp	r3, #2
    7742:	d10c      	bne.n	775e <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7744:	2103      	movs	r1, #3
    7746:	4620      	mov	r0, r4
    7748:	f006 f885 	bl	d856 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    774c:	f005 0305 	and.w	r3, r5, #5
    7750:	2b01      	cmp	r3, #1
    7752:	d1e2      	bne.n	771a <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    7754:	4639      	mov	r1, r7
    7756:	4620      	mov	r0, r4
    7758:	f7ff fcf6 	bl	7148 <call_handler>
    775c:	e7dd      	b.n	771a <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    775e:	2102      	movs	r1, #2
    7760:	4620      	mov	r0, r4
    7762:	9301      	str	r3, [sp, #4]
    7764:	f006 f877 	bl	d856 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7768:	2d03      	cmp	r5, #3
    776a:	d0f3      	beq.n	7754 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    776c:	9b01      	ldr	r3, [sp, #4]
    776e:	2b03      	cmp	r3, #3
    7770:	d1d3      	bne.n	771a <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7772:	2d02      	cmp	r5, #2
    7774:	e7ed      	b.n	7752 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7776:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    777a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    777e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    7782:	4917      	ldr	r1, [pc, #92]	; (77e0 <nrfx_gpiote_irq_handler+0x1a8>)
    7784:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7786:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    778a:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    778c:	4313      	orrs	r3, r2
    778e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7790:	620a      	str	r2, [r1, #32]
    7792:	f47f af7a 	bne.w	768a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    7796:	2401      	movs	r4, #1
    while (mask)
    7798:	b916      	cbnz	r6, 77a0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    779a:	b007      	add	sp, #28
    779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    77a0:	fa96 f3a6 	rbit	r3, r6
    77a4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    77a8:	fa04 f203 	lsl.w	r2, r4, r3
    77ac:	009b      	lsls	r3, r3, #2
    77ae:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    77b2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    77b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    77ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    77be:	f3c0 2005 	ubfx	r0, r0, #8, #6
    77c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    77c6:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    77ca:	f7ff fcbd 	bl	7148 <call_handler>
    77ce:	e7e3      	b.n	7798 <nrfx_gpiote_irq_handler+0x160>
    77d0:	5000d100 	.word	0x5000d100
    77d4:	5000d000 	.word	0x5000d000
    77d8:	5000d120 	.word	0x5000d120
    77dc:	50842500 	.word	0x50842500
    77e0:	50842800 	.word	0x50842800
    77e4:	20002190 	.word	0x20002190

000077e8 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    77e8:	2200      	movs	r2, #0
    77ea:	4b03      	ldr	r3, [pc, #12]	; (77f8 <nvmc_readonly_mode_set+0x10>)
    77ec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    77f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    77f4:	4770      	bx	lr
    77f6:	bf00      	nop
    77f8:	50039000 	.word	0x50039000

000077fc <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    77fc:	4a04      	ldr	r2, [pc, #16]	; (7810 <nvmc_word_write+0x14>)
    77fe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    7802:	07db      	lsls	r3, r3, #31
    7804:	d5fb      	bpl.n	77fe <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    7806:	6001      	str	r1, [r0, #0]
    7808:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    780c:	4770      	bx	lr
    780e:	bf00      	nop
    7810:	50039000 	.word	0x50039000

00007814 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    7814:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    7816:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    781a:	b983      	cbnz	r3, 783e <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    781c:	2202      	movs	r2, #2
    781e:	4b09      	ldr	r3, [pc, #36]	; (7844 <nrfx_nvmc_page_erase+0x30>)
    7820:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7824:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    7828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    782c:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    782e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    7832:	07d2      	lsls	r2, r2, #31
    7834:	d5fb      	bpl.n	782e <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    7836:	f7ff ffd7 	bl	77e8 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    783a:	4803      	ldr	r0, [pc, #12]	; (7848 <nrfx_nvmc_page_erase+0x34>)
}
    783c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    783e:	4803      	ldr	r0, [pc, #12]	; (784c <nrfx_nvmc_page_erase+0x38>)
    7840:	e7fc      	b.n	783c <nrfx_nvmc_page_erase+0x28>
    7842:	bf00      	nop
    7844:	50039000 	.word	0x50039000
    7848:	0bad0000 	.word	0x0bad0000
    784c:	0bad000a 	.word	0x0bad000a

00007850 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    7850:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    7852:	b508      	push	{r3, lr}
    7854:	4b05      	ldr	r3, [pc, #20]	; (786c <nrfx_nvmc_word_write+0x1c>)
    7856:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    785a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    785e:	f7ff ffcd 	bl	77fc <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    7862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    7866:	f7ff bfbf 	b.w	77e8 <nvmc_readonly_mode_set>
    786a:	bf00      	nop
    786c:	50039000 	.word	0x50039000

00007870 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    7870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7874:	4615      	mov	r5, r2
    p_reg->CONFIGNS = (uint32_t)mode;
    7876:	2201      	movs	r2, #1
    7878:	4b1d      	ldr	r3, [pc, #116]	; (78f0 <nrfx_nvmc_bytes_write+0x80>)
    787a:	4604      	mov	r4, r0
    787c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7880:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    7884:	f010 0303 	ands.w	r3, r0, #3
{
    7888:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
    788a:	d010      	beq.n	78ae <nrfx_nvmc_bytes_write+0x3e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    788c:	f1c3 0704 	rsb	r7, r3, #4
    7890:	42af      	cmp	r7, r5
    7892:	bf28      	it	cs
    7894:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
    7896:	463a      	mov	r2, r7
    7898:	eba0 0803 	sub.w	r8, r0, r3
    789c:	f005 ffea 	bl	d874 <partial_word_create>
    78a0:	4601      	mov	r1, r0
    78a2:	4640      	mov	r0, r8
    78a4:	f7ff ffaa 	bl	77fc <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    78a8:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    78aa:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    78ac:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
    78ae:	4637      	mov	r7, r6
    78b0:	f025 0803 	bic.w	r8, r5, #3
    78b4:	44b0      	add	r8, r6
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    78b6:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
    78ba:	45b8      	cmp	r8, r7
    78bc:	d111      	bne.n	78e2 <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    78be:	f015 0203 	ands.w	r2, r5, #3
    78c2:	d00a      	beq.n	78da <nrfx_nvmc_bytes_write+0x6a>
        addr += word_count * NVMC_BYTES_IN_WORD;
    78c4:	f025 0503 	bic.w	r5, r5, #3
    78c8:	442c      	add	r4, r5
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    78ca:	1971      	adds	r1, r6, r5
    78cc:	4620      	mov	r0, r4
    78ce:	f005 ffd1 	bl	d874 <partial_word_create>
    78d2:	4601      	mov	r1, r0
    78d4:	4620      	mov	r0, r4
    78d6:	f7ff ff91 	bl	77fc <nvmc_word_write>
    }

    nvmc_readonly_mode_set();
}
    78da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    nvmc_readonly_mode_set();
    78de:	f7ff bf83 	b.w	77e8 <nvmc_readonly_mode_set>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    78e2:	eb09 0007 	add.w	r0, r9, r7
    78e6:	f857 1b04 	ldr.w	r1, [r7], #4
    78ea:	f7ff ff87 	bl	77fc <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    78ee:	e7e4      	b.n	78ba <nrfx_nvmc_bytes_write+0x4a>
    78f0:	50039000 	.word	0x50039000

000078f4 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    78f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    78f6:	4c17      	ldr	r4, [pc, #92]	; (7954 <nrfx_power_init+0x60>)
    78f8:	7823      	ldrb	r3, [r4, #0]
    78fa:	bb4b      	cbnz	r3, 7950 <nrfx_power_init+0x5c>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    78fc:	7803      	ldrb	r3, [r0, #0]
    78fe:	4a16      	ldr	r2, [pc, #88]	; (7958 <nrfx_power_init+0x64>)
    7900:	f3c3 0340 	ubfx	r3, r3, #1, #1
    7904:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    7908:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    790a:	f003 0301 	and.w	r3, r3, #1
    790e:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    7912:	7803      	ldrb	r3, [r0, #0]
    7914:	07db      	lsls	r3, r3, #31
    7916:	d510      	bpl.n	793a <nrfx_power_init+0x46>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7918:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    791c:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7920:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    7924:	2907      	cmp	r1, #7
    7926:	d108      	bne.n	793a <nrfx_power_init+0x46>
                    switch(var2)
    7928:	3b02      	subs	r3, #2
    792a:	2b03      	cmp	r3, #3
    792c:	d805      	bhi.n	793a <nrfx_power_init+0x46>
    792e:	490b      	ldr	r1, [pc, #44]	; (795c <nrfx_power_init+0x68>)
    7930:	5ccb      	ldrb	r3, [r1, r3]
    7932:	b113      	cbz	r3, 793a <nrfx_power_init+0x46>
    {
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    7934:	2301      	movs	r3, #1
    7936:	f8c2 3728 	str.w	r3, [r2, #1832]	; 0x728
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    793a:	2005      	movs	r0, #5
    793c:	f7fc fa88 	bl	3e50 <arch_irq_is_enabled>
    7940:	b910      	cbnz	r0, 7948 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7942:	2005      	movs	r0, #5
    7944:	f7fc fa62 	bl	3e0c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7948:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    794a:	4805      	ldr	r0, [pc, #20]	; (7960 <nrfx_power_init+0x6c>)
    m_initialized = true;
    794c:	7023      	strb	r3, [r4, #0]
}
    794e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7950:	4804      	ldr	r0, [pc, #16]	; (7964 <nrfx_power_init+0x70>)
    7952:	e7fc      	b.n	794e <nrfx_power_init+0x5a>
    7954:	2005688b 	.word	0x2005688b
    7958:	50004000 	.word	0x50004000
    795c:	0000f4cc 	.word	0x0000f4cc
    7960:	0bad0000 	.word	0x0bad0000
    7964:	0bad000c 	.word	0x0bad000c

00007968 <nrfx_power_irq_handler>:
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    7968:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    796c:	b510      	push	{r4, lr}
    796e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7972:	0761      	lsls	r1, r4, #29
    7974:	d50a      	bpl.n	798c <nrfx_power_irq_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7976:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (ret)
    797a:	b13a      	cbz	r2, 798c <nrfx_power_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    797c:	2200      	movs	r2, #0
    797e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7982:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7986:	4b12      	ldr	r3, [pc, #72]	; (79d0 <nrfx_power_irq_handler+0x68>)
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    798c:	06a2      	lsls	r2, r4, #26
    798e:	d50c      	bpl.n	79aa <nrfx_power_irq_handler+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7990:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7994:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    7998:	b13a      	cbz	r2, 79aa <nrfx_power_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    799a:	2000      	movs	r0, #0
    799c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    79a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    79a4:	4b0b      	ldr	r3, [pc, #44]	; (79d4 <nrfx_power_irq_handler+0x6c>)
    79a6:	681b      	ldr	r3, [r3, #0]
    79a8:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    79aa:	0663      	lsls	r3, r4, #25
    79ac:	d50f      	bpl.n	79ce <nrfx_power_irq_handler+0x66>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    79ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    79b2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    79b6:	b152      	cbz	r2, 79ce <nrfx_power_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79b8:	2200      	movs	r2, #0
    79ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    79be:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    79c2:	4b04      	ldr	r3, [pc, #16]	; (79d4 <nrfx_power_irq_handler+0x6c>)
    79c4:	2001      	movs	r0, #1
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    79c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	4718      	bx	r3
}
    79ce:	bd10      	pop	{r4, pc}
    79d0:	200141ac 	.word	0x200141ac
    79d4:	200141a8 	.word	0x200141a8

000079d8 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    79d8:	b570      	push	{r4, r5, r6, lr}
    79da:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    79de:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    79e2:	d168      	bne.n	7ab6 <qspi_xfer+0xde>
    79e4:	0784      	lsls	r4, r0, #30
    79e6:	d166      	bne.n	7ab6 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    79e8:	4d35      	ldr	r5, [pc, #212]	; (7ac0 <qspi_xfer+0xe8>)
    79ea:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    79ee:	2c01      	cmp	r4, #1
    79f0:	d001      	beq.n	79f6 <qspi_xfer+0x1e>
    79f2:	429c      	cmp	r4, r3
    79f4:	d161      	bne.n	7aba <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    79f6:	682c      	ldr	r4, [r5, #0]
    79f8:	bb04      	cbnz	r4, 7a3c <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    79fa:	2b02      	cmp	r3, #2
    79fc:	4b31      	ldr	r3, [pc, #196]	; (7ac4 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    79fe:	bf0b      	itete	eq
    7a00:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    7a04:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7a08:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7a0c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7a10:	bf0b      	itete	eq
    7a12:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7a16:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    7a1a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    7a1c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a1e:	2100      	movs	r1, #0
    7a20:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a24:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    7a28:	2201      	movs	r2, #1
    7a2a:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    7a2e:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a30:	4a24      	ldr	r2, [pc, #144]	; (7ac4 <qspi_xfer+0xec>)
    7a32:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7a36:	2b00      	cmp	r3, #0
    7a38:	d0fb      	beq.n	7a32 <qspi_xfer+0x5a>
    7a3a:	e00d      	b.n	7a58 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    7a3c:	68ae      	ldr	r6, [r5, #8]
    7a3e:	4c21      	ldr	r4, [pc, #132]	; (7ac4 <qspi_xfer+0xec>)
    7a40:	b166      	cbz	r6, 7a5c <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7a42:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    7a44:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    7a46:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    7a48:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7a4a:	d12d      	bne.n	7aa8 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    7a4c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7a50:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    7a54:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    7a58:	481b      	ldr	r0, [pc, #108]	; (7ac8 <qspi_xfer+0xf0>)
}
    7a5a:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    7a5c:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    7a5e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    7a62:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    7a64:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    7a66:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    7a68:	bf0c      	ite	eq
    7a6a:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    7a6e:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a72:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    7a76:	bf0b      	itete	eq
    7a78:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    7a7c:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7a80:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    7a84:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    7a88:	bf08      	it	eq
    7a8a:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a8c:	490d      	ldr	r1, [pc, #52]	; (7ac4 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    7a8e:	bf18      	it	ne
    7a90:	2304      	movne	r3, #4
    7a92:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    7a96:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a98:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7a9c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    7aa0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7aa4:	601a      	str	r2, [r3, #0]
}
    7aa6:	e7d7      	b.n	7a58 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    7aa8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    7aac:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    7ab0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    7ab4:	e7d0      	b.n	7a58 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    7ab6:	4805      	ldr	r0, [pc, #20]	; (7acc <qspi_xfer+0xf4>)
    7ab8:	e7cf      	b.n	7a5a <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    7aba:	4805      	ldr	r0, [pc, #20]	; (7ad0 <qspi_xfer+0xf8>)
    7abc:	e7cd      	b.n	7a5a <qspi_xfer+0x82>
    7abe:	bf00      	nop
    7ac0:	200141b0 	.word	0x200141b0
    7ac4:	5002b000 	.word	0x5002b000
    7ac8:	0bad0000 	.word	0x0bad0000
    7acc:	0bad000a 	.word	0x0bad000a
    7ad0:	0bad000b 	.word	0x0bad000b

00007ad4 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    7ad4:	b538      	push	{r3, r4, r5, lr}
    7ad6:	f24c 3450 	movw	r4, #50000	; 0xc350
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ada:	4d06      	ldr	r5, [pc, #24]	; (7af4 <qspi_ready_wait+0x20>)
    7adc:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    7ae0:	b933      	cbnz	r3, 7af0 <qspi_ready_wait+0x1c>
    7ae2:	200a      	movs	r0, #10
    7ae4:	f005 fd48 	bl	d578 <nrfx_busy_wait>
    7ae8:	3c01      	subs	r4, #1
    7aea:	d1f7      	bne.n	7adc <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    7aec:	4802      	ldr	r0, [pc, #8]	; (7af8 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    7aee:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    7af0:	4802      	ldr	r0, [pc, #8]	; (7afc <qspi_ready_wait+0x28>)
    7af2:	e7fc      	b.n	7aee <qspi_ready_wait+0x1a>
    7af4:	5002b000 	.word	0x5002b000
    7af8:	0bad0007 	.word	0x0bad0007
    7afc:	0bad0000 	.word	0x0bad0000

00007b00 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    7b00:	4b08      	ldr	r3, [pc, #32]	; (7b24 <qspi_event_xfer_handle.constprop.0+0x24>)
    7b02:	689a      	ldr	r2, [r3, #8]
    7b04:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    7b06:	691a      	ldr	r2, [r3, #16]
    7b08:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    7b0a:	699a      	ldr	r2, [r3, #24]
    7b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    7b0e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    7b10:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    7b12:	b132      	cbz	r2, 7b22 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    7b14:	695a      	ldr	r2, [r3, #20]
    7b16:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    7b18:	69da      	ldr	r2, [r3, #28]
    7b1a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    7b1c:	2200      	movs	r2, #0
    7b1e:	60da      	str	r2, [r3, #12]
    7b20:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    7b22:	4770      	bx	lr
    7b24:	200141b0 	.word	0x200141b0

00007b28 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    7b28:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    7b2a:	4a0a      	ldr	r2, [pc, #40]	; (7b54 <nrf_gpio_cfg.constprop.0+0x2c>)
    7b2c:	4c0a      	ldr	r4, [pc, #40]	; (7b58 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    7b2e:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    7b32:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    7b34:	2801      	cmp	r0, #1
    7b36:	bf18      	it	ne
    7b38:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7b3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7b3e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    7b42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    7b46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7b4a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    7b4e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    7b52:	bd10      	pop	{r4, pc}
    7b54:	50842800 	.word	0x50842800
    7b58:	50842500 	.word	0x50842500

00007b5c <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    7b5c:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    7b5e:	4b0e      	ldr	r3, [pc, #56]	; (7b98 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    7b60:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    7b62:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    7b66:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    7b6a:	2807      	cmp	r0, #7
    7b6c:	d813      	bhi.n	7b96 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    7b6e:	e8df f000 	tbb	[pc, r0]
    7b72:	0f11      	.short	0x0f11
    7b74:	080a0b0d 	.word	0x080a0b0d
    7b78:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    7b7a:	0e10      	lsrs	r0, r2, #24
    7b7c:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    7b7e:	0c10      	lsrs	r0, r2, #16
    7b80:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    7b82:	0a10      	lsrs	r0, r2, #8
    7b84:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    7b86:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    7b88:	0e1a      	lsrs	r2, r3, #24
    7b8a:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    7b8c:	0c1a      	lsrs	r2, r3, #16
    7b8e:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    7b90:	0a1a      	lsrs	r2, r3, #8
    7b92:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    7b94:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    7b96:	bd10      	pop	{r4, pc}
    7b98:	5002b000 	.word	0x5002b000

00007b9c <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    7b9c:	3802      	subs	r0, #2
    7b9e:	2807      	cmp	r0, #7
    7ba0:	d81f      	bhi.n	7be2 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    7ba2:	e8df f000 	tbb	[pc, r0]
    7ba6:	2729      	.short	0x2729
    7ba8:	21231125 	.word	0x21231125
    7bac:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    7bae:	79cb      	ldrb	r3, [r1, #7]
    7bb0:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    7bb2:	798a      	ldrb	r2, [r1, #6]
    7bb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    7bb8:	794a      	ldrb	r2, [r1, #5]
    7bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    7bbe:	790a      	ldrb	r2, [r1, #4]
    7bc0:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    7bc2:	4a0e      	ldr	r2, [pc, #56]	; (7bfc <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7bc4:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    7bc8:	78cb      	ldrb	r3, [r1, #3]
    7bca:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    7bcc:	788a      	ldrb	r2, [r1, #2]
    7bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    7bd2:	784a      	ldrb	r2, [r1, #1]
    7bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    7bd8:	780a      	ldrb	r2, [r1, #0]
    7bda:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    7bdc:	4a07      	ldr	r2, [pc, #28]	; (7bfc <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7bde:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    7be2:	4770      	bx	lr
    switch (length)
    7be4:	2300      	movs	r3, #0
    7be6:	e7e4      	b.n	7bb2 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    7be8:	2300      	movs	r3, #0
    7bea:	e7e5      	b.n	7bb8 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    7bec:	2300      	movs	r3, #0
    7bee:	e7e6      	b.n	7bbe <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    7bf0:	2300      	movs	r3, #0
    7bf2:	e7eb      	b.n	7bcc <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    7bf4:	2300      	movs	r3, #0
    7bf6:	e7ec      	b.n	7bd2 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    7bf8:	2300      	movs	r3, #0
    7bfa:	e7ed      	b.n	7bd8 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    7bfc:	5002b000 	.word	0x5002b000

00007c00 <nrfx_qspi_init>:
{
    7c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7c04:	4d6d      	ldr	r5, [pc, #436]	; (7dbc <nrfx_qspi_init+0x1bc>)
{
    7c06:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7c08:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
    7c0c:	460e      	mov	r6, r1
    7c0e:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7c10:	2b00      	cmp	r3, #0
    7c12:	f040 80ce 	bne.w	7db2 <nrfx_qspi_init+0x1b2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7c16:	7cc2      	ldrb	r2, [r0, #19]
    7c18:	b112      	cbz	r2, 7c20 <nrfx_qspi_init+0x20>
    7c1a:	7d03      	ldrb	r3, [r0, #20]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	d16c      	bne.n	7cfa <nrfx_qspi_init+0xfa>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7c20:	7920      	ldrb	r0, [r4, #4]
    7c22:	28ff      	cmp	r0, #255	; 0xff
    7c24:	f000 80c8 	beq.w	7db8 <nrfx_qspi_init+0x1b8>
    7c28:	7963      	ldrb	r3, [r4, #5]
    7c2a:	2bff      	cmp	r3, #255	; 0xff
    7c2c:	f000 80c4 	beq.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7c30:	79a3      	ldrb	r3, [r4, #6]
    7c32:	2bff      	cmp	r3, #255	; 0xff
    7c34:	f000 80c0 	beq.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    7c38:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7c3a:	29ff      	cmp	r1, #255	; 0xff
    7c3c:	f000 80bc 	beq.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    7c40:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    7c42:	f8df c17c 	ldr.w	ip, [pc, #380]	; 7dc0 <nrfx_qspi_init+0x1c0>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    7c46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    7c4a:	4563      	cmp	r3, ip
    7c4c:	f040 80b4 	bne.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    7c50:	290e      	cmp	r1, #14
    7c52:	f040 80b1 	bne.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7c56:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    7c58:	2bff      	cmp	r3, #255	; 0xff
    7c5a:	d002      	beq.n	7c62 <nrfx_qspi_init+0x62>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7c5c:	2b0f      	cmp	r3, #15
    7c5e:	f040 80ab 	bne.w	7db8 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7c62:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    7c64:	2bff      	cmp	r3, #255	; 0xff
    7c66:	d002      	beq.n	7c6e <nrfx_qspi_init+0x6e>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    7c68:	2b10      	cmp	r3, #16
    7c6a:	f040 80a5 	bne.w	7db8 <nrfx_qspi_init+0x1b8>
    if (!p_config->skip_gpio_cfg)
    7c6e:	b9b2      	cbnz	r2, 7c9e <nrfx_qspi_init+0x9e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    7c70:	2103      	movs	r1, #3
    7c72:	f7ff ff59 	bl	7b28 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    7c76:	7960      	ldrb	r0, [r4, #5]
    7c78:	f7ff ff56 	bl	7b28 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    7c7c:	79a0      	ldrb	r0, [r4, #6]
    7c7e:	f7ff ff53 	bl	7b28 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    7c82:	79e0      	ldrb	r0, [r4, #7]
    7c84:	f7ff ff50 	bl	7b28 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7c88:	7a20      	ldrb	r0, [r4, #8]
    7c8a:	28ff      	cmp	r0, #255	; 0xff
    7c8c:	d001      	beq.n	7c92 <nrfx_qspi_init+0x92>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    7c8e:	f7ff ff4b 	bl	7b28 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7c92:	7a60      	ldrb	r0, [r4, #9]
    7c94:	28ff      	cmp	r0, #255	; 0xff
    7c96:	d002      	beq.n	7c9e <nrfx_qspi_init+0x9e>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    7c98:	2103      	movs	r1, #3
    7c9a:	f7ff ff45 	bl	7b28 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    7c9e:	7d23      	ldrb	r3, [r4, #20]
    7ca0:	bb5b      	cbnz	r3, 7cfa <nrfx_qspi_init+0xfa>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    7ca2:	7923      	ldrb	r3, [r4, #4]
    7ca4:	2bff      	cmp	r3, #255	; 0xff
    7ca6:	bf14      	ite	ne
    7ca8:	461a      	movne	r2, r3
    7caa:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7cae:	4b45      	ldr	r3, [pc, #276]	; (7dc4 <nrfx_qspi_init+0x1c4>)
    7cb0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    7cb4:	7962      	ldrb	r2, [r4, #5]
    7cb6:	2aff      	cmp	r2, #255	; 0xff
    7cb8:	bf08      	it	eq
    7cba:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7cbe:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    7cc2:	79a2      	ldrb	r2, [r4, #6]
    7cc4:	2aff      	cmp	r2, #255	; 0xff
    7cc6:	bf08      	it	eq
    7cc8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7ccc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    7cd0:	79e2      	ldrb	r2, [r4, #7]
    7cd2:	2aff      	cmp	r2, #255	; 0xff
    7cd4:	bf08      	it	eq
    7cd6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7cda:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    7cde:	7a22      	ldrb	r2, [r4, #8]
    7ce0:	2aff      	cmp	r2, #255	; 0xff
    7ce2:	bf08      	it	eq
    7ce4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7ce8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    7cec:	7a62      	ldrb	r2, [r4, #9]
    7cee:	2aff      	cmp	r2, #255	; 0xff
    7cf0:	bf08      	it	eq
    7cf2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7cf6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
    7cfa:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cfc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    7cfe:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 7dc4 <nrfx_qspi_init+0x1c4>
    7d02:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d06:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d0a:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7d0e:	f7ff fee1 	bl	7ad4 <qspi_ready_wait>
    7d12:	4b2d      	ldr	r3, [pc, #180]	; (7dc8 <nrfx_qspi_init+0x1c8>)
    7d14:	4298      	cmp	r0, r3
    7d16:	d04d      	beq.n	7db4 <nrfx_qspi_init+0x1b4>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    7d18:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    7d1a:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7d1e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    7d20:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
    7d22:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7d24:	019b      	lsls	r3, r3, #6
    7d26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    7d2a:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    7d2c:	7b62      	ldrb	r2, [r4, #13]
    7d2e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
    7d32:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    7d36:	7c62      	ldrb	r2, [r4, #17]
    return p_reg->IFCONFIG0;
    7d38:	f8d8 3544 	ldr.w	r3, [r8, #1348]	; 0x544
    7d3c:	bba2      	cbnz	r2, 7da8 <nrfx_qspi_init+0x1a8>
        regval |= ((1 << 16) | (1 << 17));
    7d3e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    7d42:	4920      	ldr	r1, [pc, #128]	; (7dc4 <nrfx_qspi_init+0x1c4>)
    7d44:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    7d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    7d4c:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7d50:	f8d1 2600 	ldr.w	r2, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
    7d54:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    7d56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    7d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
    7d5e:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    7d60:	7be2      	ldrb	r2, [r4, #15]
    7d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    7d66:	7c22      	ldrb	r2, [r4, #16]
    7d68:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    7d6c:	7c62      	ldrb	r2, [r4, #17]
    7d6e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
    7d72:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    7d76:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    7d78:	e9c5 6700 	strd	r6, r7, [r5]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    7d7c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    if (handler)
    7d80:	b116      	cbz	r6, 7d88 <nrfx_qspi_init+0x188>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    7d82:	202b      	movs	r0, #43	; 0x2b
    7d84:	f7fc f842 	bl	3e0c <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
    7d88:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7d8a:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    7d8c:	e9c5 1102 	strd	r1, r1, [r5, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    7d90:	4b0c      	ldr	r3, [pc, #48]	; (7dc4 <nrfx_qspi_init+0x1c4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7d92:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
    7d96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d9a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d9e:	601a      	str	r2, [r3, #0]
}
    7da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
    7da4:	f7ff be96 	b.w	7ad4 <qspi_ready_wait>
        regval &= ~(1 << 17);
    7da8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    7dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7db0:	e7c7      	b.n	7d42 <nrfx_qspi_init+0x142>
        return NRFX_ERROR_INVALID_STATE;
    7db2:	4806      	ldr	r0, [pc, #24]	; (7dcc <nrfx_qspi_init+0x1cc>)
}
    7db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7db8:	4805      	ldr	r0, [pc, #20]	; (7dd0 <nrfx_qspi_init+0x1d0>)
    7dba:	e7fb      	b.n	7db4 <nrfx_qspi_init+0x1b4>
    7dbc:	200141b0 	.word	0x200141b0
    7dc0:	000d1211 	.word	0x000d1211
    7dc4:	5002b000 	.word	0x5002b000
    7dc8:	0bad0007 	.word	0x0bad0007
    7dcc:	0bad0005 	.word	0x0bad0005
    7dd0:	0bad0004 	.word	0x0bad0004

00007dd4 <nrfx_qspi_cinstr_xfer>:
{
    7dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd8:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7dda:	4a1f      	ldr	r2, [pc, #124]	; (7e58 <nrfx_qspi_cinstr_xfer+0x84>)
{
    7ddc:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7dde:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    7de2:	2a01      	cmp	r2, #1
    7de4:	d135      	bne.n	7e52 <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
    7de6:	b111      	cbz	r1, 7dee <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    7de8:	7840      	ldrb	r0, [r0, #1]
    7dea:	f7ff fed7 	bl	7b9c <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    7dee:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7df0:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    7df2:	4e1a      	ldr	r6, [pc, #104]	; (7e5c <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7df4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 7e60 <nrfx_qspi_cinstr_xfer+0x8c>
    7df8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7dfc:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e00:	6033      	str	r3, [r6, #0]
    7e02:	f7ff fe67 	bl	7ad4 <qspi_ready_wait>
    7e06:	4540      	cmp	r0, r8
    7e08:	d102      	bne.n	7e10 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
    7e0a:	4815      	ldr	r0, [pc, #84]	; (7e60 <nrfx_qspi_cinstr_xfer+0x8c>)
}
    7e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e10:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7e14:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7e16:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7e18:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7e1e:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7e20:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7e22:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7e24:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7e28:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7e2a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    7e2e:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7e30:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7e34:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7e38:	f7ff fe4c 	bl	7ad4 <qspi_ready_wait>
    7e3c:	4540      	cmp	r0, r8
    7e3e:	d0e4      	beq.n	7e0a <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e40:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
    7e44:	b11d      	cbz	r5, 7e4e <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    7e46:	4629      	mov	r1, r5
    7e48:	7860      	ldrb	r0, [r4, #1]
    7e4a:	f7ff fe87 	bl	7b5c <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
    7e4e:	4805      	ldr	r0, [pc, #20]	; (7e64 <nrfx_qspi_cinstr_xfer+0x90>)
    7e50:	e7dc      	b.n	7e0c <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
    7e52:	4805      	ldr	r0, [pc, #20]	; (7e68 <nrfx_qspi_cinstr_xfer+0x94>)
    7e54:	e7da      	b.n	7e0c <nrfx_qspi_cinstr_xfer+0x38>
    7e56:	bf00      	nop
    7e58:	200141b0 	.word	0x200141b0
    7e5c:	5002b000 	.word	0x5002b000
    7e60:	0bad0007 	.word	0x0bad0007
    7e64:	0bad0000 	.word	0x0bad0000
    7e68:	0bad000b 	.word	0x0bad000b

00007e6c <nrfx_qspi_mem_busy_check>:
{
    7e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    7e6e:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    7e70:	4a0c      	ldr	r2, [pc, #48]	; (7ea4 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7e72:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    7e74:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7e76:	f10d 0207 	add.w	r2, sp, #7
    7e7a:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    7e7c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    7e80:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    7e84:	f7ff ffa6 	bl	7dd4 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    7e88:	4b07      	ldr	r3, [pc, #28]	; (7ea8 <nrfx_qspi_mem_busy_check+0x3c>)
    7e8a:	4298      	cmp	r0, r3
    7e8c:	d106      	bne.n	7e9c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    7e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    7e92:	f013 0f01 	tst.w	r3, #1
    7e96:	4b05      	ldr	r3, [pc, #20]	; (7eac <nrfx_qspi_mem_busy_check+0x40>)
    7e98:	bf18      	it	ne
    7e9a:	4618      	movne	r0, r3
}
    7e9c:	b005      	add	sp, #20
    7e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7ea2:	bf00      	nop
    7ea4:	01000205 	.word	0x01000205
    7ea8:	0bad0000 	.word	0x0bad0000
    7eac:	0bad000b 	.word	0x0bad000b

00007eb0 <nrfx_qspi_uninit>:
{
    7eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    7eb4:	202b      	movs	r0, #43	; 0x2b
    7eb6:	f7fb ffb7 	bl	3e28 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    7eba:	4b21      	ldr	r3, [pc, #132]	; (7f40 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    7ebc:	4e21      	ldr	r6, [pc, #132]	; (7f44 <nrfx_qspi_uninit+0x94>)
    7ebe:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    7ec2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    7ec6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    7eca:	bf04      	itt	eq
    7ecc:	4a1e      	ldreq	r2, [pc, #120]	; (7f48 <nrfx_qspi_uninit+0x98>)
    7ece:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    7ed2:	2201      	movs	r2, #1
    7ed4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ed8:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    7eda:	2200      	movs	r2, #0
    7edc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ee0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    7ee4:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    7ee8:	bb22      	cbnz	r2, 7f34 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    7eea:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    7eee:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    7ef2:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    7ef4:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    7ef8:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    7efc:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    7f00:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    7f04:	f005 fcd9 	bl	d8ba <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    7f08:	fa5f f089 	uxtb.w	r0, r9
    7f0c:	f005 fcd5 	bl	d8ba <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    7f10:	fa5f f088 	uxtb.w	r0, r8
    7f14:	f005 fcd1 	bl	d8ba <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    7f18:	b2f8      	uxtb	r0, r7
    7f1a:	f005 fcce 	bl	d8ba <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7f1e:	b2e8      	uxtb	r0, r5
    7f20:	28ff      	cmp	r0, #255	; 0xff
    7f22:	b2e4      	uxtb	r4, r4
    7f24:	d001      	beq.n	7f2a <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    7f26:	f005 fcc8 	bl	d8ba <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7f2a:	2cff      	cmp	r4, #255	; 0xff
    7f2c:	d002      	beq.n	7f34 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    7f2e:	4620      	mov	r0, r4
    7f30:	f005 fcc3 	bl	d8ba <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    7f34:	2300      	movs	r3, #0
    7f36:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    7f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f3e:	bf00      	nop
    7f40:	5002b000 	.word	0x5002b000
    7f44:	200141b0 	.word	0x200141b0
    7f48:	00030100 	.word	0x00030100

00007f4c <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    7f4c:	078b      	lsls	r3, r1, #30
    7f4e:	d121      	bne.n	7f94 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    7f50:	4a12      	ldr	r2, [pc, #72]	; (7f9c <nrfx_qspi_erase+0x50>)
    7f52:	6813      	ldr	r3, [r2, #0]
    7f54:	b11b      	cbz	r3, 7f5e <nrfx_qspi_erase+0x12>
    7f56:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    7f5a:	2b01      	cmp	r3, #1
    7f5c:	d11c      	bne.n	7f98 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    7f5e:	2304      	movs	r3, #4
    7f60:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    7f64:	4b0e      	ldr	r3, [pc, #56]	; (7fa0 <nrfx_qspi_erase+0x54>)
    7f66:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f6a:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    7f6c:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f70:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f74:	2101      	movs	r1, #1
    7f76:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    7f78:	6810      	ldr	r0, [r2, #0]
    7f7a:	b940      	cbnz	r0, 7f8e <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f7c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7f80:	2900      	cmp	r1, #0
    7f82:	d0fb      	beq.n	7f7c <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    7f84:	2301      	movs	r3, #1
    7f86:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    7f8a:	4806      	ldr	r0, [pc, #24]	; (7fa4 <nrfx_qspi_erase+0x58>)
    7f8c:	4770      	bx	lr
    p_reg->INTENSET = mask;
    7f8e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    7f92:	e7fa      	b.n	7f8a <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    7f94:	4804      	ldr	r0, [pc, #16]	; (7fa8 <nrfx_qspi_erase+0x5c>)
    7f96:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    7f98:	4804      	ldr	r0, [pc, #16]	; (7fac <nrfx_qspi_erase+0x60>)
}
    7f9a:	4770      	bx	lr
    7f9c:	200141b0 	.word	0x200141b0
    7fa0:	5002b000 	.word	0x5002b000
    7fa4:	0bad0000 	.word	0x0bad0000
    7fa8:	0bad000a 	.word	0x0bad000a
    7fac:	0bad000b 	.word	0x0bad000b

00007fb0 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    7fb0:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fb2:	4b17      	ldr	r3, [pc, #92]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7fb8:	b1e2      	cbz	r2, 7ff4 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7fba:	2200      	movs	r2, #0
    switch (m_cb.state)
    7fbc:	4c15      	ldr	r4, [pc, #84]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7fc2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    7fc6:	2a03      	cmp	r2, #3
    7fc8:	d015      	beq.n	7ff6 <nrfx_qspi_irq_handler+0x46>
    7fca:	2a04      	cmp	r2, #4
    7fcc:	d015      	beq.n	7ffa <nrfx_qspi_irq_handler+0x4a>
    7fce:	2a02      	cmp	r2, #2
    7fd0:	d104      	bne.n	7fdc <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    7fd2:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7fd4:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    7fd8:	f7ff fd92 	bl	7b00 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    7fdc:	68a3      	ldr	r3, [r4, #8]
    7fde:	b913      	cbnz	r3, 7fe6 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    7fe0:	2301      	movs	r3, #1
    7fe2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    7fe6:	e9d4 3100 	ldrd	r3, r1, [r4]
    7fea:	2000      	movs	r0, #0
    7fec:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    7fee:	2300      	movs	r3, #0
    7ff0:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    7ff4:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7ff6:	2302      	movs	r3, #2
    7ff8:	e7ec      	b.n	7fd4 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    7ffa:	2203      	movs	r2, #3
    7ffc:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    8000:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    8004:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    8006:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    800a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    800e:	e7e5      	b.n	7fdc <nrfx_qspi_irq_handler+0x2c>
    8010:	5002b000 	.word	0x5002b000
    8014:	200141b0 	.word	0x200141b0

00008018 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8018:	4b05      	ldr	r3, [pc, #20]	; (8030 <ep_state_access+0x18>)
    801a:	f010 0f80 	tst.w	r0, #128	; 0x80
    801e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    8022:	bf08      	it	eq
    8024:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    8026:	f000 000f 	and.w	r0, r0, #15
}
    802a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    802e:	4770      	bx	lr
    8030:	2001438c 	.word	0x2001438c

00008034 <ev_usbreset_handler>:
 * @{
 */

static void ev_usbreset_handler(void)
{
    m_bus_suspend = false;
    8034:	2300      	movs	r3, #0
{
    8036:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    8038:	4a06      	ldr	r2, [pc, #24]	; (8054 <ev_usbreset_handler+0x20>)

    const nrfx_usbd_evt_t evt = {
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    803a:	a801      	add	r0, sp, #4
    m_bus_suspend = false;
    803c:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    803e:	4a06      	ldr	r2, [pc, #24]	; (8058 <ev_usbreset_handler+0x24>)
    8040:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    8042:	2301      	movs	r3, #1
    8044:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    8046:	4b05      	ldr	r3, [pc, #20]	; (805c <ev_usbreset_handler+0x28>)
    8048:	681b      	ldr	r3, [r3, #0]
    804a:	4798      	blx	r3
}
    804c:	b003      	add	sp, #12
    804e:	f85d fb04 	ldr.w	pc, [sp], #4
    8052:	bf00      	nop
    8054:	2005688e 	.word	0x2005688e
    8058:	2005688d 	.word	0x2005688d
    805c:	20014424 	.word	0x20014424

00008060 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    8060:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    8062:	4b19      	ldr	r3, [pc, #100]	; (80c8 <ev_usbevent_handler+0x68>)
    8064:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    8068:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    806c:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    806e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8072:	d508      	bpl.n	8086 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8074:	2201      	movs	r2, #1
    8076:	4b15      	ldr	r3, [pc, #84]	; (80cc <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8078:	a801      	add	r0, sp, #4
        m_bus_suspend = true;
    807a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    807c:	2302      	movs	r3, #2
    807e:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    8080:	4b13      	ldr	r3, [pc, #76]	; (80d0 <ev_usbevent_handler+0x70>)
    8082:	681b      	ldr	r3, [r3, #0]
    8084:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8086:	05a2      	lsls	r2, r4, #22
    8088:	d508      	bpl.n	809c <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    808a:	2200      	movs	r2, #0
    808c:	4b0f      	ldr	r3, [pc, #60]	; (80cc <ev_usbevent_handler+0x6c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    808e:	a801      	add	r0, sp, #4
        m_bus_suspend = false;
    8090:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8092:	2303      	movs	r3, #3
    8094:	9301      	str	r3, [sp, #4]
        m_event_handler(&evt);
    8096:	4b0e      	ldr	r3, [pc, #56]	; (80d0 <ev_usbevent_handler+0x70>)
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    809c:	0563      	lsls	r3, r4, #21
    809e:	d510      	bpl.n	80c2 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    80a0:	4b0a      	ldr	r3, [pc, #40]	; (80cc <ev_usbevent_handler+0x6c>)
    80a2:	781a      	ldrb	r2, [r3, #0]
    80a4:	b16a      	cbz	r2, 80c2 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    80a6:	2200      	movs	r2, #0
    80a8:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    80aa:	2201      	movs	r2, #1
    80ac:	4b06      	ldr	r3, [pc, #24]	; (80c8 <ev_usbevent_handler+0x68>)
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    80ae:	a801      	add	r0, sp, #4
    80b0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    80b4:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    80b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
            const nrfx_usbd_evt_t evt = {
    80b8:	2304      	movs	r3, #4
    80ba:	9301      	str	r3, [sp, #4]
            m_event_handler(&evt);
    80bc:	4b04      	ldr	r3, [pc, #16]	; (80d0 <ev_usbevent_handler+0x70>)
    80be:	681b      	ldr	r3, [r3, #0]
    80c0:	4798      	blx	r3
        }
    }
}
    80c2:	b002      	add	sp, #8
    80c4:	bd10      	pop	{r4, pc}
    80c6:	bf00      	nop
    80c8:	50036000 	.word	0x50036000
    80cc:	2005688e 	.word	0x2005688e
    80d0:	20014424 	.word	0x20014424

000080d4 <nrfx_usbd_feeder_flash>:
{
    80d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80d6:	684b      	ldr	r3, [r1, #4]
    80d8:	4606      	mov	r6, r0
    80da:	429a      	cmp	r2, r3
    80dc:	bf28      	it	cs
    80de:	461a      	movcs	r2, r3
    80e0:	4615      	mov	r5, r2
    80e2:	460c      	mov	r4, r1
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    80e4:	4f08      	ldr	r7, [pc, #32]	; (8108 <nrfx_usbd_feeder_flash+0x34>)
    80e6:	6809      	ldr	r1, [r1, #0]
    80e8:	4638      	mov	r0, r7
    80ea:	f003 fad5 	bl	b698 <memcpy>
    p_next->size = tx_size;
    80ee:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    80f2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    80f4:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    80f6:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    80f8:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    80fa:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    80fc:	6023      	str	r3, [r4, #0]
}
    80fe:	3800      	subs	r0, #0
    8100:	bf18      	it	ne
    8102:	2001      	movne	r0, #1
    8104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8106:	bf00      	nop
    8108:	200141e4 	.word	0x200141e4

0000810c <nrfx_usbd_feeder_flash_zlp>:
{
    810c:	b570      	push	{r4, r5, r6, lr}
    810e:	684b      	ldr	r3, [r1, #4]
    8110:	4606      	mov	r6, r0
    8112:	429a      	cmp	r2, r3
    8114:	bf28      	it	cs
    8116:	461a      	movcs	r2, r3
    8118:	460d      	mov	r5, r1
    811a:	4614      	mov	r4, r2
    if (tx_size != 0)
    811c:	b18a      	cbz	r2, 8142 <nrfx_usbd_feeder_flash_zlp+0x36>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    811e:	6809      	ldr	r1, [r1, #0]
    8120:	4809      	ldr	r0, [pc, #36]	; (8148 <nrfx_usbd_feeder_flash_zlp+0x3c>)
    8122:	f003 fab9 	bl	b698 <memcpy>
        p_next->p_data.tx = p_buffer;
    8126:	4b08      	ldr	r3, [pc, #32]	; (8148 <nrfx_usbd_feeder_flash_zlp+0x3c>)
    p_next->size = tx_size;
    8128:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    812c:	686b      	ldr	r3, [r5, #4]
}
    812e:	1e20      	subs	r0, r4, #0
    p_transfer->size -= tx_size;
    8130:	eba3 0304 	sub.w	r3, r3, r4
    8134:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    8136:	682b      	ldr	r3, [r5, #0]
}
    8138:	bf18      	it	ne
    813a:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    813c:	4423      	add	r3, r4
    813e:	602b      	str	r3, [r5, #0]
}
    8140:	bd70      	pop	{r4, r5, r6, pc}
    8142:	4613      	mov	r3, r2
    8144:	e7f0      	b.n	8128 <nrfx_usbd_feeder_flash_zlp+0x1c>
    8146:	bf00      	nop
    8148:	200141e4 	.word	0x200141e4

0000814c <ev_sof_handler>:
    nrfx_usbd_evt_t evt =  {
    814c:	2300      	movs	r3, #0
{
    814e:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    8150:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8154:	4b0b      	ldr	r3, [pc, #44]	; (8184 <ev_sof_handler+0x38>)
    m_event_handler(&evt);
    8156:	a801      	add	r0, sp, #4
    8158:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    815c:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    8160:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    8164:	4a08      	ldr	r2, [pc, #32]	; (8188 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8166:	2b00      	cmp	r3, #0
    8168:	bf14      	ite	ne
    816a:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    816e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    8172:	6813      	ldr	r3, [r2, #0]
    8174:	430b      	orrs	r3, r1
    8176:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    8178:	4b04      	ldr	r3, [pc, #16]	; (818c <ev_sof_handler+0x40>)
    817a:	681b      	ldr	r3, [r3, #0]
    817c:	4798      	blx	r3
}
    817e:	b003      	add	sp, #12
    8180:	f85d fb04 	ldr.w	pc, [sp], #4
    8184:	50036000 	.word	0x50036000
    8188:	20014420 	.word	0x20014420
    818c:	20014424 	.word	0x20014424

00008190 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8190:	4b04      	ldr	r3, [pc, #16]	; (81a4 <atomic_and.constprop.0.isra.0+0x14>)
    8192:	e8d3 1fef 	ldaex	r1, [r3]
    8196:	4001      	ands	r1, r0
    8198:	e8c3 1fe2 	stlex	r2, r1, [r3]
    819c:	2a00      	cmp	r2, #0
    819e:	d1f8      	bne.n	8192 <atomic_and.constprop.0.isra.0+0x2>
}
    81a0:	4770      	bx	lr
    81a2:	bf00      	nop
    81a4:	2001441c 	.word	0x2001441c

000081a8 <nrf_usbd_epin_dma_handler>:
    m_dma_pending = false;
    81a8:	2200      	movs	r2, #0
{
    81aa:	b508      	push	{r3, lr}
    m_dma_pending = false;
    81ac:	4b0b      	ldr	r3, [pc, #44]	; (81dc <nrf_usbd_epin_dma_handler+0x34>)
{
    81ae:	4601      	mov	r1, r0
    m_dma_pending = false;
    81b0:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    81b2:	f7ff ff31 	bl	8018 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    81b6:	7b83      	ldrb	r3, [r0, #14]
    81b8:	2b03      	cmp	r3, #3
    81ba:	d10a      	bne.n	81d2 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    81bc:	4608      	mov	r0, r1
    81be:	f005 fbc8 	bl	d952 <ep2bit>
    81c2:	2301      	movs	r3, #1
    81c4:	fa03 f000 	lsl.w	r0, r3, r0
    81c8:	43c0      	mvns	r0, r0
}
    81ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    81ce:	f7ff bfdf 	b.w	8190 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    81d2:	6803      	ldr	r3, [r0, #0]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d0f1      	beq.n	81bc <nrf_usbd_epin_dma_handler+0x14>
}
    81d8:	bd08      	pop	{r3, pc}
    81da:	bf00      	nop
    81dc:	2005688c 	.word	0x2005688c

000081e0 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    81e0:	2200      	movs	r2, #0
    81e2:	4b08      	ldr	r3, [pc, #32]	; (8204 <nrf_usbd_ep0in_dma_handler+0x24>)
    81e4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    81e6:	4b08      	ldr	r3, [pc, #32]	; (8208 <nrf_usbd_ep0in_dma_handler+0x28>)
    81e8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    81ec:	2a03      	cmp	r2, #3
    81ee:	d103      	bne.n	81f8 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    81f0:	f06f 0001 	mvn.w	r0, #1
    81f4:	f7ff bfcc 	b.w	8190 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    81f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    81fc:	2b00      	cmp	r3, #0
    81fe:	d0f7      	beq.n	81f0 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8200:	4770      	bx	lr
    8202:	bf00      	nop
    8204:	2005688c 	.word	0x2005688c
    8208:	200142fc 	.word	0x200142fc

0000820c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    820c:	2201      	movs	r2, #1
{
    820e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    8210:	fa02 f501 	lsl.w	r5, r2, r1
    8214:	491c      	ldr	r1, [pc, #112]	; (8288 <usbd_ep_data_handler+0x7c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8216:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    821a:	680b      	ldr	r3, [r1, #0]
{
    821c:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    821e:	ea43 0305 	orr.w	r3, r3, r5
    8222:	4e1a      	ldr	r6, [pc, #104]	; (828c <usbd_ep_data_handler+0x80>)
    8224:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    8226:	d024      	beq.n	8272 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8228:	4b19      	ldr	r3, [pc, #100]	; (8290 <usbd_ep_data_handler+0x84>)
    822a:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    822e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8232:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8236:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    823a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    823c:	b132      	cbz	r2, 824c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    823e:	2200      	movs	r2, #0
            if (ep != NRFX_USBD_EPIN0)
    8240:	2880      	cmp	r0, #128	; 0x80
    8242:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	d011      	beq.n	826c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    8248:	f7ff ffae 	bl	81a8 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    824c:	6833      	ldr	r3, [r6, #0]
    824e:	402b      	ands	r3, r5
    8250:	d10a      	bne.n	8268 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8252:	2206      	movs	r2, #6
    8254:	f88d 4006 	strb.w	r4, [sp, #6]
    8258:	f88d 2004 	strb.w	r2, [sp, #4]
    825c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8260:	4b0c      	ldr	r3, [pc, #48]	; (8294 <usbd_ep_data_handler+0x88>)
    8262:	a801      	add	r0, sp, #4
    8264:	681b      	ldr	r3, [r3, #0]
    8266:	4798      	blx	r3
}
    8268:	b002      	add	sp, #8
    826a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    826c:	f7ff ffb8 	bl	81e0 <nrf_usbd_ep0in_dma_handler>
    8270:	e7ec      	b.n	824c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8272:	6833      	ldr	r3, [r6, #0]
    8274:	421d      	tst	r5, r3
    8276:	d1f7      	bne.n	8268 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    8278:	2306      	movs	r3, #6
    827a:	f88d 0006 	strb.w	r0, [sp, #6]
    827e:	f88d 3004 	strb.w	r3, [sp, #4]
    8282:	f88d 2007 	strb.w	r2, [sp, #7]
    8286:	e7eb      	b.n	8260 <usbd_ep_data_handler+0x54>
    8288:	20014420 	.word	0x20014420
    828c:	2001441c 	.word	0x2001441c
    8290:	0000f0ac 	.word	0x0000f0ac
    8294:	20014424 	.word	0x20014424

00008298 <ev_setup_data_handler>:
{
    8298:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    829a:	4b05      	ldr	r3, [pc, #20]	; (82b0 <ev_setup_data_handler+0x18>)
    829c:	781a      	ldrb	r2, [r3, #0]
    829e:	4610      	mov	r0, r2
    82a0:	f005 fb57 	bl	d952 <ep2bit>
}
    82a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    82a8:	4601      	mov	r1, r0
    82aa:	4610      	mov	r0, r2
    82ac:	f7ff bfae 	b.w	820c <usbd_ep_data_handler>
    82b0:	2005688d 	.word	0x2005688d

000082b4 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    82b4:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    82b6:	2200      	movs	r2, #0
    82b8:	4b0d      	ldr	r3, [pc, #52]	; (82f0 <ev_dma_epout8_handler+0x3c>)
    82ba:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    82bc:	4b0d      	ldr	r3, [pc, #52]	; (82f4 <ev_dma_epout8_handler+0x40>)
    82be:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    82c2:	2a03      	cmp	r2, #3
    82c4:	d010      	beq.n	82e8 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    82c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    82ca:	b96b      	cbnz	r3, 82e8 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    82cc:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    82d0:	f7ff ff5e 	bl	8190 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    82d4:	2306      	movs	r3, #6
    82d6:	f88d 3004 	strb.w	r3, [sp, #4]
    82da:	2308      	movs	r3, #8
    82dc:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    82e0:	4b05      	ldr	r3, [pc, #20]	; (82f8 <ev_dma_epout8_handler+0x44>)
    82e2:	a801      	add	r0, sp, #4
    82e4:	681b      	ldr	r3, [r3, #0]
    82e6:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    82e8:	b003      	add	sp, #12
    82ea:	f85d fb04 	ldr.w	pc, [sp], #4
    82ee:	bf00      	nop
    82f0:	2005688c 	.word	0x2005688c
    82f4:	200142fc 	.word	0x200142fc
    82f8:	20014424 	.word	0x20014424

000082fc <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    82fc:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    82fe:	2200      	movs	r2, #0
    8300:	4b10      	ldr	r3, [pc, #64]	; (8344 <ev_dma_epin8_handler+0x48>)
    8302:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8304:	4b10      	ldr	r3, [pc, #64]	; (8348 <ev_dma_epin8_handler+0x4c>)
    8306:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    830a:	2a03      	cmp	r2, #3
    830c:	d106      	bne.n	831c <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    830e:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8312:	b003      	add	sp, #12
    8314:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8318:	f7ff bf3a 	b.w	8190 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    831c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8320:	b96b      	cbnz	r3, 833e <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8322:	f46f 7080 	mvn.w	r0, #256	; 0x100
    8326:	f7ff ff33 	bl	8190 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    832a:	2306      	movs	r3, #6
    832c:	f88d 3004 	strb.w	r3, [sp, #4]
    8330:	2388      	movs	r3, #136	; 0x88
    8332:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8336:	4b05      	ldr	r3, [pc, #20]	; (834c <ev_dma_epin8_handler+0x50>)
    8338:	a801      	add	r0, sp, #4
    833a:	681b      	ldr	r3, [r3, #0]
    833c:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    833e:	b003      	add	sp, #12
    8340:	f85d fb04 	ldr.w	pc, [sp], #4
    8344:	2005688c 	.word	0x2005688c
    8348:	200142fc 	.word	0x200142fc
    834c:	20014424 	.word	0x20014424

00008350 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8350:	2300      	movs	r3, #0
    8352:	4a02      	ldr	r2, [pc, #8]	; (835c <nrfx_usbd_uninit+0xc>)
    8354:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    8356:	4a02      	ldr	r2, [pc, #8]	; (8360 <nrfx_usbd_uninit+0x10>)
    8358:	7013      	strb	r3, [r2, #0]
    return;
}
    835a:	4770      	bx	lr
    835c:	20014424 	.word	0x20014424
    8360:	2005688f 	.word	0x2005688f

00008364 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    8364:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8368:	4b13      	ldr	r3, [pc, #76]	; (83b8 <nrfx_usbd_enable+0x54>)
    836a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    836e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    8372:	2201      	movs	r2, #1
    8374:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8378:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    837c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    8380:	0512      	lsls	r2, r2, #20
    8382:	d5fb      	bpl.n	837c <nrfx_usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    8384:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8388:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    838c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8390:	2280      	movs	r2, #128	; 0x80
    8392:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    8396:	2200      	movs	r2, #0
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8398:	f240 11ff 	movw	r1, #511	; 0x1ff
    839c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    83a0:	4b06      	ldr	r3, [pc, #24]	; (83bc <nrfx_usbd_enable+0x58>)
    83a2:	6019      	str	r1, [r3, #0]
    m_ep_dma_waiting = 0;
    83a4:	4b06      	ldr	r3, [pc, #24]	; (83c0 <nrfx_usbd_enable+0x5c>)
    83a6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    83a8:	4b06      	ldr	r3, [pc, #24]	; (83c4 <nrfx_usbd_enable+0x60>)
    83aa:	701a      	strb	r2, [r3, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    83ac:	4b06      	ldr	r3, [pc, #24]	; (83c8 <nrfx_usbd_enable+0x64>)
    83ae:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    83b0:	2202      	movs	r2, #2
    83b2:	4b06      	ldr	r3, [pc, #24]	; (83cc <nrfx_usbd_enable+0x68>)
    83b4:	701a      	strb	r2, [r3, #0]
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    83b6:	4770      	bx	lr
    83b8:	50036000 	.word	0x50036000
    83bc:	20014420 	.word	0x20014420
    83c0:	2001441c 	.word	0x2001441c
    83c4:	2005688c 	.word	0x2005688c
    83c8:	2005688d 	.word	0x2005688d
    83cc:	2005688f 	.word	0x2005688f

000083d0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    83d0:	2200      	movs	r2, #0
    83d2:	4b0a      	ldr	r3, [pc, #40]	; (83fc <nrfx_usbd_start+0x2c>)
{
    83d4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    83d6:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    83d8:	4a09      	ldr	r2, [pc, #36]	; (8400 <nrfx_usbd_start+0x30>)
    83da:	4b0a      	ldr	r3, [pc, #40]	; (8404 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    83dc:	4c0a      	ldr	r4, [pc, #40]	; (8408 <nrfx_usbd_start+0x38>)
    83de:	2800      	cmp	r0, #0
    83e0:	bf08      	it	eq
    83e2:	4613      	moveq	r3, r2
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    83e4:	2036      	movs	r0, #54	; 0x36
    83e6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    83ea:	f7fb fd0f 	bl	3e0c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    83ee:	2301      	movs	r3, #1
    83f0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    83f4:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    83f8:	bd10      	pop	{r4, pc}
    83fa:	bf00      	nop
    83fc:	2005688e 	.word	0x2005688e
    8400:	01c01407 	.word	0x01c01407
    8404:	01e01407 	.word	0x01e01407
    8408:	50036000 	.word	0x50036000

0000840c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    840c:	4b03      	ldr	r3, [pc, #12]	; (841c <nrfx_usbd_is_enabled+0x10>)
    840e:	7818      	ldrb	r0, [r3, #0]
}
    8410:	2801      	cmp	r0, #1
    8412:	bf94      	ite	ls
    8414:	2000      	movls	r0, #0
    8416:	2001      	movhi	r0, #1
    8418:	4770      	bx	lr
    841a:	bf00      	nop
    841c:	2005688f 	.word	0x2005688f

00008420 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    8420:	b510      	push	{r4, lr}
	__asm__ volatile(
    8422:	f04f 0320 	mov.w	r3, #32
    8426:	f3ef 8111 	mrs	r1, BASEPRI
    842a:	f383 8812 	msr	BASEPRI_MAX, r3
    842e:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    8432:	4b0f      	ldr	r3, [pc, #60]	; (8470 <nrfx_usbd_suspend+0x50>)
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    843a:	b193      	cbz	r3, 8462 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    843c:	4b0d      	ldr	r3, [pc, #52]	; (8474 <nrfx_usbd_suspend+0x54>)
    843e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8442:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8446:	d10c      	bne.n	8462 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8448:	2401      	movs	r4, #1
    844a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    844e:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8452:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8456:	05a4      	lsls	r4, r4, #22
    8458:	d504      	bpl.n	8464 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    845a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    845e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8462:	2000      	movs	r0, #0
	__asm__ volatile(
    8464:	f381 8811 	msr	BASEPRI, r1
    8468:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    846c:	bd10      	pop	{r4, pc}
    846e:	bf00      	nop
    8470:	2005688e 	.word	0x2005688e
    8474:	50036000 	.word	0x50036000

00008478 <nrfx_usbd_init>:
{
    8478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    847a:	4b1c      	ldr	r3, [pc, #112]	; (84ec <nrfx_usbd_init+0x74>)
    847c:	781c      	ldrb	r4, [r3, #0]
    847e:	bb94      	cbnz	r4, 84e6 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    8480:	4a1b      	ldr	r2, [pc, #108]	; (84f0 <nrfx_usbd_init+0x78>)
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8482:	f240 17ff 	movw	r7, #511	; 0x1ff
    m_event_handler = event_handler;
    8486:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8488:	2201      	movs	r2, #1
        p_state->status = NRFX_USBD_EP_OK;
    848a:	4626      	mov	r6, r4
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    848c:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    848e:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8492:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8496:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8498:	bf14      	ite	ne
    849a:	4639      	movne	r1, r7
    849c:	2140      	moveq	r1, #64	; 0x40
    849e:	4628      	mov	r0, r5
    84a0:	f005 fa77 	bl	d992 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    84a4:	4628      	mov	r0, r5
    84a6:	f7ff fdb7 	bl	8018 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    84aa:	3401      	adds	r4, #1
    84ac:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    84ae:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    84b0:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    84b2:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    84b4:	d1eb      	bne.n	848e <nrfx_usbd_init+0x16>
    84b6:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84b8:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    84bc:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    84be:	f014 0f08 	tst.w	r4, #8
    84c2:	b2e6      	uxtb	r6, r4
    84c4:	bf14      	ite	ne
    84c6:	4639      	movne	r1, r7
    84c8:	2140      	moveq	r1, #64	; 0x40
    84ca:	4630      	mov	r0, r6
    84cc:	f005 fa61 	bl	d992 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    84d0:	4630      	mov	r0, r6
    84d2:	f7ff fda1 	bl	8018 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    84d6:	3401      	adds	r4, #1
    84d8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    84da:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    84dc:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    84de:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    84e0:	d1ed      	bne.n	84be <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    84e2:	4804      	ldr	r0, [pc, #16]	; (84f4 <nrfx_usbd_init+0x7c>)
}
    84e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    84e6:	4804      	ldr	r0, [pc, #16]	; (84f8 <nrfx_usbd_init+0x80>)
    84e8:	e7fc      	b.n	84e4 <nrfx_usbd_init+0x6c>
    84ea:	bf00      	nop
    84ec:	2005688f 	.word	0x2005688f
    84f0:	20014424 	.word	0x20014424
    84f4:	0bad0000 	.word	0x0bad0000
    84f8:	0bad0005 	.word	0x0bad0005

000084fc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    84fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8500:	4604      	mov	r4, r0
	__asm__ volatile(
    8502:	f04f 0320 	mov.w	r3, #32
    8506:	f3ef 8611 	mrs	r6, BASEPRI
    850a:	f383 8812 	msr	BASEPRI_MAX, r3
    850e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8512:	f010 090f 	ands.w	r9, r0, #15
    8516:	d103      	bne.n	8520 <nrfx_usbd_ep_transfer+0x24>
    8518:	4b28      	ldr	r3, [pc, #160]	; (85bc <nrfx_usbd_ep_transfer+0xc0>)
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	4283      	cmp	r3, r0
    851e:	d148      	bne.n	85b2 <nrfx_usbd_ep_transfer+0xb6>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8520:	4b27      	ldr	r3, [pc, #156]	; (85c0 <nrfx_usbd_ep_transfer+0xc4>)
    8522:	4f28      	ldr	r7, [pc, #160]	; (85c4 <nrfx_usbd_ep_transfer+0xc8>)
    8524:	681a      	ldr	r2, [r3, #0]
    8526:	683b      	ldr	r3, [r7, #0]
    8528:	43d2      	mvns	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    852a:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    852c:	b292      	uxth	r2, r2
    852e:	431a      	orrs	r2, r3
    8530:	f04f 0801 	mov.w	r8, #1
    const uint8_t ep_bitpos = ep2bit(ep);
    8534:	f005 fa0d 	bl	d952 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8538:	fa08 f800 	lsl.w	r8, r8, r0
    853c:	ea12 0f08 	tst.w	r2, r8
    8540:	d139      	bne.n	85b6 <nrfx_usbd_ep_transfer+0xba>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8542:	4620      	mov	r0, r4
    8544:	f7ff fd68 	bl	8018 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8548:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    854a:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    854c:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    854e:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    8552:	d52a      	bpl.n	85aa <nrfx_usbd_ep_transfer+0xae>
    8554:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8556:	6888      	ldr	r0, [r1, #8]
    8558:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    855c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8560:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8564:	d11e      	bne.n	85a4 <nrfx_usbd_ep_transfer+0xa8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8566:	4a18      	ldr	r2, [pc, #96]	; (85c8 <nrfx_usbd_ep_transfer+0xcc>)
    8568:	4c18      	ldr	r4, [pc, #96]	; (85cc <nrfx_usbd_ep_transfer+0xd0>)
    856a:	2800      	cmp	r0, #0
    856c:	bf08      	it	eq
    856e:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8570:	4817      	ldr	r0, [pc, #92]	; (85d0 <nrfx_usbd_ep_transfer+0xd4>)
    8572:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8574:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    8576:	c907      	ldmia	r1, {r0, r1, r2}
    8578:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    857c:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    857e:	2300      	movs	r3, #0
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8580:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8584:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8586:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8588:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    858a:	4812      	ldr	r0, [pc, #72]	; (85d4 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    858c:	ea43 0308 	orr.w	r3, r3, r8
    8590:	603b      	str	r3, [r7, #0]
    8592:	4b11      	ldr	r3, [pc, #68]	; (85d8 <nrfx_usbd_ep_transfer+0xdc>)
    8594:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    8598:	f386 8811 	msr	BASEPRI, r6
    859c:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    85a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    85a4:	4a0d      	ldr	r2, [pc, #52]	; (85dc <nrfx_usbd_ep_transfer+0xe0>)
    85a6:	4c0e      	ldr	r4, [pc, #56]	; (85e0 <nrfx_usbd_ep_transfer+0xe4>)
    85a8:	e7df      	b.n	856a <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    85aa:	4a0e      	ldr	r2, [pc, #56]	; (85e4 <nrfx_usbd_ep_transfer+0xe8>)
    85ac:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    85ae:	4a0e      	ldr	r2, [pc, #56]	; (85e8 <nrfx_usbd_ep_transfer+0xec>)
    85b0:	e7e0      	b.n	8574 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    85b2:	480e      	ldr	r0, [pc, #56]	; (85ec <nrfx_usbd_ep_transfer+0xf0>)
    85b4:	e7f0      	b.n	8598 <nrfx_usbd_ep_transfer+0x9c>
        ret = NRFX_ERROR_BUSY;
    85b6:	480e      	ldr	r0, [pc, #56]	; (85f0 <nrfx_usbd_ep_transfer+0xf4>)
    85b8:	e7ee      	b.n	8598 <nrfx_usbd_ep_transfer+0x9c>
    85ba:	bf00      	nop
    85bc:	2005688d 	.word	0x2005688d
    85c0:	20014420 	.word	0x20014420
    85c4:	2001441c 	.word	0x2001441c
    85c8:	0000d929 	.word	0x0000d929
    85cc:	0000d907 	.word	0x0000d907
    85d0:	20014290 	.word	0x20014290
    85d4:	0bad0000 	.word	0x0bad0000
    85d8:	e000e100 	.word	0xe000e100
    85dc:	0000810d 	.word	0x0000810d
    85e0:	000080d5 	.word	0x000080d5
    85e4:	20014224 	.word	0x20014224
    85e8:	0000d8d5 	.word	0x0000d8d5
    85ec:	0bad000a 	.word	0x0bad000a
    85f0:	0bad000b 	.word	0x0bad000b

000085f4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    85f4:	f010 0f08 	tst.w	r0, #8
    85f8:	4b07      	ldr	r3, [pc, #28]	; (8618 <nrfx_usbd_epout_size_get+0x24>)
    85fa:	d006      	beq.n	860a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    85fc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8600:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8604:	bf18      	it	ne
    8606:	2000      	movne	r0, #0
    8608:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    860a:	f000 000f 	and.w	r0, r0, #15
    860e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8612:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8616:	4770      	bx	lr
    8618:	50036000 	.word	0x50036000

0000861c <usbd_dmareq_process>:
{
    861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8620:	4e54      	ldr	r6, [pc, #336]	; (8774 <usbd_dmareq_process+0x158>)
{
    8622:	b085      	sub	sp, #20
    if (!m_dma_pending)
    8624:	7833      	ldrb	r3, [r6, #0]
    8626:	2b00      	cmp	r3, #0
    8628:	d169      	bne.n	86fe <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    862a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8778 <usbd_dmareq_process+0x15c>
    862e:	4d53      	ldr	r5, [pc, #332]	; (877c <usbd_dmareq_process+0x160>)
    8630:	f8d8 4000 	ldr.w	r4, [r8]
    8634:	682b      	ldr	r3, [r5, #0]
    8636:	401c      	ands	r4, r3
    8638:	d061      	beq.n	86fe <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    863a:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    863e:	bf14      	ite	ne
    8640:	fa93 f4a3 	rbitne	r4, r3
    8644:	fa94 f4a4 	rbiteq	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8648:	f04f 0901 	mov.w	r9, #1
    return NRF_CTZ(req);
    864c:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8650:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8654:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8656:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    865a:	d953      	bls.n	8704 <usbd_dmareq_process+0xe8>
    865c:	3c10      	subs	r4, #16
    865e:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8660:	4620      	mov	r0, r4
    8662:	f7ff fcd9 	bl	8018 <ep_state_access>
    8666:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8668:	4620      	mov	r0, r4
    866a:	f7ff ffc3 	bl	85f4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    866e:	f8da 7000 	ldr.w	r7, [sl]
    8672:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8674:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    8676:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    867a:	f8da 1004 	ldr.w	r1, [sl, #4]
    867e:	a802      	add	r0, sp, #8
    8680:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    8682:	9b02      	ldr	r3, [sp, #8]
    8684:	2b00      	cmp	r3, #0
    8686:	d149      	bne.n	871c <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    8688:	b908      	cbnz	r0, 868e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    868a:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    868e:	2301      	movs	r3, #1
    8690:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    8692:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8694:	9a03      	ldr	r2, [sp, #12]
            m_ep_ready &= ~(1U << pos);
    8696:	ea03 0309 	and.w	r3, r3, r9
    869a:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    869c:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    86a0:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    86a2:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    86a4:	2900      	cmp	r1, #0
    86a6:	f8ca 3008 	str.w	r3, [sl, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    86aa:	f004 0508 	and.w	r5, r4, #8
    86ae:	9802      	ldr	r0, [sp, #8]
    86b0:	4b33      	ldr	r3, [pc, #204]	; (8780 <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    86b2:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    86b6:	da4e      	bge.n	8756 <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    86b8:	2d00      	cmp	r5, #0
    86ba:	d044      	beq.n	8746 <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    86bc:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    86c0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    86c4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    86c6:	2201      	movs	r2, #1
    86c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    86cc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    86d0:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    86d4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    86d6:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    86d8:	4a2a      	ldr	r2, [pc, #168]	; (8784 <usbd_dmareq_process+0x168>)
    86da:	4b2b      	ldr	r3, [pc, #172]	; (8788 <usbd_dmareq_process+0x16c>)
    86dc:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    86e0:	bf38      	it	cc
    86e2:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    86e4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    86e8:	4925      	ldr	r1, [pc, #148]	; (8780 <usbd_dmareq_process+0x164>)
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    86ea:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    86ee:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    86f2:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    86f4:	b91a      	cbnz	r2, 86fe <usbd_dmareq_process+0xe2>
    86f6:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    86fa:	2a00      	cmp	r2, #0
    86fc:	d0f9      	beq.n	86f2 <usbd_dmareq_process+0xd6>
}
    86fe:	b005      	add	sp, #20
    8700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8704:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8708:	4620      	mov	r0, r4
    870a:	f7ff fc85 	bl	8018 <ep_state_access>
    870e:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    8710:	6803      	ldr	r3, [r0, #0]
    8712:	8982      	ldrh	r2, [r0, #12]
    8714:	6841      	ldr	r1, [r0, #4]
    8716:	a802      	add	r0, sp, #8
    8718:	4798      	blx	r3
    871a:	e7b5      	b.n	8688 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    871c:	9b03      	ldr	r3, [sp, #12]
    871e:	459b      	cmp	fp, r3
    8720:	d9b2      	bls.n	8688 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8722:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8724:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8726:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    872a:	f7ff fd31 	bl	8190 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    872e:	2306      	movs	r3, #6
    8730:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8734:	4b15      	ldr	r3, [pc, #84]	; (878c <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8736:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    873a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    873c:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8740:	a801      	add	r0, sp, #4
    8742:	4798      	blx	r3
                    continue;
    8744:	e774      	b.n	8630 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    8746:	2514      	movs	r5, #20
    8748:	fb05 3304 	mla	r3, r5, r4, r3
    874c:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8750:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8754:	e7b6      	b.n	86c4 <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    8756:	b12d      	cbz	r5, 8764 <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    8758:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    875c:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    8760:	2328      	movs	r3, #40	; 0x28
    8762:	e7b0      	b.n	86c6 <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8764:	2514      	movs	r5, #20
    8766:	fb05 3304 	mla	r3, r5, r4, r3
    876a:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    876e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8772:	e7f5      	b.n	8760 <usbd_dmareq_process+0x144>
    8774:	2005688c 	.word	0x2005688c
    8778:	2001441c 	.word	0x2001441c
    877c:	20014420 	.word	0x20014420
    8780:	50036000 	.word	0x50036000
    8784:	0000f09a 	.word	0x0000f09a
    8788:	0000f0ac 	.word	0x0000f0ac
    878c:	20014424 	.word	0x20014424

00008790 <ev_epdata_handler>:
{
    8790:	b538      	push	{r3, r4, r5, lr}
        dataepstatus &= ~(1UL << bitpos);
    8792:	2501      	movs	r5, #1
    return p_reg->EPDATASTATUS;
    8794:	4b0e      	ldr	r3, [pc, #56]	; (87d0 <ev_epdata_handler+0x40>)
    8796:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    879a:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    while (dataepstatus)
    879e:	b91c      	cbnz	r4, 87a8 <ev_epdata_handler+0x18>
}
    87a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    87a4:	f7ff bf3a 	b.w	861c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    87a8:	fa94 f3a4 	rbit	r3, r4
    87ac:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87b0:	2b0f      	cmp	r3, #15
    87b2:	bfc8      	it	gt
    87b4:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    87b8:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87ba:	bfd4      	ite	le
    87bc:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    87c0:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    87c2:	fa05 f303 	lsl.w	r3, r5, r3
    87c6:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    87ca:	f7ff fd1f 	bl	820c <usbd_ep_data_handler>
    87ce:	e7e6      	b.n	879e <ev_epdata_handler+0xe>
    87d0:	50036000 	.word	0x50036000

000087d4 <nrf_usbd_epout_dma_handler>:
{
    87d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    87d6:	2200      	movs	r2, #0
    87d8:	4b16      	ldr	r3, [pc, #88]	; (8834 <nrf_usbd_epout_dma_handler+0x60>)
{
    87da:	4604      	mov	r4, r0
    m_dma_pending = false;
    87dc:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    87de:	f7ff fc1b 	bl	8018 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    87e2:	7b83      	ldrb	r3, [r0, #14]
    87e4:	2b03      	cmp	r3, #3
    87e6:	d10d      	bne.n	8804 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    87e8:	4620      	mov	r0, r4
    87ea:	f005 f8b2 	bl	d952 <ep2bit>
    87ee:	2301      	movs	r3, #1
    87f0:	fa03 f000 	lsl.w	r0, r3, r0
    87f4:	43c0      	mvns	r0, r0
    87f6:	f7ff fccb 	bl	8190 <atomic_and.constprop.0.isra.0>
}
    87fa:	b003      	add	sp, #12
    87fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8800:	f7ff bf0c 	b.w	861c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8804:	6805      	ldr	r5, [r0, #0]
    8806:	2d00      	cmp	r5, #0
    8808:	d1f7      	bne.n	87fa <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    880a:	4620      	mov	r0, r4
    880c:	f005 f8a1 	bl	d952 <ep2bit>
    8810:	2301      	movs	r3, #1
    8812:	fa03 f000 	lsl.w	r0, r3, r0
    8816:	43c0      	mvns	r0, r0
    8818:	f7ff fcba 	bl	8190 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    881c:	2306      	movs	r3, #6
    881e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8822:	4b05      	ldr	r3, [pc, #20]	; (8838 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8824:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    8828:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    882a:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    882e:	a801      	add	r0, sp, #4
    8830:	4798      	blx	r3
    8832:	e7e2      	b.n	87fa <nrf_usbd_epout_dma_handler+0x26>
    8834:	2005688c 	.word	0x2005688c
    8838:	20014424 	.word	0x20014424

0000883c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    883c:	4b02      	ldr	r3, [pc, #8]	; (8848 <nrfx_usbd_ep_stall+0xc>)
    883e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8842:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8846:	4770      	bx	lr
    8848:	50036000 	.word	0x50036000

0000884c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    884c:	0702      	lsls	r2, r0, #28
    884e:	d413      	bmi.n	8878 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8850:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8854:	f010 0f80 	tst.w	r0, #128	; 0x80
    8858:	4a08      	ldr	r2, [pc, #32]	; (887c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    885a:	bf0b      	itete	eq
    885c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8860:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8864:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    8868:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    886c:	bf08      	it	eq
    886e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8870:	1e43      	subs	r3, r0, #1
    8872:	4258      	negs	r0, r3
    8874:	4158      	adcs	r0, r3
    8876:	4770      	bx	lr
        return false;
    8878:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    887a:	4770      	bx	lr
    887c:	50036000 	.word	0x50036000

00008880 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    8880:	4b04      	ldr	r3, [pc, #16]	; (8894 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    8882:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    8886:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    888a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    888e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    8892:	4770      	bx	lr
    8894:	50036000 	.word	0x50036000

00008898 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    8898:	b510      	push	{r4, lr}
    889a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    889c:	2208      	movs	r2, #8
    889e:	2100      	movs	r1, #0
    88a0:	f002 ff05 	bl	b6ae <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    88a4:	4b0e      	ldr	r3, [pc, #56]	; (88e0 <nrfx_usbd_setup_get+0x48>)
    88a6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    88aa:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    88ac:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    88b0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    88b2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    88b6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    88ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    88be:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    88c0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    88c4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    88c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    88cc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    88ce:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    88d2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    88d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    88da:	80e3      	strh	r3, [r4, #6]
}
    88dc:	bd10      	pop	{r4, pc}
    88de:	bf00      	nop
    88e0:	50036000 	.word	0x50036000

000088e4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    88e4:	2201      	movs	r2, #1
    88e6:	4b02      	ldr	r3, [pc, #8]	; (88f0 <nrfx_usbd_setup_data_clear+0xc>)
    88e8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    88ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    88ec:	4770      	bx	lr
    88ee:	bf00      	nop
    88f0:	50036000 	.word	0x50036000

000088f4 <ev_dma_epout0_handler>:
    m_dma_pending = false;
    88f4:	2200      	movs	r2, #0
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    88f6:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    88f8:	4b11      	ldr	r3, [pc, #68]	; (8940 <ev_dma_epout0_handler+0x4c>)
    88fa:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    88fc:	4b11      	ldr	r3, [pc, #68]	; (8944 <ev_dma_epout0_handler+0x50>)
    88fe:	7b9a      	ldrb	r2, [r3, #14]
    8900:	2a03      	cmp	r2, #3
    8902:	d106      	bne.n	8912 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8904:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8908:	b002      	add	sp, #8
    890a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    890e:	f7ff bc3f 	b.w	8190 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    8912:	681c      	ldr	r4, [r3, #0]
    8914:	b974      	cbnz	r4, 8934 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8916:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    891a:	f7ff fc39 	bl	8190 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    891e:	2306      	movs	r3, #6
    8920:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8924:	4b08      	ldr	r3, [pc, #32]	; (8948 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8926:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    892a:	681b      	ldr	r3, [r3, #0]
    892c:	a801      	add	r0, sp, #4
    892e:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8930:	b002      	add	sp, #8
    8932:	bd10      	pop	{r4, pc}
    8934:	b002      	add	sp, #8
    8936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    893a:	f7ff bfd3 	b.w	88e4 <nrfx_usbd_setup_data_clear>
    893e:	bf00      	nop
    8940:	2005688c 	.word	0x2005688c
    8944:	200142fc 	.word	0x200142fc
    8948:	20014424 	.word	0x20014424

0000894c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    894c:	2201      	movs	r2, #1
    894e:	4b02      	ldr	r3, [pc, #8]	; (8958 <nrfx_usbd_setup_clear+0xc>)
    8950:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8952:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8954:	4770      	bx	lr
    8956:	bf00      	nop
    8958:	50036000 	.word	0x50036000

0000895c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    895c:	2201      	movs	r2, #1
    895e:	4b02      	ldr	r3, [pc, #8]	; (8968 <nrfx_usbd_setup_stall+0xc>)
    8960:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8962:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    8964:	4770      	bx	lr
    8966:	bf00      	nop
    8968:	50036000 	.word	0x50036000

0000896c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    896c:	4b01      	ldr	r3, [pc, #4]	; (8974 <nrfx_usbd_last_setup_dir_get+0x8>)
    896e:	7818      	ldrb	r0, [r3, #0]
    8970:	4770      	bx	lr
    8972:	bf00      	nop
    8974:	2005688d 	.word	0x2005688d

00008978 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8978:	4602      	mov	r2, r0
    897a:	b510      	push	{r4, lr}
	__asm__ volatile(
    897c:	f04f 0320 	mov.w	r3, #32
    8980:	f3ef 8411 	mrs	r4, BASEPRI
    8984:	f383 8812 	msr	BASEPRI_MAX, r3
    8988:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    898c:	f004 ffe1 	bl	d952 <ep2bit>
    8990:	2301      	movs	r3, #1
    8992:	490d      	ldr	r1, [pc, #52]	; (89c8 <nrfx_usbd_transfer_out_drop+0x50>)
    8994:	fa03 f000 	lsl.w	r0, r3, r0
    8998:	680b      	ldr	r3, [r1, #0]
    899a:	ea23 0300 	bic.w	r3, r3, r0
    899e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    89a0:	f012 0108 	ands.w	r1, r2, #8
    89a4:	d10a      	bne.n	89bc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    89a6:	f002 030f 	and.w	r3, r2, #15
    89aa:	009b      	lsls	r3, r3, #2
    89ac:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    89b0:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    89b4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    89b8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    89bc:	f384 8811 	msr	BASEPRI, r4
    89c0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    89c4:	bd10      	pop	{r4, pc}
    89c6:	bf00      	nop
    89c8:	20014420 	.word	0x20014420

000089cc <usbd_ep_abort>:
{
    89cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89ce:	4601      	mov	r1, r0
	__asm__ volatile(
    89d0:	f04f 0320 	mov.w	r3, #32
    89d4:	f3ef 8511 	mrs	r5, BASEPRI
    89d8:	f383 8812 	msr	BASEPRI_MAX, r3
    89dc:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    89e0:	f7ff fb1a 	bl	8018 <ep_state_access>
    89e4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    89e6:	4608      	mov	r0, r1
    89e8:	f004 ffb3 	bl	d952 <ep2bit>
    89ec:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    89ee:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    89f2:	fa02 f200 	lsl.w	r2, r2, r0
    89f6:	482e      	ldr	r0, [pc, #184]	; (8ab0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    89f8:	d119      	bne.n	8a2e <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    89fa:	6803      	ldr	r3, [r0, #0]
    89fc:	ea32 0303 	bics.w	r3, r2, r3
    8a00:	d00a      	beq.n	8a18 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8a02:	4608      	mov	r0, r1
    8a04:	f7ff ffb8 	bl	8978 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    8a08:	2303      	movs	r3, #3
    8a0a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    8a0c:	f385 8811 	msr	BASEPRI, r5
    8a10:	f3bf 8f6f 	isb	sy
}
    8a14:	b003      	add	sp, #12
    8a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    8a18:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8a1a:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8a1c:	4925      	ldr	r1, [pc, #148]	; (8ab4 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8a1e:	ea23 0302 	bic.w	r3, r3, r2
    8a22:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8a24:	680b      	ldr	r3, [r1, #0]
    8a26:	ea23 0302 	bic.w	r3, r3, r2
    8a2a:	600b      	str	r3, [r1, #0]
    8a2c:	e7ec      	b.n	8a08 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    8a2e:	070b      	lsls	r3, r1, #28
    8a30:	d415      	bmi.n	8a5e <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    8a32:	2980      	cmp	r1, #128	; 0x80
    8a34:	4b20      	ldr	r3, [pc, #128]	; (8ab8 <usbd_ep_abort+0xec>)
    8a36:	d02f      	beq.n	8a98 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8a38:	f001 040f 	and.w	r4, r1, #15
    8a3c:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8a40:	0064      	lsls	r4, r4, #1
    8a42:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8a46:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a4a:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8a4e:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a50:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8a54:	433c      	orrs	r4, r7
    8a56:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8a5a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    8a5e:	4f15      	ldr	r7, [pc, #84]	; (8ab4 <usbd_ep_abort+0xe8>)
    8a60:	6804      	ldr	r4, [r0, #0]
    8a62:	683b      	ldr	r3, [r7, #0]
    8a64:	ea64 0c03 	orn	ip, r4, r3
    8a68:	ea1c 0f02 	tst.w	ip, r2
    8a6c:	d0ce      	beq.n	8a0c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8a6e:	4313      	orrs	r3, r2
    8a70:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    8a72:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8a74:	ea24 0402 	bic.w	r4, r4, r2
    8a78:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8a7a:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    8a7c:	2303      	movs	r3, #3
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8a7e:	2206      	movs	r2, #6
            p_state->status = NRFX_USBD_EP_ABORTED;
    8a80:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8a82:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8a86:	4b0d      	ldr	r3, [pc, #52]	; (8abc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8a88:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    8a8c:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8a8e:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    8a92:	a801      	add	r0, sp, #4
    8a94:	4798      	blx	r3
    8a96:	e7b9      	b.n	8a0c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    8a98:	f240 74b4 	movw	r4, #1972	; 0x7b4
    8a9c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8aa0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8aa4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8aa8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8aaa:	f044 0404 	orr.w	r4, r4, #4
    8aae:	e7d1      	b.n	8a54 <usbd_ep_abort+0x88>
    8ab0:	2001441c 	.word	0x2001441c
    8ab4:	20014420 	.word	0x20014420
    8ab8:	50036000 	.word	0x50036000
    8abc:	20014424 	.word	0x20014424

00008ac0 <ev_setup_handler>:
{
    8ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8ac2:	4b14      	ldr	r3, [pc, #80]	; (8b14 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ac4:	4c14      	ldr	r4, [pc, #80]	; (8b18 <ev_setup_handler+0x58>)
    8ac6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    8aca:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8acc:	4e13      	ldr	r6, [pc, #76]	; (8b1c <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ace:	43da      	mvns	r2, r3
    8ad0:	4b13      	ldr	r3, [pc, #76]	; (8b20 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    8ad2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ad4:	681b      	ldr	r3, [r3, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8ad6:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ad8:	b292      	uxth	r2, r2
    8ada:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    8adc:	f004 ff39 	bl	d952 <ep2bit>
    8ae0:	2301      	movs	r3, #1
    8ae2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ae4:	4213      	tst	r3, r2
    8ae6:	d002      	beq.n	8aee <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    8ae8:	4608      	mov	r0, r1
    8aea:	f7ff ff6f 	bl	89cc <usbd_ep_abort>
    (void)(NRFX_ATOMIC_FETCH_AND(
    8aee:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8af2:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    m_last_setup_dir =
    8af6:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    8af8:	f7ff fb4a 	bl	8190 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8afc:	6823      	ldr	r3, [r4, #0]
    m_event_handler(&evt);
    8afe:	a801      	add	r0, sp, #4
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8b00:	f043 0301 	orr.w	r3, r3, #1
    8b04:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    8b06:	2305      	movs	r3, #5
    8b08:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    8b0a:	4b06      	ldr	r3, [pc, #24]	; (8b24 <ev_setup_handler+0x64>)
    8b0c:	681b      	ldr	r3, [r3, #0]
    8b0e:	4798      	blx	r3
}
    8b10:	b002      	add	sp, #8
    8b12:	bd70      	pop	{r4, r5, r6, pc}
    8b14:	50036000 	.word	0x50036000
    8b18:	20014420 	.word	0x20014420
    8b1c:	2005688d 	.word	0x2005688d
    8b20:	2001441c 	.word	0x2001441c
    8b24:	20014424 	.word	0x20014424

00008b28 <nrfx_usbd_irq_handler>:
{
    8b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    8b2c:	4b1a      	ldr	r3, [pc, #104]	; (8b98 <nrfx_usbd_irq_handler+0x70>)
            active |= 1UL << event_nr;
    8b2e:	2401      	movs	r4, #1
    8b30:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    8b34:	2300      	movs	r3, #0
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8b36:	461d      	mov	r5, r3
    while (to_process)
    8b38:	b970      	cbnz	r0, 8b58 <nrfx_usbd_irq_handler+0x30>
        active &= ~(1UL << event_nr);
    8b3a:	f04f 0801 	mov.w	r8, #1
        m_isr[event_nr]();
    8b3e:	4f17      	ldr	r7, [pc, #92]	; (8b9c <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8b40:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8b44:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
    while (active)
    8b48:	b9bc      	cbnz	r4, 8b7a <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8b4a:	f7ff fd67 	bl	861c <usbd_dmareq_process>
    if (setup_active)
    8b4e:	b306      	cbz	r6, 8b92 <nrfx_usbd_irq_handler+0x6a>
}
    8b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    8b54:	f7ff bfb4 	b.w	8ac0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8b58:	fa90 f2a0 	rbit	r2, r0
    8b5c:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8b60:	490f      	ldr	r1, [pc, #60]	; (8ba0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    8b62:	0096      	lsls	r6, r2, #2
    8b64:	4431      	add	r1, r6
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8b66:	680e      	ldr	r6, [r1, #0]
            active |= 1UL << event_nr;
    8b68:	fa04 f202 	lsl.w	r2, r4, r2
    if (ret)
    8b6c:	b116      	cbz	r6, 8b74 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8b6e:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8b70:	6809      	ldr	r1, [r1, #0]
    8b72:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    8b74:	ea20 0002 	bic.w	r0, r0, r2
    8b78:	e7de      	b.n	8b38 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8b7a:	fa94 f5a4 	rbit	r5, r4
    8b7e:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    8b82:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    8b86:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8b8a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8b8c:	ea24 0405 	bic.w	r4, r4, r5
    8b90:	e7da      	b.n	8b48 <nrfx_usbd_irq_handler+0x20>
}
    8b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b96:	bf00      	nop
    8b98:	50036000 	.word	0x50036000
    8b9c:	0000ef68 	.word	0x0000ef68
    8ba0:	50036100 	.word	0x50036100

00008ba4 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
    8ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8baa:	4b1a      	ldr	r3, [pc, #104]	; (8c14 <nrfx_usbd_stop+0x70>)
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8bac:	2036      	movs	r0, #54	; 0x36
    8bae:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8bb2:	f7fb f94d 	bl	3e50 <arch_irq_is_enabled>
    8bb6:	b1b8      	cbz	r0, 8be8 <nrfx_usbd_stop+0x44>
        ep_waiting &= ~(1U << bitpos);
    8bb8:	2701      	movs	r7, #1
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    8bba:	4e17      	ldr	r6, [pc, #92]	; (8c18 <nrfx_usbd_stop+0x74>)
    8bbc:	4b17      	ldr	r3, [pc, #92]	; (8c1c <nrfx_usbd_stop+0x78>)
    8bbe:	6834      	ldr	r4, [r6, #0]
    8bc0:	681b      	ldr	r3, [r3, #0]
    8bc2:	0c24      	lsrs	r4, r4, #16
    8bc4:	0424      	lsls	r4, r4, #16
    8bc6:	431c      	orrs	r4, r3
    while (0 != ep_waiting)
    8bc8:	b97c      	cbnz	r4, 8bea <nrfx_usbd_stop+0x46>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8bca:	f240 13ff 	movw	r3, #511	; 0x1ff
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8bce:	4d14      	ldr	r5, [pc, #80]	; (8c20 <nrfx_usbd_stop+0x7c>)
    8bd0:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8bd2:	2036      	movs	r0, #54	; 0x36
    8bd4:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8bd8:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    8bdc:	f7fb f924 	bl	3e28 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8be4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    8be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8bea:	fa94 f5a4 	rbit	r5, r4
    8bee:	fab5 f585 	clz	r5, r5
    8bf2:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8bf4:	2d0f      	cmp	r5, #15
    8bf6:	bfc6      	itte	gt
    8bf8:	f1a5 0010 	subgt.w	r0, r5, #16
    8bfc:	b2c0      	uxtbgt	r0, r0
    8bfe:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8c02:	0703      	lsls	r3, r0, #28
    8c04:	d401      	bmi.n	8c0a <nrfx_usbd_stop+0x66>
            usbd_ep_abort(bit2ep(bitpos));
    8c06:	f7ff fee1 	bl	89cc <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8c0a:	fa07 f505 	lsl.w	r5, r7, r5
    8c0e:	ea24 0405 	bic.w	r4, r4, r5
    8c12:	e7d9      	b.n	8bc8 <nrfx_usbd_stop+0x24>
    8c14:	e000e100 	.word	0xe000e100
    8c18:	20014420 	.word	0x20014420
    8c1c:	2001441c 	.word	0x2001441c
    8c20:	50036000 	.word	0x50036000

00008c24 <nrfx_usbd_disable>:
{
    8c24:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    8c26:	f7ff ffbd 	bl	8ba4 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8c2a:	4b08      	ldr	r3, [pc, #32]	; (8c4c <nrfx_usbd_disable+0x28>)
    8c2c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    8c30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8c34:	2200      	movs	r2, #0
    8c36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8c3a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8c3e:	4b04      	ldr	r3, [pc, #16]	; (8c50 <nrfx_usbd_disable+0x2c>)
    8c40:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8c42:	2201      	movs	r2, #1
    8c44:	4b03      	ldr	r3, [pc, #12]	; (8c54 <nrfx_usbd_disable+0x30>)
    8c46:	701a      	strb	r2, [r3, #0]
}
    8c48:	bd08      	pop	{r3, pc}
    8c4a:	bf00      	nop
    8c4c:	50036000 	.word	0x50036000
    8c50:	2005688c 	.word	0x2005688c
    8c54:	2005688f 	.word	0x2005688f

00008c58 <nrfx_usbd_ep_disable>:
{
    8c58:	b510      	push	{r4, lr}
    8c5a:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8c5c:	f7ff feb6 	bl	89cc <usbd_ep_abort>
        p_reg->EPINEN &= ~(1UL << epnr);
    8c60:	2301      	movs	r3, #1
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8c62:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8c66:	4083      	lsls	r3, r0
    8c68:	43db      	mvns	r3, r3
    8c6a:	4a0c      	ldr	r2, [pc, #48]	; (8c9c <nrfx_usbd_ep_disable+0x44>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8c6c:	f014 0f80 	tst.w	r4, #128	; 0x80
        p_reg->EPINEN &= ~(1UL << epnr);
    8c70:	bf15      	itete	ne
    8c72:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8c76:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8c7a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8c7c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    8c7e:	bf15      	itete	ne
    8c80:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8c84:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8c88:	4b05      	ldrne	r3, [pc, #20]	; (8ca0 <nrfx_usbd_ep_disable+0x48>)
    8c8a:	4b06      	ldreq	r3, [pc, #24]	; (8ca4 <nrfx_usbd_ep_disable+0x4c>)
    8c8c:	5c1a      	ldrb	r2, [r3, r0]
    8c8e:	2301      	movs	r3, #1
    8c90:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    8c92:	4a02      	ldr	r2, [pc, #8]	; (8c9c <nrfx_usbd_ep_disable+0x44>)
    8c94:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8c98:	bd10      	pop	{r4, pc}
    8c9a:	bf00      	nop
    8c9c:	50036000 	.word	0x50036000
    8ca0:	0000f4d9 	.word	0x0000f4d9
    8ca4:	0000f4d0 	.word	0x0000f4d0

00008ca8 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8ca8:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    8cac:	b570      	push	{r4, r5, r6, lr}
    8cae:	4924      	ldr	r1, [pc, #144]	; (8d40 <nrfx_usbd_ep_enable+0x98>)
    8cb0:	4604      	mov	r4, r0
    8cb2:	f04f 0501 	mov.w	r5, #1
    8cb6:	f000 030f 	and.w	r3, r0, #15
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8cba:	d012      	beq.n	8ce2 <nrfx_usbd_ep_enable+0x3a>
    8cbc:	4a21      	ldr	r2, [pc, #132]	; (8d44 <nrfx_usbd_ep_enable+0x9c>)
    8cbe:	5cd2      	ldrb	r2, [r2, r3]
    8cc0:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8cc4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    8cc8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8ccc:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8cce:	07d0      	lsls	r0, r2, #31
    8cd0:	d406      	bmi.n	8ce0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    8cd2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8cd6:	fa05 f303 	lsl.w	r3, r5, r3
    8cda:	4313      	orrs	r3, r2
    8cdc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    8ce0:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8ce2:	4a19      	ldr	r2, [pc, #100]	; (8d48 <nrfx_usbd_ep_enable+0xa0>)
    8ce4:	5cd2      	ldrb	r2, [r2, r3]
    8ce6:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8cea:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8cee:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    8cf2:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8cf4:	07d2      	lsls	r2, r2, #31
    8cf6:	d4f3      	bmi.n	8ce0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    8cf8:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    8cfc:	fa05 f203 	lsl.w	r2, r5, r3
    8d00:	4332      	orrs	r2, r6
    8d02:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    8d06:	2b00      	cmp	r3, #0
    8d08:	d0ea      	beq.n	8ce0 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    8d0a:	0703      	lsls	r3, r0, #28
    8d0c:	d4e8      	bmi.n	8ce0 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    8d0e:	f04f 0320 	mov.w	r3, #32
    8d12:	f3ef 8611 	mrs	r6, BASEPRI
    8d16:	f383 8812 	msr	BASEPRI_MAX, r3
    8d1a:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    8d1e:	f7ff fe2b 	bl	8978 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8d22:	4620      	mov	r0, r4
    8d24:	f004 fe15 	bl	d952 <ep2bit>
    8d28:	4a08      	ldr	r2, [pc, #32]	; (8d4c <nrfx_usbd_ep_enable+0xa4>)
    8d2a:	fa05 f000 	lsl.w	r0, r5, r0
    8d2e:	6813      	ldr	r3, [r2, #0]
    8d30:	ea23 0300 	bic.w	r3, r3, r0
    8d34:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8d36:	f386 8811 	msr	BASEPRI, r6
    8d3a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8d3e:	e7cf      	b.n	8ce0 <nrfx_usbd_ep_enable+0x38>
    8d40:	50036000 	.word	0x50036000
    8d44:	0000f4d9 	.word	0x0000f4d9
    8d48:	0000f4d0 	.word	0x0000f4d0
    8d4c:	2001441c 	.word	0x2001441c

00008d50 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8d50:	0603      	lsls	r3, r0, #24
{
    8d52:	b510      	push	{r4, lr}
    8d54:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8d56:	d405      	bmi.n	8d64 <nrfx_usbd_ep_stall_clear+0x14>
    8d58:	f7ff fd78 	bl	884c <nrfx_usbd_ep_stall_check>
    8d5c:	b110      	cbz	r0, 8d64 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8d5e:	4620      	mov	r0, r4
    8d60:	f7ff fe0a 	bl	8978 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8d64:	4b01      	ldr	r3, [pc, #4]	; (8d6c <nrfx_usbd_ep_stall_clear+0x1c>)
    8d66:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8d6a:	bd10      	pop	{r4, pc}
    8d6c:	50036000 	.word	0x50036000

00008d70 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    8d70:	2207      	movs	r2, #7
    8d72:	4b02      	ldr	r3, [pc, #8]	; (8d7c <nrfx_usbreg_enable+0xc>)
    8d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    8d78:	4770      	bx	lr
    8d7a:	bf00      	nop
    8d7c:	50037000 	.word	0x50037000

00008d80 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    8d80:	2207      	movs	r2, #7
    8d82:	4b02      	ldr	r3, [pc, #8]	; (8d8c <nrfx_usbreg_disable+0xc>)
    8d84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    8d88:	4770      	bx	lr
    8d8a:	bf00      	nop
    8d8c:	50037000 	.word	0x50037000

00008d90 <nrfx_usbreg_uninit>:
    8d90:	2207      	movs	r2, #7

void nrfx_usbreg_uninit(void)
{
    8d92:	b508      	push	{r3, lr}
    8d94:	4b04      	ldr	r3, [pc, #16]	; (8da8 <nrfx_usbreg_uninit+0x18>)
    nrfx_usbreg_disable();
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8d96:	2037      	movs	r0, #55	; 0x37
    8d98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8d9c:	f7fb f844 	bl	3e28 <arch_irq_disable>
    m_usbevt_handler = NULL;
    8da0:	2200      	movs	r2, #0
    8da2:	4b02      	ldr	r3, [pc, #8]	; (8dac <nrfx_usbreg_uninit+0x1c>)
    8da4:	601a      	str	r2, [r3, #0]
}
    8da6:	bd08      	pop	{r3, pc}
    8da8:	50037000 	.word	0x50037000
    8dac:	20014428 	.word	0x20014428

00008db0 <nrfx_usbreg_init>:
{
    8db0:	b510      	push	{r4, lr}
    8db2:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    8db4:	f7ff ffec 	bl	8d90 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    8db8:	6822      	ldr	r2, [r4, #0]
    8dba:	4b07      	ldr	r3, [pc, #28]	; (8dd8 <nrfx_usbreg_init+0x28>)
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8dbc:	2037      	movs	r0, #55	; 0x37
    m_usbevt_handler = p_config->handler;
    8dbe:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dc0:	2200      	movs	r2, #0
    8dc2:	4b06      	ldr	r3, [pc, #24]	; (8ddc <nrfx_usbreg_init+0x2c>)
    8dc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8dc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8dcc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    8dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8dd4:	f7fb b81a 	b.w	3e0c <arch_irq_enable>
    8dd8:	20014428 	.word	0x20014428
    8ddc:	50037000 	.word	0x50037000

00008de0 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    8de0:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8de2:	4c11      	ldr	r4, [pc, #68]	; (8e28 <nrfx_usbreg_irq_handler+0x48>)
    8de4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    8de8:	b12b      	cbz	r3, 8df6 <nrfx_usbreg_irq_handler+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dea:	2000      	movs	r0, #0
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    8dec:	4b0f      	ldr	r3, [pc, #60]	; (8e2c <nrfx_usbreg_irq_handler+0x4c>)
    8dee:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    8df2:	681b      	ldr	r3, [r3, #0]
    8df4:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8df6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    8dfa:	b133      	cbz	r3, 8e0a <nrfx_usbreg_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dfc:	2300      	movs	r3, #0
    8dfe:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    8e02:	4b0a      	ldr	r3, [pc, #40]	; (8e2c <nrfx_usbreg_irq_handler+0x4c>)
    8e04:	2001      	movs	r0, #1
    8e06:	681b      	ldr	r3, [r3, #0]
    8e08:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e0a:	4b07      	ldr	r3, [pc, #28]	; (8e28 <nrfx_usbreg_irq_handler+0x48>)
    8e0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    8e10:	b142      	cbz	r2, 8e24 <nrfx_usbreg_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8e12:	2200      	movs	r2, #0
    8e14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8e18:	4b04      	ldr	r3, [pc, #16]	; (8e2c <nrfx_usbreg_irq_handler+0x4c>)
    8e1a:	2002      	movs	r0, #2
    }
}
    8e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    8e20:	681b      	ldr	r3, [r3, #0]
    8e22:	4718      	bx	r3
}
    8e24:	bd10      	pop	{r4, pc}
    8e26:	bf00      	nop
    8e28:	50037000 	.word	0x50037000
    8e2c:	20014428 	.word	0x20014428

00008e30 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    8e30:	4603      	mov	r3, r0
    8e32:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	uint_fast32_t len = max_result_len;

	for (; len > 0; len--) {
    8e34:	b900      	cbnz	r0, 8e38 <get_result_len+0x8>
    8e36:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    8e38:	1e42      	subs	r2, r0, #1
    8e3a:	5c99      	ldrb	r1, [r3, r2]
    8e3c:	b909      	cbnz	r1, 8e42 <get_result_len+0x12>
	for (; len > 0; len--) {
    8e3e:	4610      	mov	r0, r2
    8e40:	e7f8      	b.n	8e34 <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    8e42:	2802      	cmp	r0, #2
    8e44:	d907      	bls.n	8e56 <get_result_len+0x26>
	switch(val) {
    8e46:	3802      	subs	r0, #2
    8e48:	2806      	cmp	r0, #6
    8e4a:	bf96      	itet	ls
    8e4c:	4b02      	ldrls	r3, [pc, #8]	; (8e58 <get_result_len+0x28>)
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    8e4e:	2300      	movhi	r3, #0
    8e50:	5c1b      	ldrbls	r3, [r3, r0]
    8e52:	2001      	movs	r0, #1
    8e54:	4098      	lsls	r0, r3
}
    8e56:	4770      	bx	lr
    8e58:	0000f4f5 	.word	0x0000f4f5

00008e5c <value_encode_len>:
{
    8e5c:	b570      	push	{r4, r5, r6, lr}
    8e5e:	461c      	mov	r4, r3

static uint_fast32_t get_encoded_len(const void *const result, uint_fast32_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    8e60:	2c01      	cmp	r4, #1
{
    8e62:	4605      	mov	r5, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8e64:	6803      	ldr	r3, [r0, #0]
{
    8e66:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8e68:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    8e6a:	d116      	bne.n	8e9a <value_encode_len+0x3e>
    8e6c:	7812      	ldrb	r2, [r2, #0]
    8e6e:	2a17      	cmp	r2, #23
    8e70:	d904      	bls.n	8e7c <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8e72:	3302      	adds	r3, #2
    8e74:	4298      	cmp	r0, r3
    8e76:	d314      	bcc.n	8ea2 <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8e78:	2300      	movs	r3, #0
    8e7a:	e021      	b.n	8ec0 <value_encode_len+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8e7c:	3301      	adds	r3, #1
    8e7e:	4298      	cmp	r0, r3
    8e80:	d30f      	bcc.n	8ea2 <value_encode_len+0x46>
		return 0;
    8e82:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
    8e84:	4628      	mov	r0, r5
    8e86:	f004 ffc5 	bl	de14 <encode_header_byte>
    8e8a:	b160      	cbz	r0, 8ea6 <value_encode_len+0x4a>
    8e8c:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
    8e8e:	42b4      	cmp	r4, r6
    8e90:	d119      	bne.n	8ec6 <value_encode_len+0x6a>
	state->elem_count++;
    8e92:	68ab      	ldr	r3, [r5, #8]
    8e94:	3301      	adds	r3, #1
    8e96:	60ab      	str	r3, [r5, #8]
	return true;
    8e98:	e006      	b.n	8ea8 <value_encode_len+0x4c>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    8e9a:	1c62      	adds	r2, r4, #1
    8e9c:	4413      	add	r3, r2
    8e9e:	4298      	cmp	r0, r3
    8ea0:	d206      	bcs.n	8eb0 <value_encode_len+0x54>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    8ea2:	696b      	ldr	r3, [r5, #20]
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		if (state->constant_state) {
    8ea4:	b90b      	cbnz	r3, 8eaa <value_encode_len+0x4e>
    8ea6:	2000      	movs	r0, #0
}
    8ea8:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    8eaa:	2208      	movs	r2, #8
    8eac:	60da      	str	r2, [r3, #12]
    8eae:	e7fa      	b.n	8ea6 <value_encode_len+0x4a>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8eb0:	b90c      	cbnz	r4, 8eb6 <value_encode_len+0x5a>
	if (!encode_header_byte(state, major_type,
    8eb2:	7832      	ldrb	r2, [r6, #0]
    8eb4:	e7e6      	b.n	8e84 <value_encode_len+0x28>
	switch(val) {
    8eb6:	1ea3      	subs	r3, r4, #2
    8eb8:	2b06      	cmp	r3, #6
    8eba:	d8dd      	bhi.n	8e78 <value_encode_len+0x1c>
    8ebc:	4a05      	ldr	r2, [pc, #20]	; (8ed4 <value_encode_len+0x78>)
    8ebe:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    8ec0:	3318      	adds	r3, #24
    8ec2:	b2da      	uxtb	r2, r3
    8ec4:	e7de      	b.n	8e84 <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    8ec6:	682b      	ldr	r3, [r5, #0]
    8ec8:	1c5a      	adds	r2, r3, #1
    8eca:	602a      	str	r2, [r5, #0]
    8ecc:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    8ed0:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    8ed2:	e7dc      	b.n	8e8e <value_encode_len+0x32>
    8ed4:	0000f4f5 	.word	0x0000f4f5

00008ed8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8ed8:	4b10      	ldr	r3, [pc, #64]	; (8f1c <z_sys_init_run_level+0x44>)
{
    8eda:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8edc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8ee0:	3001      	adds	r0, #1
    8ee2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8ee6:	42a6      	cmp	r6, r4
    8ee8:	d800      	bhi.n	8eec <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    8eea:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    8eec:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    8ef0:	b18d      	cbz	r5, 8f16 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    8ef2:	4628      	mov	r0, r5
    8ef4:	4798      	blx	r3
			if (rc != 0) {
    8ef6:	b138      	cbz	r0, 8f08 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    8ef8:	2800      	cmp	r0, #0
    8efa:	bfb8      	it	lt
    8efc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    8efe:	28ff      	cmp	r0, #255	; 0xff
    8f00:	bfa8      	it	ge
    8f02:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    8f04:	68eb      	ldr	r3, [r5, #12]
    8f06:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    8f08:	68ea      	ldr	r2, [r5, #12]
    8f0a:	7853      	ldrb	r3, [r2, #1]
    8f0c:	f043 0301 	orr.w	r3, r3, #1
    8f10:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8f12:	3408      	adds	r4, #8
    8f14:	e7e7      	b.n	8ee6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    8f16:	4798      	blx	r3
    8f18:	e7fb      	b.n	8f12 <z_sys_init_run_level+0x3a>
    8f1a:	bf00      	nop
    8f1c:	0000efd0 	.word	0x0000efd0

00008f20 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8f20:	2201      	movs	r2, #1
{
    8f22:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8f24:	4b09      	ldr	r3, [pc, #36]	; (8f4c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8f26:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    8f28:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8f2a:	f7ff ffd5 	bl	8ed8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8f2e:	f005 fb33 	bl	e598 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    8f32:	2004      	movs	r0, #4
    8f34:	f7ff ffd0 	bl	8ed8 <z_sys_init_run_level>

	z_init_static_threads();
    8f38:	f000 f952 	bl	91e0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    8f3c:	f7f7 fa72 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8f40:	4a03      	ldr	r2, [pc, #12]	; (8f50 <bg_thread_main+0x30>)
    8f42:	7b13      	ldrb	r3, [r2, #12]
    8f44:	f023 0301 	bic.w	r3, r3, #1
    8f48:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8f4a:	bd08      	pop	{r3, pc}
    8f4c:	20056890 	.word	0x20056890
    8f50:	20002658 	.word	0x20002658

00008f54 <z_bss_zero>:
{
    8f54:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8f56:	4803      	ldr	r0, [pc, #12]	; (8f64 <z_bss_zero+0x10>)
    8f58:	4a03      	ldr	r2, [pc, #12]	; (8f68 <z_bss_zero+0x14>)
    8f5a:	2100      	movs	r1, #0
    8f5c:	1a12      	subs	r2, r2, r0
    8f5e:	f005 f838 	bl	dfd2 <z_early_memset>
}
    8f62:	bd08      	pop	{r3, pc}
    8f64:	20002490 	.word	0x20002490
    8f68:	20056894 	.word	0x20056894

00008f6c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    8f6c:	2378      	movs	r3, #120	; 0x78
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8f6e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    8f70:	4e13      	ldr	r6, [pc, #76]	; (8fc0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    8f72:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    8f74:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    8f78:	2300      	movs	r3, #0
{
    8f7a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    8f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8f80:	220f      	movs	r2, #15
    8f82:	9301      	str	r3, [sp, #4]
    8f84:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f88:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    8f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f8e:	4d0d      	ldr	r5, [pc, #52]	; (8fc4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    8f90:	490d      	ldr	r1, [pc, #52]	; (8fc8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8f92:	fb03 5500 	mla	r5, r3, r0, r5
{
    8f96:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    8f98:	fb02 1100 	mla	r1, r2, r0, r1
    8f9c:	4b0b      	ldr	r3, [pc, #44]	; (8fcc <z_init_cpu+0x60>)
    8f9e:	4630      	mov	r0, r6
    8fa0:	9500      	str	r5, [sp, #0]
    8fa2:	f000 f8c1 	bl	9128 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8fa6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    8fa8:	742c      	strb	r4, [r5, #16]
    8faa:	f023 0304 	bic.w	r3, r3, #4
    8fae:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8fb0:	4b07      	ldr	r3, [pc, #28]	; (8fd0 <z_init_cpu+0x64>)
    8fb2:	3401      	adds	r4, #1
    8fb4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8fb8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    8fba:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    8fbc:	b006      	add	sp, #24
    8fbe:	bd70      	pop	{r4, r5, r6, pc}
    8fc0:	200025e0 	.word	0x200025e0
    8fc4:	2001442c 	.word	0x2001442c
    8fc8:	20057898 	.word	0x20057898
    8fcc:	0000e08b 	.word	0x0000e08b
    8fd0:	20057098 	.word	0x20057098

00008fd4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    8fd4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8fd6:	2000      	movs	r0, #0
{
    8fd8:	b0a4      	sub	sp, #144	; 0x90
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8fda:	f7ff ff7d 	bl	8ed8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    8fde:	4b2b      	ldr	r3, [pc, #172]	; (908c <z_cstart+0xb8>)
	uint32_t msp =
    8fe0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8fe4:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    8fe8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8fec:	2400      	movs	r4, #0
    8fee:	23e0      	movs	r3, #224	; 0xe0
    8ff0:	4d27      	ldr	r5, [pc, #156]	; (9090 <z_cstart+0xbc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    8ff2:	4e28      	ldr	r6, [pc, #160]	; (9094 <z_cstart+0xc0>)
    8ff4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    8ff8:	77ec      	strb	r4, [r5, #31]
    8ffa:	762c      	strb	r4, [r5, #24]
    8ffc:	766c      	strb	r4, [r5, #25]
    8ffe:	76ac      	strb	r4, [r5, #26]
    9000:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9004:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9006:	4f24      	ldr	r7, [pc, #144]	; (9098 <z_cstart+0xc4>)
    9008:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    900c:	626b      	str	r3, [r5, #36]	; 0x24
    900e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    9012:	f7fb f933 	bl	427c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    9016:	f7fa fecd 	bl	3db4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    901a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    901e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9020:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    9022:	f240 1301 	movw	r3, #257	; 0x101
    9026:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    902a:	ab06      	add	r3, sp, #24
    902c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    902e:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	dummy_thread->resource_pool = NULL;
    9032:	9421      	str	r4, [sp, #132]	; 0x84
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9034:	f004 ff9a 	bl	df6c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    9038:	2001      	movs	r0, #1
    903a:	f7ff ff4d 	bl	8ed8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    903e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    9040:	4d16      	ldr	r5, [pc, #88]	; (909c <z_cstart+0xc8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9042:	f7ff ff49 	bl	8ed8 <z_sys_init_run_level>
	z_sched_init();
    9046:	f000 fd17 	bl	9a78 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    904a:	4b15      	ldr	r3, [pc, #84]	; (90a0 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    904c:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    904e:	9305      	str	r3, [sp, #20]
    9050:	2301      	movs	r3, #1
    9052:	4914      	ldr	r1, [pc, #80]	; (90a4 <z_cstart+0xd0>)
    9054:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    9058:	e9cd 4303 	strd	r4, r3, [sp, #12]
    905c:	4628      	mov	r0, r5
    905e:	463b      	mov	r3, r7
    9060:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9064:	9400      	str	r4, [sp, #0]
    9066:	f000 f85f 	bl	9128 <z_setup_new_thread>
    906a:	4606      	mov	r6, r0
    906c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    906e:	4628      	mov	r0, r5
    9070:	f022 0204 	bic.w	r2, r2, #4
    9074:	736a      	strb	r2, [r5, #13]
    9076:	f005 f94d 	bl	e314 <z_ready_thread>
	z_init_cpu(0);
    907a:	4620      	mov	r0, r4
    907c:	f7ff ff76 	bl	8f6c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9080:	463a      	mov	r2, r7
    9082:	4631      	mov	r1, r6
    9084:	4628      	mov	r0, r5
    9086:	f7fa ff99 	bl	3fbc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    908a:	bf00      	nop
    908c:	20057098 	.word	0x20057098
    9090:	e000ed00 	.word	0xe000ed00
    9094:	2001442c 	.word	0x2001442c
    9098:	00008f21 	.word	0x00008f21
    909c:	20002658 	.word	0x20002658
    90a0:	0000f4fc 	.word	0x0000f4fc
    90a4:	200579d8 	.word	0x200579d8

000090a8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    90a8:	2000      	movs	r0, #0
{
    90aa:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    90ac:	4c05      	ldr	r4, [pc, #20]	; (90c4 <init_mem_slab_module+0x1c>)
    90ae:	4d06      	ldr	r5, [pc, #24]	; (90c8 <init_mem_slab_module+0x20>)
    90b0:	42ac      	cmp	r4, r5
    90b2:	d300      	bcc.n	90b6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    90b4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    90b6:	4620      	mov	r0, r4
    90b8:	f004 ff8f 	bl	dfda <create_free_list>
		if (rc < 0) {
    90bc:	2800      	cmp	r0, #0
    90be:	dbf9      	blt.n	90b4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    90c0:	341c      	adds	r4, #28
    90c2:	e7f5      	b.n	90b0 <init_mem_slab_module+0x8>
    90c4:	200022f8 	.word	0x200022f8
    90c8:	20002314 	.word	0x20002314

000090cc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    90cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90ce:	460c      	mov	r4, r1
	__asm__ volatile(
    90d0:	f04f 0520 	mov.w	r5, #32
    90d4:	f3ef 8111 	mrs	r1, BASEPRI
    90d8:	f385 8812 	msr	BASEPRI_MAX, r5
    90dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    90e0:	6945      	ldr	r5, [r0, #20]
    90e2:	b15d      	cbz	r5, 90fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    90e4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    90e6:	682b      	ldr	r3, [r5, #0]
    90e8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    90ea:	6983      	ldr	r3, [r0, #24]
    90ec:	3301      	adds	r3, #1
    90ee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    90f0:	2000      	movs	r0, #0
	__asm__ volatile(
    90f2:	f381 8811 	msr	BASEPRI, r1
    90f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    90fa:	e011      	b.n	9120 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    90fc:	ea52 0603 	orrs.w	r6, r2, r3
    9100:	d103      	bne.n	910a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    9102:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    9106:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9108:	e7f3      	b.n	90f2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    910a:	e9cd 2300 	strd	r2, r3, [sp]
    910e:	4602      	mov	r2, r0
    9110:	3008      	adds	r0, #8
    9112:	f000 fbc1 	bl	9898 <z_pend_curr>
		if (result == 0) {
    9116:	b918      	cbnz	r0, 9120 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9118:	4b02      	ldr	r3, [pc, #8]	; (9124 <k_mem_slab_alloc+0x58>)
    911a:	689b      	ldr	r3, [r3, #8]
    911c:	695b      	ldr	r3, [r3, #20]
    911e:	6023      	str	r3, [r4, #0]
}
    9120:	b002      	add	sp, #8
    9122:	bd70      	pop	{r4, r5, r6, pc}
    9124:	2001442c 	.word	0x2001442c

00009128 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    912c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    912e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    9132:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9134:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9136:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    913a:	2500      	movs	r5, #0
{
    913c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    913e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9140:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    9142:	e9c0 5506 	strd	r5, r5, [r0, #24]
    9146:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9148:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    914a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    914c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    9150:	e9c0 1618 	strd	r1, r6, [r0, #96]	; 0x60
	thread_base->pended_on = NULL;
    9154:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9156:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    9158:	6685      	str	r5, [r0, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    915a:	9202      	str	r2, [sp, #8]
    915c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    915e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9162:	9201      	str	r2, [sp, #4]
    9164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9166:	9200      	str	r2, [sp, #0]
    9168:	4642      	mov	r2, r8
    916a:	f7fa ff0b 	bl	3f84 <arch_new_thread>
	if (!_current) {
    916e:	4b05      	ldr	r3, [pc, #20]	; (9184 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    9170:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9172:	689b      	ldr	r3, [r3, #8]
    9174:	b103      	cbz	r3, 9178 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    9176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    9178:	4640      	mov	r0, r8
    917a:	66e3      	str	r3, [r4, #108]	; 0x6c
    917c:	b004      	add	sp, #16
    917e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9182:	bf00      	nop
    9184:	2001442c 	.word	0x2001442c

00009188 <z_impl_k_thread_create>:
{
    9188:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    918a:	2500      	movs	r5, #0
{
    918c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    918e:	9505      	str	r5, [sp, #20]
    9190:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    9192:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9196:	9504      	str	r5, [sp, #16]
    9198:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    919a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    919c:	9503      	str	r5, [sp, #12]
    919e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    91a0:	9502      	str	r5, [sp, #8]
    91a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    91a4:	9501      	str	r5, [sp, #4]
    91a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    91a8:	9500      	str	r5, [sp, #0]
    91aa:	f7ff ffbd 	bl	9128 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    91ae:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    91b2:	bf08      	it	eq
    91b4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    91b8:	d005      	beq.n	91c6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    91ba:	ea56 0307 	orrs.w	r3, r6, r7
    91be:	d105      	bne.n	91cc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    91c0:	4620      	mov	r0, r4
    91c2:	f000 fbd9 	bl	9978 <z_sched_start>
}
    91c6:	4620      	mov	r0, r4
    91c8:	b007      	add	sp, #28
    91ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    91cc:	463a      	mov	r2, r7
    91ce:	4633      	mov	r3, r6
    91d0:	4902      	ldr	r1, [pc, #8]	; (91dc <z_impl_k_thread_create+0x54>)
    91d2:	f104 0018 	add.w	r0, r4, #24
    91d6:	f000 fde1 	bl	9d9c <z_add_timeout>
    91da:	e7f4      	b.n	91c6 <z_impl_k_thread_create+0x3e>
    91dc:	0000e39d 	.word	0x0000e39d

000091e0 <z_init_static_threads>:
{
    91e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    91e4:	4c29      	ldr	r4, [pc, #164]	; (928c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    91e6:	4d2a      	ldr	r5, [pc, #168]	; (9290 <z_init_static_threads+0xb0>)
{
    91e8:	b087      	sub	sp, #28
    91ea:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    91ec:	42ae      	cmp	r6, r5
    91ee:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    91f2:	d30f      	bcc.n	9214 <z_init_static_threads+0x34>
	k_sched_lock();
    91f4:	f000 fc10 	bl	9a18 <k_sched_lock>
    91f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    91fc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    9200:	4c22      	ldr	r4, [pc, #136]	; (928c <z_init_static_threads+0xac>)
    9202:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9294 <z_init_static_threads+0xb4>
    9206:	42ac      	cmp	r4, r5
    9208:	d320      	bcc.n	924c <z_init_static_threads+0x6c>
}
    920a:	b007      	add	sp, #28
    920c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    9210:	f000 bc16 	b.w	9a40 <k_sched_unlock>
		z_setup_new_thread(
    9214:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9218:	9305      	str	r3, [sp, #20]
    921a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    921e:	9304      	str	r3, [sp, #16]
    9220:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9224:	9303      	str	r3, [sp, #12]
    9226:	f854 3c14 	ldr.w	r3, [r4, #-20]
    922a:	9302      	str	r3, [sp, #8]
    922c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    9230:	9301      	str	r3, [sp, #4]
    9232:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9236:	9300      	str	r3, [sp, #0]
    9238:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    923c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    9240:	f7ff ff72 	bl	9128 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9244:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    9248:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    924a:	e7ce      	b.n	91ea <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    924c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    924e:	1c5a      	adds	r2, r3, #1
    9250:	d00d      	beq.n	926e <z_init_static_threads+0x8e>
    9252:	2100      	movs	r1, #0
    9254:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    9256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    925a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    925e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    9262:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9266:	d104      	bne.n	9272 <z_init_static_threads+0x92>
	z_sched_start(thread);
    9268:	4640      	mov	r0, r8
    926a:	f000 fb85 	bl	9978 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    926e:	342c      	adds	r4, #44	; 0x2c
    9270:	e7c9      	b.n	9206 <z_init_static_threads+0x26>
    9272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9276:	2300      	movs	r3, #0
    9278:	f7f6 ff6c 	bl	154 <__aeabi_uldivmod>
    927c:	4602      	mov	r2, r0
    927e:	460b      	mov	r3, r1
    9280:	f108 0018 	add.w	r0, r8, #24
    9284:	4649      	mov	r1, r9
    9286:	f000 fd89 	bl	9d9c <z_add_timeout>
    928a:	e7f0      	b.n	926e <z_init_static_threads+0x8e>
    928c:	0000ea30 	.word	0x0000ea30
    9290:	0000ea30 	.word	0x0000ea30
    9294:	0000e39d 	.word	0x0000e39d

00009298 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    929c:	4604      	mov	r4, r0
    929e:	4617      	mov	r7, r2
    92a0:	461e      	mov	r6, r3
	__asm__ volatile(
    92a2:	f04f 0320 	mov.w	r3, #32
    92a6:	f3ef 8811 	mrs	r8, BASEPRI
    92aa:	f383 8812 	msr	BASEPRI_MAX, r3
    92ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    92b2:	68c3      	ldr	r3, [r0, #12]
    92b4:	4a33      	ldr	r2, [pc, #204]	; (9384 <z_impl_k_mutex_lock+0xec>)
    92b6:	b17b      	cbz	r3, 92d8 <z_impl_k_mutex_lock+0x40>
    92b8:	6880      	ldr	r0, [r0, #8]
    92ba:	6891      	ldr	r1, [r2, #8]
    92bc:	4288      	cmp	r0, r1
    92be:	d019      	beq.n	92f4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    92c0:	ea57 0306 	orrs.w	r3, r7, r6
    92c4:	d118      	bne.n	92f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    92c6:	f388 8811 	msr	BASEPRI, r8
    92ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    92ce:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    92d2:	b002      	add	sp, #8
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    92d8:	6891      	ldr	r1, [r2, #8]
    92da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    92de:	3301      	adds	r3, #1
    92e0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    92e2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    92e4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    92e6:	60a3      	str	r3, [r4, #8]
    92e8:	f388 8811 	msr	BASEPRI, r8
    92ec:	f3bf 8f6f 	isb	sy
		return 0;
    92f0:	2000      	movs	r0, #0
    92f2:	e7ee      	b.n	92d2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    92f4:	6921      	ldr	r1, [r4, #16]
    92f6:	e7f2      	b.n	92de <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    92f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    92fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9300:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9304:	4299      	cmp	r1, r3
    9306:	bfa8      	it	ge
    9308:	4619      	movge	r1, r3
    930a:	4291      	cmp	r1, r2
    930c:	bfb8      	it	lt
    930e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9310:	428b      	cmp	r3, r1
    9312:	dd2e      	ble.n	9372 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9314:	f004 fec5 	bl	e0a2 <adjust_owner_prio.isra.0>
    9318:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    931a:	4622      	mov	r2, r4
    931c:	4641      	mov	r1, r8
    931e:	e9cd 7600 	strd	r7, r6, [sp]
    9322:	4819      	ldr	r0, [pc, #100]	; (9388 <z_impl_k_mutex_lock+0xf0>)
    9324:	f000 fab8 	bl	9898 <z_pend_curr>
	if (got_mutex == 0) {
    9328:	2800      	cmp	r0, #0
    932a:	d0e1      	beq.n	92f0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    932c:	f04f 0320 	mov.w	r3, #32
    9330:	f3ef 8611 	mrs	r6, BASEPRI
    9334:	f383 8812 	msr	BASEPRI_MAX, r3
    9338:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    933c:	68a0      	ldr	r0, [r4, #8]
    933e:	b1d0      	cbz	r0, 9376 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9340:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9342:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9344:	429c      	cmp	r4, r3
    9346:	d00a      	beq.n	935e <z_impl_k_mutex_lock+0xc6>
    9348:	b14b      	cbz	r3, 935e <z_impl_k_mutex_lock+0xc6>
    934a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    934e:	4299      	cmp	r1, r3
    9350:	bfa8      	it	ge
    9352:	4619      	movge	r1, r3
    9354:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9358:	4299      	cmp	r1, r3
    935a:	bfb8      	it	lt
    935c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    935e:	f004 fea0 	bl	e0a2 <adjust_owner_prio.isra.0>
    9362:	b140      	cbz	r0, 9376 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    9364:	4631      	mov	r1, r6
    9366:	4808      	ldr	r0, [pc, #32]	; (9388 <z_impl_k_mutex_lock+0xf0>)
    9368:	f000 faf4 	bl	9954 <z_reschedule>
	return -EAGAIN;
    936c:	f06f 000a 	mvn.w	r0, #10
    9370:	e7af      	b.n	92d2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    9372:	2500      	movs	r5, #0
    9374:	e7d1      	b.n	931a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    9376:	2d00      	cmp	r5, #0
    9378:	d1f4      	bne.n	9364 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    937a:	f386 8811 	msr	BASEPRI, r6
    937e:	f3bf 8f6f 	isb	sy
    9382:	e7f3      	b.n	936c <z_impl_k_mutex_lock+0xd4>
    9384:	2001442c 	.word	0x2001442c
    9388:	20056891 	.word	0x20056891

0000938c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    938c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    938e:	6883      	ldr	r3, [r0, #8]
{
    9390:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    9392:	b36b      	cbz	r3, 93f0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9394:	4a19      	ldr	r2, [pc, #100]	; (93fc <z_impl_k_mutex_unlock+0x70>)
    9396:	6892      	ldr	r2, [r2, #8]
    9398:	4293      	cmp	r3, r2
    939a:	d12c      	bne.n	93f6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    939c:	68c3      	ldr	r3, [r0, #12]
    939e:	2b01      	cmp	r3, #1
    93a0:	d903      	bls.n	93aa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    93a2:	3b01      	subs	r3, #1
    93a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    93a6:	2000      	movs	r0, #0
}
    93a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    93aa:	f04f 0320 	mov.w	r3, #32
    93ae:	f3ef 8511 	mrs	r5, BASEPRI
    93b2:	f383 8812 	msr	BASEPRI_MAX, r3
    93b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    93ba:	6901      	ldr	r1, [r0, #16]
    93bc:	6880      	ldr	r0, [r0, #8]
    93be:	f004 fe70 	bl	e0a2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    93c2:	4620      	mov	r0, r4
    93c4:	f005 f805 	bl	e3d2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    93c8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    93ca:	b158      	cbz	r0, 93e4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    93cc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    93d0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    93d2:	2200      	movs	r2, #0
    93d4:	6742      	str	r2, [r0, #116]	; 0x74
		z_ready_thread(new_owner);
    93d6:	f004 ff9d 	bl	e314 <z_ready_thread>
		z_reschedule(&lock, key);
    93da:	4629      	mov	r1, r5
    93dc:	4808      	ldr	r0, [pc, #32]	; (9400 <z_impl_k_mutex_unlock+0x74>)
    93de:	f000 fab9 	bl	9954 <z_reschedule>
    93e2:	e7e0      	b.n	93a6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    93e4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    93e6:	f385 8811 	msr	BASEPRI, r5
    93ea:	f3bf 8f6f 	isb	sy
    93ee:	e7da      	b.n	93a6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    93f0:	f06f 0015 	mvn.w	r0, #21
    93f4:	e7d8      	b.n	93a8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    93f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    93fa:	e7d5      	b.n	93a8 <z_impl_k_mutex_unlock+0x1c>
    93fc:	2001442c 	.word	0x2001442c
    9400:	20056891 	.word	0x20056891

00009404 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9404:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9406:	4611      	mov	r1, r2
	__asm__ volatile(
    9408:	f04f 0220 	mov.w	r2, #32
    940c:	f3ef 8511 	mrs	r5, BASEPRI
    9410:	f382 8812 	msr	BASEPRI_MAX, r2
    9414:	f3bf 8f6f 	isb	sy
    9418:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    941a:	b19c      	cbz	r4, 9444 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    941c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    941e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9420:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9424:	4294      	cmp	r4, r2
	list->head = node;
    9426:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9428:	bf08      	it	eq
    942a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    942c:	2101      	movs	r1, #1
    942e:	4620      	mov	r0, r4
    9430:	f004 fea8 	bl	e184 <z_queue_node_peek>
    9434:	4604      	mov	r4, r0
	__asm__ volatile(
    9436:	f385 8811 	msr	BASEPRI, r5
    943a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    943e:	4620      	mov	r0, r4
    9440:	b003      	add	sp, #12
    9442:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9444:	ea51 0203 	orrs.w	r2, r1, r3
    9448:	d0f5      	beq.n	9436 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    944a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    944e:	e9cd 1300 	strd	r1, r3, [sp]
    9452:	4610      	mov	r0, r2
    9454:	4629      	mov	r1, r5
    9456:	f000 fa1f 	bl	9898 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    945a:	2800      	cmp	r0, #0
    945c:	d1ef      	bne.n	943e <z_impl_k_queue_get+0x3a>
    945e:	4b02      	ldr	r3, [pc, #8]	; (9468 <z_impl_k_queue_get+0x64>)
    9460:	689b      	ldr	r3, [r3, #8]
    9462:	695c      	ldr	r4, [r3, #20]
    9464:	e7eb      	b.n	943e <z_impl_k_queue_get+0x3a>
    9466:	bf00      	nop
    9468:	2001442c 	.word	0x2001442c

0000946c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    946c:	b538      	push	{r3, r4, r5, lr}
    946e:	4604      	mov	r4, r0
	__asm__ volatile(
    9470:	f04f 0320 	mov.w	r3, #32
    9474:	f3ef 8511 	mrs	r5, BASEPRI
    9478:	f383 8812 	msr	BASEPRI_MAX, r3
    947c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9480:	f004 ffa7 	bl	e3d2 <z_unpend_first_thread>

	if (thread != NULL) {
    9484:	b148      	cbz	r0, 949a <z_impl_k_sem_give+0x2e>
    9486:	2200      	movs	r2, #0
    9488:	6742      	str	r2, [r0, #116]	; 0x74
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    948a:	f004 ff43 	bl	e314 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    948e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    9494:	4804      	ldr	r0, [pc, #16]	; (94a8 <z_impl_k_sem_give+0x3c>)
    9496:	f000 ba5d 	b.w	9954 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    949a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    949e:	429a      	cmp	r2, r3
    94a0:	bf18      	it	ne
    94a2:	3301      	addne	r3, #1
    94a4:	60a3      	str	r3, [r4, #8]
}
    94a6:	e7f2      	b.n	948e <z_impl_k_sem_give+0x22>
    94a8:	20056891 	.word	0x20056891

000094ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    94ac:	b513      	push	{r0, r1, r4, lr}
    94ae:	f04f 0420 	mov.w	r4, #32
    94b2:	f3ef 8111 	mrs	r1, BASEPRI
    94b6:	f384 8812 	msr	BASEPRI_MAX, r4
    94ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    94be:	6884      	ldr	r4, [r0, #8]
    94c0:	b144      	cbz	r4, 94d4 <z_impl_k_sem_take+0x28>
		sem->count--;
    94c2:	3c01      	subs	r4, #1
    94c4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    94c6:	f381 8811 	msr	BASEPRI, r1
    94ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    94ce:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    94d0:	b002      	add	sp, #8
    94d2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    94d4:	ea52 0403 	orrs.w	r4, r2, r3
    94d8:	d106      	bne.n	94e8 <z_impl_k_sem_take+0x3c>
    94da:	f381 8811 	msr	BASEPRI, r1
    94de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    94e2:	f06f 000f 	mvn.w	r0, #15
    94e6:	e7f3      	b.n	94d0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    94e8:	e9cd 2300 	strd	r2, r3, [sp]
    94ec:	4602      	mov	r2, r0
    94ee:	4802      	ldr	r0, [pc, #8]	; (94f8 <z_impl_k_sem_take+0x4c>)
    94f0:	f000 f9d2 	bl	9898 <z_pend_curr>
	return ret;
    94f4:	e7ec      	b.n	94d0 <z_impl_k_sem_take+0x24>
    94f6:	bf00      	nop
    94f8:	20056891 	.word	0x20056891

000094fc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    94fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9500:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9502:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
    950a:	4e46      	ldr	r6, [pc, #280]	; (9624 <work_queue_main+0x128>)
{
    950c:	b085      	sub	sp, #20
	__asm__ volatile(
    950e:	f04f 0320 	mov.w	r3, #32
    9512:	f3ef 8711 	mrs	r7, BASEPRI
    9516:	f383 8812 	msr	BASEPRI_MAX, r3
    951a:	f3bf 8f6f 	isb	sy
    951e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
Z_GENLIST_GET(slist, snode)
    9520:	b98d      	cbnz	r5, 9546 <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    9522:	2102      	movs	r1, #2
    9524:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9528:	f004 fe4f 	bl	e1ca <flag_test_and_clear>
    952c:	2800      	cmp	r0, #0
    952e:	d140      	bne.n	95b2 <work_queue_main+0xb6>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9530:	2300      	movs	r3, #0
    9532:	4639      	mov	r1, r7
    9534:	e9cd 8900 	strd	r8, r9, [sp]
    9538:	9302      	str	r3, [sp, #8]
    953a:	f104 0280 	add.w	r2, r4, #128	; 0x80
    953e:	483a      	ldr	r0, [pc, #232]	; (9628 <work_queue_main+0x12c>)
    9540:	f000 fbba 	bl	9cb8 <z_sched_wait>
			continue;
    9544:	e7e3      	b.n	950e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9546:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
    9548:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    954a:	4295      	cmp	r5, r2
	list->head = node;
    954c:	67a3      	str	r3, [r4, #120]	; 0x78
	list->tail = node;
    954e:	bf08      	it	eq
    9550:	67e3      	streq	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
    9552:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9556:	f043 0302 	orr.w	r3, r3, #2
    955a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
    955e:	68eb      	ldr	r3, [r5, #12]
    9560:	f023 0304 	bic.w	r3, r3, #4
    9564:	f043 0301 	orr.w	r3, r3, #1
    9568:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    956a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    956c:	f387 8811 	msr	BASEPRI, r7
    9570:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9574:	4628      	mov	r0, r5
    9576:	4798      	blx	r3
	__asm__ volatile(
    9578:	f04f 0320 	mov.w	r3, #32
    957c:	f3ef 8b11 	mrs	fp, BASEPRI
    9580:	f383 8812 	msr	BASEPRI_MAX, r3
    9584:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9588:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    958a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    958c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9590:	d419      	bmi.n	95c6 <work_queue_main+0xca>
	*flagp &= ~BIT(bit);
    9592:	60ea      	str	r2, [r5, #12]
    9594:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9598:	f023 0302 	bic.w	r3, r3, #2
    959c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
    95a0:	f38b 8811 	msr	BASEPRI, fp
    95a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    95a8:	05db      	lsls	r3, r3, #23
    95aa:	d4b0      	bmi.n	950e <work_queue_main+0x12>
	z_impl_k_yield();
    95ac:	f000 fa6c 	bl	9a88 <z_impl_k_yield>
}
    95b0:	e7ad      	b.n	950e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    95b2:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    95b6:	2200      	movs	r2, #0
    95b8:	2101      	movs	r1, #1
    95ba:	4628      	mov	r0, r5
    95bc:	f004 ff63 	bl	e486 <z_sched_wake>
    95c0:	2800      	cmp	r0, #0
    95c2:	d1f8      	bne.n	95b6 <work_queue_main+0xba>
    95c4:	e7b4      	b.n	9530 <work_queue_main+0x34>
	return list->head;
    95c6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    95c8:	f023 0303 	bic.w	r3, r3, #3
    95cc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    95ce:	2800      	cmp	r0, #0
    95d0:	d0e0      	beq.n	9594 <work_queue_main+0x98>
	return node->next;
    95d2:	2700      	movs	r7, #0
	parent->next = child;
    95d4:	463b      	mov	r3, r7
	return node->next;
    95d6:	f8d0 a000 	ldr.w	sl, [r0]
    95da:	2800      	cmp	r0, #0
    95dc:	d0da      	beq.n	9594 <work_queue_main+0x98>
		if (wc->work == work) {
    95de:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    95e0:	4601      	mov	r1, r0
		if (wc->work == work) {
    95e2:	4295      	cmp	r5, r2
    95e4:	d10c      	bne.n	9600 <work_queue_main+0x104>
    95e6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    95e8:	b99f      	cbnz	r7, 9612 <work_queue_main+0x116>
    95ea:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    95ec:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    95ee:	4282      	cmp	r2, r0
    95f0:	d100      	bne.n	95f4 <work_queue_main+0xf8>
	list->tail = node;
    95f2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    95f4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    95f8:	f7ff ff38 	bl	946c <z_impl_k_sem_give>
}
    95fc:	4639      	mov	r1, r7
    95fe:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9600:	f1ba 0f00 	cmp.w	sl, #0
    9604:	d00b      	beq.n	961e <work_queue_main+0x122>
	return node->next;
    9606:	f8da 2000 	ldr.w	r2, [sl]
    960a:	4650      	mov	r0, sl
    960c:	460f      	mov	r7, r1
    960e:	4692      	mov	sl, r2
    9610:	e7e3      	b.n	95da <work_queue_main+0xde>
	parent->next = child;
    9612:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9614:	6872      	ldr	r2, [r6, #4]
    9616:	4282      	cmp	r2, r0
	list->tail = node;
    9618:	bf08      	it	eq
    961a:	6077      	streq	r7, [r6, #4]
}
    961c:	e7ea      	b.n	95f4 <work_queue_main+0xf8>
    961e:	4652      	mov	r2, sl
    9620:	e7f3      	b.n	960a <work_queue_main+0x10e>
    9622:	bf00      	nop
    9624:	2001444c 	.word	0x2001444c
    9628:	20056891 	.word	0x20056891

0000962c <submit_to_queue_locked>:
{
    962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    962e:	68c3      	ldr	r3, [r0, #12]
{
    9630:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9632:	079a      	lsls	r2, r3, #30
{
    9634:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9636:	f3c3 0640 	ubfx	r6, r3, #1, #1
    963a:	d42c      	bmi.n	9696 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    963c:	075b      	lsls	r3, r3, #29
    963e:	d41a      	bmi.n	9676 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    9640:	680b      	ldr	r3, [r1, #0]
    9642:	b90b      	cbnz	r3, 9648 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9644:	6883      	ldr	r3, [r0, #8]
    9646:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    9648:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    964a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    964c:	bf42      	ittt	mi
    964e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    9650:	2602      	movmi	r6, #2
			*queuep = work->queue;
    9652:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    9654:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    9656:	bf58      	it	pl
    9658:	2601      	movpl	r6, #1
	if (queue == NULL) {
    965a:	2d00      	cmp	r5, #0
    965c:	d038      	beq.n	96d0 <submit_to_queue_locked+0xa4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    965e:	4b1e      	ldr	r3, [pc, #120]	; (96d8 <submit_to_queue_locked+0xac>)
    9660:	689b      	ldr	r3, [r3, #8]
    9662:	42ab      	cmp	r3, r5
    9664:	d00a      	beq.n	967c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    9666:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    966a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    966c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9670:	d414      	bmi.n	969c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    9672:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    9676:	2300      	movs	r3, #0
    9678:	603b      	str	r3, [r7, #0]
	return ret;
    967a:	e024      	b.n	96c6 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    967c:	f004 fcfa 	bl	e074 <k_is_in_isr>
    9680:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    9684:	2800      	cmp	r0, #0
    9686:	d1f0      	bne.n	966a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9688:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    968a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    968e:	d5f0      	bpl.n	9672 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    9690:	b152      	cbz	r2, 96a8 <submit_to_queue_locked+0x7c>
    9692:	075b      	lsls	r3, r3, #29
    9694:	d408      	bmi.n	96a8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    9696:	f06f 060f 	mvn.w	r6, #15
    969a:	e7ec      	b.n	9676 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    969c:	2a00      	cmp	r2, #0
    969e:	d1fa      	bne.n	9696 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    96a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    96a4:	2b00      	cmp	r3, #0
    96a6:	d1f6      	bne.n	9696 <submit_to_queue_locked+0x6a>
	parent->next = child;
    96a8:	2300      	movs	r3, #0
    96aa:	6023      	str	r3, [r4, #0]
	return list->tail;
    96ac:	6feb      	ldr	r3, [r5, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
    96ae:	b963      	cbnz	r3, 96ca <submit_to_queue_locked+0x9e>
	list->head = node;
    96b0:	e9c5 441e 	strd	r4, r4, [r5, #120]	; 0x78
		(void)notify_queue_locked(queue);
    96b4:	4628      	mov	r0, r5
    96b6:	f004 fd93 	bl	e1e0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    96ba:	68e3      	ldr	r3, [r4, #12]
    96bc:	f043 0304 	orr.w	r3, r3, #4
    96c0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    96c2:	683b      	ldr	r3, [r7, #0]
    96c4:	60a3      	str	r3, [r4, #8]
}
    96c6:	4630      	mov	r0, r6
    96c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    96ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    96cc:	67ec      	str	r4, [r5, #124]	; 0x7c
}
    96ce:	e7f1      	b.n	96b4 <submit_to_queue_locked+0x88>
		return -EINVAL;
    96d0:	f06f 0615 	mvn.w	r6, #21
    96d4:	e7cf      	b.n	9676 <submit_to_queue_locked+0x4a>
    96d6:	bf00      	nop
    96d8:	2001442c 	.word	0x2001442c

000096dc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    96dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    96de:	4604      	mov	r4, r0
	list->head = NULL;
    96e0:	2000      	movs	r0, #0
    96e2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    96e4:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    96e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    96ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
    96ee:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    96f2:	f104 0088 	add.w	r0, r4, #136	; 0x88
    96f6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    96fa:	b31d      	cbz	r5, 9744 <k_work_queue_start+0x68>
    96fc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    96fe:	2800      	cmp	r0, #0
    9700:	f240 1001 	movw	r0, #257	; 0x101
    9704:	bf08      	it	eq
    9706:	2001      	moveq	r0, #1
	*flagp = flags;
    9708:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    970c:	2000      	movs	r0, #0
    970e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9716:	e9cd 3003 	strd	r3, r0, [sp, #12]
    971a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    971e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9722:	4620      	mov	r0, r4
    9724:	4b08      	ldr	r3, [pc, #32]	; (9748 <k_work_queue_start+0x6c>)
    9726:	9400      	str	r4, [sp, #0]
    9728:	f7ff fd2e 	bl	9188 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    972c:	b125      	cbz	r5, 9738 <k_work_queue_start+0x5c>
    972e:	6829      	ldr	r1, [r5, #0]
    9730:	b111      	cbz	r1, 9738 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    9732:	4620      	mov	r0, r4
    9734:	f004 fca4 	bl	e080 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9738:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    973a:	b009      	add	sp, #36	; 0x24
    973c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9740:	f004 bca1 	b.w	e086 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9744:	2001      	movs	r0, #1
    9746:	e7df      	b.n	9708 <k_work_queue_start+0x2c>
    9748:	000094fd 	.word	0x000094fd

0000974c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    974c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    974e:	9001      	str	r0, [sp, #4]
    9750:	4608      	mov	r0, r1
	__asm__ volatile(
    9752:	f04f 0120 	mov.w	r1, #32
    9756:	f3ef 8411 	mrs	r4, BASEPRI
    975a:	f381 8812 	msr	BASEPRI_MAX, r1
    975e:	f3bf 8f6f 	isb	sy
	return *flagp;
    9762:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    9764:	f011 0f0e 	tst.w	r1, #14
    9768:	d116      	bne.n	9798 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    976a:	ea53 0502 	orrs.w	r5, r3, r2
    976e:	d108      	bne.n	9782 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    9770:	a901      	add	r1, sp, #4
    9772:	f7ff ff5b 	bl	962c <submit_to_queue_locked>
	__asm__ volatile(
    9776:	f384 8811 	msr	BASEPRI, r4
    977a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    977e:	b003      	add	sp, #12
    9780:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    9782:	f041 0108 	orr.w	r1, r1, #8
    9786:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    9788:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    978a:	3010      	adds	r0, #16
	dwork->queue = *queuep;
    978c:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    978e:	4903      	ldr	r1, [pc, #12]	; (979c <k_work_schedule_for_queue+0x50>)
    9790:	f000 fb04 	bl	9d9c <z_add_timeout>
	return ret;
    9794:	2001      	movs	r0, #1
    9796:	e7ee      	b.n	9776 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    9798:	2000      	movs	r0, #0
    979a:	e7ec      	b.n	9776 <k_work_schedule_for_queue+0x2a>
    979c:	0000e1ef 	.word	0x0000e1ef

000097a0 <update_cache>:
	return list->head == list;
    97a0:	4a0a      	ldr	r2, [pc, #40]	; (97cc <update_cache+0x2c>)
    97a2:	4611      	mov	r1, r2
    97a4:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    97a8:	428b      	cmp	r3, r1
    97aa:	d000      	beq.n	97ae <update_cache+0xe>
	 * the queue (actually we have to, otherwise the assembly
	 * context switch code for all architectures would be
	 * responsible for putting it back in z_swap and ISR return!),
	 * which makes this choice simple.
	 */
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    97ac:	b903      	cbnz	r3, 97b0 <update_cache+0x10>
    97ae:	68d3      	ldr	r3, [r2, #12]
	if (preempt_ok != 0) {
    97b0:	b948      	cbnz	r0, 97c6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    97b2:	6891      	ldr	r1, [r2, #8]
    97b4:	7b48      	ldrb	r0, [r1, #13]
    97b6:	06c0      	lsls	r0, r0, #27
    97b8:	d105      	bne.n	97c6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    97ba:	6998      	ldr	r0, [r3, #24]
    97bc:	b918      	cbnz	r0, 97c6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    97be:	89c8      	ldrh	r0, [r1, #14]
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
	} else {
		_kernel.ready_q.cache = _current;
    97c0:	287f      	cmp	r0, #127	; 0x7f
    97c2:	bf88      	it	hi
    97c4:	460b      	movhi	r3, r1
    97c6:	6153      	str	r3, [r2, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    97c8:	4770      	bx	lr
    97ca:	bf00      	nop
    97cc:	2001442c 	.word	0x2001442c

000097d0 <unready_thread>:

	return thread->base.pended_on;
}

static void unready_thread(struct k_thread *thread)
{
    97d0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    97d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    97d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    97d8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    97da:	7b43      	ldrb	r3, [r0, #13]
    97dc:	da04      	bge.n	97e8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    97de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    97e2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    97e4:	f004 fd5c 	bl	e2a0 <sys_dlist_remove>
	update_cache(thread == _current);
    97e8:	4b04      	ldr	r3, [pc, #16]	; (97fc <unready_thread+0x2c>)
    97ea:	6898      	ldr	r0, [r3, #8]
    97ec:	1a43      	subs	r3, r0, r1
    97ee:	4258      	negs	r0, r3
    97f0:	4158      	adcs	r0, r3
}
    97f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    97f6:	f7ff bfd3 	b.w	97a0 <update_cache>
    97fa:	bf00      	nop
    97fc:	2001442c 	.word	0x2001442c

00009800 <pend_locked>:
{
    9800:	b570      	push	{r4, r5, r6, lr}
    9802:	4615      	mov	r5, r2
    9804:	461c      	mov	r4, r3
    9806:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    9808:	f004 fd5c 	bl	e2c4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    980c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9810:	bf08      	it	eq
    9812:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    9816:	d008      	beq.n	982a <pend_locked+0x2a>
    9818:	462a      	mov	r2, r5
    981a:	4623      	mov	r3, r4
    981c:	f106 0018 	add.w	r0, r6, #24
    9820:	4902      	ldr	r1, [pc, #8]	; (982c <pend_locked+0x2c>)
}
    9822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9826:	f000 bab9 	b.w	9d9c <z_add_timeout>
    982a:	bd70      	pop	{r4, r5, r6, pc}
    982c:	0000e39d 	.word	0x0000e39d

00009830 <ready_thread>:
{
    9830:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9832:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9836:	7b42      	ldrb	r2, [r0, #13]
    9838:	2b00      	cmp	r3, #0
    983a:	db29      	blt.n	9890 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    983c:	06d3      	lsls	r3, r2, #27
    983e:	d127      	bne.n	9890 <ready_thread+0x60>
	return node->next != NULL;
    9840:	6983      	ldr	r3, [r0, #24]
    9842:	bb2b      	cbnz	r3, 9890 <ready_thread+0x60>
	return list->head == list;
    9844:	4913      	ldr	r1, [pc, #76]	; (9894 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    9846:	f062 027f 	orn	r2, r2, #127	; 0x7f
    984a:	7342      	strb	r2, [r0, #13]
    984c:	460a      	mov	r2, r1
    984e:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9852:	4294      	cmp	r4, r2
    9854:	bf18      	it	ne
    9856:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9858:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    985a:	b923      	cbnz	r3, 9866 <ready_thread+0x36>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    985c:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
    9860:	6020      	str	r0, [r4, #0]
	list->tail = node;
    9862:	61c8      	str	r0, [r1, #28]
}
    9864:	e00c      	b.n	9880 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    9866:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    986a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    986e:	42b5      	cmp	r5, r6
    9870:	d00a      	beq.n	9888 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9872:	42ae      	cmp	r6, r5
    9874:	dd08      	ble.n	9888 <ready_thread+0x58>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9876:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9878:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    987c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    987e:	6058      	str	r0, [r3, #4]
		update_cache(0);
    9880:	2000      	movs	r0, #0
}
    9882:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9884:	f7ff bf8c 	b.w	97a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9888:	429c      	cmp	r4, r3
    988a:	d0e7      	beq.n	985c <ready_thread+0x2c>
    988c:	681b      	ldr	r3, [r3, #0]
    988e:	e7e4      	b.n	985a <ready_thread+0x2a>
}
    9890:	bc70      	pop	{r4, r5, r6}
    9892:	4770      	bx	lr
    9894:	2001442c 	.word	0x2001442c

00009898 <z_pend_curr>:
{
    9898:	b538      	push	{r3, r4, r5, lr}
    989a:	460c      	mov	r4, r1
    989c:	4611      	mov	r1, r2
    989e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    98a2:	f04f 0520 	mov.w	r5, #32
    98a6:	f3ef 8011 	mrs	r0, BASEPRI
    98aa:	f385 8812 	msr	BASEPRI_MAX, r5
    98ae:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    98b2:	4804      	ldr	r0, [pc, #16]	; (98c4 <z_pend_curr+0x2c>)
    98b4:	6880      	ldr	r0, [r0, #8]
    98b6:	f7ff ffa3 	bl	9800 <pend_locked>
	ret = arch_swap(key);
    98ba:	4620      	mov	r0, r4
}
    98bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    98c0:	f7fa bb0a 	b.w	3ed8 <arch_swap>
    98c4:	2001442c 	.word	0x2001442c

000098c8 <z_set_prio>:
{
    98c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ca:	4604      	mov	r4, r0
    98cc:	f04f 0320 	mov.w	r3, #32
    98d0:	f3ef 8611 	mrs	r6, BASEPRI
    98d4:	f383 8812 	msr	BASEPRI_MAX, r3
    98d8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    98dc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    98de:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    98e0:	06da      	lsls	r2, r3, #27
    98e2:	d119      	bne.n	9918 <z_set_prio+0x50>
	return node->next != NULL;
    98e4:	6985      	ldr	r5, [r0, #24]
    98e6:	b9bd      	cbnz	r5, 9918 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    98e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    98ec:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    98ee:	f004 fcd7 	bl	e2a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    98f2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    98f4:	4a16      	ldr	r2, [pc, #88]	; (9950 <z_set_prio+0x88>)
    98f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    98fa:	7343      	strb	r3, [r0, #13]
    98fc:	4613      	mov	r3, r2
				thread->base.prio = prio;
    98fe:	7381      	strb	r1, [r0, #14]
    9900:	f853 0f18 	ldr.w	r0, [r3, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9904:	4298      	cmp	r0, r3
    9906:	bf18      	it	ne
    9908:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    990a:	69d0      	ldr	r0, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    990c:	b95d      	cbnz	r5, 9926 <z_set_prio+0x5e>
	node->prev = tail;
    990e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    9912:	6004      	str	r4, [r0, #0]
	list->tail = node;
    9914:	61d4      	str	r4, [r2, #28]
}
    9916:	e011      	b.n	993c <z_set_prio+0x74>
    9918:	2000      	movs	r0, #0
			thread->base.prio = prio;
    991a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    991c:	f386 8811 	msr	BASEPRI, r6
    9920:	f3bf 8f6f 	isb	sy
}
    9924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    9926:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    992a:	42b9      	cmp	r1, r7
    992c:	d00b      	beq.n	9946 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    992e:	428f      	cmp	r7, r1
    9930:	dd09      	ble.n	9946 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    9932:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    9934:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    9938:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    993a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    993c:	2001      	movs	r0, #1
    993e:	f7ff ff2f 	bl	97a0 <update_cache>
    9942:	2001      	movs	r0, #1
    9944:	e7ea      	b.n	991c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    9946:	42a8      	cmp	r0, r5
    9948:	d0e1      	beq.n	990e <z_set_prio+0x46>
    994a:	682d      	ldr	r5, [r5, #0]
    994c:	e7de      	b.n	990c <z_set_prio+0x44>
    994e:	bf00      	nop
    9950:	2001442c 	.word	0x2001442c

00009954 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9954:	b949      	cbnz	r1, 996a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9956:	f3ef 8005 	mrs	r0, IPSR
    995a:	b930      	cbnz	r0, 996a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    995c:	4b05      	ldr	r3, [pc, #20]	; (9974 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    995e:	695a      	ldr	r2, [r3, #20]
    9960:	689b      	ldr	r3, [r3, #8]
    9962:	429a      	cmp	r2, r3
    9964:	d001      	beq.n	996a <z_reschedule+0x16>
    9966:	f7fa bab7 	b.w	3ed8 <arch_swap>
    996a:	f381 8811 	msr	BASEPRI, r1
    996e:	f3bf 8f6f 	isb	sy
}
    9972:	4770      	bx	lr
    9974:	2001442c 	.word	0x2001442c

00009978 <z_sched_start>:
{
    9978:	b510      	push	{r4, lr}
	__asm__ volatile(
    997a:	f04f 0220 	mov.w	r2, #32
    997e:	f3ef 8411 	mrs	r4, BASEPRI
    9982:	f382 8812 	msr	BASEPRI_MAX, r2
    9986:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    998a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    998c:	0751      	lsls	r1, r2, #29
    998e:	d404      	bmi.n	999a <z_sched_start+0x22>
	__asm__ volatile(
    9990:	f384 8811 	msr	BASEPRI, r4
    9994:	f3bf 8f6f 	isb	sy
}
    9998:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    999a:	f022 0204 	bic.w	r2, r2, #4
    999e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    99a0:	f7ff ff46 	bl	9830 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    99a4:	4621      	mov	r1, r4
}
    99a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    99aa:	4801      	ldr	r0, [pc, #4]	; (99b0 <z_sched_start+0x38>)
    99ac:	f7ff bfd2 	b.w	9954 <z_reschedule>
    99b0:	20056891 	.word	0x20056891

000099b4 <z_impl_k_thread_suspend>:
{
    99b4:	b570      	push	{r4, r5, r6, lr}
    99b6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    99b8:	3018      	adds	r0, #24
    99ba:	f004 fd87 	bl	e4cc <z_abort_timeout>
	__asm__ volatile(
    99be:	f04f 0320 	mov.w	r3, #32
    99c2:	f3ef 8611 	mrs	r6, BASEPRI
    99c6:	f383 8812 	msr	BASEPRI_MAX, r3
    99ca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    99ce:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    99d2:	7b63      	ldrb	r3, [r4, #13]
    99d4:	2a00      	cmp	r2, #0
    99d6:	da05      	bge.n	99e4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    99d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    99dc:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    99de:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    99e0:	f004 fc5e 	bl	e2a0 <sys_dlist_remove>
		update_cache(thread == _current);
    99e4:	4d0b      	ldr	r5, [pc, #44]	; (9a14 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    99e6:	7b63      	ldrb	r3, [r4, #13]
    99e8:	68a8      	ldr	r0, [r5, #8]
    99ea:	f043 0310 	orr.w	r3, r3, #16
    99ee:	7363      	strb	r3, [r4, #13]
    99f0:	1b03      	subs	r3, r0, r4
    99f2:	4258      	negs	r0, r3
    99f4:	4158      	adcs	r0, r3
    99f6:	f7ff fed3 	bl	97a0 <update_cache>
	__asm__ volatile(
    99fa:	f386 8811 	msr	BASEPRI, r6
    99fe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    9a02:	68ab      	ldr	r3, [r5, #8]
    9a04:	42a3      	cmp	r3, r4
    9a06:	d103      	bne.n	9a10 <z_impl_k_thread_suspend+0x5c>
}
    9a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9a0c:	f004 bd21 	b.w	e452 <z_reschedule_unlocked>
}
    9a10:	bd70      	pop	{r4, r5, r6, pc}
    9a12:	bf00      	nop
    9a14:	2001442c 	.word	0x2001442c

00009a18 <k_sched_lock>:
	__asm__ volatile(
    9a18:	f04f 0320 	mov.w	r3, #32
    9a1c:	f3ef 8111 	mrs	r1, BASEPRI
    9a20:	f383 8812 	msr	BASEPRI_MAX, r3
    9a24:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    9a28:	4b04      	ldr	r3, [pc, #16]	; (9a3c <k_sched_lock+0x24>)
    9a2a:	689a      	ldr	r2, [r3, #8]
    9a2c:	7bd3      	ldrb	r3, [r2, #15]
    9a2e:	3b01      	subs	r3, #1
    9a30:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    9a32:	f381 8811 	msr	BASEPRI, r1
    9a36:	f3bf 8f6f 	isb	sy
}
    9a3a:	4770      	bx	lr
    9a3c:	2001442c 	.word	0x2001442c

00009a40 <k_sched_unlock>:
{
    9a40:	b510      	push	{r4, lr}
	__asm__ volatile(
    9a42:	f04f 0320 	mov.w	r3, #32
    9a46:	f3ef 8411 	mrs	r4, BASEPRI
    9a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a4e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    9a52:	4b08      	ldr	r3, [pc, #32]	; (9a74 <k_sched_unlock+0x34>)
		update_cache(0);
    9a54:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9a56:	689a      	ldr	r2, [r3, #8]
    9a58:	7bd3      	ldrb	r3, [r2, #15]
    9a5a:	3301      	adds	r3, #1
    9a5c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9a5e:	f7ff fe9f 	bl	97a0 <update_cache>
	__asm__ volatile(
    9a62:	f384 8811 	msr	BASEPRI, r4
    9a66:	f3bf 8f6f 	isb	sy
}
    9a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    9a6e:	f004 bcf0 	b.w	e452 <z_reschedule_unlocked>
    9a72:	bf00      	nop
    9a74:	2001442c 	.word	0x2001442c

00009a78 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9a78:	4b02      	ldr	r3, [pc, #8]	; (9a84 <z_sched_init+0xc>)
    9a7a:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
    9a7e:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    9a82:	4770      	bx	lr
    9a84:	2001442c 	.word	0x2001442c

00009a88 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    9a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    9a8a:	f04f 0320 	mov.w	r3, #32
    9a8e:	f3ef 8511 	mrs	r5, BASEPRI
    9a92:	f383 8812 	msr	BASEPRI_MAX, r3
    9a96:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    9a9a:	4919      	ldr	r1, [pc, #100]	; (9b00 <z_impl_k_yield+0x78>)
    9a9c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a9e:	7b43      	ldrb	r3, [r0, #13]
    9aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9aa4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9aa6:	f004 fbfb 	bl	e2a0 <sys_dlist_remove>
	return list->head == list;
    9aaa:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    9aac:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9aae:	7b5a      	ldrb	r2, [r3, #13]
    9ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9ab4:	735a      	strb	r2, [r3, #13]
    9ab6:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
    9aba:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9abc:	4282      	cmp	r2, r0
    9abe:	bf08      	it	eq
    9ac0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9ac2:	b922      	cbnz	r2, 9ace <z_impl_k_yield+0x46>
	node->prev = tail;
    9ac4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    9ac8:	6023      	str	r3, [r4, #0]
	list->tail = node;
    9aca:	61cb      	str	r3, [r1, #28]
}
    9acc:	e00c      	b.n	9ae8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    9ace:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    9ad2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    9ad6:	42be      	cmp	r6, r7
    9ad8:	d00e      	beq.n	9af8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9ada:	42b7      	cmp	r7, r6
    9adc:	dd0c      	ble.n	9af8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    9ade:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9ae0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    9ae4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    9ae6:	6053      	str	r3, [r2, #4]
	update_cache(1);
    9ae8:	2001      	movs	r0, #1
    9aea:	f7ff fe59 	bl	97a0 <update_cache>
    9aee:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    9af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9af4:	f7fa b9f0 	b.w	3ed8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9af8:	42a2      	cmp	r2, r4
    9afa:	d0e3      	beq.n	9ac4 <z_impl_k_yield+0x3c>
    9afc:	6812      	ldr	r2, [r2, #0]
    9afe:	e7e0      	b.n	9ac2 <z_impl_k_yield+0x3a>
    9b00:	2001442c 	.word	0x2001442c

00009b04 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    9b04:	ea50 0301 	orrs.w	r3, r0, r1
{
    9b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b0c:	4605      	mov	r5, r0
    9b0e:	460e      	mov	r6, r1
	if (ticks == 0) {
    9b10:	d103      	bne.n	9b1a <z_tick_sleep+0x16>
	z_impl_k_yield();
    9b12:	f7ff ffb9 	bl	9a88 <z_impl_k_yield>
		k_yield();
		return 0;
    9b16:	2000      	movs	r0, #0
    9b18:	e02a      	b.n	9b70 <z_tick_sleep+0x6c>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    9b1a:	1c83      	adds	r3, r0, #2
    9b1c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    9b20:	db28      	blt.n	9b74 <z_tick_sleep+0x70>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9b22:	f004 fce9 	bl	e4f8 <sys_clock_tick_get_32>
    9b26:	182c      	adds	r4, r5, r0
    9b28:	f04f 0320 	mov.w	r3, #32
    9b2c:	f3ef 8811 	mrs	r8, BASEPRI
    9b30:	f383 8812 	msr	BASEPRI_MAX, r3
    9b34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    9b38:	4f10      	ldr	r7, [pc, #64]	; (9b7c <z_tick_sleep+0x78>)
    9b3a:	68b8      	ldr	r0, [r7, #8]
    9b3c:	f7ff fe48 	bl	97d0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9b40:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9b42:	490f      	ldr	r1, [pc, #60]	; (9b80 <z_tick_sleep+0x7c>)
    9b44:	462a      	mov	r2, r5
    9b46:	4633      	mov	r3, r6
    9b48:	3018      	adds	r0, #24
    9b4a:	f000 f927 	bl	9d9c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9b4e:	68ba      	ldr	r2, [r7, #8]
    9b50:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9b52:	7b53      	ldrb	r3, [r2, #13]
    9b54:	f043 0310 	orr.w	r3, r3, #16
    9b58:	7353      	strb	r3, [r2, #13]
    9b5a:	f7fa f9bd 	bl	3ed8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9b5e:	f004 fccb 	bl	e4f8 <sys_clock_tick_get_32>
    9b62:	1a20      	subs	r0, r4, r0
    9b64:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    9b68:	2801      	cmp	r0, #1
    9b6a:	f173 0300 	sbcs.w	r3, r3, #0
    9b6e:	dbd2      	blt.n	9b16 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    9b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9b74:	f06f 0401 	mvn.w	r4, #1
    9b78:	1a24      	subs	r4, r4, r0
    9b7a:	e7d5      	b.n	9b28 <z_tick_sleep+0x24>
    9b7c:	2001442c 	.word	0x2001442c
    9b80:	0000e39d 	.word	0x0000e39d

00009b84 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b84:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9b88:	bf08      	it	eq
    9b8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    9b8e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b90:	d106      	bne.n	9ba0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    9b92:	4b08      	ldr	r3, [pc, #32]	; (9bb4 <z_impl_k_sleep+0x30>)
    9b94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9b96:	f7ff ff0d 	bl	99b4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    9b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    9b9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9ba0:	f7ff ffb0 	bl	9b04 <z_tick_sleep>
    9ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9ba8:	fb80 0303 	smull	r0, r3, r0, r3
    9bac:	0bc0      	lsrs	r0, r0, #15
    9bae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9bb2:	e7f4      	b.n	9b9e <z_impl_k_sleep+0x1a>
    9bb4:	2001442c 	.word	0x2001442c

00009bb8 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    9bb8:	b538      	push	{r3, r4, r5, lr}
    9bba:	2100      	movs	r1, #0
    9bbc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9bc0:	4c08      	ldr	r4, [pc, #32]	; (9be4 <z_impl_k_usleep+0x2c>)
    9bc2:	2300      	movs	r3, #0
    9bc4:	fbc0 4105 	smlal	r4, r1, r0, r5
    9bc8:	4a07      	ldr	r2, [pc, #28]	; (9be8 <z_impl_k_usleep+0x30>)
    9bca:	4620      	mov	r0, r4
    9bcc:	f7f6 fac2 	bl	154 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    9bd0:	17c1      	asrs	r1, r0, #31
    9bd2:	f7ff ff97 	bl	9b04 <z_tick_sleep>
    9bd6:	4b04      	ldr	r3, [pc, #16]	; (9be8 <z_impl_k_usleep+0x30>)
    9bd8:	fb80 0303 	smull	r0, r3, r0, r3
    9bdc:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    9bde:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9be2:	bd38      	pop	{r3, r4, r5, pc}
    9be4:	000f423f 	.word	0x000f423f
    9be8:	000f4240 	.word	0x000f4240

00009bec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9bec:	4b01      	ldr	r3, [pc, #4]	; (9bf4 <z_impl_z_current_get+0x8>)
    9bee:	6898      	ldr	r0, [r3, #8]
    9bf0:	4770      	bx	lr
    9bf2:	bf00      	nop
    9bf4:	2001442c 	.word	0x2001442c

00009bf8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bfc:	4604      	mov	r4, r0
    9bfe:	f04f 0320 	mov.w	r3, #32
    9c02:	f3ef 8611 	mrs	r6, BASEPRI
    9c06:	f383 8812 	msr	BASEPRI_MAX, r3
    9c0a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    9c0e:	7b03      	ldrb	r3, [r0, #12]
    9c10:	07d9      	lsls	r1, r3, #31
    9c12:	d50b      	bpl.n	9c2c <z_thread_abort+0x34>
	__asm__ volatile(
    9c14:	f386 8811 	msr	BASEPRI, r6
    9c18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    9c1c:	4040      	eors	r0, r0
    9c1e:	f380 8811 	msr	BASEPRI, r0
    9c22:	f04f 0004 	mov.w	r0, #4
    9c26:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9c2c:	7b43      	ldrb	r3, [r0, #13]
    9c2e:	071a      	lsls	r2, r3, #28
    9c30:	d504      	bpl.n	9c3c <z_thread_abort+0x44>
    9c32:	f386 8811 	msr	BASEPRI, r6
    9c36:	f3bf 8f6f 	isb	sy
    9c3a:	e7f5      	b.n	9c28 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9c3c:	f023 0220 	bic.w	r2, r3, #32
    9c40:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    9c44:	09d2      	lsrs	r2, r2, #7
    9c46:	d120      	bne.n	9c8a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9c48:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    9c4a:	68a3      	ldr	r3, [r4, #8]
    9c4c:	b113      	cbz	r3, 9c54 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    9c4e:	4620      	mov	r0, r4
    9c50:	f004 fb2e 	bl	e2b0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    9c54:	f104 0018 	add.w	r0, r4, #24
    9c58:	f004 fc38 	bl	e4cc <z_abort_timeout>
    9c5c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9c60:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    9c64:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c66:	42bd      	cmp	r5, r7
    9c68:	d000      	beq.n	9c6c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9c6a:	b9b5      	cbnz	r5, 9c9a <z_thread_abort+0xa2>
		update_cache(1);
    9c6c:	2001      	movs	r0, #1
    9c6e:	f7ff fd97 	bl	97a0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9c72:	4b10      	ldr	r3, [pc, #64]	; (9cb4 <z_thread_abort+0xbc>)
    9c74:	689b      	ldr	r3, [r3, #8]
    9c76:	42a3      	cmp	r3, r4
    9c78:	d1db      	bne.n	9c32 <z_thread_abort+0x3a>
    9c7a:	f3ef 8305 	mrs	r3, IPSR
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d1d7      	bne.n	9c32 <z_thread_abort+0x3a>
    9c82:	4630      	mov	r0, r6
    9c84:	f7fa f928 	bl	3ed8 <arch_swap>
	return ret;
    9c88:	e7d3      	b.n	9c32 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9c8a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9c8e:	f043 0308 	orr.w	r3, r3, #8
    9c92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9c94:	f004 fb04 	bl	e2a0 <sys_dlist_remove>
}
    9c98:	e7d7      	b.n	9c4a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    9c9a:	4628      	mov	r0, r5
    9c9c:	f004 fb08 	bl	e2b0 <unpend_thread_no_timeout>
    9ca0:	f105 0018 	add.w	r0, r5, #24
    9ca4:	f004 fc12 	bl	e4cc <z_abort_timeout>
		ready_thread(thread);
    9ca8:	4628      	mov	r0, r5
    9caa:	f8c5 8074 	str.w	r8, [r5, #116]	; 0x74
    9cae:	f7ff fdbf 	bl	9830 <ready_thread>
    9cb2:	e7d7      	b.n	9c64 <z_thread_abort+0x6c>
    9cb4:	2001442c 	.word	0x2001442c

00009cb8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9cb8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9cba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9cbe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9cc0:	e9cd 6700 	strd	r6, r7, [sp]
    9cc4:	f7ff fde8 	bl	9898 <z_pend_curr>

	if (data != NULL) {
    9cc8:	b11c      	cbz	r4, 9cd2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    9cca:	4b03      	ldr	r3, [pc, #12]	; (9cd8 <z_sched_wait+0x20>)
    9ccc:	689b      	ldr	r3, [r3, #8]
    9cce:	695b      	ldr	r3, [r3, #20]
    9cd0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9cd2:	b002      	add	sp, #8
    9cd4:	bdd0      	pop	{r4, r6, r7, pc}
    9cd6:	bf00      	nop
    9cd8:	2001442c 	.word	0x2001442c

00009cdc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9cdc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9cde:	4806      	ldr	r0, [pc, #24]	; (9cf8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9ce0:	4a06      	ldr	r2, [pc, #24]	; (9cfc <z_data_copy+0x20>)
    9ce2:	4907      	ldr	r1, [pc, #28]	; (9d00 <z_data_copy+0x24>)
    9ce4:	1a12      	subs	r2, r2, r0
    9ce6:	f004 f976 	bl	dfd6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9cee:	4a05      	ldr	r2, [pc, #20]	; (9d04 <z_data_copy+0x28>)
    9cf0:	4905      	ldr	r1, [pc, #20]	; (9d08 <z_data_copy+0x2c>)
    9cf2:	4806      	ldr	r0, [pc, #24]	; (9d0c <z_data_copy+0x30>)
    9cf4:	f004 b96f 	b.w	dfd6 <z_early_memcpy>
    9cf8:	20002000 	.word	0x20002000
    9cfc:	20002490 	.word	0x20002490
    9d00:	0000f510 	.word	0x0000f510
    9d04:	00000000 	.word	0x00000000
    9d08:	0000f510 	.word	0x0000f510
    9d0c:	20002000 	.word	0x20002000

00009d10 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9d10:	4b03      	ldr	r3, [pc, #12]	; (9d20 <elapsed+0x10>)
    9d12:	681b      	ldr	r3, [r3, #0]
    9d14:	b90b      	cbnz	r3, 9d1a <elapsed+0xa>
    9d16:	f7fc badf 	b.w	62d8 <sys_clock_elapsed>
}
    9d1a:	2000      	movs	r0, #0
    9d1c:	4770      	bx	lr
    9d1e:	bf00      	nop
    9d20:	20014454 	.word	0x20014454

00009d24 <next_timeout>:

static int32_t next_timeout(void)
{
    9d24:	b510      	push	{r4, lr}
	return list->head == list;
    9d26:	4b0e      	ldr	r3, [pc, #56]	; (9d60 <next_timeout+0x3c>)
    9d28:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d2a:	429c      	cmp	r4, r3
    9d2c:	d104      	bne.n	9d38 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9d2e:	f7ff ffef 	bl	9d10 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    9d32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    9d36:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9d38:	f7ff ffea 	bl	9d10 <elapsed>
	if ((to == NULL) ||
    9d3c:	2c00      	cmp	r4, #0
    9d3e:	d0f8      	beq.n	9d32 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9d40:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9d44:	1a1b      	subs	r3, r3, r0
    9d46:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9d4e:	f172 0100 	sbcs.w	r1, r2, #0
    9d52:	daee      	bge.n	9d32 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9d54:	2a00      	cmp	r2, #0
    9d56:	bfac      	ite	ge
    9d58:	4618      	movge	r0, r3
    9d5a:	2000      	movlt	r0, #0
	return ret;
    9d5c:	e7eb      	b.n	9d36 <next_timeout+0x12>
    9d5e:	bf00      	nop
    9d60:	2000220c 	.word	0x2000220c

00009d64 <remove_timeout>:
{
    9d64:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9d66:	b170      	cbz	r0, 9d86 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    9d68:	4b0b      	ldr	r3, [pc, #44]	; (9d98 <remove_timeout+0x34>)
    9d6a:	685b      	ldr	r3, [r3, #4]
    9d6c:	4298      	cmp	r0, r3
    9d6e:	d00a      	beq.n	9d86 <remove_timeout+0x22>
    9d70:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    9d72:	b143      	cbz	r3, 9d86 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9d74:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9d78:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9d7c:	1912      	adds	r2, r2, r4
    9d7e:	eb41 0105 	adc.w	r1, r1, r5
    9d82:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    9d86:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    9d8a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9d8c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9d8e:	2300      	movs	r3, #0
	node->prev = NULL;
    9d90:	e9c0 3300 	strd	r3, r3, [r0]
}
    9d94:	bd30      	pop	{r4, r5, pc}
    9d96:	bf00      	nop
    9d98:	2000220c 	.word	0x2000220c

00009d9c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9da0:	bf08      	it	eq
    9da2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9da8:	4604      	mov	r4, r0
    9daa:	461d      	mov	r5, r3
    9dac:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9dae:	d05c      	beq.n	9e6a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9db0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9db2:	f04f 0320 	mov.w	r3, #32
    9db6:	f3ef 8711 	mrs	r7, BASEPRI
    9dba:	f383 8812 	msr	BASEPRI_MAX, r3
    9dbe:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9dc2:	3201      	adds	r2, #1
    9dc4:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9dc8:	da24      	bge.n	9e14 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9dca:	f06f 0301 	mvn.w	r3, #1
    9dce:	492c      	ldr	r1, [pc, #176]	; (9e80 <z_add_timeout+0xe4>)
    9dd0:	e9d1 2000 	ldrd	r2, r0, [r1]
    9dd4:	1a9b      	subs	r3, r3, r2
    9dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9dda:	eb62 0000 	sbc.w	r0, r2, r0
    9dde:	1b9e      	subs	r6, r3, r6
    9de0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    9de4:	2e01      	cmp	r6, #1
    9de6:	f170 0300 	sbcs.w	r3, r0, #0
    9dea:	da01      	bge.n	9df0 <z_add_timeout+0x54>
    9dec:	2601      	movs	r6, #1
    9dee:	2000      	movs	r0, #0
    9df0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    9df4:	4e23      	ldr	r6, [pc, #140]	; (9e84 <z_add_timeout+0xe8>)
    9df6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    9dfa:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dfc:	45b4      	cmp	ip, r6
    9dfe:	bf08      	it	eq
    9e00:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    9e04:	f1bc 0f00 	cmp.w	ip, #0
    9e08:	d10d      	bne.n	9e26 <z_add_timeout+0x8a>
	node->prev = tail;
    9e0a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    9e0e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    9e10:	6074      	str	r4, [r6, #4]
}
    9e12:	e01c      	b.n	9e4e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    9e14:	f7ff ff7c 	bl	9d10 <elapsed>
    9e18:	3601      	adds	r6, #1
    9e1a:	f145 0500 	adc.w	r5, r5, #0
    9e1e:	1836      	adds	r6, r6, r0
    9e20:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9e24:	e7e4      	b.n	9df0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    9e26:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    9e2a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    9e2e:	4293      	cmp	r3, r2
    9e30:	eb71 0e00 	sbcs.w	lr, r1, r0
    9e34:	da1a      	bge.n	9e6c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    9e36:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    9e38:	f8dc 3004 	ldr.w	r3, [ip, #4]
    9e3c:	eb60 0001 	sbc.w	r0, r0, r1
    9e40:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    9e44:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    9e48:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9e4a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    9e4e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e50:	42b3      	cmp	r3, r6
    9e52:	d006      	beq.n	9e62 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9e54:	429c      	cmp	r4, r3
    9e56:	d104      	bne.n	9e62 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    9e58:	f7ff ff64 	bl	9d24 <next_timeout>
    9e5c:	2100      	movs	r1, #0
    9e5e:	f7fc fa09 	bl	6274 <sys_clock_set_timeout>
	__asm__ volatile(
    9e62:	f387 8811 	msr	BASEPRI, r7
    9e66:	f3bf 8f6f 	isb	sy
		}
	}
}
    9e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    9e6c:	1a9b      	subs	r3, r3, r2
    9e6e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    9e72:	45ac      	cmp	ip, r5
    9e74:	e9c4 3104 	strd	r3, r1, [r4, #16]
    9e78:	d0c7      	beq.n	9e0a <z_add_timeout+0x6e>
    9e7a:	f8dc c000 	ldr.w	ip, [ip]
    9e7e:	e7c1      	b.n	9e04 <z_add_timeout+0x68>
    9e80:	200026d0 	.word	0x200026d0
    9e84:	2000220c 	.word	0x2000220c

00009e88 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    9e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    9e8c:	f04f 0320 	mov.w	r3, #32
    9e90:	f3ef 8c11 	mrs	ip, BASEPRI
    9e94:	f383 8812 	msr	BASEPRI_MAX, r3
    9e98:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9e9c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9f4c <sys_clock_announce+0xc4>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9ea0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 9f50 <sys_clock_announce+0xc8>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    9ea4:	2400      	movs	r4, #0
	announce_remaining = ticks;
    9ea6:	f8c9 0000 	str.w	r0, [r9]
    9eaa:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    9eae:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9eb0:	4550      	cmp	r0, sl
    9eb2:	bf08      	it	eq
    9eb4:	2000      	moveq	r0, #0
		curr_tick += dt;
    9eb6:	4f27      	ldr	r7, [pc, #156]	; (9f54 <sys_clock_announce+0xcc>)
    9eb8:	46e0      	mov	r8, ip
    9eba:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    9ebe:	f8d9 3000 	ldr.w	r3, [r9]
    9ec2:	b380      	cbz	r0, 9f26 <sys_clock_announce+0x9e>
    9ec4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    9ec8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    9ecc:	42b3      	cmp	r3, r6
    9ece:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    9ed2:	da05      	bge.n	9ee0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    9ed4:	1af6      	subs	r6, r6, r3
    9ed6:	eb6c 040e 	sbc.w	r4, ip, lr
    9eda:	e9c0 6404 	strd	r6, r4, [r0, #16]
    9ede:	e022      	b.n	9f26 <sys_clock_announce+0x9e>
		curr_tick += dt;
    9ee0:	18b2      	adds	r2, r6, r2
    9ee2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    9ee6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    9eea:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    9eee:	f7ff ff39 	bl	9d64 <remove_timeout>
	__asm__ volatile(
    9ef2:	f388 8811 	msr	BASEPRI, r8
    9ef6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9efa:	6883      	ldr	r3, [r0, #8]
    9efc:	4798      	blx	r3
	__asm__ volatile(
    9efe:	f04f 0320 	mov.w	r3, #32
    9f02:	f3ef 8811 	mrs	r8, BASEPRI
    9f06:	f383 8812 	msr	BASEPRI_MAX, r3
    9f0a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    9f0e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    9f12:	f8da 0000 	ldr.w	r0, [sl]
    9f16:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f18:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    9f1a:	46c4      	mov	ip, r8
    9f1c:	f8c9 3000 	str.w	r3, [r9]
    9f20:	d1ca      	bne.n	9eb8 <sys_clock_announce+0x30>
		curr_tick += dt;
    9f22:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    9f26:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    9f28:	189a      	adds	r2, r3, r2
    9f2a:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    9f2e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    9f32:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    9f36:	f7ff fef5 	bl	9d24 <next_timeout>
    9f3a:	4621      	mov	r1, r4
    9f3c:	f7fc f99a 	bl	6274 <sys_clock_set_timeout>
	__asm__ volatile(
    9f40:	f388 8811 	msr	BASEPRI, r8
    9f44:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    9f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f4c:	2000220c 	.word	0x2000220c
    9f50:	20014454 	.word	0x20014454
    9f54:	200026d0 	.word	0x200026d0

00009f58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9f58:	b510      	push	{r4, lr}
	__asm__ volatile(
    9f5a:	f04f 0320 	mov.w	r3, #32
    9f5e:	f3ef 8411 	mrs	r4, BASEPRI
    9f62:	f383 8812 	msr	BASEPRI_MAX, r3
    9f66:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    9f6a:	f7ff fed1 	bl	9d10 <elapsed>
    9f6e:	4603      	mov	r3, r0
    9f70:	4a05      	ldr	r2, [pc, #20]	; (9f88 <sys_clock_tick_get+0x30>)
    9f72:	e9d2 0100 	ldrd	r0, r1, [r2]
    9f76:	1818      	adds	r0, r3, r0
    9f78:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    9f7c:	f384 8811 	msr	BASEPRI, r4
    9f80:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9f84:	bd10      	pop	{r4, pc}
    9f86:	bf00      	nop
    9f88:	200026d0 	.word	0x200026d0

00009f8c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f8e:	4604      	mov	r4, r0
	__asm__ volatile(
    9f90:	f04f 0320 	mov.w	r3, #32
    9f94:	f3ef 8711 	mrs	r7, BASEPRI
    9f98:	f383 8812 	msr	BASEPRI_MAX, r3
    9f9c:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    9fa0:	6802      	ldr	r2, [r0, #0]
    9fa2:	b122      	cbz	r2, 9fae <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    9fa4:	f387 8811 	msr	BASEPRI, r7
    9fa8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9fae:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    9fb2:	1c58      	adds	r0, r3, #1
    9fb4:	f146 0100 	adc.w	r1, r6, #0
    9fb8:	2802      	cmp	r0, #2
    9fba:	f171 0100 	sbcs.w	r1, r1, #0
    9fbe:	d327      	bcc.n	a010 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    9fc0:	2b01      	cmp	r3, #1
    9fc2:	f176 0100 	sbcs.w	r1, r6, #0
    9fc6:	bfbc      	itt	lt
    9fc8:	2301      	movlt	r3, #1
    9fca:	4616      	movlt	r6, r2
    9fcc:	1e5d      	subs	r5, r3, #1
    9fce:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    9fd2:	f004 fa95 	bl	e500 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    9fd6:	3001      	adds	r0, #1
    9fd8:	f141 0100 	adc.w	r1, r1, #0
    9fdc:	1940      	adds	r0, r0, r5
    9fde:	eb46 0101 	adc.w	r1, r6, r1
    9fe2:	2801      	cmp	r0, #1
    9fe4:	f171 0100 	sbcs.w	r1, r1, #0
    9fe8:	db3a      	blt.n	a060 <z_timer_expiration_handler+0xd4>
    9fea:	f004 fa89 	bl	e500 <z_impl_k_uptime_ticks>
    9fee:	3001      	adds	r0, #1
    9ff0:	f141 0100 	adc.w	r1, r1, #0
    9ff4:	f06f 0201 	mvn.w	r2, #1
    9ff8:	1940      	adds	r0, r0, r5
    9ffa:	eb46 0301 	adc.w	r3, r6, r1
    9ffe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a002:	1a12      	subs	r2, r2, r0
    a004:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a008:	4620      	mov	r0, r4
    a00a:	4918      	ldr	r1, [pc, #96]	; (a06c <z_timer_expiration_handler+0xe0>)
    a00c:	f7ff fec6 	bl	9d9c <z_add_timeout>
	timer->status += 1U;
    a010:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a012:	3301      	adds	r3, #1
    a014:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    a016:	6a23      	ldr	r3, [r4, #32]
    a018:	b173      	cbz	r3, a038 <z_timer_expiration_handler+0xac>
    a01a:	f387 8811 	msr	BASEPRI, r7
    a01e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    a022:	4620      	mov	r0, r4
    a024:	6a23      	ldr	r3, [r4, #32]
    a026:	4798      	blx	r3
	__asm__ volatile(
    a028:	f04f 0320 	mov.w	r3, #32
    a02c:	f3ef 8711 	mrs	r7, BASEPRI
    a030:	f383 8812 	msr	BASEPRI_MAX, r3
    a034:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a038:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a03c:	42a5      	cmp	r5, r4
    a03e:	d0b1      	beq.n	9fa4 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    a040:	2d00      	cmp	r5, #0
    a042:	d0af      	beq.n	9fa4 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    a044:	4628      	mov	r0, r5
    a046:	f004 f975 	bl	e334 <z_unpend_thread_no_timeout>
    a04a:	2300      	movs	r3, #0
    a04c:	676b      	str	r3, [r5, #116]	; 0x74
	__asm__ volatile(
    a04e:	f387 8811 	msr	BASEPRI, r7
    a052:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    a056:	4628      	mov	r0, r5
}
    a058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    a05c:	f004 b95a 	b.w	e314 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    a060:	f06f 0201 	mvn.w	r2, #1
    a064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a068:	e7ce      	b.n	a008 <z_timer_expiration_handler+0x7c>
    a06a:	bf00      	nop
    a06c:	00009f8d 	.word	0x00009f8d

0000a070 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a074:	bf08      	it	eq
    a076:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    a07a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a07e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a082:	4605      	mov	r5, r0
    a084:	461c      	mov	r4, r3
    a086:	4691      	mov	r9, r2
    a088:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a08a:	d01c      	beq.n	a0c6 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a08c:	1c53      	adds	r3, r2, #1
    a08e:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    a092:	db09      	blt.n	a0a8 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a094:	2a01      	cmp	r2, #1
    a096:	f174 0300 	sbcs.w	r3, r4, #0
    a09a:	bfbc      	itt	lt
    a09c:	2201      	movlt	r2, #1
    a09e:	2400      	movlt	r4, #0
    a0a0:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    a0a4:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    a0a8:	4628      	mov	r0, r5
    a0aa:	f004 fa0f 	bl	e4cc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    a0ae:	2300      	movs	r3, #0
	timer->period = period;
    a0b0:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    a0b4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a0b6:	464a      	mov	r2, r9
    a0b8:	4643      	mov	r3, r8
    a0ba:	4628      	mov	r0, r5
		     duration);
}
    a0bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a0c0:	4902      	ldr	r1, [pc, #8]	; (a0cc <z_impl_k_timer_start+0x5c>)
    a0c2:	f7ff be6b 	b.w	9d9c <z_add_timeout>
}
    a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a0ca:	bf00      	nop
    a0cc:	00009f8d 	.word	0x00009f8d

0000a0d0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    a0d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a0d2:	4606      	mov	r6, r0
    a0d4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    a0d6:	f003 ffcd 	bl	e074 <k_is_in_isr>
    a0da:	b978      	cbnz	r0, a0fc <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    a0dc:	4b0b      	ldr	r3, [pc, #44]	; (a10c <z_thread_aligned_alloc+0x3c>)
    a0de:	689b      	ldr	r3, [r3, #8]
    a0e0:	6edc      	ldr	r4, [r3, #108]	; 0x6c
	}

	if (heap != NULL) {
    a0e2:	b17c      	cbz	r4, a104 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    a0e4:	1d2a      	adds	r2, r5, #4
    a0e6:	d209      	bcs.n	a0fc <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    a0e8:	2000      	movs	r0, #0
    a0ea:	2100      	movs	r1, #0
    a0ec:	e9cd 0100 	strd	r0, r1, [sp]
    a0f0:	4620      	mov	r0, r4
    a0f2:	f046 0104 	orr.w	r1, r6, #4
    a0f6:	f004 fa58 	bl	e5aa <k_heap_aligned_alloc>
	if (mem == NULL) {
    a0fa:	b908      	cbnz	r0, a100 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    a0fc:	2400      	movs	r4, #0
	}

	return ret;
    a0fe:	e001      	b.n	a104 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    a100:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    a102:	1d04      	adds	r4, r0, #4
}
    a104:	4620      	mov	r0, r4
    a106:	b002      	add	sp, #8
    a108:	bd70      	pop	{r4, r5, r6, pc}
    a10a:	bf00      	nop
    a10c:	2001442c 	.word	0x2001442c

0000a110 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    a110:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a112:	4c06      	ldr	r4, [pc, #24]	; (a12c <statics_init+0x1c>)
    a114:	4d06      	ldr	r5, [pc, #24]	; (a130 <statics_init+0x20>)
    a116:	42ac      	cmp	r4, r5
    a118:	d301      	bcc.n	a11e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    a11a:	2000      	movs	r0, #0
    a11c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a11e:	4620      	mov	r0, r4
    a120:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a124:	f004 fa39 	bl	e59a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a128:	3414      	adds	r4, #20
    a12a:	e7f4      	b.n	a116 <statics_init+0x6>
    a12c:	20002314 	.word	0x20002314
    a130:	20002314 	.word	0x20002314

0000a134 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    a134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    a136:	2400      	movs	r4, #0
    a138:	4b08      	ldr	r3, [pc, #32]	; (a15c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    a13a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    a13e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    a140:	ab02      	add	r3, sp, #8
    a142:	9300      	str	r3, [sp, #0]
    a144:	4906      	ldr	r1, [pc, #24]	; (a160 <k_sys_work_q_init+0x2c>)
    a146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a14a:	4806      	ldr	r0, [pc, #24]	; (a164 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    a14c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    a150:	f7ff fac4 	bl	96dc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    a154:	4620      	mov	r0, r4
    a156:	b004      	add	sp, #16
    a158:	bd10      	pop	{r4, pc}
    a15a:	bf00      	nop
    a15c:	0000f504 	.word	0x0000f504
    a160:	2005a1d8 	.word	0x2005a1d8
    a164:	200026d8 	.word	0x200026d8

0000a168 <nrf_cc3xx_platform_init_no_rng>:
    a168:	b510      	push	{r4, lr}
    a16a:	4c0a      	ldr	r4, [pc, #40]	; (a194 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a16c:	6823      	ldr	r3, [r4, #0]
    a16e:	b11b      	cbz	r3, a178 <nrf_cc3xx_platform_init_no_rng+0x10>
    a170:	2301      	movs	r3, #1
    a172:	6023      	str	r3, [r4, #0]
    a174:	2000      	movs	r0, #0
    a176:	bd10      	pop	{r4, pc}
    a178:	f000 f8fe 	bl	a378 <CC_LibInitNoRng>
    a17c:	2800      	cmp	r0, #0
    a17e:	d0f7      	beq.n	a170 <nrf_cc3xx_platform_init_no_rng+0x8>
    a180:	3801      	subs	r0, #1
    a182:	2807      	cmp	r0, #7
    a184:	d803      	bhi.n	a18e <nrf_cc3xx_platform_init_no_rng+0x26>
    a186:	4b04      	ldr	r3, [pc, #16]	; (a198 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a188:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a18c:	bd10      	pop	{r4, pc}
    a18e:	4803      	ldr	r0, [pc, #12]	; (a19c <nrf_cc3xx_platform_init_no_rng+0x34>)
    a190:	bd10      	pop	{r4, pc}
    a192:	bf00      	nop
    a194:	20014458 	.word	0x20014458
    a198:	0000efe8 	.word	0x0000efe8
    a19c:	ffff8ffe 	.word	0xffff8ffe

0000a1a0 <nrf_cc3xx_platform_abort>:
    a1a0:	f3bf 8f4f 	dsb	sy
    a1a4:	4905      	ldr	r1, [pc, #20]	; (a1bc <nrf_cc3xx_platform_abort+0x1c>)
    a1a6:	4b06      	ldr	r3, [pc, #24]	; (a1c0 <nrf_cc3xx_platform_abort+0x20>)
    a1a8:	68ca      	ldr	r2, [r1, #12]
    a1aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a1ae:	4313      	orrs	r3, r2
    a1b0:	60cb      	str	r3, [r1, #12]
    a1b2:	f3bf 8f4f 	dsb	sy
    a1b6:	bf00      	nop
    a1b8:	e7fd      	b.n	a1b6 <nrf_cc3xx_platform_abort+0x16>
    a1ba:	bf00      	nop
    a1bc:	e000ed00 	.word	0xe000ed00
    a1c0:	05fa0004 	.word	0x05fa0004

0000a1c4 <CC_PalAbort>:
    a1c4:	b430      	push	{r4, r5}
    a1c6:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a1ca:	2500      	movs	r5, #0
    a1cc:	4b0b      	ldr	r3, [pc, #44]	; (a1fc <CC_PalAbort+0x38>)
    a1ce:	4c0c      	ldr	r4, [pc, #48]	; (a200 <CC_PalAbort+0x3c>)
    a1d0:	490c      	ldr	r1, [pc, #48]	; (a204 <CC_PalAbort+0x40>)
    a1d2:	6849      	ldr	r1, [r1, #4]
    a1d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a1d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a1dc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a1e0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a1e4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    a1e8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    a1ec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    a1f0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    a1f4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    a1f8:	bc30      	pop	{r4, r5}
    a1fa:	4708      	bx	r1
    a1fc:	50845000 	.word	0x50845000
    a200:	50844000 	.word	0x50844000
    a204:	20002214 	.word	0x20002214

0000a208 <nrf_cc3xx_platform_set_abort>:
    a208:	4b02      	ldr	r3, [pc, #8]	; (a214 <nrf_cc3xx_platform_set_abort+0xc>)
    a20a:	e9d0 1200 	ldrd	r1, r2, [r0]
    a20e:	e9c3 1200 	strd	r1, r2, [r3]
    a212:	4770      	bx	lr
    a214:	20002214 	.word	0x20002214

0000a218 <mutex_free>:
    a218:	b510      	push	{r4, lr}
    a21a:	4604      	mov	r4, r0
    a21c:	b150      	cbz	r0, a234 <mutex_free+0x1c>
    a21e:	6863      	ldr	r3, [r4, #4]
    a220:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a224:	d005      	beq.n	a232 <mutex_free+0x1a>
    a226:	4a06      	ldr	r2, [pc, #24]	; (a240 <mutex_free+0x28>)
    a228:	4293      	cmp	r3, r2
    a22a:	d002      	beq.n	a232 <mutex_free+0x1a>
    a22c:	2300      	movs	r3, #0
    a22e:	6062      	str	r2, [r4, #4]
    a230:	6023      	str	r3, [r4, #0]
    a232:	bd10      	pop	{r4, pc}
    a234:	4b03      	ldr	r3, [pc, #12]	; (a244 <mutex_free+0x2c>)
    a236:	4804      	ldr	r0, [pc, #16]	; (a248 <mutex_free+0x30>)
    a238:	685b      	ldr	r3, [r3, #4]
    a23a:	4798      	blx	r3
    a23c:	e7ef      	b.n	a21e <mutex_free+0x6>
    a23e:	bf00      	nop
    a240:	a95c5f2c 	.word	0xa95c5f2c
    a244:	20002214 	.word	0x20002214
    a248:	0000f008 	.word	0x0000f008

0000a24c <mutex_lock>:
    a24c:	b1c8      	cbz	r0, a282 <mutex_lock+0x36>
    a24e:	6843      	ldr	r3, [r0, #4]
    a250:	4a0d      	ldr	r2, [pc, #52]	; (a288 <mutex_lock+0x3c>)
    a252:	4293      	cmp	r3, r2
    a254:	d013      	beq.n	a27e <mutex_lock+0x32>
    a256:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a25a:	d00e      	beq.n	a27a <mutex_lock+0x2e>
    a25c:	2301      	movs	r3, #1
    a25e:	e850 2f00 	ldrex	r2, [r0]
    a262:	4619      	mov	r1, r3
    a264:	e840 1c00 	strex	ip, r1, [r0]
    a268:	f09c 0f00 	teq	ip, #0
    a26c:	d1f7      	bne.n	a25e <mutex_lock+0x12>
    a26e:	2a01      	cmp	r2, #1
    a270:	d0f5      	beq.n	a25e <mutex_lock+0x12>
    a272:	f3bf 8f5f 	dmb	sy
    a276:	2000      	movs	r0, #0
    a278:	4770      	bx	lr
    a27a:	4804      	ldr	r0, [pc, #16]	; (a28c <mutex_lock+0x40>)
    a27c:	4770      	bx	lr
    a27e:	4804      	ldr	r0, [pc, #16]	; (a290 <mutex_lock+0x44>)
    a280:	4770      	bx	lr
    a282:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a286:	4770      	bx	lr
    a288:	a95c5f2c 	.word	0xa95c5f2c
    a28c:	ffff8fe9 	.word	0xffff8fe9
    a290:	ffff8fea 	.word	0xffff8fea

0000a294 <mutex_unlock>:
    a294:	4603      	mov	r3, r0
    a296:	b180      	cbz	r0, a2ba <mutex_unlock+0x26>
    a298:	6842      	ldr	r2, [r0, #4]
    a29a:	4909      	ldr	r1, [pc, #36]	; (a2c0 <mutex_unlock+0x2c>)
    a29c:	428a      	cmp	r2, r1
    a29e:	d00a      	beq.n	a2b6 <mutex_unlock+0x22>
    a2a0:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a2a4:	d005      	beq.n	a2b2 <mutex_unlock+0x1e>
    a2a6:	f3bf 8f5f 	dmb	sy
    a2aa:	2200      	movs	r2, #0
    a2ac:	4610      	mov	r0, r2
    a2ae:	601a      	str	r2, [r3, #0]
    a2b0:	4770      	bx	lr
    a2b2:	4804      	ldr	r0, [pc, #16]	; (a2c4 <mutex_unlock+0x30>)
    a2b4:	4770      	bx	lr
    a2b6:	4804      	ldr	r0, [pc, #16]	; (a2c8 <mutex_unlock+0x34>)
    a2b8:	4770      	bx	lr
    a2ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a2be:	4770      	bx	lr
    a2c0:	a95c5f2c 	.word	0xa95c5f2c
    a2c4:	ffff8fe9 	.word	0xffff8fe9
    a2c8:	ffff8fea 	.word	0xffff8fea

0000a2cc <mutex_init>:
    a2cc:	b510      	push	{r4, lr}
    a2ce:	4604      	mov	r4, r0
    a2d0:	b120      	cbz	r0, a2dc <mutex_init+0x10>
    a2d2:	2300      	movs	r3, #0
    a2d4:	4a03      	ldr	r2, [pc, #12]	; (a2e4 <mutex_init+0x18>)
    a2d6:	6023      	str	r3, [r4, #0]
    a2d8:	6062      	str	r2, [r4, #4]
    a2da:	bd10      	pop	{r4, pc}
    a2dc:	4802      	ldr	r0, [pc, #8]	; (a2e8 <mutex_init+0x1c>)
    a2de:	f7ff ff71 	bl	a1c4 <CC_PalAbort>
    a2e2:	e7f6      	b.n	a2d2 <mutex_init+0x6>
    a2e4:	3a00003a 	.word	0x3a00003a
    a2e8:	0000f030 	.word	0x0000f030

0000a2ec <nrf_cc3xx_platform_set_mutexes>:
    a2ec:	b570      	push	{r4, r5, r6, lr}
    a2ee:	4c19      	ldr	r4, [pc, #100]	; (a354 <nrf_cc3xx_platform_set_mutexes+0x68>)
    a2f0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a2f4:	6806      	ldr	r6, [r0, #0]
    a2f6:	f8c4 c004 	str.w	ip, [r4, #4]
    a2fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
    a2fe:	68c0      	ldr	r0, [r0, #12]
    a300:	f8c4 c008 	str.w	ip, [r4, #8]
    a304:	60e0      	str	r0, [r4, #12]
    a306:	6026      	str	r6, [r4, #0]
    a308:	6808      	ldr	r0, [r1, #0]
    a30a:	4b13      	ldr	r3, [pc, #76]	; (a358 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    a30c:	4d13      	ldr	r5, [pc, #76]	; (a35c <nrf_cc3xx_platform_set_mutexes+0x70>)
    a30e:	6018      	str	r0, [r3, #0]
    a310:	6848      	ldr	r0, [r1, #4]
    a312:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    a316:	6058      	str	r0, [r3, #4]
    a318:	6888      	ldr	r0, [r1, #8]
    a31a:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    a31e:	6098      	str	r0, [r3, #8]
    a320:	68c8      	ldr	r0, [r1, #12]
    a322:	6909      	ldr	r1, [r1, #16]
    a324:	60d8      	str	r0, [r3, #12]
    a326:	6119      	str	r1, [r3, #16]
    a328:	d012      	beq.n	a350 <nrf_cc3xx_platform_set_mutexes+0x64>
    a32a:	2300      	movs	r3, #0
    a32c:	4a0c      	ldr	r2, [pc, #48]	; (a360 <nrf_cc3xx_platform_set_mutexes+0x74>)
    a32e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a332:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    a336:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    a33a:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    a33e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    a342:	47b0      	blx	r6
    a344:	6823      	ldr	r3, [r4, #0]
    a346:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a34e:	4718      	bx	r3
    a350:	bd70      	pop	{r4, r5, r6, pc}
    a352:	bf00      	nop
    a354:	20002230 	.word	0x20002230
    a358:	2000221c 	.word	0x2000221c
    a35c:	20014470 	.word	0x20014470
    a360:	a95c5f2c 	.word	0xa95c5f2c

0000a364 <mbedtls_platform_zeroize>:
    a364:	b138      	cbz	r0, a376 <mbedtls_platform_zeroize+0x12>
    a366:	b131      	cbz	r1, a376 <mbedtls_platform_zeroize+0x12>
    a368:	2200      	movs	r2, #0
    a36a:	4401      	add	r1, r0
    a36c:	4603      	mov	r3, r0
    a36e:	3001      	adds	r0, #1
    a370:	4288      	cmp	r0, r1
    a372:	701a      	strb	r2, [r3, #0]
    a374:	d1fa      	bne.n	a36c <mbedtls_platform_zeroize+0x8>
    a376:	4770      	bx	lr

0000a378 <CC_LibInitNoRng>:
    a378:	b508      	push	{r3, lr}
    a37a:	f000 f811 	bl	a3a0 <CC_HalInit>
    a37e:	b930      	cbnz	r0, a38e <CC_LibInitNoRng+0x16>
    a380:	f000 f810 	bl	a3a4 <CC_PalInit>
    a384:	b938      	cbnz	r0, a396 <CC_LibInitNoRng+0x1e>
    a386:	4a05      	ldr	r2, [pc, #20]	; (a39c <CC_LibInitNoRng+0x24>)
    a388:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    a38c:	bd08      	pop	{r3, pc}
    a38e:	f000 f837 	bl	a400 <CC_PalTerminate>
    a392:	2003      	movs	r0, #3
    a394:	bd08      	pop	{r3, pc}
    a396:	2004      	movs	r0, #4
    a398:	bd08      	pop	{r3, pc}
    a39a:	bf00      	nop
    a39c:	50845000 	.word	0x50845000

0000a3a0 <CC_HalInit>:
    a3a0:	2000      	movs	r0, #0
    a3a2:	4770      	bx	lr

0000a3a4 <CC_PalInit>:
    a3a4:	b510      	push	{r4, lr}
    a3a6:	4811      	ldr	r0, [pc, #68]	; (a3ec <CC_PalInit+0x48>)
    a3a8:	f000 f848 	bl	a43c <CC_PalMutexCreate>
    a3ac:	b100      	cbz	r0, a3b0 <CC_PalInit+0xc>
    a3ae:	bd10      	pop	{r4, pc}
    a3b0:	480f      	ldr	r0, [pc, #60]	; (a3f0 <CC_PalInit+0x4c>)
    a3b2:	f000 f843 	bl	a43c <CC_PalMutexCreate>
    a3b6:	2800      	cmp	r0, #0
    a3b8:	d1f9      	bne.n	a3ae <CC_PalInit+0xa>
    a3ba:	4c0e      	ldr	r4, [pc, #56]	; (a3f4 <CC_PalInit+0x50>)
    a3bc:	4620      	mov	r0, r4
    a3be:	f000 f83d 	bl	a43c <CC_PalMutexCreate>
    a3c2:	2800      	cmp	r0, #0
    a3c4:	d1f3      	bne.n	a3ae <CC_PalInit+0xa>
    a3c6:	4b0c      	ldr	r3, [pc, #48]	; (a3f8 <CC_PalInit+0x54>)
    a3c8:	480c      	ldr	r0, [pc, #48]	; (a3fc <CC_PalInit+0x58>)
    a3ca:	601c      	str	r4, [r3, #0]
    a3cc:	f000 f836 	bl	a43c <CC_PalMutexCreate>
    a3d0:	4601      	mov	r1, r0
    a3d2:	2800      	cmp	r0, #0
    a3d4:	d1eb      	bne.n	a3ae <CC_PalInit+0xa>
    a3d6:	f000 f82d 	bl	a434 <CC_PalDmaInit>
    a3da:	4604      	mov	r4, r0
    a3dc:	b108      	cbz	r0, a3e2 <CC_PalInit+0x3e>
    a3de:	4620      	mov	r0, r4
    a3e0:	bd10      	pop	{r4, pc}
    a3e2:	f000 f83f 	bl	a464 <CC_PalPowerSaveModeInit>
    a3e6:	4620      	mov	r0, r4
    a3e8:	e7fa      	b.n	a3e0 <CC_PalInit+0x3c>
    a3ea:	bf00      	nop
    a3ec:	20002270 	.word	0x20002270
    a3f0:	2000226c 	.word	0x2000226c
    a3f4:	20002268 	.word	0x20002268
    a3f8:	20002260 	.word	0x20002260
    a3fc:	20002264 	.word	0x20002264

0000a400 <CC_PalTerminate>:
    a400:	b508      	push	{r3, lr}
    a402:	4808      	ldr	r0, [pc, #32]	; (a424 <CC_PalTerminate+0x24>)
    a404:	f000 f824 	bl	a450 <CC_PalMutexDestroy>
    a408:	4807      	ldr	r0, [pc, #28]	; (a428 <CC_PalTerminate+0x28>)
    a40a:	f000 f821 	bl	a450 <CC_PalMutexDestroy>
    a40e:	4807      	ldr	r0, [pc, #28]	; (a42c <CC_PalTerminate+0x2c>)
    a410:	f000 f81e 	bl	a450 <CC_PalMutexDestroy>
    a414:	4806      	ldr	r0, [pc, #24]	; (a430 <CC_PalTerminate+0x30>)
    a416:	f000 f81b 	bl	a450 <CC_PalMutexDestroy>
    a41a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a41e:	f000 b80b 	b.w	a438 <CC_PalDmaTerminate>
    a422:	bf00      	nop
    a424:	20002270 	.word	0x20002270
    a428:	2000226c 	.word	0x2000226c
    a42c:	20002268 	.word	0x20002268
    a430:	20002264 	.word	0x20002264

0000a434 <CC_PalDmaInit>:
    a434:	2000      	movs	r0, #0
    a436:	4770      	bx	lr

0000a438 <CC_PalDmaTerminate>:
    a438:	4770      	bx	lr
    a43a:	bf00      	nop

0000a43c <CC_PalMutexCreate>:
    a43c:	b508      	push	{r3, lr}
    a43e:	4b03      	ldr	r3, [pc, #12]	; (a44c <CC_PalMutexCreate+0x10>)
    a440:	6802      	ldr	r2, [r0, #0]
    a442:	681b      	ldr	r3, [r3, #0]
    a444:	6810      	ldr	r0, [r2, #0]
    a446:	4798      	blx	r3
    a448:	2000      	movs	r0, #0
    a44a:	bd08      	pop	{r3, pc}
    a44c:	20002230 	.word	0x20002230

0000a450 <CC_PalMutexDestroy>:
    a450:	b508      	push	{r3, lr}
    a452:	4b03      	ldr	r3, [pc, #12]	; (a460 <CC_PalMutexDestroy+0x10>)
    a454:	6802      	ldr	r2, [r0, #0]
    a456:	685b      	ldr	r3, [r3, #4]
    a458:	6810      	ldr	r0, [r2, #0]
    a45a:	4798      	blx	r3
    a45c:	2000      	movs	r0, #0
    a45e:	bd08      	pop	{r3, pc}
    a460:	20002230 	.word	0x20002230

0000a464 <CC_PalPowerSaveModeInit>:
    a464:	b570      	push	{r4, r5, r6, lr}
    a466:	4c09      	ldr	r4, [pc, #36]	; (a48c <CC_PalPowerSaveModeInit+0x28>)
    a468:	4d09      	ldr	r5, [pc, #36]	; (a490 <CC_PalPowerSaveModeInit+0x2c>)
    a46a:	6920      	ldr	r0, [r4, #16]
    a46c:	68ab      	ldr	r3, [r5, #8]
    a46e:	4798      	blx	r3
    a470:	b118      	cbz	r0, a47a <CC_PalPowerSaveModeInit+0x16>
    a472:	4b08      	ldr	r3, [pc, #32]	; (a494 <CC_PalPowerSaveModeInit+0x30>)
    a474:	4808      	ldr	r0, [pc, #32]	; (a498 <CC_PalPowerSaveModeInit+0x34>)
    a476:	685b      	ldr	r3, [r3, #4]
    a478:	4798      	blx	r3
    a47a:	2100      	movs	r1, #0
    a47c:	4a07      	ldr	r2, [pc, #28]	; (a49c <CC_PalPowerSaveModeInit+0x38>)
    a47e:	68eb      	ldr	r3, [r5, #12]
    a480:	6011      	str	r1, [r2, #0]
    a482:	6920      	ldr	r0, [r4, #16]
    a484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a488:	4718      	bx	r3
    a48a:	bf00      	nop
    a48c:	2000221c 	.word	0x2000221c
    a490:	20002230 	.word	0x20002230
    a494:	20002214 	.word	0x20002214
    a498:	0000f054 	.word	0x0000f054
    a49c:	2001446c 	.word	0x2001446c

0000a4a0 <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    a4a0:	b908      	cbnz	r0, a4a6 <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    a4a2:	6008      	str	r0, [r1, #0]
    return 0;
    a4a4:	4770      	bx	lr
        return -EINVAL;
    a4a6:	f06f 0015 	mvn.w	r0, #21
}
    a4aa:	4770      	bx	lr

0000a4ac <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    a4ac:	b121      	cbz	r1, a4b8 <flash_area_id_from_multi_image_slot+0xc>
    a4ae:	2901      	cmp	r1, #1
    a4b0:	d007      	beq.n	a4c2 <flash_area_id_from_multi_image_slot+0x16>
    a4b2:	f06f 0015 	mvn.w	r0, #21
    a4b6:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a4b8:	b148      	cbz	r0, a4ce <flash_area_id_from_multi_image_slot+0x22>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a4ba:	2801      	cmp	r0, #1
    a4bc:	bf18      	it	ne
    a4be:	20ff      	movne	r0, #255	; 0xff
    a4c0:	4770      	bx	lr
    a4c2:	b130      	cbz	r0, a4d2 <flash_area_id_from_multi_image_slot+0x26>
    a4c4:	2801      	cmp	r0, #1
    a4c6:	bf14      	ite	ne
    a4c8:	20ff      	movne	r0, #255	; 0xff
    a4ca:	200b      	moveq	r0, #11
    a4cc:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    a4ce:	2004      	movs	r0, #4
    a4d0:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    a4d2:	2002      	movs	r0, #2
}
    a4d4:	4770      	bx	lr

0000a4d6 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    a4d6:	2000      	movs	r0, #0
    a4d8:	4770      	bx	lr

0000a4da <flash_area_get_sector>:
    return ERASED_VAL;
}

int flash_area_get_sector(const struct flash_area *fap, off_t off,
                          struct flash_sector *fsp)
{
    a4da:	b530      	push	{r4, r5, lr}
    struct flash_pages_info fpi;
    int rc;

    if (off >= fap->fa_size) {
    a4dc:	6883      	ldr	r3, [r0, #8]
{
    a4de:	4604      	mov	r4, r0
    if (off >= fap->fa_size) {
    a4e0:	428b      	cmp	r3, r1
{
    a4e2:	4615      	mov	r5, r2
    a4e4:	b085      	sub	sp, #20
    if (off >= fap->fa_size) {
    a4e6:	d90e      	bls.n	a506 <flash_area_get_sector+0x2c>
        return -ERANGE;
    }

    rc = flash_get_page_info_by_offs(fap->fa_dev, fap->fa_off + off,
    a4e8:	6863      	ldr	r3, [r4, #4]
    a4ea:	68c0      	ldr	r0, [r0, #12]
    a4ec:	4419      	add	r1, r3
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    a4ee:	aa01      	add	r2, sp, #4
    a4f0:	f001 fad6 	bl	baa0 <z_impl_flash_get_page_info_by_offs>
            &fpi);

    if (rc == 0) {
    a4f4:	b928      	cbnz	r0, a502 <flash_area_get_sector+0x28>
        fsp->fs_off = fpi.start_offset - fap->fa_off;
    a4f6:	6862      	ldr	r2, [r4, #4]
    a4f8:	9b01      	ldr	r3, [sp, #4]
    a4fa:	1a9b      	subs	r3, r3, r2
    a4fc:	602b      	str	r3, [r5, #0]
        fsp->fs_size = fpi.size;
    a4fe:	9b02      	ldr	r3, [sp, #8]
    a500:	606b      	str	r3, [r5, #4]
    }

    return rc;
}
    a502:	b005      	add	sp, #20
    a504:	bd30      	pop	{r4, r5, pc}
        return -ERANGE;
    a506:	f06f 0021 	mvn.w	r0, #33	; 0x21
    a50a:	e7fa      	b.n	a502 <flash_area_get_sector+0x28>

0000a50c <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    a50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a510:	460e      	mov	r6, r1
    a512:	4617      	mov	r7, r2
    a514:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    a516:	4604      	mov	r4, r0
    a518:	b928      	cbnz	r0, a526 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    a51a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    a51e:	4640      	mov	r0, r8
    a520:	b003      	add	sp, #12
    a522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    a526:	2900      	cmp	r1, #0
    a528:	d0f7      	beq.n	a51a <bootutil_tlv_iter_begin+0xe>
    a52a:	2a00      	cmp	r2, #0
    a52c:	d0f5      	beq.n	a51a <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    a52e:	68cb      	ldr	r3, [r1, #12]
    a530:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a532:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    a534:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    a536:	2304      	movs	r3, #4
    a538:	4629      	mov	r1, r5
    a53a:	eb0d 0203 	add.w	r2, sp, r3
    a53e:	f000 fe57 	bl	b1f0 <flash_area_read>
    a542:	4680      	mov	r8, r0
    a544:	2800      	cmp	r0, #0
    a546:	d1e8      	bne.n	a51a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a548:	f646 1208 	movw	r2, #26888	; 0x6908
    a54c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a550:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    a552:	4291      	cmp	r1, r2
    a554:	d125      	bne.n	a5a2 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    a556:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    a55a:	4299      	cmp	r1, r3
    a55c:	d1dd      	bne.n	a51a <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    a55e:	2304      	movs	r3, #4
    a560:	4638      	mov	r0, r7
    a562:	eb0d 0203 	add.w	r2, sp, r3
    a566:	4429      	add	r1, r5
    a568:	f000 fe42 	bl	b1f0 <flash_area_read>
    a56c:	2800      	cmp	r0, #0
    a56e:	d1d4      	bne.n	a51a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    a570:	f646 1307 	movw	r3, #26887	; 0x6907
    a574:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a578:	429a      	cmp	r2, r3
    a57a:	d1ce      	bne.n	a51a <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    a57c:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    a580:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    a584:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    a588:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a58a:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a58c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    a590:	442b      	add	r3, r5
    a592:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a594:	8973      	ldrh	r3, [r6, #10]
    a596:	4413      	add	r3, r2
    a598:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    a59a:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    a59c:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    a59e:	6125      	str	r5, [r4, #16]
    return 0;
    a5a0:	e7bd      	b.n	a51e <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    a5a2:	2b00      	cmp	r3, #0
    a5a4:	d0e4      	beq.n	a570 <bootutil_tlv_iter_begin+0x64>
    a5a6:	e7b8      	b.n	a51a <bootutil_tlv_iter_begin+0xe>

0000a5a8 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    a5a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a5ac:	460e      	mov	r6, r1
    a5ae:	4617      	mov	r7, r2
    a5b0:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a5b2:	4604      	mov	r4, r0
    a5b4:	b920      	cbnz	r0, a5c0 <bootutil_tlv_iter_next+0x18>
        return -1;
    a5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    a5ba:	b002      	add	sp, #8
    a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    a5c0:	6803      	ldr	r3, [r0, #0]
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d0f7      	beq.n	a5b6 <bootutil_tlv_iter_next+0xe>
    a5c6:	6843      	ldr	r3, [r0, #4]
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d0f4      	beq.n	a5b6 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a5cc:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    a5d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a5d4:	429a      	cmp	r2, r3
    a5d6:	d216      	bcs.n	a606 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    a5d8:	6823      	ldr	r3, [r4, #0]
    a5da:	895b      	ldrh	r3, [r3, #10]
    a5dc:	b123      	cbz	r3, a5e8 <bootutil_tlv_iter_next+0x40>
    a5de:	68e3      	ldr	r3, [r4, #12]
    a5e0:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    a5e2:	bf04      	itt	eq
    a5e4:	3304      	addeq	r3, #4
    a5e6:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    a5e8:	2304      	movs	r3, #4
    a5ea:	6921      	ldr	r1, [r4, #16]
    a5ec:	6860      	ldr	r0, [r4, #4]
    a5ee:	eb0d 0203 	add.w	r2, sp, r3
    a5f2:	f000 fdfd 	bl	b1f0 <flash_area_read>
        if (rc) {
    a5f6:	2800      	cmp	r0, #0
    a5f8:	d1dd      	bne.n	a5b6 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    a5fa:	7aa3      	ldrb	r3, [r4, #10]
    a5fc:	b12b      	cbz	r3, a60a <bootutil_tlv_iter_next+0x62>
    a5fe:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    a602:	429a      	cmp	r2, r3
    a604:	d301      	bcc.n	a60a <bootutil_tlv_iter_next+0x62>
            return 1;
    a606:	2001      	movs	r0, #1
    a608:	e7d7      	b.n	a5ba <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a60a:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a60c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    a610:	4543      	cmp	r3, r8
    a612:	f101 0204 	add.w	r2, r1, #4
    a616:	d003      	beq.n	a620 <bootutil_tlv_iter_next+0x78>
    a618:	f8bd c004 	ldrh.w	ip, [sp, #4]
    a61c:	459c      	cmp	ip, r3
    a61e:	d10b      	bne.n	a638 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    a620:	b115      	cbz	r5, a628 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    a622:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a626:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    a628:	6923      	ldr	r3, [r4, #16]
    a62a:	3304      	adds	r3, #4
    a62c:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    a62e:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    a630:	6923      	ldr	r3, [r4, #16]
    a632:	4413      	add	r3, r2
    a634:	6123      	str	r3, [r4, #16]
            return 0;
    a636:	e7c0      	b.n	a5ba <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    a638:	6923      	ldr	r3, [r4, #16]
    a63a:	4413      	add	r3, r2
    a63c:	6123      	str	r3, [r4, #16]
    a63e:	e7c7      	b.n	a5d0 <bootutil_tlv_iter_next+0x28>

0000a640 <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    a640:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a644:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    a646:	3030      	adds	r0, #48	; 0x30
    a648:	4770      	bx	lr

0000a64a <boot_status_off>:
    return -1;
}

uint32_t
boot_status_off(const struct flash_area *fap)
{
    a64a:	b510      	push	{r4, lr}
    a64c:	4604      	mov	r4, r0
    uint32_t off_from_end;
    uint32_t elem_sz;

    elem_sz = flash_area_align(fap);
    a64e:	f000 fe0d 	bl	b26c <flash_area_align>
    }
#endif

    assert(off_from_end <= flash_area_get_size(fap));
    return flash_area_get_size(fap) - off_from_end;
}
    a652:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    return flash_area_get_size(fap) - off_from_end;
    a656:	68a3      	ldr	r3, [r4, #8]
    a658:	3b30      	subs	r3, #48	; 0x30
}
    a65a:	fb02 3010 	mls	r0, r2, r0, r3
    a65e:	bd10      	pop	{r4, pc}

0000a660 <bootutil_max_image_size>:
                   * this value to fail.
                   */
    }
    return flash_sector_get_off(&sector);
#elif defined(MCUBOOT_OVERWRITE_ONLY)
    return boot_swap_info_off(fap);
    a660:	f001 bbf8 	b.w	be54 <boot_swap_info_off>

0000a664 <fih_panic_loop>:
 */
__attribute__((used))
__attribute__((noinline))
void fih_panic_loop(void)
{
    __asm volatile ("b fih_panic_loop");
    a664:	f7ff bffe 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a668:	f7ff bffc 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a66c:	f7ff bffa 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a670:	f7ff bff8 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a674:	f7ff bff6 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a678:	f7ff bff4 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a67c:	f7ff bff2 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a680:	f7ff bff0 	b.w	a664 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    a684:	f7ff bfee 	b.w	a664 <fih_panic_loop>
}
    a688:	4770      	bx	lr

0000a68a <boot_initialize_area>:
{
    a68a:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
    a690:	b513      	push	{r0, r1, r4, lr}
    a692:	4608      	mov	r0, r1
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a694:	f893 10b8 	ldrb.w	r1, [r3, #184]	; 0xb8
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    a698:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a69a:	b199      	cbz	r1, a6c4 <boot_initialize_area+0x3a>
    a69c:	2901      	cmp	r1, #1
    a69e:	d003      	beq.n	a6a8 <boot_initialize_area+0x1e>
    a6a0:	28ff      	cmp	r0, #255	; 0xff
    a6a2:	d011      	beq.n	a6c8 <boot_initialize_area+0x3e>
        return BOOT_EFLASH;
    a6a4:	2001      	movs	r0, #1
    a6a6:	e01d      	b.n	a6e4 <boot_initialize_area+0x5a>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a6a8:	2801      	cmp	r0, #1
    a6aa:	d00d      	beq.n	a6c8 <boot_initialize_area+0x3e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a6ac:	220b      	movs	r2, #11
    a6ae:	4282      	cmp	r2, r0
    a6b0:	d1f8      	bne.n	a6a4 <boot_initialize_area+0x1a>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a6b2:	2458      	movs	r4, #88	; 0x58
    a6b4:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a6b8:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    a6bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    a6be:	f103 0454 	add.w	r4, r3, #84	; 0x54
    a6c2:	e009      	b.n	a6d8 <boot_initialize_area+0x4e>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    a6c4:	2804      	cmp	r0, #4
    a6c6:	d10f      	bne.n	a6e8 <boot_initialize_area+0x5e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a6c8:	2458      	movs	r4, #88	; 0x58
    a6ca:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a6ce:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    a6d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    a6d4:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    a6d8:	a901      	add	r1, sp, #4
    a6da:	f7f7 fba5 	bl	1e28 <flash_area_get_sectors>
    if (rc != 0) {
    a6de:	b908      	cbnz	r0, a6e4 <boot_initialize_area+0x5a>
    *out_num_sectors = num_sectors;
    a6e0:	9b01      	ldr	r3, [sp, #4]
    a6e2:	6023      	str	r3, [r4, #0]
}
    a6e4:	b002      	add	sp, #8
    a6e6:	bd10      	pop	{r4, pc}
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    a6e8:	2202      	movs	r2, #2
    a6ea:	e7e0      	b.n	a6ae <boot_initialize_area+0x24>

0000a6ec <boot_read_sectors>:
{
    a6ec:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    a6ee:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
{
    a6f2:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a6f4:	b1e9      	cbz	r1, a732 <boot_read_sectors+0x46>
    a6f6:	2901      	cmp	r1, #1
    a6f8:	d006      	beq.n	a708 <boot_read_sectors+0x1c>
    a6fa:	21ff      	movs	r1, #255	; 0xff
    a6fc:	f7ff ffc5 	bl	a68a <boot_initialize_area>
    if (rc != 0) {
    a700:	b1f0      	cbz	r0, a740 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
    a702:	2501      	movs	r5, #1
}
    a704:	4628      	mov	r0, r5
    a706:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a708:	f7ff ffbf 	bl	a68a <boot_initialize_area>
    if (rc != 0) {
    a70c:	2800      	cmp	r0, #0
    a70e:	d1f8      	bne.n	a702 <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a710:	210b      	movs	r1, #11
    a712:	4620      	mov	r0, r4
    a714:	f7ff ffb9 	bl	a68a <boot_initialize_area>
    if (rc != 0) {
    a718:	4605      	mov	r5, r0
    a71a:	b998      	cbnz	r0, a744 <boot_read_sectors+0x58>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    a71c:	2258      	movs	r2, #88	; 0x58
    a71e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a722:	fb02 4303 	mla	r3, r2, r3, r4
    a726:	6a18      	ldr	r0, [r3, #32]
    a728:	f000 fda0 	bl	b26c <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    a72c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    return 0;
    a730:	e7e8      	b.n	a704 <boot_read_sectors+0x18>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a732:	2104      	movs	r1, #4
    a734:	f7ff ffa9 	bl	a68a <boot_initialize_area>
    if (rc != 0) {
    a738:	2800      	cmp	r0, #0
    a73a:	d1e2      	bne.n	a702 <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a73c:	2102      	movs	r1, #2
    a73e:	e7e8      	b.n	a712 <boot_read_sectors+0x26>
    a740:	21ff      	movs	r1, #255	; 0xff
    a742:	e7e6      	b.n	a712 <boot_read_sectors+0x26>
        return BOOT_EFLASH_SEC;
    a744:	2509      	movs	r5, #9
    a746:	e7dd      	b.n	a704 <boot_read_sectors+0x18>

0000a748 <boot_read_image_headers>:
{
    a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a74c:	4604      	mov	r4, r0
    a74e:	460d      	mov	r5, r1
    a750:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a752:	f04f 0900 	mov.w	r9, #0
    a756:	f04f 082c 	mov.w	r8, #44	; 0x2c
    a75a:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    a75c:	fb08 fa09 	mul.w	sl, r8, r9
    a760:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    a764:	4649      	mov	r1, r9
    a766:	fb17 a200 	smlabb	r2, r7, r0, sl
    a76a:	4422      	add	r2, r4
    a76c:	f7fb fe86 	bl	647c <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    a770:	2801      	cmp	r0, #1
    a772:	d109      	bne.n	a788 <boot_read_image_headers+0x40>
    a774:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    a778:	4633      	mov	r3, r6
    a77a:	fb17 a202 	smlabb	r2, r7, r2, sl
    a77e:	4649      	mov	r1, r9
    a780:	4620      	mov	r0, r4
    a782:	4422      	add	r2, r4
    a784:	f000 f825 	bl	a7d2 <boot_read_image_header>
        if (rc != 0) {
    a788:	b138      	cbz	r0, a79a <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    a78a:	f1b9 0f00 	cmp.w	r9, #0
    a78e:	d002      	beq.n	a796 <boot_read_image_headers+0x4e>
                return 0;
    a790:	2d00      	cmp	r5, #0
    a792:	bf08      	it	eq
    a794:	2000      	moveq	r0, #0
}
    a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a79a:	f1b9 0f00 	cmp.w	r9, #0
    a79e:	d1fa      	bne.n	a796 <boot_read_image_headers+0x4e>
    a7a0:	f04f 0901 	mov.w	r9, #1
    a7a4:	e7da      	b.n	a75c <boot_read_image_headers+0x14>

0000a7a6 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    a7a6:	2301      	movs	r3, #1
    a7a8:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    a7aa:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    a7ae:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    a7b0:	2300      	movs	r3, #0
    bs->source = 0;
    a7b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    a7b6:	4770      	bx	lr

0000a7b8 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    a7b8:	7943      	ldrb	r3, [r0, #5]
    a7ba:	2b01      	cmp	r3, #1
    a7bc:	d107      	bne.n	a7ce <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    a7be:	6803      	ldr	r3, [r0, #0]
    a7c0:	2b01      	cmp	r3, #1
    a7c2:	d104      	bne.n	a7ce <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    a7c4:	7900      	ldrb	r0, [r0, #4]
    a7c6:	1e43      	subs	r3, r0, #1
    a7c8:	4258      	negs	r0, r3
    a7ca:	4158      	adcs	r0, r3
    a7cc:	4770      	bx	lr
    a7ce:	2000      	movs	r0, #0
}
    a7d0:	4770      	bx	lr

0000a7d2 <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    a7d2:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a7d4:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    a7d8:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a7da:	f7ff fe67 	bl	a4ac <flash_area_id_from_multi_image_slot>

    rc = flash_area_open(area_id, &fap);
    a7de:	a901      	add	r1, sp, #4
    a7e0:	b2c0      	uxtb	r0, r0
    a7e2:	f7f7 faf9 	bl	1dd8 <flash_area_open>
    if (rc == 0) {
    a7e6:	4601      	mov	r1, r0
    a7e8:	b968      	cbnz	r0, a806 <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    a7ea:	4622      	mov	r2, r4
    a7ec:	2320      	movs	r3, #32
    a7ee:	9801      	ldr	r0, [sp, #4]
    a7f0:	f000 fcfe 	bl	b1f0 <flash_area_read>
    a7f4:	4604      	mov	r4, r0
        flash_area_close(fap);
    a7f6:	9801      	ldr	r0, [sp, #4]
    a7f8:	f000 fcf9 	bl	b1ee <flash_area_close>
    }

    if (rc != 0) {
    a7fc:	1e20      	subs	r0, r4, #0
    a7fe:	bf18      	it	ne
    a800:	2001      	movne	r0, #1
        rc = BOOT_EFLASH;
    }

    return rc;
}
    a802:	b002      	add	sp, #8
    a804:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    a806:	2001      	movs	r0, #1
    return rc;
    a808:	e7fb      	b.n	a802 <boot_read_image_header+0x30>

0000a80a <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    a80a:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a80e:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a812:	fb02 0303 	mla	r3, r2, r3, r0
    a816:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    a81a:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
    a81e:	d836      	bhi.n	a88e <boot_slots_compatible+0x84>
    a820:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    a822:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    a826:	d832      	bhi.n	a88e <boot_slots_compatible+0x84>
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    a828:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    a82a:	4608      	mov	r0, r1
    i = sz0 = primary_slot_sz = 0;
    a82c:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    a82e:	460d      	mov	r5, r1
    i = sz0 = primary_slot_sz = 0;
    a830:	460c      	mov	r4, r1
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    a832:	4562      	cmp	r2, ip
    a834:	d307      	bcc.n	a846 <boot_slots_compatible+0x3c>
    a836:	42b0      	cmp	r0, r6
    a838:	d305      	bcc.n	a846 <boot_slots_compatible+0x3c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    a83a:	4562      	cmp	r2, ip
    a83c:	d127      	bne.n	a88e <boot_slots_compatible+0x84>
    a83e:	1b83      	subs	r3, r0, r6
    a840:	4258      	negs	r0, r3
    a842:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    a844:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    a846:	42ac      	cmp	r4, r5
    a848:	d10c      	bne.n	a864 <boot_slots_compatible+0x5a>
	return fs->fs_size;
    a84a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    a84c:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a850:	687f      	ldr	r7, [r7, #4]
            i++;
    a852:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a854:	443c      	add	r4, r7
    a856:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    a858:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a85c:	687f      	ldr	r7, [r7, #4]
            j++;
    a85e:	3001      	adds	r0, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a860:	443d      	add	r5, r7
            j++;
    a862:	e7e6      	b.n	a832 <boot_slots_compatible+0x28>
        } else if (sz0 < sz1) {
    a864:	d209      	bcs.n	a87a <boot_slots_compatible+0x70>
    a866:	6a5f      	ldr	r7, [r3, #36]	; 0x24
            if (smaller == 2) {
    a868:	2902      	cmp	r1, #2
    a86a:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a86e:	687f      	ldr	r7, [r7, #4]
    a870:	443c      	add	r4, r7
            if (smaller == 2) {
    a872:	d00c      	beq.n	a88e <boot_slots_compatible+0x84>
            smaller = 1;
    a874:	2101      	movs	r1, #1
            i++;
    a876:	3201      	adds	r2, #1
    a878:	e7db      	b.n	a832 <boot_slots_compatible+0x28>
    a87a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
            if (smaller == 1) {
    a87c:	2901      	cmp	r1, #1
    a87e:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a882:	687f      	ldr	r7, [r7, #4]
    a884:	443d      	add	r5, r7
            if (smaller == 1) {
    a886:	d002      	beq.n	a88e <boot_slots_compatible+0x84>
            smaller = 2;
    a888:	2102      	movs	r1, #2
            j++;
    a88a:	3001      	adds	r0, #1
    a88c:	e7d1      	b.n	a832 <boot_slots_compatible+0x28>
        return 0;
    a88e:	2000      	movs	r0, #0
    a890:	e7d8      	b.n	a844 <boot_slots_compatible+0x3a>

0000a892 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a892:	4604      	mov	r4, r0
    a894:	b508      	push	{r3, lr}
    a896:	4608      	mov	r0, r1
    a898:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a89a:	461a      	mov	r2, r3
    a89c:	47a0      	blx	r4
	return z_impl_z_current_get();
    a89e:	f7ff f9a5 	bl	9bec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a8a2:	f7f9 fd87 	bl	43b4 <z_impl_k_thread_abort>

0000a8a6 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a8a6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a8a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    a8b0:	bf2c      	ite	cs
    a8b2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    a8b6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    a8ba:	4770      	bx	lr

0000a8bc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    a8bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    a8c0:	6880      	ldr	r0, [r0, #8]
    a8c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    a8c6:	bf2c      	ite	cs
    a8c8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    a8cc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    a8d0:	4770      	bx	lr

0000a8d2 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a8d2:	2201      	movs	r2, #1
{
    a8d4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a8d6:	f7ff ffe6 	bl	a8a6 <chunk_field>
}
    a8da:	40d0      	lsrs	r0, r2
    a8dc:	bd08      	pop	{r3, pc}

0000a8de <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a8de:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a8e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a8e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a8e8:	d308      	bcc.n	a8fc <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a8ea:	684b      	ldr	r3, [r1, #4]
		if (used) {
    a8ec:	b11a      	cbz	r2, a8f6 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a8ee:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a8f2:	604b      	str	r3, [r1, #4]
    a8f4:	4770      	bx	lr
    a8f6:	f023 0301 	bic.w	r3, r3, #1
    a8fa:	e7fa      	b.n	a8f2 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a8fc:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    a8fe:	b11a      	cbz	r2, a908 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a900:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a904:	804b      	strh	r3, [r1, #2]
		}
	}
}
    a906:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a908:	f023 0301 	bic.w	r3, r3, #1
    a90c:	e7fa      	b.n	a904 <set_chunk_used+0x26>

0000a90e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a90e:	0053      	lsls	r3, r2, #1
    a910:	2201      	movs	r2, #1
    a912:	f7ff bfd3 	b.w	a8bc <chunk_set>

0000a916 <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a916:	6883      	ldr	r3, [r0, #8]
    a918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a91c:	bf34      	ite	cc
    a91e:	2304      	movcc	r3, #4
    a920:	2308      	movcs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a922:	1ac9      	subs	r1, r1, r3
    a924:	1a08      	subs	r0, r1, r0
}
    a926:	08c0      	lsrs	r0, r0, #3
    a928:	4770      	bx	lr

0000a92a <bucket_idx.isra.0>:
    a92a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a92e:	bf34      	ite	cc
    a930:	2304      	movcc	r3, #4
    a932:	2308      	movcs	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a934:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a936:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a938:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
    a93c:	fab0 f080 	clz	r0, r0
}
    a940:	f1c0 001f 	rsb	r0, r0, #31
    a944:	4770      	bx	lr

0000a946 <free_list_remove_bidx>:
{
    a946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a94a:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    a94c:	2203      	movs	r2, #3
    a94e:	460e      	mov	r6, r1
    a950:	4604      	mov	r4, r0
    a952:	f7ff ffa8 	bl	a8a6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
    a956:	4286      	cmp	r6, r0
    a958:	4605      	mov	r5, r0
    a95a:	f107 0804 	add.w	r8, r7, #4
    a95e:	d10a      	bne.n	a976 <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
    a960:	2201      	movs	r2, #1
    a962:	68e3      	ldr	r3, [r4, #12]
    a964:	40ba      	lsls	r2, r7
    a966:	ea23 0302 	bic.w	r3, r3, r2
    a96a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    a96c:	2300      	movs	r3, #0
    a96e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    a976:	4631      	mov	r1, r6
    a978:	2202      	movs	r2, #2
    a97a:	4620      	mov	r0, r4
    a97c:	f7ff ff93 	bl	a8a6 <chunk_field>
    a980:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    a982:	462b      	mov	r3, r5
    a984:	4601      	mov	r1, r0
    a986:	2203      	movs	r2, #3
    a988:	4620      	mov	r0, r4
		b->next = second;
    a98a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    a98e:	f7ff ff95 	bl	a8bc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    a992:	4633      	mov	r3, r6
    a994:	4629      	mov	r1, r5
    a996:	4620      	mov	r0, r4
}
    a998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a99c:	2202      	movs	r2, #2
    a99e:	f7ff bf8d 	b.w	a8bc <chunk_set>

0000a9a2 <free_list_remove>:
{
    a9a2:	b570      	push	{r4, r5, r6, lr}
    a9a4:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    a9a6:	6886      	ldr	r6, [r0, #8]
    a9a8:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    a9aa:	f7ff ff92 	bl	a8d2 <chunk_size>
    a9ae:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    a9b2:	4601      	mov	r1, r0
    a9b4:	d301      	bcc.n	a9ba <free_list_remove+0x18>
    a9b6:	2801      	cmp	r0, #1
    a9b8:	d009      	beq.n	a9ce <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    a9ba:	4630      	mov	r0, r6
    a9bc:	f7ff ffb5 	bl	a92a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
    a9c0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    a9c2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    a9c4:	4620      	mov	r0, r4
}
    a9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
    a9ca:	f7ff bfbc 	b.w	a946 <free_list_remove_bidx>
}
    a9ce:	bd70      	pop	{r4, r5, r6, pc}

0000a9d0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9d4:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
    a9d6:	6880      	ldr	r0, [r0, #8]
    a9d8:	f7ff ffa7 	bl	a92a <bucket_idx.isra.0>
    a9dc:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    a9e0:	f8da 9010 	ldr.w	r9, [sl, #16]
{
    a9e4:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    a9e6:	4606      	mov	r6, r0
	if (b->next) {
    a9e8:	f1b9 0f00 	cmp.w	r9, #0
    a9ec:	d01b      	beq.n	aa26 <alloc_chunk+0x56>
    a9ee:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    a9f0:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    a9f4:	4628      	mov	r0, r5
    a9f6:	4621      	mov	r1, r4
    a9f8:	f7ff ff6b 	bl	a8d2 <chunk_size>
    a9fc:	4540      	cmp	r0, r8
    a9fe:	d307      	bcc.n	aa10 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
    aa00:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    aa02:	4621      	mov	r1, r4
    aa04:	4628      	mov	r0, r5
    aa06:	f7ff ff9e 	bl	a946 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    aa0a:	4620      	mov	r0, r4
    aa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
    aa10:	2203      	movs	r2, #3
    aa12:	4621      	mov	r1, r4
    aa14:	4628      	mov	r0, r5
    aa16:	f7ff ff46 	bl	a8a6 <chunk_field>
		} while (--i && b->next != first);
    aa1a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    aa1c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    aa20:	d001      	beq.n	aa26 <alloc_chunk+0x56>
    aa22:	4581      	cmp	r9, r0
    aa24:	d1e4      	bne.n	a9f0 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    aa26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    aa2a:	68eb      	ldr	r3, [r5, #12]
    aa2c:	3601      	adds	r6, #1
    aa2e:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
    aa30:	401c      	ands	r4, r3
    aa32:	d0ea      	beq.n	aa0a <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
    aa34:	fa94 f2a4 	rbit	r2, r4
    aa38:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    aa3c:	1d13      	adds	r3, r2, #4
    aa3e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    aa42:	e7de      	b.n	aa02 <alloc_chunk+0x32>

0000aa44 <split_chunks>:
{
    aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa48:	4614      	mov	r4, r2
    aa4a:	460e      	mov	r6, r1
    aa4c:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
    aa4e:	f7ff ff40 	bl	a8d2 <chunk_size>
	chunksz_t lsz = rc - lc;
    aa52:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
    aa56:	1b37      	subs	r7, r6, r4
    aa58:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    aa5a:	4642      	mov	r2, r8
    aa5c:	4631      	mov	r1, r6
    aa5e:	4628      	mov	r0, r5
    aa60:	f7ff ff55 	bl	a90e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    aa64:	463a      	mov	r2, r7
    aa66:	4621      	mov	r1, r4
    aa68:	4628      	mov	r0, r5
    aa6a:	f7ff ff50 	bl	a90e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aa6e:	4643      	mov	r3, r8
    aa70:	2200      	movs	r2, #0
    aa72:	4621      	mov	r1, r4
    aa74:	4628      	mov	r0, r5
    aa76:	f7ff ff21 	bl	a8bc <chunk_set>
	return c + chunk_size(h, c);
    aa7a:	4621      	mov	r1, r4
    aa7c:	4628      	mov	r0, r5
    aa7e:	f7ff ff28 	bl	a8d2 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aa82:	463b      	mov	r3, r7
    aa84:	1821      	adds	r1, r4, r0
    aa86:	2200      	movs	r2, #0
    aa88:	4628      	mov	r0, r5
}
    aa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aa8e:	f7ff bf15 	b.w	a8bc <chunk_set>

0000aa92 <merge_chunks>:
{
    aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa96:	4616      	mov	r6, r2
    aa98:	4604      	mov	r4, r0
    aa9a:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    aa9c:	f7ff ff19 	bl	a8d2 <chunk_size>
    aaa0:	4631      	mov	r1, r6
    aaa2:	4605      	mov	r5, r0
    aaa4:	4620      	mov	r0, r4
    aaa6:	f7ff ff14 	bl	a8d2 <chunk_size>
    aaaa:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
    aaac:	462a      	mov	r2, r5
    aaae:	4639      	mov	r1, r7
    aab0:	4620      	mov	r0, r4
    aab2:	f7ff ff2c 	bl	a90e <set_chunk_size>
	return c + chunk_size(h, c);
    aab6:	4631      	mov	r1, r6
    aab8:	4620      	mov	r0, r4
    aaba:	f7ff ff0a 	bl	a8d2 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    aabe:	462b      	mov	r3, r5
    aac0:	1831      	adds	r1, r6, r0
    aac2:	2200      	movs	r2, #0
    aac4:	4620      	mov	r0, r4
}
    aac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aaca:	f7ff bef7 	b.w	a8bc <chunk_set>

0000aace <free_list_add>:
{
    aace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aad2:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    aad4:	6886      	ldr	r6, [r0, #8]
    aad6:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    aad8:	f7ff fefb 	bl	a8d2 <chunk_size>
    aadc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    aae0:	4601      	mov	r1, r0
    aae2:	d301      	bcc.n	aae8 <free_list_add+0x1a>
    aae4:	2801      	cmp	r0, #1
    aae6:	d032      	beq.n	ab4e <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
    aae8:	4630      	mov	r0, r6
    aaea:	f7ff ff1e 	bl	a92a <bucket_idx.isra.0>
	if (b->next == 0U) {
    aaee:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    aaf2:	690e      	ldr	r6, [r1, #16]
    aaf4:	b996      	cbnz	r6, ab1c <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
    aaf6:	2201      	movs	r2, #1
    aaf8:	68e3      	ldr	r3, [r4, #12]
    aafa:	4082      	lsls	r2, r0
    aafc:	4313      	orrs	r3, r2
    aafe:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    ab00:	2202      	movs	r2, #2
		b->next = c;
    ab02:	610d      	str	r5, [r1, #16]
    ab04:	462b      	mov	r3, r5
    ab06:	4629      	mov	r1, r5
    ab08:	4620      	mov	r0, r4
    ab0a:	f7ff fed7 	bl	a8bc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    ab0e:	2203      	movs	r2, #3
    ab10:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    ab12:	4620      	mov	r0, r4
}
    ab14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ab18:	f7ff bed0 	b.w	a8bc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    ab1c:	2202      	movs	r2, #2
    ab1e:	4631      	mov	r1, r6
    ab20:	4620      	mov	r0, r4
    ab22:	f7ff fec0 	bl	a8a6 <chunk_field>
    ab26:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    ab28:	4603      	mov	r3, r0
    ab2a:	4629      	mov	r1, r5
    ab2c:	4620      	mov	r0, r4
    ab2e:	f7ff fec5 	bl	a8bc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    ab32:	2203      	movs	r2, #3
    ab34:	4633      	mov	r3, r6
    ab36:	4629      	mov	r1, r5
    ab38:	4620      	mov	r0, r4
    ab3a:	f7ff febf 	bl	a8bc <chunk_set>
    ab3e:	4639      	mov	r1, r7
    ab40:	462b      	mov	r3, r5
    ab42:	4620      	mov	r0, r4
    ab44:	f7ff feba 	bl	a8bc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    ab48:	2202      	movs	r2, #2
    ab4a:	4631      	mov	r1, r6
    ab4c:	e7e1      	b.n	ab12 <free_list_add+0x44>
    ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab52 <free_chunk>:
{
    ab52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab54:	460c      	mov	r4, r1
    ab56:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    ab58:	f7ff febb 	bl	a8d2 <chunk_size>
    ab5c:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ab5e:	2201      	movs	r2, #1
    ab60:	4631      	mov	r1, r6
    ab62:	4628      	mov	r0, r5
    ab64:	f7ff fe9f 	bl	a8a6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    ab68:	07c3      	lsls	r3, r0, #31
    ab6a:	d40c      	bmi.n	ab86 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    ab6c:	4631      	mov	r1, r6
    ab6e:	4628      	mov	r0, r5
    ab70:	f7ff ff17 	bl	a9a2 <free_list_remove>
	return c + chunk_size(h, c);
    ab74:	4621      	mov	r1, r4
    ab76:	4628      	mov	r0, r5
    ab78:	f7ff feab 	bl	a8d2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    ab7c:	4621      	mov	r1, r4
    ab7e:	1822      	adds	r2, r4, r0
    ab80:	4628      	mov	r0, r5
    ab82:	f7ff ff86 	bl	aa92 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    ab86:	2200      	movs	r2, #0
    ab88:	4621      	mov	r1, r4
    ab8a:	4628      	mov	r0, r5
    ab8c:	f7ff fe8b 	bl	a8a6 <chunk_field>
    ab90:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ab92:	2201      	movs	r2, #1
    ab94:	4639      	mov	r1, r7
    ab96:	4628      	mov	r0, r5
    ab98:	f7ff fe85 	bl	a8a6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    ab9c:	ea10 0602 	ands.w	r6, r0, r2
    aba0:	d113      	bne.n	abca <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    aba2:	4639      	mov	r1, r7
    aba4:	4628      	mov	r0, r5
    aba6:	f7ff fefc 	bl	a9a2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    abaa:	4621      	mov	r1, r4
    abac:	4632      	mov	r2, r6
    abae:	4628      	mov	r0, r5
    abb0:	f7ff fe79 	bl	a8a6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    abb4:	4622      	mov	r2, r4
    abb6:	1a21      	subs	r1, r4, r0
    abb8:	4628      	mov	r0, r5
    abba:	f7ff ff6a 	bl	aa92 <merge_chunks>
    abbe:	4621      	mov	r1, r4
    abc0:	4632      	mov	r2, r6
    abc2:	4628      	mov	r0, r5
    abc4:	f7ff fe6f 	bl	a8a6 <chunk_field>
    abc8:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    abca:	4621      	mov	r1, r4
    abcc:	4628      	mov	r0, r5
}
    abce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    abd2:	f7ff bf7c 	b.w	aace <free_list_add>

0000abd6 <sys_heap_free>:
{
    abd6:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
    abd8:	b171      	cbz	r1, abf8 <sys_heap_free+0x22>
    abda:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
    abdc:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
    abde:	4628      	mov	r0, r5
    abe0:	f7ff fe99 	bl	a916 <mem_to_chunkid>
    abe4:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
    abe6:	4601      	mov	r1, r0
    abe8:	4628      	mov	r0, r5
    abea:	f7ff fe78 	bl	a8de <set_chunk_used>
	free_chunk(h, c);
    abee:	4621      	mov	r1, r4
}
    abf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
    abf4:	f7ff bfad 	b.w	ab52 <free_chunk>
}
    abf8:	bd38      	pop	{r3, r4, r5, pc}

0000abfa <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    abfa:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    abfc:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    abfe:	b909      	cbnz	r1, ac04 <sys_heap_alloc+0xa>
		return NULL;
    ac00:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ac02:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    ac04:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
    ac06:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ac0a:	d9f9      	bls.n	ac00 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
    ac0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ac10:	bf34      	ite	cc
    ac12:	2304      	movcc	r3, #4
    ac14:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ac16:	1dcc      	adds	r4, r1, #7
    ac18:	441c      	add	r4, r3
    ac1a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    ac1c:	4621      	mov	r1, r4
    ac1e:	4630      	mov	r0, r6
    ac20:	f7ff fed6 	bl	a9d0 <alloc_chunk>
	if (c == 0U) {
    ac24:	4605      	mov	r5, r0
    ac26:	2800      	cmp	r0, #0
    ac28:	d0ea      	beq.n	ac00 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    ac2a:	4601      	mov	r1, r0
    ac2c:	4630      	mov	r0, r6
    ac2e:	f7ff fe50 	bl	a8d2 <chunk_size>
    ac32:	42a0      	cmp	r0, r4
    ac34:	d909      	bls.n	ac4a <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    ac36:	442c      	add	r4, r5
    ac38:	4629      	mov	r1, r5
    ac3a:	4630      	mov	r0, r6
    ac3c:	4622      	mov	r2, r4
    ac3e:	f7ff ff01 	bl	aa44 <split_chunks>
		free_list_add(h, c + chunk_sz);
    ac42:	4621      	mov	r1, r4
    ac44:	4630      	mov	r0, r6
    ac46:	f7ff ff42 	bl	aace <free_list_add>
	set_chunk_used(h, c, true);
    ac4a:	4630      	mov	r0, r6
    ac4c:	2201      	movs	r2, #1
    ac4e:	4629      	mov	r1, r5
    ac50:	f7ff fe45 	bl	a8de <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    ac54:	68b3      	ldr	r3, [r6, #8]
    ac56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ac5a:	bf34      	ite	cc
    ac5c:	2304      	movcc	r3, #4
    ac5e:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ac60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    ac64:	4418      	add	r0, r3
	return mem;
    ac66:	e7cc      	b.n	ac02 <sys_heap_alloc+0x8>

0000ac68 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
    ac6c:	6806      	ldr	r6, [r0, #0]
{
    ac6e:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
    ac70:	68b2      	ldr	r2, [r6, #8]
    ac72:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	return big_heap(h) ? 8 : 4;
    ac76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ac7a:	bf34      	ite	cc
    ac7c:	2304      	movcc	r3, #4
    ac7e:	2308      	movcs	r3, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ac80:	ea19 0901 	ands.w	r9, r9, r1
{
    ac84:	460f      	mov	r7, r1
	if (align != rew) {
    ac86:	d00b      	beq.n	aca0 <sys_heap_aligned_alloc+0x38>
	rew = align & -align;
    ac88:	4249      	negs	r1, r1
    ac8a:	4039      	ands	r1, r7
    ac8c:	428b      	cmp	r3, r1
    ac8e:	464f      	mov	r7, r9
    ac90:	bf28      	it	cs
    ac92:	460b      	movcs	r3, r1
    ac94:	4689      	mov	r9, r1
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    ac96:	b954      	cbnz	r4, acae <sys_heap_aligned_alloc+0x46>
		return NULL;
    ac98:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ac9a:	4628      	mov	r0, r5
    ac9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    aca0:	4299      	cmp	r1, r3
    aca2:	d8f8      	bhi.n	ac96 <sys_heap_aligned_alloc+0x2e>
			return sys_heap_alloc(heap, bytes);
    aca4:	4621      	mov	r1, r4
}
    aca6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    acaa:	f7ff bfa6 	b.w	abfa <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    acae:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    acb2:	d9f1      	bls.n	ac98 <sys_heap_aligned_alloc+0x30>
    acb4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    acb8:	bf34      	ite	cc
    acba:	2204      	movcc	r2, #4
    acbc:	2208      	movcs	r2, #8
    acbe:	1de1      	adds	r1, r4, #7
    acc0:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    acc2:	1ac9      	subs	r1, r1, r3
    acc4:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    acc6:	4630      	mov	r0, r6
    acc8:	08c9      	lsrs	r1, r1, #3
    acca:	f7ff fe81 	bl	a9d0 <alloc_chunk>
	if (c0 == 0) {
    acce:	4680      	mov	r8, r0
    acd0:	2800      	cmp	r0, #0
    acd2:	d0e1      	beq.n	ac98 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
    acd4:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    acd6:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    acda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    acde:	bf34      	ite	cc
    ace0:	2304      	movcc	r3, #4
    ace2:	2308      	movcs	r3, #8
    ace4:	441d      	add	r5, r3
    ace6:	4435      	add	r5, r6
    ace8:	1e7b      	subs	r3, r7, #1
    acea:	441d      	add	r5, r3
    acec:	427f      	negs	r7, r7
    acee:	403d      	ands	r5, r7
    acf0:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
    acf4:	4629      	mov	r1, r5
    acf6:	4630      	mov	r0, r6
    acf8:	f7ff fe0d 	bl	a916 <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    acfc:	442c      	add	r4, r5
    acfe:	3407      	adds	r4, #7
    ad00:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ad04:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ad06:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
    ad08:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
    ad0a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ad0e:	d208      	bcs.n	ad22 <sys_heap_aligned_alloc+0xba>
		split_chunks(h, c0, c);
    ad10:	4602      	mov	r2, r0
    ad12:	4641      	mov	r1, r8
    ad14:	4630      	mov	r0, r6
    ad16:	f7ff fe95 	bl	aa44 <split_chunks>
		free_list_add(h, c0);
    ad1a:	4641      	mov	r1, r8
    ad1c:	4630      	mov	r0, r6
    ad1e:	f7ff fed6 	bl	aace <free_list_add>
	return c + chunk_size(h, c);
    ad22:	4639      	mov	r1, r7
    ad24:	4630      	mov	r0, r6
    ad26:	f7ff fdd4 	bl	a8d2 <chunk_size>
    ad2a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ad2c:	4284      	cmp	r4, r0
    ad2e:	d208      	bcs.n	ad42 <sys_heap_aligned_alloc+0xda>
		split_chunks(h, c, c_end);
    ad30:	4639      	mov	r1, r7
    ad32:	4630      	mov	r0, r6
    ad34:	4622      	mov	r2, r4
    ad36:	f7ff fe85 	bl	aa44 <split_chunks>
		free_list_add(h, c_end);
    ad3a:	4621      	mov	r1, r4
    ad3c:	4630      	mov	r0, r6
    ad3e:	f7ff fec6 	bl	aace <free_list_add>
	set_chunk_used(h, c, true);
    ad42:	2201      	movs	r2, #1
    ad44:	4639      	mov	r1, r7
    ad46:	4630      	mov	r0, r6
    ad48:	f7ff fdc9 	bl	a8de <set_chunk_used>
	return mem;
    ad4c:	e7a5      	b.n	ac9a <sys_heap_aligned_alloc+0x32>

0000ad4e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    ad4e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ad52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad54:	bf2c      	ite	cs
    ad56:	2308      	movcs	r3, #8
    ad58:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ad5a:	1dce      	adds	r6, r1, #7
    ad5c:	f026 0607 	bic.w	r6, r6, #7
	bytes -= heap_footer_bytes(bytes);
    ad60:	1ad2      	subs	r2, r2, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ad62:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    ad64:	4637      	mov	r7, r6
    ad66:	2200      	movs	r2, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ad68:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ad6c:	1ba4      	subs	r4, r4, r6
    ad6e:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    ad70:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ad72:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
    ad74:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ad76:	4620      	mov	r0, r4
	h->avail_buckets = 0;
    ad78:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ad7c:	f7ff fdd5 	bl	a92a <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    ad80:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    ad82:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ad84:	351b      	adds	r5, #27
    ad86:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    ad88:	4298      	cmp	r0, r3
    ad8a:	da2e      	bge.n	adea <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    ad8c:	462a      	mov	r2, r5
    ad8e:	4630      	mov	r0, r6
    ad90:	2100      	movs	r1, #0
    ad92:	f7ff fdbc 	bl	a90e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ad96:	2300      	movs	r3, #0
    ad98:	4630      	mov	r0, r6
    ad9a:	461a      	mov	r2, r3
    ad9c:	4619      	mov	r1, r3
    ad9e:	f7ff fd8d 	bl	a8bc <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ada2:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    ada4:	4619      	mov	r1, r3
    ada6:	4630      	mov	r0, r6
    ada8:	2201      	movs	r2, #1
    adaa:	f7ff fd98 	bl	a8de <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    adae:	463a      	mov	r2, r7
    adb0:	4629      	mov	r1, r5
    adb2:	f7ff fdac 	bl	a90e <set_chunk_size>
    adb6:	462b      	mov	r3, r5
    adb8:	2200      	movs	r2, #0
    adba:	4629      	mov	r1, r5
    adbc:	4630      	mov	r0, r6
    adbe:	f7ff fd7d 	bl	a8bc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    adc2:	4621      	mov	r1, r4
    adc4:	4630      	mov	r0, r6
    adc6:	f7ff fda2 	bl	a90e <set_chunk_size>
    adca:	463b      	mov	r3, r7
    adcc:	4621      	mov	r1, r4
    adce:	4630      	mov	r0, r6
    add0:	2200      	movs	r2, #0
    add2:	f7ff fd73 	bl	a8bc <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    add6:	4621      	mov	r1, r4
    add8:	4630      	mov	r0, r6
    adda:	2201      	movs	r2, #1
    addc:	f7ff fd7f 	bl	a8de <set_chunk_used>

	free_list_add(h, chunk0_size);
    ade0:	4629      	mov	r1, r5
}
    ade2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ade6:	f7ff be72 	b.w	aace <free_list_add>
		h->buckets[i].next = 0;
    adea:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    adee:	3301      	adds	r3, #1
    adf0:	e7ca      	b.n	ad88 <sys_heap_init+0x3a>

0000adf2 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    adf2:	2200      	movs	r2, #0
	return list->head;
    adf4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    adf6:	b90b      	cbnz	r3, adfc <sys_slist_find_and_remove+0xa>
    adf8:	4618      	mov	r0, r3
    adfa:	4770      	bx	lr
    adfc:	428b      	cmp	r3, r1
    adfe:	d110      	bne.n	ae22 <sys_slist_find_and_remove+0x30>
	return node->next;
    ae00:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae02:	b942      	cbnz	r2, ae16 <sys_slist_find_and_remove+0x24>
    ae04:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    ae06:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae08:	4291      	cmp	r1, r2
    ae0a:	d100      	bne.n	ae0e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    ae0c:	6043      	str	r3, [r0, #4]
	parent->next = child;
    ae0e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae10:	2001      	movs	r0, #1
	parent->next = child;
    ae12:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae14:	4770      	bx	lr
	parent->next = child;
    ae16:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae18:	6843      	ldr	r3, [r0, #4]
    ae1a:	4299      	cmp	r1, r3
	list->tail = node;
    ae1c:	bf08      	it	eq
    ae1e:	6042      	streq	r2, [r0, #4]
}
    ae20:	e7f5      	b.n	ae0e <sys_slist_find_and_remove+0x1c>
	return node->next;
    ae22:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae24:	681b      	ldr	r3, [r3, #0]
    ae26:	e7e6      	b.n	adf6 <sys_slist_find_and_remove+0x4>

0000ae28 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ae28:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    ae2a:	f013 0307 	ands.w	r3, r3, #7
    ae2e:	d105      	bne.n	ae3c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ae30:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    ae32:	2b00      	cmp	r3, #0
    ae34:	bf0c      	ite	eq
    ae36:	2000      	moveq	r0, #0
    ae38:	2003      	movne	r0, #3
    ae3a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ae3c:	2b02      	cmp	r3, #2
    ae3e:	d105      	bne.n	ae4c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    ae40:	8b40      	ldrh	r0, [r0, #26]
    ae42:	fab0 f080 	clz	r0, r0
    ae46:	0940      	lsrs	r0, r0, #5
    ae48:	0080      	lsls	r0, r0, #2
    ae4a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    ae4c:	2b01      	cmp	r3, #1
    ae4e:	d105      	bne.n	ae5c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    ae50:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    ae52:	2b00      	cmp	r3, #0
    ae54:	bf0c      	ite	eq
    ae56:	2000      	moveq	r0, #0
    ae58:	2005      	movne	r0, #5
    ae5a:	4770      	bx	lr
	int evt = EVT_NOP;
    ae5c:	2000      	movs	r0, #0
}
    ae5e:	4770      	bx	lr

0000ae60 <validate_args>:
{
    ae60:	b510      	push	{r4, lr}
    ae62:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    ae64:	b100      	cbz	r0, ae68 <validate_args+0x8>
    ae66:	b911      	cbnz	r1, ae6e <validate_args+0xe>
		return -EINVAL;
    ae68:	f06f 0015 	mvn.w	r0, #21
}
    ae6c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    ae6e:	1d08      	adds	r0, r1, #4
    ae70:	f000 f8d6 	bl	b020 <sys_notify_validate>
	if ((rv == 0)
    ae74:	2800      	cmp	r0, #0
    ae76:	d1f9      	bne.n	ae6c <validate_args+0xc>
	    && ((cli->notify.flags
    ae78:	68a3      	ldr	r3, [r4, #8]
    ae7a:	2b03      	cmp	r3, #3
    ae7c:	d9f6      	bls.n	ae6c <validate_args+0xc>
    ae7e:	e7f3      	b.n	ae68 <validate_args+0x8>

0000ae80 <notify_one>:
{
    ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae84:	460d      	mov	r5, r1
    ae86:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ae88:	4619      	mov	r1, r3
    ae8a:	1d28      	adds	r0, r5, #4
{
    ae8c:	4690      	mov	r8, r2
    ae8e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ae90:	f000 f8d7 	bl	b042 <sys_notify_finalize>
	if (cb) {
    ae94:	4604      	mov	r4, r0
    ae96:	b138      	cbz	r0, aea8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    ae98:	4633      	mov	r3, r6
    ae9a:	4642      	mov	r2, r8
    ae9c:	4629      	mov	r1, r5
    ae9e:	4638      	mov	r0, r7
    aea0:	46a4      	mov	ip, r4
}
    aea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    aea6:	4760      	bx	ip
}
    aea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aeac <transition_complete>:
{
    aeac:	b410      	push	{r4}
	__asm__ volatile(
    aeae:	f04f 0420 	mov.w	r4, #32
    aeb2:	f3ef 8211 	mrs	r2, BASEPRI
    aeb6:	f384 8812 	msr	BASEPRI_MAX, r4
    aeba:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    aebe:	6141      	str	r1, [r0, #20]
}
    aec0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    aec2:	2101      	movs	r1, #1
    aec4:	f7f6 bbda 	b.w	167c <process_event>

0000aec8 <onoff_manager_init>:
{
    aec8:	b538      	push	{r3, r4, r5, lr}
    aeca:	460c      	mov	r4, r1
	if ((mgr == NULL)
    aecc:	4605      	mov	r5, r0
    aece:	b158      	cbz	r0, aee8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    aed0:	b151      	cbz	r1, aee8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    aed2:	680b      	ldr	r3, [r1, #0]
    aed4:	b143      	cbz	r3, aee8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    aed6:	684b      	ldr	r3, [r1, #4]
    aed8:	b133      	cbz	r3, aee8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    aeda:	221c      	movs	r2, #28
    aedc:	2100      	movs	r1, #0
    aede:	f000 fbe6 	bl	b6ae <memset>
	return 0;
    aee2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    aee4:	612c      	str	r4, [r5, #16]
}
    aee6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    aee8:	f06f 0015 	mvn.w	r0, #21
    aeec:	e7fb      	b.n	aee6 <onoff_manager_init+0x1e>

0000aeee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    aeee:	b570      	push	{r4, r5, r6, lr}
    aef0:	4605      	mov	r5, r0
    aef2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    aef4:	f7ff ffb4 	bl	ae60 <validate_args>

	if (rv < 0) {
    aef8:	1e04      	subs	r4, r0, #0
    aefa:	db15      	blt.n	af28 <onoff_request+0x3a>
    aefc:	f04f 0320 	mov.w	r3, #32
    af00:	f3ef 8211 	mrs	r2, BASEPRI
    af04:	f383 8812 	msr	BASEPRI_MAX, r3
    af08:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    af0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    af10:	8b6b      	ldrh	r3, [r5, #26]
    af12:	8b2c      	ldrh	r4, [r5, #24]
    af14:	428b      	cmp	r3, r1
    af16:	f004 0407 	and.w	r4, r4, #7
    af1a:	d107      	bne.n	af2c <onoff_request+0x3e>
	__asm__ volatile(
    af1c:	f382 8811 	msr	BASEPRI, r2
    af20:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    af24:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    af28:	4620      	mov	r0, r4
    af2a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    af2c:	2c02      	cmp	r4, #2
    af2e:	d10c      	bne.n	af4a <onoff_request+0x5c>
		mgr->refs += 1U;
    af30:	3301      	adds	r3, #1
    af32:	836b      	strh	r3, [r5, #26]
    af34:	f382 8811 	msr	BASEPRI, r2
    af38:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    af3c:	2300      	movs	r3, #0
    af3e:	4622      	mov	r2, r4
    af40:	4631      	mov	r1, r6
    af42:	4628      	mov	r0, r5
    af44:	f7ff ff9c 	bl	ae80 <notify_one>
    af48:	e7ee      	b.n	af28 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    af4a:	2c06      	cmp	r4, #6
    af4c:	d814      	bhi.n	af78 <onoff_request+0x8a>
    af4e:	e8df f004 	tbb	[pc, r4]
    af52:	1304      	.short	0x1304
    af54:	1a041313 	.word	0x1a041313
    af58:	04          	.byte	0x04
    af59:	00          	.byte	0x00
	parent->next = child;
    af5a:	2300      	movs	r3, #0
    af5c:	6033      	str	r3, [r6, #0]
	return list->tail;
    af5e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    af60:	b93b      	cbnz	r3, af72 <onoff_request+0x84>
	list->head = node;
    af62:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    af66:	b9ac      	cbnz	r4, af94 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    af68:	2102      	movs	r1, #2
    af6a:	4628      	mov	r0, r5
    af6c:	f7f6 fb86 	bl	167c <process_event>
    af70:	e7da      	b.n	af28 <onoff_request+0x3a>
	parent->next = child;
    af72:	601e      	str	r6, [r3, #0]
	list->tail = node;
    af74:	606e      	str	r6, [r5, #4]
}
    af76:	e7f6      	b.n	af66 <onoff_request+0x78>
    af78:	f382 8811 	msr	BASEPRI, r2
    af7c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    af80:	f06f 0404 	mvn.w	r4, #4
    af84:	e7d0      	b.n	af28 <onoff_request+0x3a>
    af86:	f382 8811 	msr	BASEPRI, r2
    af8a:	f3bf 8f6f 	isb	sy
    af8e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    af92:	e7c9      	b.n	af28 <onoff_request+0x3a>
    af94:	f382 8811 	msr	BASEPRI, r2
    af98:	f3bf 8f6f 	isb	sy
		if (notify) {
    af9c:	e7c4      	b.n	af28 <onoff_request+0x3a>

0000af9e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    af9e:	b510      	push	{r4, lr}
	__asm__ volatile(
    afa0:	f04f 0320 	mov.w	r3, #32
    afa4:	f3ef 8211 	mrs	r2, BASEPRI
    afa8:	f383 8812 	msr	BASEPRI_MAX, r3
    afac:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    afb0:	8b04      	ldrh	r4, [r0, #24]
    afb2:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    afb6:	2c02      	cmp	r4, #2
    afb8:	d00a      	beq.n	afd0 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    afba:	2c01      	cmp	r4, #1
    afbc:	bf0c      	ite	eq
    afbe:	f06f 0004 	mvneq.w	r0, #4
    afc2:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    afc6:	f382 8811 	msr	BASEPRI, r2
    afca:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    afce:	e008      	b.n	afe2 <onoff_release+0x44>
	mgr->refs -= 1U;
    afd0:	8b43      	ldrh	r3, [r0, #26]
    afd2:	3b01      	subs	r3, #1
    afd4:	b29b      	uxth	r3, r3
    afd6:	8343      	strh	r3, [r0, #26]
	if (stop) {
    afd8:	b923      	cbnz	r3, afe4 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    afda:	4621      	mov	r1, r4
    afdc:	f7f6 fb4e 	bl	167c <process_event>
	int rv = state;
    afe0:	4620      	mov	r0, r4
}
    afe2:	bd10      	pop	{r4, pc}
	int rv = state;
    afe4:	4620      	mov	r0, r4
    afe6:	e7ee      	b.n	afc6 <onoff_release+0x28>

0000afe8 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    afe8:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    afea:	b1b0      	cbz	r0, b01a <onoff_cancel+0x32>
    afec:	b1a9      	cbz	r1, b01a <onoff_cancel+0x32>
	__asm__ volatile(
    afee:	f04f 0220 	mov.w	r2, #32
    aff2:	f3ef 8511 	mrs	r5, BASEPRI
    aff6:	f382 8812 	msr	BASEPRI_MAX, r2
    affa:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    affe:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    b000:	f7ff fef7 	bl	adf2 <sys_slist_find_and_remove>
    b004:	b130      	cbz	r0, b014 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b006:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    b00a:	f385 8811 	msr	BASEPRI, r5
    b00e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b012:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    b014:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b018:	e7f7      	b.n	b00a <onoff_cancel+0x22>
		return -EINVAL;
    b01a:	f06f 0015 	mvn.w	r0, #21
    b01e:	e7f8      	b.n	b012 <onoff_cancel+0x2a>

0000b020 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b020:	4603      	mov	r3, r0
    b022:	b158      	cbz	r0, b03c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b024:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b026:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b02a:	2a01      	cmp	r2, #1
    b02c:	d003      	beq.n	b036 <sys_notify_validate+0x16>
    b02e:	2a03      	cmp	r2, #3
    b030:	d104      	bne.n	b03c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    b032:	6802      	ldr	r2, [r0, #0]
    b034:	b112      	cbz	r2, b03c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    b036:	2000      	movs	r0, #0
    b038:	6098      	str	r0, [r3, #8]
    b03a:	4770      	bx	lr
    b03c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    b040:	4770      	bx	lr

0000b042 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b042:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    b044:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    b046:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    b04a:	2a03      	cmp	r2, #3
    b04c:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    b050:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    b052:	bf14      	ite	ne
    b054:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b056:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b058:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b05a:	4770      	bx	lr

0000b05c <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    b05c:	440a      	add	r2, r1
    b05e:	428a      	cmp	r2, r1
    b060:	d100      	bne.n	b064 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    b062:	4770      	bx	lr
		seed ^= *src++;
    b064:	f811 3b01 	ldrb.w	r3, [r1], #1
    b068:	ba40      	rev16	r0, r0
    b06a:	b280      	uxth	r0, r0
    b06c:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    b06e:	f3c0 1303 	ubfx	r3, r0, #4, #4
    b072:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    b074:	0318      	lsls	r0, r3, #12
    b076:	b280      	uxth	r0, r0
    b078:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    b07a:	0158      	lsls	r0, r3, #5
    b07c:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    b080:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    b082:	e7ec      	b.n	b05e <crc16_itu_t+0x2>

0000b084 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b084:	4694      	mov	ip, r2
    b086:	b5f0      	push	{r4, r5, r6, r7, lr}
    b088:	4604      	mov	r4, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
	if (unlikely(wrap_size >= buf->size)) {
    b08a:	69c3      	ldr	r3, [r0, #28]
	base = buf->put_base;
    b08c:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    b08e:	6845      	ldr	r5, [r0, #4]
    b090:	6940      	ldr	r0, [r0, #20]
    b092:	1baf      	subs	r7, r5, r6
    b094:	1a28      	subs	r0, r5, r0
    b096:	1a1a      	subs	r2, r3, r0
	if (unlikely(wrap_size >= buf->size)) {
    b098:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    b09a:	bf9c      	itt	ls
    b09c:	1aff      	subls	r7, r7, r3
		base += buf->size;
    b09e:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    b0a0:	4562      	cmp	r2, ip
    b0a2:	bf28      	it	cs
    b0a4:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b0a6:	1bd8      	subs	r0, r3, r7
	size = MIN(size, wrap_size);
    b0a8:	4290      	cmp	r0, r2
    b0aa:	bf28      	it	cs
    b0ac:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    b0ae:	6823      	ldr	r3, [r4, #0]
    b0b0:	1bad      	subs	r5, r5, r6
    b0b2:	442b      	add	r3, r5
    b0b4:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    b0b6:	6863      	ldr	r3, [r4, #4]
    b0b8:	4403      	add	r3, r0
    b0ba:	6063      	str	r3, [r4, #4]

	return size;
}
    b0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b0be <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    b0be:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b0c2:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b0c4:	428a      	cmp	r2, r1
    b0c6:	d30c      	bcc.n	b0e2 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    b0c8:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    b0ca:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    b0cc:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    b0ce:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    b0d2:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b0d4:	428a      	cmp	r2, r1
    b0d6:	d901      	bls.n	b0dc <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    b0d8:	2000      	movs	r0, #0
    b0da:	4770      	bx	lr
		buf->put_base += buf->size;
    b0dc:	4413      	add	r3, r2
    b0de:	60c3      	str	r3, [r0, #12]
    b0e0:	e7fa      	b.n	b0d8 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    b0e2:	f06f 0015 	mvn.w	r0, #21
}
    b0e6:	4770      	bx	lr

0000b0e8 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    b0e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b0ec:	4680      	mov	r8, r0
    b0ee:	460e      	mov	r6, r1
    b0f0:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b0f2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    b0f4:	462a      	mov	r2, r5
    b0f6:	a901      	add	r1, sp, #4
    b0f8:	4640      	mov	r0, r8
    b0fa:	f7ff ffc3 	bl	b084 <ring_buf_put_claim>
    b0fe:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    b100:	4602      	mov	r2, r0
    b102:	4631      	mov	r1, r6
    b104:	9801      	ldr	r0, [sp, #4]
    b106:	f000 fac7 	bl	b698 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    b10a:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    b10c:	4427      	add	r7, r4
		data += partial_size;
    b10e:	4426      	add	r6, r4
	} while (size && partial_size);
    b110:	d001      	beq.n	b116 <ring_buf_put+0x2e>
    b112:	2c00      	cmp	r4, #0
    b114:	d1ee      	bne.n	b0f4 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    b116:	4639      	mov	r1, r7
    b118:	4640      	mov	r0, r8
    b11a:	f7ff ffd0 	bl	b0be <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b11e:	4638      	mov	r0, r7
    b120:	b002      	add	sp, #8
    b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b126 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b126:	b5f0      	push	{r4, r5, r6, r7, lr}
    b128:	4604      	mov	r4, r0
    b12a:	4694      	mov	ip, r2
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    b12c:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    b12e:	6905      	ldr	r5, [r0, #16]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    b130:	68a3      	ldr	r3, [r4, #8]
	if (unlikely(wrap_size >= buf->size)) {
    b132:	69c0      	ldr	r0, [r0, #28]
	wrap_size = buf->get_head - base;
    b134:	1baf      	subs	r7, r5, r6
    b136:	1b5a      	subs	r2, r3, r5
	if (unlikely(wrap_size >= buf->size)) {
    b138:	42b8      	cmp	r0, r7
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    b13a:	bf9c      	itt	ls
    b13c:	1836      	addls	r6, r6, r0
		wrap_size -= buf->size;
    b13e:	1a3f      	subls	r7, r7, r0
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    b140:	4562      	cmp	r2, ip
    b142:	bf28      	it	cs
    b144:	4662      	movcs	r2, ip
	wrap_size = buf->size - wrap_size;
    b146:	1bc0      	subs	r0, r0, r7
	size = MIN(size, wrap_size);
    b148:	4290      	cmp	r0, r2
    b14a:	bf28      	it	cs
    b14c:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
    b14e:	6823      	ldr	r3, [r4, #0]
    b150:	1bad      	subs	r5, r5, r6
    b152:	442b      	add	r3, r5
    b154:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    b156:	6923      	ldr	r3, [r4, #16]
    b158:	4403      	add	r3, r0
    b15a:	6123      	str	r3, [r4, #16]

	return size;
}
    b15c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b15e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    b15e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    b162:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b164:	428a      	cmp	r2, r1
    b166:	d30c      	bcc.n	b182 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    b168:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;
    b16a:	e9c0 1104 	strd	r1, r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    b16e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	wrap_size = buf->get_tail - buf->get_base;
    b172:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b174:	428a      	cmp	r2, r1
    b176:	d901      	bls.n	b17c <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    b178:	2000      	movs	r0, #0
    b17a:	4770      	bx	lr
		buf->get_base += buf->size;
    b17c:	4413      	add	r3, r2
    b17e:	6183      	str	r3, [r0, #24]
    b180:	e7fa      	b.n	b178 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    b182:	f06f 0015 	mvn.w	r0, #21
}
    b186:	4770      	bx	lr

0000b188 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    b188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b18c:	4680      	mov	r8, r0
    b18e:	460d      	mov	r5, r1
    b190:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b192:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    b194:	4632      	mov	r2, r6
    b196:	4640      	mov	r0, r8
    b198:	a901      	add	r1, sp, #4
    b19a:	f7ff ffc4 	bl	b126 <ring_buf_get_claim>
    b19e:	4604      	mov	r4, r0
		if (data) {
    b1a0:	b12d      	cbz	r5, b1ae <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    b1a2:	4602      	mov	r2, r0
    b1a4:	9901      	ldr	r1, [sp, #4]
    b1a6:	4628      	mov	r0, r5
    b1a8:	f000 fa76 	bl	b698 <memcpy>
			data += partial_size;
    b1ac:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    b1ae:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    b1b0:	4427      	add	r7, r4
	} while (size && partial_size);
    b1b2:	d001      	beq.n	b1b8 <ring_buf_get+0x30>
    b1b4:	2c00      	cmp	r4, #0
    b1b6:	d1ed      	bne.n	b194 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    b1b8:	4639      	mov	r1, r7
    b1ba:	4640      	mov	r0, r8
    b1bc:	f7ff ffcf 	bl	b15e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b1c0:	4638      	mov	r0, r7
    b1c2:	b002      	add	sp, #8
    b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b1c8 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b1c8:	4604      	mov	r4, r0
    b1ca:	b508      	push	{r3, lr}
	__asm__ volatile(
    b1cc:	f04f 0220 	mov.w	r2, #32
    b1d0:	f3ef 8311 	mrs	r3, BASEPRI
    b1d4:	f382 8812 	msr	BASEPRI_MAX, r2
    b1d8:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    b1dc:	f7fb f886 	bl	62ec <sys_clock_disable>
	}

	sys_arch_reboot(type);
    b1e0:	4620      	mov	r0, r4
    b1e2:	f7f9 f89d 	bl	4320 <sys_arch_reboot>
	arch_cpu_idle();
    b1e6:	f7f8 fdeb 	bl	3dc0 <arch_cpu_idle>
    b1ea:	e7fc      	b.n	b1e6 <sys_reboot+0x1e>

0000b1ec <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    b1ec:	4770      	bx	lr

0000b1ee <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    b1ee:	4770      	bx	lr

0000b1f0 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    b1f0:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    b1f2:	b430      	push	{r4, r5}
    b1f4:	4604      	mov	r4, r0
    b1f6:	4618      	mov	r0, r3
    b1f8:	db0b      	blt.n	b212 <flash_area_read+0x22>
    b1fa:	68a5      	ldr	r5, [r4, #8]
    b1fc:	4408      	add	r0, r1
    b1fe:	42a8      	cmp	r0, r5
    b200:	d807      	bhi.n	b212 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    b202:	68e0      	ldr	r0, [r4, #12]
    b204:	6864      	ldr	r4, [r4, #4]
    b206:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    b208:	6884      	ldr	r4, [r0, #8]
    b20a:	6824      	ldr	r4, [r4, #0]
    b20c:	46a4      	mov	ip, r4
}
    b20e:	bc30      	pop	{r4, r5}
    b210:	4760      	bx	ip
    b212:	f06f 0015 	mvn.w	r0, #21
    b216:	bc30      	pop	{r4, r5}
    b218:	4770      	bx	lr

0000b21a <flash_area_write>:
    b21a:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    b21c:	b430      	push	{r4, r5}
    b21e:	4604      	mov	r4, r0
    b220:	4618      	mov	r0, r3
    b222:	db0b      	blt.n	b23c <flash_area_write+0x22>
    b224:	68a5      	ldr	r5, [r4, #8]
    b226:	4408      	add	r0, r1
    b228:	42a8      	cmp	r0, r5
    b22a:	d807      	bhi.n	b23c <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    b22c:	68e0      	ldr	r0, [r4, #12]
    b22e:	6864      	ldr	r4, [r4, #4]
    b230:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    b232:	6884      	ldr	r4, [r0, #8]
    b234:	6864      	ldr	r4, [r4, #4]
    b236:	46a4      	mov	ip, r4
}
    b238:	bc30      	pop	{r4, r5}
    b23a:	4760      	bx	ip
    b23c:	f06f 0015 	mvn.w	r0, #21
    b240:	bc30      	pop	{r4, r5}
    b242:	4770      	bx	lr

0000b244 <flash_area_erase>:
    b244:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    b246:	4603      	mov	r3, r0
    b248:	b410      	push	{r4}
    b24a:	4610      	mov	r0, r2
    b24c:	db0a      	blt.n	b264 <flash_area_erase+0x20>
    b24e:	689c      	ldr	r4, [r3, #8]
    b250:	4408      	add	r0, r1
    b252:	42a0      	cmp	r0, r4
    b254:	d806      	bhi.n	b264 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    b256:	68d8      	ldr	r0, [r3, #12]
    b258:	685b      	ldr	r3, [r3, #4]
    b25a:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    b25c:	6883      	ldr	r3, [r0, #8]
}
    b25e:	bc10      	pop	{r4}
    b260:	689b      	ldr	r3, [r3, #8]
    b262:	4718      	bx	r3
    b264:	f06f 0015 	mvn.w	r0, #21
    b268:	bc10      	pop	{r4}
    b26a:	4770      	bx	lr

0000b26c <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    b26c:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    b26e:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    b270:	6883      	ldr	r3, [r0, #8]
    b272:	68db      	ldr	r3, [r3, #12]
    b274:	4798      	blx	r3
}
    b276:	6800      	ldr	r0, [r0, #0]
    b278:	bd08      	pop	{r3, pc}

0000b27a <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    b27a:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    b27c:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b27e:	6883      	ldr	r3, [r0, #8]
    b280:	68db      	ldr	r3, [r3, #12]
    b282:	4798      	blx	r3

	return param->erase_value;
}
    b284:	7900      	ldrb	r0, [r0, #4]
    b286:	bd08      	pop	{r3, pc}

0000b288 <get_sectors_cb>:
{
    b288:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    b28a:	684c      	ldr	r4, [r1, #4]
    b28c:	6803      	ldr	r3, [r0, #0]
    b28e:	42a3      	cmp	r3, r4
    b290:	d201      	bcs.n	b296 <get_sectors_cb+0xe>
		*bail_value = true;
    b292:	2001      	movs	r0, #1
}
    b294:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    b296:	688a      	ldr	r2, [r1, #8]
    b298:	4422      	add	r2, r4
    b29a:	4293      	cmp	r3, r2
    b29c:	d301      	bcc.n	b2a2 <get_sectors_cb+0x1a>
		*bail_value = false;
    b29e:	2000      	movs	r0, #0
    b2a0:	e7f8      	b.n	b294 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    b2a2:	694e      	ldr	r6, [r1, #20]
    b2a4:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    b2a8:	42b5      	cmp	r5, r6
    b2aa:	d303      	bcc.n	b2b4 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    b2ac:	f06f 030b 	mvn.w	r3, #11
    b2b0:	618b      	str	r3, [r1, #24]
		return true;
    b2b2:	e7f4      	b.n	b29e <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    b2b4:	1b1b      	subs	r3, r3, r4
    b2b6:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    b2ba:	6843      	ldr	r3, [r0, #4]
    b2bc:	6908      	ldr	r0, [r1, #16]
    b2be:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    b2c2:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    b2c4:	690b      	ldr	r3, [r1, #16]
    b2c6:	3301      	adds	r3, #1
    b2c8:	610b      	str	r3, [r1, #16]
	return true;
    b2ca:	e7e2      	b.n	b292 <get_sectors_cb+0xa>

0000b2cc <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    b2cc:	f010 0f70 	tst.w	r0, #112	; 0x70
    b2d0:	d109      	bne.n	b2e6 <get_ep_bm_from_addr+0x1a>
	ep_idx = ep & (~USB_EP_DIR_IN);
    b2d2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    b2d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    b2da:	f04f 0001 	mov.w	r0, #1
		ep_bm = BIT(ep_idx + 16);
    b2de:	bf18      	it	ne
    b2e0:	3310      	addne	r3, #16
		ep_bm = BIT(ep_idx);
    b2e2:	4098      	lsls	r0, r3
    b2e4:	4770      	bx	lr
	uint32_t ep_bm = 0;
    b2e6:	2000      	movs	r0, #0
}
    b2e8:	4770      	bx	lr

0000b2ea <usb_write>:
{
    b2ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b2ee:	4606      	mov	r6, r0
    b2f0:	460f      	mov	r7, r1
    b2f2:	4690      	mov	r8, r2
    b2f4:	4699      	mov	r9, r3
    b2f6:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b2f8:	464b      	mov	r3, r9
    b2fa:	4642      	mov	r2, r8
    b2fc:	4639      	mov	r1, r7
    b2fe:	4630      	mov	r0, r6
    b300:	f7f9 fd26 	bl	4d50 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    b304:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b308:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    b30a:	d103      	bne.n	b314 <usb_write+0x2a>
	z_impl_k_yield();
    b30c:	f7fe fbbc 	bl	9a88 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    b310:	3d01      	subs	r5, #1
    b312:	d1f1      	bne.n	b2f8 <usb_write+0xe>
}
    b314:	4620      	mov	r0, r4
    b316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b31a <usb_get_dev_data_by_cfg>:
	return list->head;
    b31a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b31c:	b138      	cbz	r0, b32e <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    b31e:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b322:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
    b324:	685b      	ldr	r3, [r3, #4]
    b326:	428b      	cmp	r3, r1
    b328:	d001      	beq.n	b32e <usb_get_dev_data_by_cfg+0x14>
	return node->next;
    b32a:	6840      	ldr	r0, [r0, #4]
    b32c:	e7f6      	b.n	b31c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    b32e:	4770      	bx	lr

0000b330 <usb_get_dev_data_by_iface>:
	return list->head;
    b330:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b332:	b148      	cbz	r0, b348 <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b334:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b338:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
    b33a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    b33c:	685b      	ldr	r3, [r3, #4]
    b33e:	789b      	ldrb	r3, [r3, #2]
    b340:	428b      	cmp	r3, r1
    b342:	d001      	beq.n	b348 <usb_get_dev_data_by_iface+0x18>
	return node->next;
    b344:	6840      	ldr	r0, [r0, #4]
    b346:	e7f4      	b.n	b332 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    b348:	4770      	bx	lr

0000b34a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    b34a:	b530      	push	{r4, r5, lr}
	return list->head;
    b34c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b34e:	b188      	cbz	r0, b374 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b350:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b354:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
    b356:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    b358:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b35a:	7f1d      	ldrb	r5, [r3, #28]
    b35c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    b35e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b360:	b2dc      	uxtb	r4, r3
    b362:	42a5      	cmp	r5, r4
    b364:	d801      	bhi.n	b36a <usb_get_dev_data_by_ep+0x20>
	return node->next;
    b366:	6840      	ldr	r0, [r0, #4]
    b368:	e7f1      	b.n	b34e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    b36a:	3301      	adds	r3, #1
    b36c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    b370:	428c      	cmp	r4, r1
    b372:	d1f5      	bne.n	b360 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    b374:	bd30      	pop	{r4, r5, pc}

0000b376 <usb_transfer_is_busy>:
{
    b376:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    b378:	f7f7 fae2 	bl	2940 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    b37c:	b128      	cbz	r0, b38a <usb_transfer_is_busy+0x14>
    b37e:	6840      	ldr	r0, [r0, #4]
    b380:	f110 0f10 	cmn.w	r0, #16
    b384:	bf14      	ite	ne
    b386:	2000      	movne	r0, #0
    b388:	2001      	moveq	r0, #1
}
    b38a:	bd08      	pop	{r3, pc}

0000b38c <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b38c:	1c4b      	adds	r3, r1, #1
    b38e:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    b390:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    b392:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    b394:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    b398:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    b39a:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    b39e:	4770      	bx	lr

0000b3a0 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    b3a0:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    b3a4:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    b3a8:	4718      	bx	r3

0000b3aa <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    b3aa:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3ac:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    b3ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    b3b2:	4770      	bx	lr

0000b3b4 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3b4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    b3b6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    b3ba:	b108      	cbz	r0, b3c0 <cdc_acm_irq_tx_ready+0xc>
    b3bc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b3c0:	4770      	bx	lr

0000b3c2 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    b3c2:	2200      	movs	r2, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3c4:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    b3c6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    b3ca:	4770      	bx	lr

0000b3cc <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    b3cc:	6903      	ldr	r3, [r0, #16]
}
    b3ce:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    b3d2:	4770      	bx	lr

0000b3d4 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3d4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    b3d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    b3da:	b112      	cbz	r2, b3e2 <cdc_acm_irq_is_pending+0xe>
    b3dc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    b3e0:	b92a      	cbnz	r2, b3ee <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    b3e2:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    b3e6:	b118      	cbz	r0, b3f0 <cdc_acm_irq_is_pending+0x1c>
    b3e8:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    b3ec:	4770      	bx	lr
		return 1;
    b3ee:	2001      	movs	r0, #1
}
    b3f0:	4770      	bx	lr

0000b3f2 <cdc_acm_irq_update>:
}
    b3f2:	2001      	movs	r0, #1
    b3f4:	4770      	bx	lr

0000b3f6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b3f6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    b3f8:	e9c3 1200 	strd	r1, r2, [r3]
}
    b3fc:	4770      	bx	lr

0000b3fe <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    b3fe:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b400:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b402:	d008      	beq.n	b416 <cdc_acm_line_ctrl_get+0x18>
    b404:	2904      	cmp	r1, #4
    b406:	d00b      	beq.n	b420 <cdc_acm_line_ctrl_get+0x22>
    b408:	2901      	cmp	r1, #1
    b40a:	d10e      	bne.n	b42a <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b40c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		return 0;
    b410:	2000      	movs	r0, #0
		*val = (dev_data->line_state &
    b412:	6013      	str	r3, [r2, #0]
    b414:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    b416:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    b41a:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    b41e:	e7f7      	b.n	b410 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    b420:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    b424:	f003 0301 	and.w	r3, r3, #1
		return 0;
    b428:	e7f2      	b.n	b410 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    b42a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b42e:	4770      	bx	lr

0000b430 <cdc_acm_configure>:
}
    b430:	2000      	movs	r0, #0
    b432:	4770      	bx	lr

0000b434 <cdc_acm_config_get>:
{
    b434:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b436:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    b438:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b43c:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    b43e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    b442:	b16a      	cbz	r2, b460 <cdc_acm_config_get+0x2c>
    b444:	2a01      	cmp	r2, #1
    b446:	bf0c      	ite	eq
    b448:	2202      	moveq	r2, #2
    b44a:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    b44c:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    b44e:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    b452:	1e50      	subs	r0, r2, #1
    b454:	2803      	cmp	r0, #3
    b456:	d805      	bhi.n	b464 <cdc_acm_config_get+0x30>
    b458:	e8df f000 	tbb	[pc, r0]
    b45c:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    b460:	2201      	movs	r2, #1
    b462:	e7f3      	b.n	b44c <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    b464:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    b466:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    b468:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    b46c:	2b06      	cmp	r3, #6
    b46e:	d009      	beq.n	b484 <cdc_acm_config_get+0x50>
    b470:	2b07      	cmp	r3, #7
    b472:	d009      	beq.n	b488 <cdc_acm_config_get+0x54>
    b474:	2b05      	cmp	r3, #5
    b476:	bf0c      	ite	eq
    b478:	2300      	moveq	r3, #0
    b47a:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b47c:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    b47e:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    b480:	71c8      	strb	r0, [r1, #7]
}
    b482:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    b484:	2301      	movs	r3, #1
    b486:	e7f9      	b.n	b47c <cdc_acm_config_get+0x48>
    b488:	2302      	movs	r3, #2
    b48a:	e7f7      	b.n	b47c <cdc_acm_config_get+0x48>

0000b48c <cdc_acm_line_ctrl_set>:
{
    b48c:	b508      	push	{r3, lr}
	switch (ctrl) {
    b48e:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b490:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    b492:	d03f      	beq.n	b514 <cdc_acm_line_ctrl_set+0x88>
    b494:	d813      	bhi.n	b4be <cdc_acm_line_ctrl_set+0x32>
    b496:	2910      	cmp	r1, #16
    b498:	d032      	beq.n	b500 <cdc_acm_line_ctrl_set+0x74>
    b49a:	d806      	bhi.n	b4aa <cdc_acm_line_ctrl_set+0x1e>
    b49c:	2901      	cmp	r1, #1
    b49e:	d01e      	beq.n	b4de <cdc_acm_line_ctrl_set+0x52>
    b4a0:	2908      	cmp	r1, #8
    b4a2:	d020      	beq.n	b4e6 <cdc_acm_line_ctrl_set+0x5a>
    b4a4:	f06f 0012 	mvn.w	r0, #18
}
    b4a8:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    b4aa:	2920      	cmp	r1, #32
    b4ac:	d1fa      	bne.n	b4a4 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    b4ae:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b4b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    b4b6:	b352      	cbz	r2, b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    b4b8:	f041 0104 	orr.w	r1, r1, #4
    b4bc:	e027      	b.n	b50e <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    b4be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    b4c2:	d030      	beq.n	b526 <cdc_acm_line_ctrl_set+0x9a>
    b4c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    b4c8:	d036      	beq.n	b538 <cdc_acm_line_ctrl_set+0xac>
    b4ca:	2980      	cmp	r1, #128	; 0x80
    b4cc:	d1ea      	bne.n	b4a4 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    b4ce:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b4d2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    b4d6:	b1d2      	cbz	r2, b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    b4d8:	f041 0110 	orr.w	r1, r1, #16
    b4dc:	e017      	b.n	b50e <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    b4de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    b4e2:	2000      	movs	r0, #0
    b4e4:	e7e0      	b.n	b4a8 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b4e6:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b4ea:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    b4ee:	b10a      	cbz	r2, b4f4 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    b4f0:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    b4f4:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    b4f8:	2101      	movs	r1, #1
    b4fa:	f7f7 fcef 	bl	2edc <cdc_acm_send_notification.isra.0>
		return 0;
    b4fe:	e7f0      	b.n	b4e2 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    b500:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b504:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    b508:	b10a      	cbz	r2, b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    b50a:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b50e:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    b512:	e7f2      	b.n	b4fa <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    b514:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b518:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    b51c:	2a00      	cmp	r2, #0
    b51e:	d0f6      	beq.n	b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    b520:	f041 0108 	orr.w	r1, r1, #8
    b524:	e7f3      	b.n	b50e <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    b526:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b52a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    b52e:	2a00      	cmp	r2, #0
    b530:	d0ed      	beq.n	b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    b532:	f041 0120 	orr.w	r1, r1, #32
    b536:	e7ea      	b.n	b50e <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    b538:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    b53c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    b540:	2a00      	cmp	r2, #0
    b542:	d0e4      	beq.n	b50e <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    b544:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b548:	e7e1      	b.n	b50e <cdc_acm_line_ctrl_set+0x82>

0000b54a <cdc_acm_fifo_read>:
{
    b54a:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    b54c:	6904      	ldr	r4, [r0, #16]
{
    b54e:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b550:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b554:	f7ff fe18 	bl	b188 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b558:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    b55c:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    b55e:	691a      	ldr	r2, [r3, #16]
    b560:	6899      	ldr	r1, [r3, #8]
    b562:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    b564:	bf04      	itt	eq
    b566:	2200      	moveq	r2, #0
    b568:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    b56c:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
    b570:	b19a      	cbz	r2, b59a <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    b572:	685a      	ldr	r2, [r3, #4]
    b574:	6959      	ldr	r1, [r3, #20]
    b576:	69db      	ldr	r3, [r3, #28]
    b578:	1a52      	subs	r2, r2, r1
    b57a:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    b57c:	2b3f      	cmp	r3, #63	; 0x3f
    b57e:	d90c      	bls.n	b59a <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    b580:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    b584:	b133      	cbz	r3, b594 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    b586:	686b      	ldr	r3, [r5, #4]
    b588:	4622      	mov	r2, r4
    b58a:	6a1b      	ldr	r3, [r3, #32]
    b58c:	2100      	movs	r1, #0
    b58e:	7b18      	ldrb	r0, [r3, #12]
    b590:	f7f7 fcc6 	bl	2f20 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    b594:	2300      	movs	r3, #0
    b596:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    b59a:	4630      	mov	r0, r6
    b59c:	bd70      	pop	{r4, r5, r6, pc}

0000b59e <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b59e:	2201      	movs	r2, #1
{
    b5a0:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    b5a2:	f7ff ffd2 	bl	b54a <cdc_acm_fifo_read>
}
    b5a6:	3801      	subs	r0, #1
    b5a8:	bf18      	it	ne
    b5aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b5ae:	bd08      	pop	{r3, pc}

0000b5b0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    b5b0:	2000      	movs	r0, #0
{
    b5b2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b5b4:	f7ff fe08 	bl	b1c8 <sys_reboot>

0000b5b8 <console_write>:
{
    b5b8:	b570      	push	{r4, r5, r6, lr}
    b5ba:	4606      	mov	r6, r0
    b5bc:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    b5be:	2400      	movs	r4, #0
    b5c0:	42ac      	cmp	r4, r5
    b5c2:	db00      	blt.n	b5c6 <console_write+0xe>
}
    b5c4:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    b5c6:	5d30      	ldrb	r0, [r6, r4]
    b5c8:	f7f7 fe8c 	bl	32e4 <console_out>
    b5cc:	3001      	adds	r0, #1
    b5ce:	d0f9      	beq.n	b5c4 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    b5d0:	3401      	adds	r4, #1
    b5d2:	e7f5      	b.n	b5c0 <console_write+0x8>

0000b5d4 <erase_range>:
{
    b5d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (end >= flash_area_get_size(fap)) {
    b5d6:	6883      	ldr	r3, [r0, #8]
{
    b5d8:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    b5da:	429a      	cmp	r2, r3
{
    b5dc:	4606      	mov	r6, r0
    b5de:	4611      	mov	r1, r2
    if (end >= flash_area_get_size(fap)) {
    b5e0:	d304      	bcc.n	b5ec <erase_range+0x18>
        return -EINVAL;
    b5e2:	f06f 0415 	mvn.w	r4, #21
}
    b5e6:	4620      	mov	r0, r4
    b5e8:	b002      	add	sp, #8
    b5ea:	bd70      	pop	{r4, r5, r6, pc}
    if (end < start) {
    b5ec:	42a2      	cmp	r2, r4
    b5ee:	dbfa      	blt.n	b5e6 <erase_range+0x12>
    if (flash_area_get_sector(fap, end, &sect)) {
    b5f0:	466a      	mov	r2, sp
    b5f2:	f7fe ff72 	bl	a4da <flash_area_get_sector>
    b5f6:	2800      	cmp	r0, #0
    b5f8:	d1f3      	bne.n	b5e2 <erase_range+0xe>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    b5fa:	e9dd 3500 	ldrd	r3, r5, [sp]
    b5fe:	441d      	add	r5, r3
    rc = flash_area_erase(fap, start, size);
    b600:	4621      	mov	r1, r4
    b602:	4630      	mov	r0, r6
    b604:	1b2a      	subs	r2, r5, r4
    b606:	f7ff fe1d 	bl	b244 <flash_area_erase>
    if (rc != 0) {
    b60a:	2800      	cmp	r0, #0
    b60c:	d1e9      	bne.n	b5e2 <erase_range+0xe>
    return start + size;
    b60e:	462c      	mov	r4, r5
    b610:	e7e9      	b.n	b5e6 <erase_range+0x12>

0000b612 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b612:	f002 bcc3 	b.w	df9c <z_fatal_error>

0000b616 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    b616:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    b618:	6800      	ldr	r0, [r0, #0]
    b61a:	f002 bcbf 	b.w	df9c <z_fatal_error>

0000b61e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b61e:	2100      	movs	r1, #0
    b620:	2001      	movs	r0, #1
    b622:	f7ff bff6 	b.w	b612 <z_arm_fatal_error>

0000b626 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b626:	b508      	push	{r3, lr}
	handler();
    b628:	f7f8 fc36 	bl	3e98 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b62c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b630:	f7f8 bcec 	b.w	400c <z_arm_exc_exit>

0000b634 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b634:	6e03      	ldr	r3, [r0, #96]	; 0x60
    b636:	f383 880b 	msr	PSPLIM, r3
}
    b63a:	4770      	bx	lr

0000b63c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b63c:	4603      	mov	r3, r0
	size_t n = 0;
    b63e:	2000      	movs	r0, #0

	while (*s != '\0') {
    b640:	5c1a      	ldrb	r2, [r3, r0]
    b642:	b902      	cbnz	r2, b646 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    b644:	4770      	bx	lr
		n++;
    b646:	3001      	adds	r0, #1
    b648:	e7fa      	b.n	b640 <strlen+0x4>

0000b64a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    b64a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    b64c:	b15a      	cbz	r2, b666 <memcmp+0x1c>
    b64e:	3901      	subs	r1, #1
    b650:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    b652:	f810 2b01 	ldrb.w	r2, [r0], #1
    b656:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    b65a:	42a0      	cmp	r0, r4
    b65c:	d001      	beq.n	b662 <memcmp+0x18>
    b65e:	429a      	cmp	r2, r3
    b660:	d0f7      	beq.n	b652 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    b662:	1ad0      	subs	r0, r2, r3
}
    b664:	bd10      	pop	{r4, pc}
		return 0;
    b666:	4610      	mov	r0, r2
    b668:	e7fc      	b.n	b664 <memcmp+0x1a>

0000b66a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    b66a:	1a43      	subs	r3, r0, r1
    b66c:	4293      	cmp	r3, r2
{
    b66e:	b510      	push	{r4, lr}
    b670:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    b674:	d308      	bcc.n	b688 <memmove+0x1e>
	char *dest = d;
    b676:	4602      	mov	r2, r0
    b678:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    b67a:	429a      	cmp	r2, r3
    b67c:	d00b      	beq.n	b696 <memmove+0x2c>
			*dest = *src;
    b67e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b682:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    b686:	e7f8      	b.n	b67a <memmove+0x10>
    b688:	440a      	add	r2, r1
			dest[n] = src[n];
    b68a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    b68e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    b690:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    b694:	d1f9      	bne.n	b68a <memmove+0x20>
		}
	}

	return d;
}
    b696:	bd10      	pop	{r4, pc}

0000b698 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b698:	b510      	push	{r4, lr}
    b69a:	1e43      	subs	r3, r0, #1
    b69c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    b69e:	4291      	cmp	r1, r2
    b6a0:	d100      	bne.n	b6a4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    b6a2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    b6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
    b6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    b6ac:	e7f7      	b.n	b69e <memcpy+0x6>

0000b6ae <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    b6ae:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    b6b0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    b6b2:	4402      	add	r2, r0
    b6b4:	4293      	cmp	r3, r2
    b6b6:	d100      	bne.n	b6ba <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    b6b8:	4770      	bx	lr
		*(d_byte++) = c_byte;
    b6ba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b6be:	e7f9      	b.n	b6b4 <memset+0x6>

0000b6c0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    b6c0:	684b      	ldr	r3, [r1, #4]
    b6c2:	2b01      	cmp	r3, #1
    b6c4:	dd07      	ble.n	b6d6 <sprintf_out+0x16>
		*(p->ptr) = c;
    b6c6:	680b      	ldr	r3, [r1, #0]
    b6c8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    b6ca:	680b      	ldr	r3, [r1, #0]
    b6cc:	3301      	adds	r3, #1
    b6ce:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    b6d0:	684b      	ldr	r3, [r1, #4]
    b6d2:	3b01      	subs	r3, #1
    b6d4:	604b      	str	r3, [r1, #4]
}
    b6d6:	2000      	movs	r0, #0
    b6d8:	4770      	bx	lr

0000b6da <setup>:
	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
	}

	return 0;
}
    b6da:	2000      	movs	r0, #0
    b6dc:	4770      	bx	lr

0000b6de <ep_ctx_reset>:
{
    b6de:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    b6e0:	6903      	ldr	r3, [r0, #16]
{
    b6e2:	4604      	mov	r4, r0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    b6e4:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    b6e8:	2300      	movs	r3, #0
    b6ea:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    b6ec:	7f83      	ldrb	r3, [r0, #30]
    b6ee:	b113      	cbz	r3, b6f6 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    b6f0:	7a40      	ldrb	r0, [r0, #9]
    b6f2:	f002 f97f 	bl	d9f4 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    b6f6:	2301      	movs	r3, #1
    b6f8:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    b6fa:	2300      	movs	r3, #0
    b6fc:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    b6fe:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    b700:	77a3      	strb	r3, [r4, #30]
}
    b702:	bd10      	pop	{r4, pc}

0000b704 <attached_evt_delay_handler>:
	submit_dc_power_event(USBD_ATTACHED);
    b704:	2001      	movs	r0, #1
    b706:	f7f8 befb 	b.w	4500 <submit_dc_power_event>

0000b70a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b70a:	f7fd bdc5 	b.w	9298 <z_impl_k_mutex_lock>

0000b70e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b70e:	f7fd be3d 	b.w	938c <z_impl_k_mutex_unlock>

0000b712 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b712:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b714:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b716:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b71a:	b921      	cbnz	r1, b726 <usb_dc_ep_check_cap+0x14>
    b71c:	3a00      	subs	r2, #0
    b71e:	bf18      	it	ne
    b720:	2201      	movne	r2, #1
    b722:	4250      	negs	r0, r2
    b724:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    b726:	2a08      	cmp	r2, #8
    b728:	d806      	bhi.n	b738 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    b72a:	2901      	cmp	r1, #1
    b72c:	d107      	bne.n	b73e <usb_dc_ep_check_cap+0x2c>
    b72e:	f083 0008 	eor.w	r0, r3, #8
    b732:	f340 00c0 	sbfx	r0, r0, #3, #1
    b736:	4770      	bx	lr
		return -1;
    b738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b73c:	4770      	bx	lr
	return 0;
    b73e:	2000      	movs	r0, #0
}
    b740:	4770      	bx	lr

0000b742 <usb_dc_ep_disable>:
{
    b742:	b538      	push	{r3, r4, r5, lr}
    b744:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    b746:	f7f8 fe73 	bl	4430 <endpoint_ctx>
	if (!ep_ctx) {
    b74a:	4605      	mov	r5, r0
    b74c:	b160      	cbz	r0, b768 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    b74e:	7a03      	ldrb	r3, [r0, #8]
    b750:	b16b      	cbz	r3, b76e <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b752:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    b754:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b756:	f7fd fa7f 	bl	8c58 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    b75a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    b75c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    b75e:	f7ff ffbe 	bl	b6de <ep_ctx_reset>
	return 0;
    b762:	4620      	mov	r0, r4
	ep_ctx->cfg.en = false;
    b764:	722c      	strb	r4, [r5, #8]
}
    b766:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b768:	f06f 0015 	mvn.w	r0, #21
    b76c:	e7fb      	b.n	b766 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    b76e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b772:	e7f8      	b.n	b766 <usb_dc_ep_disable+0x24>

0000b774 <usb_dc_ep_read>:
{
    b774:	b570      	push	{r4, r5, r6, lr}
    b776:	4604      	mov	r4, r0
    b778:	460e      	mov	r6, r1
    b77a:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    b77c:	f7f9 fb64 	bl	4e48 <usb_dc_ep_read_wait>
	if (ret) {
    b780:	b930      	cbnz	r0, b790 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    b782:	b906      	cbnz	r6, b786 <usb_dc_ep_read+0x12>
    b784:	b125      	cbz	r5, b790 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    b786:	4620      	mov	r0, r4
}
    b788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    b78c:	f7f9 bba4 	b.w	4ed8 <usb_dc_ep_read_continue>
}
    b790:	bd70      	pop	{r4, r5, r6, pc}

0000b792 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b792:	220c      	movs	r2, #12
    b794:	6903      	ldr	r3, [r0, #16]
    b796:	b2c9      	uxtb	r1, r1
    b798:	fb01 3302 	mla	r3, r1, r2, r3
    b79c:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    b79e:	f000 0007 	and.w	r0, r0, #7
    b7a2:	4770      	bx	lr

0000b7a4 <set_on_state>:
    b7a4:	f04f 0320 	mov.w	r3, #32
    b7a8:	f3ef 8211 	mrs	r2, BASEPRI
    b7ac:	f383 8812 	msr	BASEPRI_MAX, r3
    b7b0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b7b4:	6803      	ldr	r3, [r0, #0]
    b7b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b7ba:	f043 0302 	orr.w	r3, r3, #2
    b7be:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b7c0:	f382 8811 	msr	BASEPRI, r2
    b7c4:	f3bf 8f6f 	isb	sy
}
    b7c8:	4770      	bx	lr

0000b7ca <stop>:
{
    b7ca:	b570      	push	{r4, r5, r6, lr}
    b7cc:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    b7ce:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    b7d0:	f04f 0420 	mov.w	r4, #32
    b7d4:	f3ef 8511 	mrs	r5, BASEPRI
    b7d8:	f384 8812 	msr	BASEPRI_MAX, r4
    b7dc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b7e0:	260c      	movs	r6, #12
    b7e2:	fb06 3401 	mla	r4, r6, r1, r3
    b7e6:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b7e8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    b7ec:	d008      	beq.n	b800 <stop+0x36>
    b7ee:	42a2      	cmp	r2, r4
    b7f0:	d006      	beq.n	b800 <stop+0x36>
	__asm__ volatile(
    b7f2:	f385 8811 	msr	BASEPRI, r5
    b7f6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    b7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b7fe:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b800:	2201      	movs	r2, #1
    b802:	fb06 3301 	mla	r3, r6, r1, r3
    b806:	679a      	str	r2, [r3, #120]	; 0x78
    b808:	f385 8811 	msr	BASEPRI, r5
    b80c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    b810:	6843      	ldr	r3, [r0, #4]
    b812:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    b816:	685b      	ldr	r3, [r3, #4]
    b818:	4798      	blx	r3
	return 0;
    b81a:	2000      	movs	r0, #0
    b81c:	e7ef      	b.n	b7fe <stop+0x34>

0000b81e <api_stop>:
	return stop(dev, subsys, CTX_API);
    b81e:	2280      	movs	r2, #128	; 0x80
    b820:	f7ff bfd3 	b.w	b7ca <stop>

0000b824 <async_start>:
{
    b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b826:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    b828:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    b82a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b82c:	f04f 0520 	mov.w	r5, #32
    b830:	f3ef 8611 	mrs	r6, BASEPRI
    b834:	f385 8812 	msr	BASEPRI_MAX, r5
    b838:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b83c:	250c      	movs	r5, #12
    b83e:	fb05 4401 	mla	r4, r5, r1, r4
    b842:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b844:	f005 0c07 	and.w	ip, r5, #7
    b848:	f1bc 0f01 	cmp.w	ip, #1
    b84c:	d10c      	bne.n	b868 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b84e:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    b850:	f386 8811 	msr	BASEPRI, r6
    b854:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    b858:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    b85c:	6843      	ldr	r3, [r0, #4]
    b85e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    b862:	4798      	blx	r3
	return 0;
    b864:	2000      	movs	r0, #0
}
    b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b868:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    b86c:	42af      	cmp	r7, r5
    b86e:	f386 8811 	msr	BASEPRI, r6
    b872:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    b876:	bf0c      	ite	eq
    b878:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    b87c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b880:	e7f1      	b.n	b866 <async_start+0x42>

0000b882 <api_start>:
{
    b882:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b884:	2480      	movs	r4, #128	; 0x80
    b886:	9400      	str	r4, [sp, #0]
    b888:	f7ff ffcc 	bl	b824 <async_start>
}
    b88c:	b002      	add	sp, #8
    b88e:	bd10      	pop	{r4, pc}

0000b890 <onoff_started_callback>:
{
    b890:	b410      	push	{r4}
	notify(mgr, 0);
    b892:	241c      	movs	r4, #28
	return &data->mgr[type];
    b894:	6900      	ldr	r0, [r0, #16]
    b896:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b898:	fb03 0004 	mla	r0, r3, r4, r0
    b89c:	2100      	movs	r1, #0
}
    b89e:	bc10      	pop	{r4}
	notify(mgr, 0);
    b8a0:	4710      	bx	r2

0000b8a2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    b8a2:	2003      	movs	r0, #3
    b8a4:	f001 bf2d 	b.w	d702 <nrfx_clock_start>

0000b8a8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    b8a8:	2002      	movs	r0, #2
    b8aa:	f001 bf2a 	b.w	d702 <nrfx_clock_start>

0000b8ae <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b8ae:	2000      	movs	r0, #0
    b8b0:	f001 bf27 	b.w	d702 <nrfx_clock_start>

0000b8b4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    b8b4:	2003      	movs	r0, #3
    b8b6:	f001 bf83 	b.w	d7c0 <nrfx_clock_stop>

0000b8ba <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    b8ba:	2002      	movs	r0, #2
    b8bc:	f001 bf80 	b.w	d7c0 <nrfx_clock_stop>

0000b8c0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b8c0:	2000      	movs	r0, #0
    b8c2:	f001 bf7d 	b.w	d7c0 <nrfx_clock_stop>

0000b8c6 <blocking_start_callback>:
{
    b8c6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b8c8:	f7fd bdd0 	b.w	946c <z_impl_k_sem_give>

0000b8cc <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    b8cc:	b918      	cbnz	r0, b8d6 <qspi_handler+0xa>
    b8ce:	f101 0020 	add.w	r0, r1, #32
    b8d2:	f7fd bdcb 	b.w	946c <z_impl_k_sem_give>
}
    b8d6:	4770      	bx	lr

0000b8d8 <qspi_lock.isra.0>:
static inline void qspi_lock(const struct device *dev)
    b8d8:	b510      	push	{r4, lr}
    b8da:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
    b8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b8e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b8e4:	3010      	adds	r0, #16
    b8e6:	f7fd fde1 	bl	94ac <z_impl_k_sem_take>
	if (!dev_data->xip_enabled) {
    b8ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    b8ee:	b923      	cbnz	r3, b8fa <qspi_lock.isra.0+0x22>
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    b8f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    b8f4:	2201      	movs	r2, #1
    b8f6:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
}
    b8fa:	bd10      	pop	{r4, pc}

0000b8fc <qspi_trans_lock.isra.0>:
    b8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b904:	f7fd bdd2 	b.w	94ac <z_impl_k_sem_take>

0000b908 <qspi_unlock.isra.0>:
	if (!dev_data->xip_enabled) {
    b908:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    b90c:	b923      	cbnz	r3, b918 <qspi_unlock.isra.0+0x10>
    b90e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    b912:	2202      	movs	r2, #2
    b914:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	z_impl_k_sem_give(sem);
    b918:	3010      	adds	r0, #16
    b91a:	f7fd bda7 	b.w	946c <z_impl_k_sem_give>

0000b91e <qspi_send_cmd>:
{
    b91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cmd->tx_buf) {
    b920:	684c      	ldr	r4, [r1, #4]
{
    b922:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
    b924:	b364      	cbz	r4, b980 <qspi_send_cmd+0x62>
		tx_buf = cmd->tx_buf->buf;
    b926:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    b92a:	6888      	ldr	r0, [r1, #8]
    b92c:	b350      	cbz	r0, b984 <qspi_send_cmd+0x66>
		rx_len = cmd->rx_buf->len;
    b92e:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    b932:	b340      	cbz	r0, b986 <qspi_send_cmd+0x68>
    b934:	b33b      	cbz	r3, b986 <qspi_send_cmd+0x68>
		if (rx_len != tx_len) {
    b936:	4298      	cmp	r0, r3
    b938:	d128      	bne.n	b98c <qspi_send_cmd+0x6e>
		xfer_len += tx_len;
    b93a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    b93c:	2b09      	cmp	r3, #9
    b93e:	d825      	bhi.n	b98c <qspi_send_cmd+0x6e>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    b940:	f88d 3001 	strb.w	r3, [sp, #1]
    b944:	f240 1301 	movw	r3, #257	; 0x101
    b948:	f8ad 3002 	strh.w	r3, [sp, #2]
    b94c:	2300      	movs	r3, #0
    b94e:	7809      	ldrb	r1, [r1, #0]
	qspi_lock(dev);
    b950:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    b952:	f88d 3004 	strb.w	r3, [sp, #4]
    b956:	f88d 1000 	strb.w	r1, [sp]
    b95a:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    b95e:	f7ff ffbb 	bl	b8d8 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    b962:	4621      	mov	r1, r4
    b964:	4632      	mov	r2, r6
    b966:	4668      	mov	r0, sp
    b968:	f7fc fa34 	bl	7dd4 <nrfx_qspi_cinstr_xfer>
    b96c:	4604      	mov	r4, r0
	qspi_unlock(dev);
    b96e:	6928      	ldr	r0, [r5, #16]
    b970:	f7ff ffca 	bl	b908 <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
    b974:	4620      	mov	r0, r4
}
    b976:	b002      	add	sp, #8
    b978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    b97c:	f7f9 bca4 	b.w	52c8 <qspi_get_zephyr_ret_code>
	size_t tx_len = 0;
    b980:	4623      	mov	r3, r4
    b982:	e7d2      	b.n	b92a <qspi_send_cmd+0xc>
	void *rx_buf = NULL;
    b984:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    b986:	3301      	adds	r3, #1
    b988:	4403      	add	r3, r0
    b98a:	e7d7      	b.n	b93c <qspi_send_cmd+0x1e>
}
    b98c:	f06f 0015 	mvn.w	r0, #21
    b990:	b002      	add	sp, #8
    b992:	bd70      	pop	{r4, r5, r6, pc}

0000b994 <qspi_nor_write_protection_set>:
{
    b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    b996:	2200      	movs	r2, #0
    b998:	4291      	cmp	r1, r2
    b99a:	bf0c      	ite	eq
    b99c:	2306      	moveq	r3, #6
    b99e:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b9a0:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    b9a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
    b9a6:	9203      	str	r2, [sp, #12]
    b9a8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b9ac:	f7ff ffb7 	bl	b91e <qspi_send_cmd>
		ret = -EIO;
    b9b0:	2800      	cmp	r0, #0
}
    b9b2:	bf18      	it	ne
    b9b4:	f06f 0004 	mvnne.w	r0, #4
    b9b8:	b005      	add	sp, #20
    b9ba:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9be <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    b9be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    b9c0:	23ff      	movs	r3, #255	; 0xff
    b9c2:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    b9c6:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    b9ca:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    b9cc:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    b9ce:	2301      	movs	r3, #1
    b9d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b9d4:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    b9d6:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    b9d8:	f88d 300c 	strb.w	r3, [sp, #12]
    b9dc:	ab01      	add	r3, sp, #4
    b9de:	9204      	str	r2, [sp, #16]
    b9e0:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    b9e2:	f7ff ff9c 	bl	b91e <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    b9e6:	2800      	cmp	r0, #0
    b9e8:	bfa8      	it	ge
    b9ea:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    b9ee:	b007      	add	sp, #28
    b9f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9f4 <is_regular_addr_valid>:
{
    b9f4:	b538      	push	{r3, r4, r5, lr}
    b9f6:	4605      	mov	r5, r0
    b9f8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    b9fa:	f001 ff4e 	bl	d89a <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    b9fe:	2d00      	cmp	r5, #0
    ba00:	db07      	blt.n	ba12 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    ba02:	42a8      	cmp	r0, r5
    ba04:	d905      	bls.n	ba12 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    ba06:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    ba08:	4284      	cmp	r4, r0
    ba0a:	bf8c      	ite	hi
    ba0c:	2000      	movhi	r0, #0
    ba0e:	2001      	movls	r0, #1
}
    ba10:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    ba12:	2000      	movs	r0, #0
    ba14:	e7fc      	b.n	ba10 <is_regular_addr_valid+0x1c>

0000ba16 <flash_nrf_read>:
{
    ba16:	b570      	push	{r4, r5, r6, lr}
    ba18:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    ba1a:	4619      	mov	r1, r3
    ba1c:	4628      	mov	r0, r5
{
    ba1e:	4616      	mov	r6, r2
    ba20:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    ba22:	f7ff ffe7 	bl	b9f4 <is_regular_addr_valid>
    ba26:	b138      	cbz	r0, ba38 <flash_nrf_read+0x22>
	if (!len) {
    ba28:	b124      	cbz	r4, ba34 <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    ba2a:	4622      	mov	r2, r4
    ba2c:	4629      	mov	r1, r5
    ba2e:	4630      	mov	r0, r6
    ba30:	f7ff fe32 	bl	b698 <memcpy>
		return 0;
    ba34:	2000      	movs	r0, #0
}
    ba36:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ba38:	f06f 0015 	mvn.w	r0, #21
    ba3c:	e7fb      	b.n	ba36 <flash_nrf_read+0x20>

0000ba3e <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    ba3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba40:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    ba42:	2300      	movs	r3, #0
{
    ba44:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
    ba46:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    ba48:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    ba4a:	60a3      	str	r3, [r4, #8]
{
    ba4c:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    ba4e:	6913      	ldr	r3, [r2, #16]
    ba50:	4669      	mov	r1, sp
    ba52:	aa01      	add	r2, sp, #4
    ba54:	4798      	blx	r3

	while (layout_size--) {
    ba56:	9b01      	ldr	r3, [sp, #4]
    ba58:	1e5a      	subs	r2, r3, #1
    ba5a:	9201      	str	r2, [sp, #4]
    ba5c:	b91b      	cbnz	r3, ba66 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    ba5e:	f06f 0015 	mvn.w	r0, #21
}
    ba62:	b003      	add	sp, #12
    ba64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    ba66:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    ba68:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    ba6a:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    ba6c:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    ba6e:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    ba70:	b985      	cbnz	r5, ba94 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    ba72:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    ba74:	f8d0 c000 	ldr.w	ip, [r0]
    ba78:	4563      	cmp	r3, ip
    ba7a:	bf28      	it	cs
    ba7c:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
    ba7e:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    ba82:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    ba84:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    ba86:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    ba88:	6802      	ldr	r2, [r0, #0]
    ba8a:	429a      	cmp	r2, r3
    ba8c:	d806      	bhi.n	ba9c <flash_get_page_info+0x5e>
		layout++;
    ba8e:	3008      	adds	r0, #8
    ba90:	9000      	str	r0, [sp, #0]
    ba92:	e7e0      	b.n	ba56 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    ba94:	1a6b      	subs	r3, r5, r1
    ba96:	fbb3 f3f7 	udiv	r3, r3, r7
    ba9a:	e7eb      	b.n	ba74 <flash_get_page_info+0x36>
			return 0;
    ba9c:	2000      	movs	r0, #0
    ba9e:	e7e0      	b.n	ba62 <flash_get_page_info+0x24>

0000baa0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    baa0:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    baa2:	2200      	movs	r2, #0
    baa4:	f7ff bfcb 	b.w	ba3e <flash_get_page_info>

0000baa8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    baa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    baac:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    baae:	6883      	ldr	r3, [r0, #8]
{
    bab0:	b086      	sub	sp, #24
    bab2:	4688      	mov	r8, r1
    bab4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    bab6:	691b      	ldr	r3, [r3, #16]
    bab8:	aa02      	add	r2, sp, #8
    baba:	a901      	add	r1, sp, #4
    babc:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    babe:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    bac0:	4625      	mov	r5, r4
    bac2:	9b02      	ldr	r3, [sp, #8]
    bac4:	42ab      	cmp	r3, r5
    bac6:	d802      	bhi.n	bace <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    bac8:	b006      	add	sp, #24
    baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    bace:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    bad0:	9f01      	ldr	r7, [sp, #4]
    bad2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    bad6:	687b      	ldr	r3, [r7, #4]
    bad8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    bada:	683a      	ldr	r2, [r7, #0]
    badc:	eb0a 0306 	add.w	r3, sl, r6
    bae0:	42b2      	cmp	r2, r6
    bae2:	d802      	bhi.n	baea <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    bae4:	469a      	mov	sl, r3
    bae6:	3501      	adds	r5, #1
    bae8:	e7eb      	b.n	bac2 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    baea:	4649      	mov	r1, r9
			page_info.start_offset = off;
    baec:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    baee:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    baf0:	a803      	add	r0, sp, #12
    baf2:	47c0      	blx	r8
    baf4:	2800      	cmp	r0, #0
    baf6:	d0e7      	beq.n	bac8 <flash_page_foreach+0x20>
			off += page_info.size;
    baf8:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    bafa:	3601      	adds	r6, #1
			off += page_info.size;
    bafc:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    bafe:	e7ec      	b.n	bada <flash_page_foreach+0x32>

0000bb00 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb00:	6843      	ldr	r3, [r0, #4]
}
    bb02:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb04:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    bb06:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    bb08:	600b      	str	r3, [r1, #0]
}
    bb0a:	4770      	bx	lr

0000bb0c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb0c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    bb0e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb12:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    bb14:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    bb18:	6098      	str	r0, [r3, #8]
}
    bb1a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bb1c:	60d9      	str	r1, [r3, #12]
    bb1e:	4770      	bx	lr

0000bb20 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb20:	6843      	ldr	r3, [r0, #4]
}
    bb22:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb24:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    bb26:	6099      	str	r1, [r3, #8]
}
    bb28:	4770      	bx	lr

0000bb2a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb2a:	6843      	ldr	r3, [r0, #4]
}
    bb2c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb2e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    bb30:	60d9      	str	r1, [r3, #12]
}
    bb32:	4770      	bx	lr

0000bb34 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bb34:	6843      	ldr	r3, [r0, #4]
    bb36:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bb38:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    bb3a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    bb3e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    bb40:	6090      	str	r0, [r2, #8]
}
    bb42:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bb44:	60d3      	str	r3, [r2, #12]
    bb46:	4770      	bx	lr

0000bb48 <gpio_nrfx_manage_callback>:
{
    bb48:	b510      	push	{r4, lr}
	return port->data;
    bb4a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    bb4c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    bb4e:	b1f8      	cbz	r0, bb90 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb50:	4288      	cmp	r0, r1
    bb52:	d119      	bne.n	bb88 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    bb54:	689c      	ldr	r4, [r3, #8]
	return node->next;
    bb56:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    bb58:	42a1      	cmp	r1, r4
	list->head = node;
    bb5a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    bb5c:	d100      	bne.n	bb60 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bb5e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    bb60:	2000      	movs	r0, #0
    bb62:	6008      	str	r0, [r1, #0]
	if (set) {
    bb64:	b12a      	cbz	r2, bb72 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    bb66:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    bb68:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    bb6a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    bb6c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    bb6e:	b902      	cbnz	r2, bb72 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    bb70:	6099      	str	r1, [r3, #8]
	return 0;
    bb72:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    bb74:	e010      	b.n	bb98 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb76:	4281      	cmp	r1, r0
    bb78:	d106      	bne.n	bb88 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    bb7a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    bb7c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    bb7e:	6898      	ldr	r0, [r3, #8]
    bb80:	4281      	cmp	r1, r0
    bb82:	d1ed      	bne.n	bb60 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bb84:	609c      	str	r4, [r3, #8]
}
    bb86:	e7eb      	b.n	bb60 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    bb88:	4604      	mov	r4, r0
    bb8a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bb8c:	2800      	cmp	r0, #0
    bb8e:	d1f2      	bne.n	bb76 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    bb90:	2a00      	cmp	r2, #0
    bb92:	d1e8      	bne.n	bb66 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    bb94:	f06f 0015 	mvn.w	r0, #21
}
    bb98:	bd10      	pop	{r4, pc}

0000bb9a <z_impl_hwinfo_get_device_id>:
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    bb9a:	2908      	cmp	r1, #8
{
    bb9c:	b513      	push	{r0, r1, r4, lr}
	if (length > sizeof(dev_id.id)) {
    bb9e:	bf28      	it	cs
    bba0:	2108      	movcs	r1, #8
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    bba2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    bba6:	460c      	mov	r4, r1
    bba8:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
    bbac:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    bbb0:	ba1b      	rev	r3, r3
    bbb2:	ba12      	rev	r2, r2
    bbb4:	9200      	str	r2, [sp, #0]
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    bbb6:	460a      	mov	r2, r1
    bbb8:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    bbba:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    bbbc:	f7ff fd6c 	bl	b698 <memcpy>

	return length;
}
    bbc0:	4620      	mov	r0, r4
    bbc2:	b002      	add	sp, #8
    bbc4:	bd10      	pop	{r4, pc}

0000bbc6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bbc6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    bbc8:	6843      	ldr	r3, [r0, #4]
    bbca:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    bbcc:	7a05      	ldrb	r5, [r0, #8]
    bbce:	6844      	ldr	r4, [r0, #4]
    bbd0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    bbd4:	42a3      	cmp	r3, r4
    bbd6:	d302      	bcc.n	bbde <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    bbd8:	f06f 0001 	mvn.w	r0, #1
}
    bbdc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    bbde:	795c      	ldrb	r4, [r3, #5]
    bbe0:	428c      	cmp	r4, r1
    bbe2:	d001      	beq.n	bbe8 <pinctrl_lookup_state+0x22>
		(*state)++;
    bbe4:	3308      	adds	r3, #8
    bbe6:	e7f0      	b.n	bbca <pinctrl_lookup_state+0x4>
			return 0;
    bbe8:	2000      	movs	r0, #0
    bbea:	e7f7      	b.n	bbdc <pinctrl_lookup_state+0x16>

0000bbec <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
    bbec:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
    bbee:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
    bbf0:	4620      	mov	r0, r4
    bbf2:	f002 fa5e 	bl	e0b2 <z_impl_k_mutex_init>

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
    bbf6:	2300      	movs	r3, #0
    bbf8:	6163      	str	r3, [r4, #20]
}
    bbfa:	bd10      	pop	{r4, pc}

0000bbfc <regulator_is_enabled>:

	return ret;
}

bool regulator_is_enabled(const struct device *dev)
{
    bbfc:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	bool enabled;

	if ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
    bbfe:	6843      	ldr	r3, [r0, #4]
    bc00:	7e9b      	ldrb	r3, [r3, #26]
    bc02:	07db      	lsls	r3, r3, #31
    bc04:	d410      	bmi.n	bc28 <regulator_is_enabled+0x2c>
	struct regulator_common_data *data = dev->data;
    bc06:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
    bc08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc10:	4628      	mov	r0, r5
    bc12:	f7fd fb41 	bl	9298 <z_impl_k_mutex_lock>
		enabled = true;
	} else {
		(void)k_mutex_lock(&data->lock, K_FOREVER);
		enabled = data->refcnt != 0;
    bc16:	696c      	ldr	r4, [r5, #20]
    bc18:	3c00      	subs	r4, #0
    bc1a:	bf18      	it	ne
    bc1c:	2401      	movne	r4, #1
	return z_impl_k_mutex_unlock(mutex);
    bc1e:	4628      	mov	r0, r5
    bc20:	f7fd fbb4 	bl	938c <z_impl_k_mutex_unlock>
		k_mutex_unlock(&data->lock);
	}

	return enabled;
}
    bc24:	4620      	mov	r0, r4
    bc26:	bd38      	pop	{r3, r4, r5, pc}
		enabled = true;
    bc28:	2401      	movs	r4, #1
    bc2a:	e7fb      	b.n	bc24 <regulator_is_enabled+0x28>

0000bc2c <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
    bc2c:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
    bc2e:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
    bc32:	691b      	ldr	r3, [r3, #16]
    bc34:	b13b      	cbz	r3, bc46 <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
    bc36:	6877      	ldr	r7, [r6, #4]
    bc38:	428f      	cmp	r7, r1
    bc3a:	db08      	blt.n	bc4e <regulator_set_voltage+0x22>
    bc3c:	6835      	ldr	r5, [r6, #0]
    bc3e:	4295      	cmp	r5, r2
    bc40:	dc05      	bgt.n	bc4e <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
    bc42:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
    bc44:	4718      	bx	r3
		return -ENOSYS;
    bc46:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
    bc4a:	bcf0      	pop	{r4, r5, r6, r7}
    bc4c:	4770      	bx	lr
		return -EINVAL;
    bc4e:	f06f 0015 	mvn.w	r0, #21
    bc52:	e7fa      	b.n	bc4a <regulator_set_voltage+0x1e>

0000bc54 <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
    bc54:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
    bc56:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
    bc5a:	6a15      	ldr	r5, [r2, #32]
{
    bc5c:	4603      	mov	r3, r0
    bc5e:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
    bc60:	b19d      	cbz	r5, bc8a <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
    bc62:	7e32      	ldrb	r2, [r6, #24]
    bc64:	b912      	cbnz	r2, bc6c <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
    bc66:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
    bc68:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
    bc6a:	4718      	bx	r3
    bc6c:	6970      	ldr	r0, [r6, #20]
    bc6e:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
    bc70:	f810 1b01 	ldrb.w	r1, [r0], #1
    bc74:	42a1      	cmp	r1, r4
    bc76:	d102      	bne.n	bc7e <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
    bc78:	4621      	mov	r1, r4
    bc7a:	4618      	mov	r0, r3
    bc7c:	e7f3      	b.n	bc66 <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
    bc7e:	4290      	cmp	r0, r2
    bc80:	d1f6      	bne.n	bc70 <regulator_set_mode+0x1c>
	return -ENOTSUP;
    bc82:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    bc86:	bc70      	pop	{r4, r5, r6}
    bc88:	4770      	bx	lr
		return -ENOSYS;
    bc8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bc8e:	e7fa      	b.n	bc86 <regulator_set_mode+0x32>

0000bc90 <regulator_common_init>:
{
    bc90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bc94:	460e      	mov	r6, r1
	const struct regulator_common_config *config = dev->config;
    bc96:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    bc9a:	f898 1019 	ldrb.w	r1, [r8, #25]
{
    bc9e:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    bca0:	29ff      	cmp	r1, #255	; 0xff
	struct regulator_common_data *data = dev->data;
    bca2:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
    bca4:	d123      	bne.n	bcee <regulator_common_init+0x5e>
	if (config->init_uv > INT32_MIN) {
    bca6:	f8d8 2008 	ldr.w	r2, [r8, #8]
    bcaa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bcae:	d005      	beq.n	bcbc <regulator_common_init+0x2c>
		ret = regulator_set_voltage(dev, config->init_uv, config->init_uv);
    bcb0:	4611      	mov	r1, r2
    bcb2:	4620      	mov	r0, r4
    bcb4:	f7ff ffba 	bl	bc2c <regulator_set_voltage>
		if (ret < 0) {
    bcb8:	2800      	cmp	r0, #0
    bcba:	db1c      	blt.n	bcf6 <regulator_common_init+0x66>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
    bcbc:	f8d8 3000 	ldr.w	r3, [r8]
    bcc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    bcc4:	d01a      	beq.n	bcfc <regulator_common_init+0x6c>
					int32_t *volt_uv)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_voltage == NULL) {
    bcc6:	68a3      	ldr	r3, [r4, #8]
    bcc8:	695b      	ldr	r3, [r3, #20]
    bcca:	b38b      	cbz	r3, bd30 <regulator_common_init+0xa0>
		return -ENOSYS;
	}

	return api->get_voltage(dev, volt_uv);
    bccc:	4620      	mov	r0, r4
    bcce:	a901      	add	r1, sp, #4
    bcd0:	4798      	blx	r3
		if (ret < 0) {
    bcd2:	2800      	cmp	r0, #0
    bcd4:	db0f      	blt.n	bcf6 <regulator_common_init+0x66>
		if (current_uv < config->min_uv) {
    bcd6:	f8d8 2000 	ldr.w	r2, [r8]
    bcda:	9b01      	ldr	r3, [sp, #4]
    bcdc:	429a      	cmp	r2, r3
    bcde:	dd22      	ble.n	bd26 <regulator_common_init+0x96>
			ret = regulator_set_voltage(dev, config->max_uv, config->max_uv);
    bce0:	4611      	mov	r1, r2
    bce2:	4620      	mov	r0, r4
    bce4:	f7ff ffa2 	bl	bc2c <regulator_set_voltage>
			if (ret < 0) {
    bce8:	2800      	cmp	r0, #0
    bcea:	da0d      	bge.n	bd08 <regulator_common_init+0x78>
    bcec:	e003      	b.n	bcf6 <regulator_common_init+0x66>
		ret = regulator_set_mode(dev, config->initial_mode);
    bcee:	f7ff ffb1 	bl	bc54 <regulator_set_mode>
		if (ret < 0) {
    bcf2:	2800      	cmp	r0, #0
    bcf4:	dad7      	bge.n	bca6 <regulator_common_init+0x16>
}
    bcf6:	b002      	add	sp, #8
    bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
    bcfc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bd00:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bd04:	429a      	cmp	r2, r3
    bd06:	d1de      	bne.n	bcc6 <regulator_common_init+0x36>
	if (is_enabled) {
    bd08:	b946      	cbnz	r6, bd1c <regulator_common_init+0x8c>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
    bd0a:	f898 301a 	ldrb.w	r3, [r8, #26]
    bd0e:	079b      	lsls	r3, r3, #30
    bd10:	d007      	beq.n	bd22 <regulator_common_init+0x92>
		ret = api->enable(dev);
    bd12:	4620      	mov	r0, r4
    bd14:	683b      	ldr	r3, [r7, #0]
    bd16:	4798      	blx	r3
		if (ret < 0) {
    bd18:	2800      	cmp	r0, #0
    bd1a:	dbec      	blt.n	bcf6 <regulator_common_init+0x66>
		data->refcnt++;
    bd1c:	696b      	ldr	r3, [r5, #20]
    bd1e:	3301      	adds	r3, #1
    bd20:	616b      	str	r3, [r5, #20]
	return 0;
    bd22:	2000      	movs	r0, #0
    bd24:	e7e7      	b.n	bcf6 <regulator_common_init+0x66>
		} else if (current_uv > config->max_uv) {
    bd26:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bd2a:	4293      	cmp	r3, r2
    bd2c:	ddec      	ble.n	bd08 <regulator_common_init+0x78>
    bd2e:	e7d7      	b.n	bce0 <regulator_common_init+0x50>
		return -ENOSYS;
    bd30:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bd34:	e7df      	b.n	bcf6 <regulator_common_init+0x66>

0000bd36 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bd36:	2301      	movs	r3, #1
    bd38:	fa03 f101 	lsl.w	r1, r3, r1
    bd3c:	6903      	ldr	r3, [r0, #16]
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    bd42:	bf18      	it	ne
    bd44:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    bd48:	b112      	cbz	r2, bd50 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
    bd4a:	6883      	ldr	r3, [r0, #8]
    bd4c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    bd4e:	4718      	bx	r3
    bd50:	6883      	ldr	r3, [r0, #8]
    bd52:	691b      	ldr	r3, [r3, #16]
    bd54:	e7fb      	b.n	bd4e <gpio_pin_set+0x18>

0000bd56 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
    bd56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_fixed_config *cfg = dev->config;
    bd58:	6844      	ldr	r4, [r0, #4]
{
    bd5a:	4605      	mov	r5, r0
	int ret;

	regulator_common_data_init(dev);
    bd5c:	f7ff ff46 	bl	bbec <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
    bd60:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bd62:	f002 f904 	bl	df6e <z_device_is_ready>
    bd66:	b370      	cbz	r0, bdc6 <regulator_fixed_init+0x70>
	return gpio_pin_configure(spec->port,
    bd68:	6a60      	ldr	r0, [r4, #36]	; 0x24
				  spec->pin,
    bd6a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
				  spec->dt_flags | extra_flags);
    bd6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd70:	2701      	movs	r7, #1
	struct gpio_driver_data *data =
    bd72:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    bd76:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd78:	f8dc 6000 	ldr.w	r6, [ip]
	return gpio_pin_configure(spec->port,
    bd7c:	bf54      	ite	pl
    bd7e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    bd82:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    bd86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd8a:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    bd8c:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    bd8e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd92:	bf4c      	ite	mi
    bd94:	433e      	orrmi	r6, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bd96:	43be      	bicpl	r6, r7
    bd98:	f8cc 6000 	str.w	r6, [ip]
	return api->pin_configure(port, pin, flags);
    bd9c:	f8de 3000 	ldr.w	r3, [lr]
    bda0:	4798      	blx	r3
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
	if (ret < 0) {
    bda2:	2800      	cmp	r0, #0
    bda4:	db0a      	blt.n	bdbc <regulator_fixed_init+0x66>
		return ret;
	}

	ret = regulator_common_init(dev, false);
    bda6:	2100      	movs	r1, #0
    bda8:	4628      	mov	r0, r5
    bdaa:	f7ff ff71 	bl	bc90 <regulator_common_init>
	if (ret < 0) {
    bdae:	2800      	cmp	r0, #0
    bdb0:	db04      	blt.n	bdbc <regulator_fixed_init+0x66>
		return ret;
	}

	if (regulator_is_enabled(dev)) {
    bdb2:	4628      	mov	r0, r5
    bdb4:	f7ff ff22 	bl	bbfc <regulator_is_enabled>
    bdb8:	b908      	cbnz	r0, bdbe <regulator_fixed_init+0x68>
		k_busy_wait(cfg->startup_delay_us);
	}

	return 0;
    bdba:	2000      	movs	r0, #0
}
    bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_busy_wait(cfg->startup_delay_us);
    bdbe:	69e0      	ldr	r0, [r4, #28]
	z_impl_k_busy_wait(usec_to_wait);
    bdc0:	f002 fba0 	bl	e504 <z_impl_k_busy_wait>
}
    bdc4:	e7f9      	b.n	bdba <regulator_fixed_init+0x64>
		return -ENODEV;
    bdc6:	f06f 0012 	mvn.w	r0, #18
    bdca:	e7f7      	b.n	bdbc <regulator_fixed_init+0x66>

0000bdcc <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
    bdcc:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
    bdce:	2200      	movs	r2, #0
    bdd0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
    bdd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    bdd6:	f7ff bfae 	b.w	bd36 <gpio_pin_set>

0000bdda <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bdda:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    bddc:	f100 0350 	add.w	r3, r0, #80	; 0x50
    bde0:	009b      	lsls	r3, r3, #2
    bde2:	b29b      	uxth	r3, r3
    bde4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    bde8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bdec:	601a      	str	r2, [r3, #0]
    bdee:	681b      	ldr	r3, [r3, #0]
}
    bdf0:	4770      	bx	lr

0000bdf2 <sys_clock_cycle_get_32>:
{
    bdf2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    bdf4:	f7fa f8e4 	bl	5fc0 <z_nrf_rtc_timer_read>
}
    bdf8:	bd08      	pop	{r3, pc}

0000bdfa <boot_perform_update_hook>:
}
    bdfa:	2001      	movs	r0, #1
    bdfc:	4770      	bx	lr

0000bdfe <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    bdfe:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    be00:	bf01      	itttt	eq
    be02:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    be04:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    be06:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    be08:	700b      	strbeq	r3, [r1, #0]
		return 0;
    be0a:	bf05      	ittet	eq
    be0c:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    be0e:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    be10:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    be12:	70cb      	strbeq	r3, [r1, #3]
}
    be14:	4770      	bx	lr

0000be16 <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    be16:	2801      	cmp	r0, #1
    be18:	d101      	bne.n	be1e <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    be1a:	f7fa bb55 	b.w	64c8 <network_core_update>
	}

	return 0;
}
    be1e:	2000      	movs	r0, #0
    be20:	4770      	bx	lr

0000be22 <boot_serial_uploaded_hook>:

int boot_serial_uploaded_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    be22:	2803      	cmp	r0, #3
		return network_core_update(false);
    be24:	f04f 0000 	mov.w	r0, #0
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    be28:	d101      	bne.n	be2e <boot_serial_uploaded_hook+0xc>
		return network_core_update(false);
    be2a:	f7fa bb4d 	b.w	64c8 <network_core_update>
	}

	return 0;
}
    be2e:	4770      	bx	lr

0000be30 <boot_reset_request_hook>:

int boot_reset_request_hook(bool force)
{
    be30:	b508      	push	{r3, lr}
	ARG_UNUSED(force);

	if (pcd_fw_copy_status_get() == PCD_STATUS_COPY) {
    be32:	f7fa fa91 	bl	6358 <pcd_fw_copy_status_get>
		return BOOT_RESET_REQUEST_HOOK_BUSY;
	}
	return 0;
}
    be36:	fab0 f080 	clz	r0, r0
    be3a:	0940      	lsrs	r0, r0, #5
    be3c:	bd08      	pop	{r3, pc}

0000be3e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    be3e:	f7fe b993 	b.w	a168 <nrf_cc3xx_platform_init_no_rng>

0000be42 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    be42:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    be44:	f7f7 f900 	bl	3048 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    be48:	f7f7 f9e6 	bl	3218 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    be4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    be50:	f7fe b98a 	b.w	a168 <nrf_cc3xx_platform_init_no_rng>

0000be54 <boot_swap_info_off>:
    be54:	6880      	ldr	r0, [r0, #8]
    be56:	3818      	subs	r0, #24
    be58:	f020 0007 	bic.w	r0, r0, #7
}
    be5c:	3810      	subs	r0, #16
    be5e:	4770      	bx	lr

0000be60 <boot_magic_compatible_check>:
    switch (tbl_val) {
    be60:	2804      	cmp	r0, #4
    be62:	d009      	beq.n	be78 <boot_magic_compatible_check+0x18>
    be64:	2805      	cmp	r0, #5
    be66:	d103      	bne.n	be70 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    be68:	1e48      	subs	r0, r1, #1
    be6a:	bf18      	it	ne
    be6c:	2001      	movne	r0, #1
    be6e:	4770      	bx	lr
        return tbl_val == val;
    be70:	1a43      	subs	r3, r0, r1
    be72:	4258      	negs	r0, r3
    be74:	4158      	adcs	r0, r3
    be76:	4770      	bx	lr
    switch (tbl_val) {
    be78:	2001      	movs	r0, #1
}
    be7a:	4770      	bx	lr

0000be7c <bootutil_buffer_is_erased>:
{
    be7c:	b538      	push	{r3, r4, r5, lr}
    be7e:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    be80:	460c      	mov	r4, r1
    be82:	b161      	cbz	r1, be9e <bootutil_buffer_is_erased+0x22>
    be84:	b15a      	cbz	r2, be9e <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    be86:	f7ff f9f8 	bl	b27a <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    be8a:	4621      	mov	r1, r4
    be8c:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    be8e:	f811 3b01 	ldrb.w	r3, [r1], #1
    be92:	4283      	cmp	r3, r0
    be94:	d103      	bne.n	be9e <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    be96:	42a9      	cmp	r1, r5
    be98:	d1f9      	bne.n	be8e <bootutil_buffer_is_erased+0x12>
    return true;
    be9a:	2001      	movs	r0, #1
}
    be9c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    be9e:	2000      	movs	r0, #0
    bea0:	e7fc      	b.n	be9c <bootutil_buffer_is_erased+0x20>

0000bea2 <boot_read_flag>:
{
    bea2:	b538      	push	{r3, r4, r5, lr}
    bea4:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    bea6:	2301      	movs	r3, #1
{
    bea8:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    beaa:	4622      	mov	r2, r4
{
    beac:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    beae:	f7ff f99f 	bl	b1f0 <flash_area_read>
    if (rc < 0) {
    beb2:	2800      	cmp	r0, #0
    beb4:	db0f      	blt.n	bed6 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    beb6:	2201      	movs	r2, #1
    beb8:	4621      	mov	r1, r4
    beba:	4628      	mov	r0, r5
    bebc:	f7ff ffde 	bl	be7c <bootutil_buffer_is_erased>
    bec0:	b938      	cbnz	r0, bed2 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    bec2:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    bec4:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    bec6:	bf14      	ite	ne
    bec8:	2302      	movne	r3, #2
    beca:	2301      	moveq	r3, #1
    becc:	2000      	movs	r0, #0
    bece:	7023      	strb	r3, [r4, #0]
}
    bed0:	bd38      	pop	{r3, r4, r5, pc}
    bed2:	2303      	movs	r3, #3
    bed4:	e7fa      	b.n	becc <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    bed6:	2001      	movs	r0, #1
    bed8:	e7fa      	b.n	bed0 <boot_read_flag+0x2e>

0000beda <boot_read_image_ok>:
    beda:	6882      	ldr	r2, [r0, #8]
    bedc:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    bede:	f022 0207 	bic.w	r2, r2, #7
    bee2:	f7ff bfde 	b.w	bea2 <boot_read_flag>

0000bee6 <boot_read_swap_state_by_id>:
{
    bee6:	b513      	push	{r0, r1, r4, lr}
    bee8:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    beea:	b2c0      	uxtb	r0, r0
    beec:	a901      	add	r1, sp, #4
    beee:	f7f5 ff73 	bl	1dd8 <flash_area_open>
    if (rc != 0) {
    bef2:	b950      	cbnz	r0, bf0a <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    bef4:	4621      	mov	r1, r4
    bef6:	9801      	ldr	r0, [sp, #4]
    bef8:	f7fa fb2e 	bl	6558 <boot_read_swap_state>
    befc:	4604      	mov	r4, r0
    flash_area_close(fap);
    befe:	9801      	ldr	r0, [sp, #4]
    bf00:	f7ff f975 	bl	b1ee <flash_area_close>
}
    bf04:	4620      	mov	r0, r4
    bf06:	b002      	add	sp, #8
    bf08:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    bf0a:	2401      	movs	r4, #1
    bf0c:	e7fa      	b.n	bf04 <boot_read_swap_state_by_id+0x1e>

0000bf0e <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    bf0e:	2000      	movs	r0, #0
    bf10:	4770      	bx	lr

0000bf12 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    bf12:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    bf14:	6803      	ldr	r3, [r0, #0]
    bf16:	1acd      	subs	r5, r1, r3
    bf18:	2d00      	cmp	r5, #0
    bf1a:	dc02      	bgt.n	bf22 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bf1c:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    bf20:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    bf22:	f993 6000 	ldrsb.w	r6, [r3]
    bf26:	781c      	ldrb	r4, [r3, #0]
    bf28:	2e00      	cmp	r6, #0
    bf2a:	db0a      	blt.n	bf42 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    bf2c:	1c5c      	adds	r4, r3, #1
    bf2e:	6004      	str	r4, [r0, #0]
    bf30:	781b      	ldrb	r3, [r3, #0]
    bf32:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    bf34:	6803      	ldr	r3, [r0, #0]
    bf36:	1ac9      	subs	r1, r1, r3
    bf38:	6813      	ldr	r3, [r2, #0]
    bf3a:	428b      	cmp	r3, r1
    bf3c:	d8ee      	bhi.n	bf1c <mbedtls_asn1_get_len+0xa>
    return( 0 );
    bf3e:	2000      	movs	r0, #0
    bf40:	e7ee      	b.n	bf20 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    bf42:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    bf46:	3c01      	subs	r4, #1
    bf48:	2c03      	cmp	r4, #3
    bf4a:	d82b      	bhi.n	bfa4 <mbedtls_asn1_get_len+0x92>
    bf4c:	e8df f004 	tbb	[pc, r4]
    bf50:	21140a02 	.word	0x21140a02
            if( ( end - *p ) < 2 )
    bf54:	2d01      	cmp	r5, #1
    bf56:	d0e1      	beq.n	bf1c <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    bf58:	785b      	ldrb	r3, [r3, #1]
    bf5a:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    bf5c:	6803      	ldr	r3, [r0, #0]
    bf5e:	3302      	adds	r3, #2
            (*p) += 5;
    bf60:	6003      	str	r3, [r0, #0]
            break;
    bf62:	e7e7      	b.n	bf34 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    bf64:	2d02      	cmp	r5, #2
    bf66:	ddd9      	ble.n	bf1c <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    bf68:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    bf6c:	ba5b      	rev16	r3, r3
    bf6e:	b29b      	uxth	r3, r3
    bf70:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    bf72:	6803      	ldr	r3, [r0, #0]
    bf74:	3303      	adds	r3, #3
    bf76:	e7f3      	b.n	bf60 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    bf78:	2d03      	cmp	r5, #3
    bf7a:	ddcf      	ble.n	bf1c <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    bf7c:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    bf7e:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    bf80:	0224      	lsls	r4, r4, #8
    bf82:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    bf84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    bf88:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    bf8a:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    bf8c:	6803      	ldr	r3, [r0, #0]
    bf8e:	3304      	adds	r3, #4
    bf90:	e7e6      	b.n	bf60 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    bf92:	2d04      	cmp	r5, #4
    bf94:	ddc2      	ble.n	bf1c <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    bf96:	f8d3 3001 	ldr.w	r3, [r3, #1]
    bf9a:	ba1b      	rev	r3, r3
    bf9c:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    bf9e:	6803      	ldr	r3, [r0, #0]
    bfa0:	3305      	adds	r3, #5
    bfa2:	e7dd      	b.n	bf60 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    bfa4:	f06f 0063 	mvn.w	r0, #99	; 0x63
    bfa8:	e7ba      	b.n	bf20 <mbedtls_asn1_get_len+0xe>

0000bfaa <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    bfaa:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    bfac:	6804      	ldr	r4, [r0, #0]
    bfae:	1b0e      	subs	r6, r1, r4
    bfb0:	2e00      	cmp	r6, #0
    bfb2:	dd07      	ble.n	bfc4 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    bfb4:	7826      	ldrb	r6, [r4, #0]
    bfb6:	429e      	cmp	r6, r3
    bfb8:	d108      	bne.n	bfcc <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    bfba:	3401      	adds	r4, #1
    bfbc:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    bfbe:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    bfc0:	f7ff bfa7 	b.w	bf12 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bfc4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    bfc8:	bc70      	pop	{r4, r5, r6}
    bfca:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    bfcc:	f06f 0061 	mvn.w	r0, #97	; 0x61
    bfd0:	e7fa      	b.n	bfc8 <mbedtls_asn1_get_tag+0x1e>

0000bfd2 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    bfd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    bfd4:	2302      	movs	r3, #2
{
    bfd6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    bfd8:	aa01      	add	r2, sp, #4
{
    bfda:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    bfdc:	f7ff ffe5 	bl	bfaa <mbedtls_asn1_get_tag>
    bfe0:	b940      	cbnz	r0, bff4 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    bfe2:	9e01      	ldr	r6, [sp, #4]
    bfe4:	4628      	mov	r0, r5
    bfe6:	4632      	mov	r2, r6
    bfe8:	6821      	ldr	r1, [r4, #0]
    bfea:	f000 f8ef 	bl	c1cc <mbedtls_mpi_read_binary>

    *p += len;
    bfee:	6823      	ldr	r3, [r4, #0]
    bff0:	4433      	add	r3, r6
    bff2:	6023      	str	r3, [r4, #0]

    return( ret );
}
    bff4:	b002      	add	sp, #8
    bff6:	bd70      	pop	{r4, r5, r6, pc}

0000bff8 <mpi_select>:
 *                      this must satisfy 0 <= idx < T_size.
 *
 * \return \c 0 on success, or a negative error code.
 */
static int mpi_select( mbedtls_mpi *R, const mbedtls_mpi *T, size_t T_size, size_t idx )
{
    bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bffc:	4606      	mov	r6, r0
    bffe:	460f      	mov	r7, r1
    c000:	4615      	mov	r5, r2
    c002:	4698      	mov	r8, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    for( size_t i = 0; i < T_size; i++ )
    c004:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    c006:	f04f 090c 	mov.w	r9, #12
    c00a:	4641      	mov	r1, r8
    c00c:	4620      	mov	r0, r4
    c00e:	f001 f917 	bl	d240 <mbedtls_ct_size_bool_eq>
    c012:	fb09 7104 	mla	r1, r9, r4, r7
    c016:	b2c2      	uxtb	r2, r0
    c018:	4630      	mov	r0, r6
    c01a:	f001 f929 	bl	d270 <mbedtls_mpi_safe_cond_assign>
    c01e:	b910      	cbnz	r0, c026 <CONFIG_PM_PARTITION_SIZE_MCUBOOT+0x26>
    for( size_t i = 0; i < T_size; i++ )
    c020:	3401      	adds	r4, #1
    c022:	42a5      	cmp	r5, r4
    c024:	d1f1      	bne.n	c00a <CONFIG_PM_PARTITION_SIZE_MCUBOOT+0xa>
                        (unsigned char) mbedtls_ct_size_bool_eq( i, idx ) ) );
    }

cleanup:
    return( ret );
}
    c026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c02a <mpi_montmul.isra.0>:
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B,
    c02a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi_core_montmul( A->p, A->p, B->p, B->n, N->p, N->n, mm, T->p );
    c02c:	9c06      	ldr	r4, [sp, #24]
    c02e:	e9cd 3402 	strd	r3, r4, [sp, #8]
    c032:	6853      	ldr	r3, [r2, #4]
    c034:	9301      	str	r3, [sp, #4]
    c036:	6893      	ldr	r3, [r2, #8]
    c038:	9300      	str	r3, [sp, #0]
    c03a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    c03e:	4601      	mov	r1, r0
    c040:	f001 f8a4 	bl	d18c <mbedtls_mpi_core_montmul>
}
    c044:	b004      	add	sp, #16
    c046:	bd10      	pop	{r4, pc}

0000c048 <mbedtls_mpi_init>:
    X->n = 0;
    c048:	2300      	movs	r3, #0
    c04a:	2201      	movs	r2, #1
    X->p = NULL;
    c04c:	6083      	str	r3, [r0, #8]
    X->n = 0;
    c04e:	e9c0 2300 	strd	r2, r3, [r0]
}
    c052:	4770      	bx	lr

0000c054 <mbedtls_mpi_free>:
{
    c054:	b510      	push	{r4, lr}
    if( X == NULL )
    c056:	4604      	mov	r4, r0
    c058:	b168      	cbz	r0, c076 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    c05a:	6880      	ldr	r0, [r0, #8]
    c05c:	b130      	cbz	r0, c06c <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    c05e:	6861      	ldr	r1, [r4, #4]
    c060:	0089      	lsls	r1, r1, #2
    c062:	f7fe f97f 	bl	a364 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    c066:	68a0      	ldr	r0, [r4, #8]
    c068:	f7fa fcc6 	bl	69f8 <mbedtls_free>
    X->n = 0;
    c06c:	2300      	movs	r3, #0
    c06e:	2201      	movs	r2, #1
    c070:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    c074:	60a3      	str	r3, [r4, #8]
}
    c076:	bd10      	pop	{r4, pc}

0000c078 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c078:	f242 7310 	movw	r3, #10000	; 0x2710
    c07c:	4299      	cmp	r1, r3
{
    c07e:	b570      	push	{r4, r5, r6, lr}
    c080:	4604      	mov	r4, r0
    c082:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c084:	d902      	bls.n	c08c <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    c086:	f06f 000f 	mvn.w	r0, #15
}
    c08a:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    c08c:	6843      	ldr	r3, [r0, #4]
    c08e:	428b      	cmp	r3, r1
    c090:	d301      	bcc.n	c096 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    c092:	2000      	movs	r0, #0
    c094:	e7f9      	b.n	c08a <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    c096:	2104      	movs	r1, #4
    c098:	4628      	mov	r0, r5
    c09a:	f7fa fca7 	bl	69ec <mbedtls_calloc>
    c09e:	4606      	mov	r6, r0
    c0a0:	2800      	cmp	r0, #0
    c0a2:	d0f0      	beq.n	c086 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    c0a4:	68a1      	ldr	r1, [r4, #8]
    c0a6:	b159      	cbz	r1, c0c0 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    c0a8:	6862      	ldr	r2, [r4, #4]
    c0aa:	0092      	lsls	r2, r2, #2
    c0ac:	f7ff faf4 	bl	b698 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    c0b0:	6861      	ldr	r1, [r4, #4]
    c0b2:	68a0      	ldr	r0, [r4, #8]
    c0b4:	0089      	lsls	r1, r1, #2
    c0b6:	f7fe f955 	bl	a364 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    c0ba:	68a0      	ldr	r0, [r4, #8]
    c0bc:	f7fa fc9c 	bl	69f8 <mbedtls_free>
        X->p = p;
    c0c0:	e9c4 5601 	strd	r5, r6, [r4, #4]
    c0c4:	e7e5      	b.n	c092 <mbedtls_mpi_grow+0x1a>

0000c0c6 <mbedtls_mpi_resize_clear>:
{
    c0c6:	b538      	push	{r3, r4, r5, lr}
    c0c8:	4604      	mov	r4, r0
    if( limbs == 0 )
    c0ca:	460d      	mov	r5, r1
    c0cc:	b919      	cbnz	r1, c0d6 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    c0ce:	f7ff ffc1 	bl	c054 <mbedtls_mpi_free>
}
    c0d2:	2000      	movs	r0, #0
    c0d4:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    c0d6:	6842      	ldr	r2, [r0, #4]
    c0d8:	428a      	cmp	r2, r1
    c0da:	d107      	bne.n	c0ec <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    c0dc:	2100      	movs	r1, #0
    c0de:	6880      	ldr	r0, [r0, #8]
    c0e0:	0092      	lsls	r2, r2, #2
    c0e2:	f7ff fae4 	bl	b6ae <memset>
        X->s = 1;
    c0e6:	2301      	movs	r3, #1
    c0e8:	6023      	str	r3, [r4, #0]
        return( 0 );
    c0ea:	e7f2      	b.n	c0d2 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    c0ec:	f7ff ffb2 	bl	c054 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    c0f0:	4629      	mov	r1, r5
    c0f2:	4620      	mov	r0, r4
}
    c0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    c0f8:	f7ff bfbe 	b.w	c078 <mbedtls_mpi_grow>

0000c0fc <mbedtls_mpi_copy>:
    if( X == Y )
    c0fc:	4288      	cmp	r0, r1
{
    c0fe:	b570      	push	{r4, r5, r6, lr}
    c100:	4605      	mov	r5, r0
    c102:	460e      	mov	r6, r1
    if( X == Y )
    c104:	d009      	beq.n	c11a <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    c106:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    c108:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    c10a:	b941      	cbnz	r1, c11e <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    c10c:	b12a      	cbz	r2, c11a <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    c10e:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    c110:	0092      	lsls	r2, r2, #2
            X->s = 1;
    c112:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    c114:	6880      	ldr	r0, [r0, #8]
    c116:	f7ff faca 	bl	b6ae <memset>
        return( 0 );
    c11a:	2000      	movs	r0, #0
}
    c11c:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    c11e:	1e4c      	subs	r4, r1, #1
    c120:	b984      	cbnz	r4, c144 <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    c122:	6833      	ldr	r3, [r6, #0]
    i++;
    c124:	3401      	adds	r4, #1
    if( X->n < i )
    c126:	4294      	cmp	r4, r2
    X->s = Y->s;
    c128:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    c12a:	d912      	bls.n	c152 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    c12c:	4621      	mov	r1, r4
    c12e:	4628      	mov	r0, r5
    c130:	f7ff ffa2 	bl	c078 <mbedtls_mpi_grow>
    c134:	2800      	cmp	r0, #0
    c136:	d1f1      	bne.n	c11c <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    c138:	68b1      	ldr	r1, [r6, #8]
    c13a:	68a8      	ldr	r0, [r5, #8]
    c13c:	00a2      	lsls	r2, r4, #2
    c13e:	f7ff faab 	bl	b698 <memcpy>
    c142:	e7ea      	b.n	c11a <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    c144:	68b3      	ldr	r3, [r6, #8]
    c146:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c14a:	2b00      	cmp	r3, #0
    c14c:	d1e9      	bne.n	c122 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    c14e:	3c01      	subs	r4, #1
    c150:	e7e6      	b.n	c120 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    c152:	68a8      	ldr	r0, [r5, #8]
    c154:	1b12      	subs	r2, r2, r4
    c156:	2100      	movs	r1, #0
    c158:	0092      	lsls	r2, r2, #2
    c15a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c15e:	f7ff faa6 	bl	b6ae <memset>
    c162:	e7e9      	b.n	c138 <mbedtls_mpi_copy+0x3c>

0000c164 <mbedtls_mpi_lset>:
{
    c164:	b570      	push	{r4, r5, r6, lr}
    c166:	460c      	mov	r4, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c168:	2101      	movs	r1, #1
{
    c16a:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c16c:	f7ff ff84 	bl	c078 <mbedtls_mpi_grow>
    c170:	4606      	mov	r6, r0
    c172:	b978      	cbnz	r0, c194 <mbedtls_mpi_lset+0x30>
    memset( X->p, 0, X->n * ciL );
    c174:	686a      	ldr	r2, [r5, #4]
    c176:	4601      	mov	r1, r0
    c178:	0092      	lsls	r2, r2, #2
    c17a:	68a8      	ldr	r0, [r5, #8]
    c17c:	f7ff fa97 	bl	b6ae <memset>
    if( z >= 0 )
    c180:	2c00      	cmp	r4, #0
    X->s    = ( z < 0 ) ? -1 : 1;
    c182:	bfb4      	ite	lt
    c184:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    c188:	2201      	movge	r2, #1
    X->p[0] = mpi_sint_abs( z );
    c18a:	68a9      	ldr	r1, [r5, #8]
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    c18c:	bfb8      	it	lt
    c18e:	4264      	neglt	r4, r4
    X->s    = ( z < 0 ) ? -1 : 1;
    c190:	600c      	str	r4, [r1, #0]
    c192:	602a      	str	r2, [r5, #0]
}
    c194:	4630      	mov	r0, r6
    c196:	bd70      	pop	{r4, r5, r6, pc}

0000c198 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    c198:	6843      	ldr	r3, [r0, #4]
    c19a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    c19e:	bf3f      	itttt	cc
    c1a0:	6883      	ldrcc	r3, [r0, #8]
    c1a2:	094a      	lsrcc	r2, r1, #5
    c1a4:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    c1a8:	f001 011f 	andcc.w	r1, r1, #31
    c1ac:	bf3a      	itte	cc
    c1ae:	40c8      	lsrcc	r0, r1
    c1b0:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    c1b4:	2000      	movcs	r0, #0
}
    c1b6:	4770      	bx	lr

0000c1b8 <mbedtls_mpi_bitlen>:
    return( mbedtls_mpi_core_bitlen( X->p, X->n ) );
    c1b8:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    c1bc:	f000 be0b 	b.w	cdd6 <mbedtls_mpi_core_bitlen>

0000c1c0 <mbedtls_mpi_size>:
{
    c1c0:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    c1c2:	f7ff fff9 	bl	c1b8 <mbedtls_mpi_bitlen>
    c1c6:	3007      	adds	r0, #7
}
    c1c8:	08c0      	lsrs	r0, r0, #3
    c1ca:	bd08      	pop	{r3, pc}

0000c1cc <mbedtls_mpi_read_binary>:
{
    c1cc:	b570      	push	{r4, r5, r6, lr}
    c1ce:	460e      	mov	r6, r1
    const size_t limbs = CHARS_TO_LIMBS( buflen );
    c1d0:	f012 0103 	ands.w	r1, r2, #3
    c1d4:	bf18      	it	ne
    c1d6:	2101      	movne	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c1d8:	eb01 0192 	add.w	r1, r1, r2, lsr #2
{
    c1dc:	4605      	mov	r5, r0
    c1de:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c1e0:	f7ff ff71 	bl	c0c6 <mbedtls_mpi_resize_clear>
    c1e4:	b938      	cbnz	r0, c1f6 <mbedtls_mpi_read_binary+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    c1e6:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    c1ea:	4623      	mov	r3, r4
    c1ec:	4632      	mov	r2, r6
}
    c1ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    c1f2:	f000 be3a 	b.w	ce6a <mbedtls_mpi_core_read_be>
}
    c1f6:	bd70      	pop	{r4, r5, r6, pc}

0000c1f8 <mbedtls_mpi_write_binary>:
{
    c1f8:	4613      	mov	r3, r2
    return( mbedtls_mpi_core_write_be( X->p, X->n, buf, buflen ) );
    c1fa:	460a      	mov	r2, r1
    c1fc:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    c200:	f000 be58 	b.w	ceb4 <mbedtls_mpi_core_write_be>

0000c204 <mbedtls_mpi_shift_l>:
{
    c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c206:	4605      	mov	r5, r0
    c208:	460e      	mov	r6, r1
    v0 = count / (biL    );
    c20a:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    c20c:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    c210:	f7ff ffd2 	bl	c1b8 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    c214:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    c216:	4430      	add	r0, r6
    if( X->n * biL < i )
    c218:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    c21c:	d805      	bhi.n	c22a <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    c21e:	2e1f      	cmp	r6, #31
    c220:	d80f      	bhi.n	c242 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    c222:	2f00      	cmp	r7, #0
    c224:	d141      	bne.n	c2aa <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    c226:	2000      	movs	r0, #0
    c228:	e00a      	b.n	c240 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    c22a:	f010 011f 	ands.w	r1, r0, #31
    c22e:	bf18      	it	ne
    c230:	2101      	movne	r1, #1
    c232:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    c236:	4628      	mov	r0, r5
    c238:	f7ff ff1e 	bl	c078 <mbedtls_mpi_grow>
    c23c:	2800      	cmp	r0, #0
    c23e:	d0ee      	beq.n	c21e <mbedtls_mpi_shift_l+0x1a>
}
    c240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    c242:	f06f 0003 	mvn.w	r0, #3
    c246:	686b      	ldr	r3, [r5, #4]
    c248:	4360      	muls	r0, r4
    c24a:	4619      	mov	r1, r3
    c24c:	009a      	lsls	r2, r3, #2
    c24e:	42a1      	cmp	r1, r4
    c250:	f1a2 0204 	sub.w	r2, r2, #4
    c254:	d80c      	bhi.n	c270 <mbedtls_mpi_shift_l+0x6c>
    c256:	1ae2      	subs	r2, r4, r3
    c258:	429c      	cmp	r4, r3
    c25a:	bf88      	it	hi
    c25c:	2200      	movhi	r2, #0
    c25e:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    c260:	2200      	movs	r2, #0
    c262:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    c264:	3b04      	subs	r3, #4
    c266:	1d19      	adds	r1, r3, #4
    c268:	d0db      	beq.n	c222 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    c26a:	68a9      	ldr	r1, [r5, #8]
    c26c:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    c26e:	e7f9      	b.n	c264 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    c270:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    c272:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    c274:	eb06 0c02 	add.w	ip, r6, r2
    c278:	f85c c000 	ldr.w	ip, [ip, r0]
    c27c:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    c280:	e7e5      	b.n	c24e <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    c282:	68ab      	ldr	r3, [r5, #8]
    c284:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    c288:	fa01 f007 	lsl.w	r0, r1, r7
    c28c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    c290:	68a8      	ldr	r0, [r5, #8]
    c292:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    c296:	4313      	orrs	r3, r2
    c298:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    c29c:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    c2a0:	3401      	adds	r4, #1
    c2a2:	686b      	ldr	r3, [r5, #4]
    c2a4:	42a3      	cmp	r3, r4
    c2a6:	d8ec      	bhi.n	c282 <mbedtls_mpi_shift_l+0x7e>
    c2a8:	e7bd      	b.n	c226 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    c2aa:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    c2ac:	f1c7 0620 	rsb	r6, r7, #32
    c2b0:	e7f7      	b.n	c2a2 <mbedtls_mpi_shift_l+0x9e>

0000c2b2 <mbedtls_mpi_shift_r>:
{
    c2b2:	b508      	push	{r3, lr}
    c2b4:	460a      	mov	r2, r1
    if( X->n != 0 )
    c2b6:	6841      	ldr	r1, [r0, #4]
    c2b8:	b111      	cbz	r1, c2c0 <mbedtls_mpi_shift_r+0xe>
        mbedtls_mpi_core_shift_r( X->p, X->n, count );
    c2ba:	6880      	ldr	r0, [r0, #8]
    c2bc:	f000 fe2c 	bl	cf18 <mbedtls_mpi_core_shift_r>
}
    c2c0:	2000      	movs	r0, #0
    c2c2:	bd08      	pop	{r3, pc}

0000c2c4 <mbedtls_mpi_cmp_abs>:
{
    c2c4:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    c2c6:	6842      	ldr	r2, [r0, #4]
    c2c8:	b93a      	cbnz	r2, c2da <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    c2ca:	684b      	ldr	r3, [r1, #4]
    c2cc:	b973      	cbnz	r3, c2ec <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    c2ce:	b9b2      	cbnz	r2, c2fe <mbedtls_mpi_cmp_abs+0x3a>
    c2d0:	1e18      	subs	r0, r3, #0
    c2d2:	bf18      	it	ne
    c2d4:	2001      	movne	r0, #1
    c2d6:	4240      	negs	r0, r0
}
    c2d8:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    c2da:	6883      	ldr	r3, [r0, #8]
    c2dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c2e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d1f0      	bne.n	c2ca <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    c2e8:	3a01      	subs	r2, #1
    c2ea:	e7ed      	b.n	c2c8 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    c2ec:	688c      	ldr	r4, [r1, #8]
    c2ee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c2f2:	f854 4c04 	ldr.w	r4, [r4, #-4]
    c2f6:	2c00      	cmp	r4, #0
    c2f8:	d1e9      	bne.n	c2ce <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    c2fa:	3b01      	subs	r3, #1
    c2fc:	e7e6      	b.n	c2cc <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    c2fe:	429a      	cmp	r2, r3
    c300:	d810      	bhi.n	c324 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    c302:	d311      	bcc.n	c328 <mbedtls_mpi_cmp_abs+0x64>
    c304:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    c306:	6883      	ldr	r3, [r0, #8]
    c308:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    c30c:	688b      	ldr	r3, [r1, #8]
    c30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c312:	429c      	cmp	r4, r3
    c314:	d806      	bhi.n	c324 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    c316:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    c31a:	d305      	bcc.n	c328 <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    c31c:	1c53      	adds	r3, r2, #1
    c31e:	d1f2      	bne.n	c306 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    c320:	2000      	movs	r0, #0
    c322:	e7d9      	b.n	c2d8 <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    c324:	2001      	movs	r0, #1
    c326:	e7d7      	b.n	c2d8 <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    c328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c32c:	e7d4      	b.n	c2d8 <mbedtls_mpi_cmp_abs+0x14>

0000c32e <mbedtls_mpi_cmp_mpi>:
{
    c32e:	4602      	mov	r2, r0
    c330:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    c332:	6843      	ldr	r3, [r0, #4]
    c334:	b923      	cbnz	r3, c340 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    c336:	6848      	ldr	r0, [r1, #4]
    c338:	b958      	cbnz	r0, c352 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    c33a:	2b00      	cmp	r3, #0
    c33c:	d136      	bne.n	c3ac <mbedtls_mpi_cmp_mpi+0x7e>
    c33e:	e02f      	b.n	c3a0 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    c340:	6890      	ldr	r0, [r2, #8]
    c342:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c346:	f850 0c04 	ldr.w	r0, [r0, #-4]
    c34a:	2800      	cmp	r0, #0
    c34c:	d1f3      	bne.n	c336 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    c34e:	3b01      	subs	r3, #1
    c350:	e7f0      	b.n	c334 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    c352:	688c      	ldr	r4, [r1, #8]
    c354:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    c358:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c35c:	bb15      	cbnz	r5, c3a4 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    c35e:	3801      	subs	r0, #1
    c360:	e7ea      	b.n	c338 <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c362:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    c364:	d202      	bcs.n	c36c <mbedtls_mpi_cmp_mpi+0x3e>
    c366:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c368:	4240      	negs	r0, r0
    c36a:	e020      	b.n	c3ae <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c36c:	6810      	ldr	r0, [r2, #0]
    c36e:	2800      	cmp	r0, #0
    c370:	dd03      	ble.n	c37a <mbedtls_mpi_cmp_mpi+0x4c>
    c372:	2d00      	cmp	r5, #0
    c374:	da07      	bge.n	c386 <mbedtls_mpi_cmp_mpi+0x58>
    c376:	2001      	movs	r0, #1
    c378:	e019      	b.n	c3ae <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    c37a:	2d00      	cmp	r5, #0
    c37c:	dd03      	ble.n	c386 <mbedtls_mpi_cmp_mpi+0x58>
    c37e:	b110      	cbz	r0, c386 <mbedtls_mpi_cmp_mpi+0x58>
    c380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c384:	e013      	b.n	c3ae <mbedtls_mpi_cmp_mpi+0x80>
    c386:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    c388:	6891      	ldr	r1, [r2, #8]
    c38a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    c38e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c392:	428d      	cmp	r5, r1
    c394:	d80b      	bhi.n	c3ae <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c396:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c39a:	d3e5      	bcc.n	c368 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    c39c:	1c59      	adds	r1, r3, #1
    c39e:	d1f3      	bne.n	c388 <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    c3a0:	2000      	movs	r0, #0
    c3a2:	e004      	b.n	c3ae <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d0de      	beq.n	c366 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    c3a8:	4283      	cmp	r3, r0
    c3aa:	d9da      	bls.n	c362 <mbedtls_mpi_cmp_mpi+0x34>
    c3ac:	6810      	ldr	r0, [r2, #0]
}
    c3ae:	bd30      	pop	{r4, r5, pc}

0000c3b0 <mbedtls_mpi_cmp_int>:
{
    c3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( z >= 0 )
    c3b2:	2900      	cmp	r1, #0
    Y.s = ( z < 0 ) ? -1 : 1;
    c3b4:	bfb6      	itet	lt
    c3b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    c3ba:	2301      	movge	r3, #1
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    c3bc:	4249      	neglt	r1, r1
    Y.s = ( z < 0 ) ? -1 : 1;
    c3be:	e9cd 1300 	strd	r1, r3, [sp]
    Y.n = 1;
    c3c2:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c3c4:	a901      	add	r1, sp, #4
    Y.n = 1;
    c3c6:	9302      	str	r3, [sp, #8]
    Y.p = p;
    c3c8:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c3cc:	f7ff ffaf 	bl	c32e <mbedtls_mpi_cmp_mpi>
}
    c3d0:	b005      	add	sp, #20
    c3d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3d6 <mbedtls_mpi_add_abs>:
    if( X == B )
    c3d6:	4290      	cmp	r0, r2
{
    c3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3dc:	4605      	mov	r5, r0
    c3de:	460f      	mov	r7, r1
    c3e0:	4614      	mov	r4, r2
    if( X == B )
    c3e2:	d002      	beq.n	c3ea <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    c3e4:	4288      	cmp	r0, r1
    c3e6:	d106      	bne.n	c3f6 <mbedtls_mpi_add_abs+0x20>
{
    c3e8:	4627      	mov	r7, r4
    X->s = 1;
    c3ea:	2301      	movs	r3, #1
    c3ec:	602b      	str	r3, [r5, #0]
    for( j = B->n; j > 0; j-- )
    c3ee:	687c      	ldr	r4, [r7, #4]
    c3f0:	b93c      	cbnz	r4, c402 <mbedtls_mpi_add_abs+0x2c>
        return( 0 );
    c3f2:	2000      	movs	r0, #0
    c3f4:	e003      	b.n	c3fe <mbedtls_mpi_add_abs+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c3f6:	f7ff fe81 	bl	c0fc <mbedtls_mpi_copy>
    c3fa:	2800      	cmp	r0, #0
    c3fc:	d0f4      	beq.n	c3e8 <mbedtls_mpi_add_abs+0x12>
}
    c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    c402:	68bb      	ldr	r3, [r7, #8]
    c404:	ea4f 0884 	mov.w	r8, r4, lsl #2
    c408:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c40c:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c410:	b90b      	cbnz	r3, c416 <mbedtls_mpi_add_abs+0x40>
    for( j = B->n; j > 0; j-- )
    c412:	3c01      	subs	r4, #1
    c414:	e7ec      	b.n	c3f0 <mbedtls_mpi_add_abs+0x1a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c416:	4621      	mov	r1, r4
    c418:	4628      	mov	r0, r5
    c41a:	f7ff fe2d 	bl	c078 <mbedtls_mpi_grow>
    c41e:	2800      	cmp	r0, #0
    c420:	d1ed      	bne.n	c3fe <mbedtls_mpi_add_abs+0x28>
    mbedtls_mpi_uint *p = X->p;
    c422:	68ae      	ldr	r6, [r5, #8]
    mbedtls_mpi_uint c = mbedtls_mpi_core_add( p, p, B->p, j );
    c424:	4623      	mov	r3, r4
    c426:	68ba      	ldr	r2, [r7, #8]
    c428:	4631      	mov	r1, r6
    c42a:	4630      	mov	r0, r6
    c42c:	f000 fdae 	bl	cf8c <mbedtls_mpi_core_add>
    c430:	4607      	mov	r7, r0
    p += j;
    c432:	eb06 0308 	add.w	r3, r6, r8
    while( c != 0 )
    c436:	2f00      	cmp	r7, #0
    c438:	d0db      	beq.n	c3f2 <mbedtls_mpi_add_abs+0x1c>
        if( j >= X->n )
    c43a:	686a      	ldr	r2, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    c43c:	1c66      	adds	r6, r4, #1
        if( j >= X->n )
    c43e:	42a2      	cmp	r2, r4
    c440:	d808      	bhi.n	c454 <mbedtls_mpi_add_abs+0x7e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    c442:	4631      	mov	r1, r6
    c444:	4628      	mov	r0, r5
    c446:	f7ff fe17 	bl	c078 <mbedtls_mpi_grow>
    c44a:	2800      	cmp	r0, #0
    c44c:	d1d7      	bne.n	c3fe <mbedtls_mpi_add_abs+0x28>
            p = X->p + j;
    c44e:	68ab      	ldr	r3, [r5, #8]
    c450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        *p += c; c = ( *p < c ); j++; p++;
    c454:	681a      	ldr	r2, [r3, #0]
    c456:	4634      	mov	r4, r6
    c458:	19d2      	adds	r2, r2, r7
    c45a:	bf2c      	ite	cs
    c45c:	2701      	movcs	r7, #1
    c45e:	2700      	movcc	r7, #0
    c460:	f843 2b04 	str.w	r2, [r3], #4
    c464:	e7e7      	b.n	c436 <mbedtls_mpi_add_abs+0x60>

0000c466 <mbedtls_mpi_sub_abs>:
{
    c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c46a:	4605      	mov	r5, r0
    c46c:	460e      	mov	r6, r1
    c46e:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    c470:	6854      	ldr	r4, [r2, #4]
    c472:	b93c      	cbnz	r4, c484 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    c474:	6871      	ldr	r1, [r6, #4]
    c476:	42a1      	cmp	r1, r4
    c478:	d20e      	bcs.n	c498 <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    c47a:	f06f 0709 	mvn.w	r7, #9
}
    c47e:	4638      	mov	r0, r7
    c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    c484:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c488:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c48c:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c490:	2b00      	cmp	r3, #0
    c492:	d1ef      	bne.n	c474 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    c494:	3c01      	subs	r4, #1
    c496:	e7ec      	b.n	c472 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    c498:	4628      	mov	r0, r5
    c49a:	f7ff fded 	bl	c078 <mbedtls_mpi_grow>
    c49e:	4607      	mov	r7, r0
    c4a0:	2800      	cmp	r0, #0
    c4a2:	d1ec      	bne.n	c47e <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    c4a4:	6872      	ldr	r2, [r6, #4]
    c4a6:	4294      	cmp	r4, r2
    c4a8:	d209      	bcs.n	c4be <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    c4aa:	68b1      	ldr	r1, [r6, #8]
    c4ac:	68a8      	ldr	r0, [r5, #8]
    c4ae:	1b12      	subs	r2, r2, r4
    c4b0:	0092      	lsls	r2, r2, #2
    c4b2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c4b6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c4ba:	f7ff f8ed 	bl	b698 <memcpy>
    if( X->n > A->n )
    c4be:	686a      	ldr	r2, [r5, #4]
    c4c0:	6870      	ldr	r0, [r6, #4]
    c4c2:	4282      	cmp	r2, r0
    c4c4:	d907      	bls.n	c4d6 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    c4c6:	68ab      	ldr	r3, [r5, #8]
    c4c8:	1a12      	subs	r2, r2, r0
    c4ca:	2100      	movs	r1, #0
    c4cc:	0092      	lsls	r2, r2, #2
    c4ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    c4d2:	f7ff f8ec 	bl	b6ae <memset>
    carry = mbedtls_mpi_core_sub( X->p, A->p, B->p, n );
    c4d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c4da:	4623      	mov	r3, r4
    c4dc:	68b1      	ldr	r1, [r6, #8]
    c4de:	68a8      	ldr	r0, [r5, #8]
    c4e0:	f000 fd6a 	bl	cfb8 <mbedtls_mpi_core_sub>
    if( carry != 0 )
    c4e4:	4602      	mov	r2, r0
    c4e6:	b910      	cbnz	r0, c4ee <mbedtls_mpi_sub_abs+0x88>
    X->s = 1;
    c4e8:	2301      	movs	r3, #1
    c4ea:	602b      	str	r3, [r5, #0]
    c4ec:	e7c7      	b.n	c47e <mbedtls_mpi_sub_abs+0x18>
        carry = mbedtls_mpi_core_sub_int( X->p + n, X->p + n, carry, X->n - n );
    c4ee:	68a9      	ldr	r1, [r5, #8]
    c4f0:	686b      	ldr	r3, [r5, #4]
    c4f2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c4f6:	4608      	mov	r0, r1
    c4f8:	1b1b      	subs	r3, r3, r4
    c4fa:	f000 fe90 	bl	d21e <mbedtls_mpi_core_sub_int>
        if( carry != 0 )
    c4fe:	2800      	cmp	r0, #0
    c500:	d0f2      	beq.n	c4e8 <mbedtls_mpi_sub_abs+0x82>
    c502:	e7ba      	b.n	c47a <mbedtls_mpi_sub_abs+0x14>

0000c504 <add_sub_mpi>:
{
    c504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( A->s * B->s * flip_B < 0 )
    c508:	6816      	ldr	r6, [r2, #0]
    s = A->s;
    c50a:	680c      	ldr	r4, [r1, #0]
{
    c50c:	4681      	mov	r9, r0
    if( A->s * B->s * flip_B < 0 )
    c50e:	fb06 fc04 	mul.w	ip, r6, r4
    c512:	4666      	mov	r6, ip
    c514:	4373      	muls	r3, r6
{
    c516:	460d      	mov	r5, r1
    c518:	4617      	mov	r7, r2
    if( A->s * B->s * flip_B < 0 )
    c51a:	d51b      	bpl.n	c554 <add_sub_mpi+0x50>
        int cmp = mbedtls_mpi_cmp_abs( A, B );
    c51c:	4611      	mov	r1, r2
    c51e:	4628      	mov	r0, r5
    c520:	f7ff fed0 	bl	c2c4 <mbedtls_mpi_cmp_abs>
        if( cmp >= 0 )
    c524:	f1b0 0800 	subs.w	r8, r0, #0
    c528:	db0d      	blt.n	c546 <add_sub_mpi+0x42>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c52a:	463a      	mov	r2, r7
    c52c:	4629      	mov	r1, r5
    c52e:	4648      	mov	r0, r9
    c530:	f7ff ff99 	bl	c466 <mbedtls_mpi_sub_abs>
    c534:	b990      	cbnz	r0, c55c <add_sub_mpi+0x58>
            X->s = cmp == 0 ? 1 : s;
    c536:	f1b8 0f00 	cmp.w	r8, #0
    c53a:	bf08      	it	eq
    c53c:	2401      	moveq	r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c53e:	2000      	movs	r0, #0
        X->s = s;
    c540:	f8c9 4000 	str.w	r4, [r9]
    return( ret );
    c544:	e00a      	b.n	c55c <add_sub_mpi+0x58>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c546:	462a      	mov	r2, r5
    c548:	4648      	mov	r0, r9
    c54a:	f7ff ff8c 	bl	c466 <mbedtls_mpi_sub_abs>
    c54e:	b928      	cbnz	r0, c55c <add_sub_mpi+0x58>
            X->s = -s;
    c550:	4264      	negs	r4, r4
    c552:	e7f4      	b.n	c53e <add_sub_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c554:	f7ff ff3f 	bl	c3d6 <mbedtls_mpi_add_abs>
    c558:	2800      	cmp	r0, #0
    c55a:	d0f0      	beq.n	c53e <add_sub_mpi+0x3a>
}
    c55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c560 <mbedtls_mpi_add_mpi>:
    return( add_sub_mpi( X, A, B, 1 ) );
    c560:	2301      	movs	r3, #1
    c562:	f7ff bfcf 	b.w	c504 <add_sub_mpi>

0000c566 <mbedtls_mpi_sub_mpi>:
    return( add_sub_mpi( X, A, B, -1 ) );
    c566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c56a:	f7ff bfcb 	b.w	c504 <add_sub_mpi>

0000c56e <mbedtls_mpi_mul_int>:
{
    c56e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c572:	4605      	mov	r5, r0
    c574:	4688      	mov	r8, r1
    c576:	4616      	mov	r6, r2
    size_t n = A->n;
    c578:	684f      	ldr	r7, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    c57a:	b13f      	cbz	r7, c58c <mbedtls_mpi_mul_int+0x1e>
    c57c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c580:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    c584:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c588:	b13b      	cbz	r3, c59a <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    c58a:	b946      	cbnz	r6, c59e <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    c58c:	2100      	movs	r1, #0
    c58e:	4628      	mov	r0, r5
}
    c590:	b002      	add	sp, #8
    c592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    c596:	f7ff bde5 	b.w	c164 <mbedtls_mpi_lset>
        --n;
    c59a:	3f01      	subs	r7, #1
    c59c:	e7ed      	b.n	c57a <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    c59e:	4628      	mov	r0, r5
    c5a0:	1c79      	adds	r1, r7, #1
    c5a2:	f7ff fd69 	bl	c078 <mbedtls_mpi_grow>
    c5a6:	4604      	mov	r4, r0
    c5a8:	b970      	cbnz	r0, c5c8 <mbedtls_mpi_mul_int+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c5aa:	4641      	mov	r1, r8
    c5ac:	4628      	mov	r0, r5
    c5ae:	f7ff fda5 	bl	c0fc <mbedtls_mpi_copy>
    c5b2:	4604      	mov	r4, r0
    c5b4:	b940      	cbnz	r0, c5c8 <mbedtls_mpi_mul_int+0x5a>
    mbedtls_mpi_core_mla( X->p, X->n, A->p, n, b - 1 );
    c5b6:	3e01      	subs	r6, #1
    c5b8:	9600      	str	r6, [sp, #0]
    c5ba:	463b      	mov	r3, r7
    c5bc:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    c5c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c5c4:	f000 fd15 	bl	cff2 <mbedtls_mpi_core_mla>
}
    c5c8:	4620      	mov	r0, r4
    c5ca:	b002      	add	sp, #8
    c5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c5d0 <mbedtls_mpi_div_mpi>:
{
    c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5d4:	4683      	mov	fp, r0
    c5d6:	b09d      	sub	sp, #116	; 0x74
    c5d8:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c5da:	4618      	mov	r0, r3
    c5dc:	2100      	movs	r1, #0
{
    c5de:	4616      	mov	r6, r2
    c5e0:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c5e2:	f7ff fee5 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c5e6:	2800      	cmp	r0, #0
    c5e8:	f000 8187 	beq.w	c8fa <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c5ec:	2303      	movs	r3, #3
    X->n = 0;
    c5ee:	2400      	movs	r4, #0
    c5f0:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c5f2:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c5f4:	4630      	mov	r0, r6
    T2.p = TP2;
    c5f6:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c5f8:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    c5fa:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    c5fe:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    c602:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    c606:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    c60a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    c60e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    c612:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    c614:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c616:	f7ff fe55 	bl	c2c4 <mbedtls_mpi_cmp_abs>
    c61a:	42a0      	cmp	r0, r4
    c61c:	da28      	bge.n	c670 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c61e:	f1bb 0f00 	cmp.w	fp, #0
    c622:	d105      	bne.n	c630 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c624:	b9e7      	cbnz	r7, c660 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    c626:	2400      	movs	r4, #0
}
    c628:	4620      	mov	r0, r4
    c62a:	b01d      	add	sp, #116	; 0x74
    c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c630:	4621      	mov	r1, r4
    c632:	4658      	mov	r0, fp
    c634:	f7ff fd96 	bl	c164 <mbedtls_mpi_lset>
    c638:	4604      	mov	r4, r0
    c63a:	2800      	cmp	r0, #0
    c63c:	d0f2      	beq.n	c624 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    c63e:	a80a      	add	r0, sp, #40	; 0x28
    c640:	f7ff fd08 	bl	c054 <mbedtls_mpi_free>
    c644:	a80d      	add	r0, sp, #52	; 0x34
    c646:	f7ff fd05 	bl	c054 <mbedtls_mpi_free>
    c64a:	a810      	add	r0, sp, #64	; 0x40
    c64c:	f7ff fd02 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    c650:	a813      	add	r0, sp, #76	; 0x4c
    c652:	f7ff fcff 	bl	c054 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    c656:	210c      	movs	r1, #12
    c658:	a819      	add	r0, sp, #100	; 0x64
    c65a:	f7fd fe83 	bl	a364 <mbedtls_platform_zeroize>
    return( ret );
    c65e:	e7e3      	b.n	c628 <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c660:	4631      	mov	r1, r6
    c662:	4638      	mov	r0, r7
    c664:	f7ff fd4a 	bl	c0fc <mbedtls_mpi_copy>
    c668:	4604      	mov	r4, r0
    c66a:	2800      	cmp	r0, #0
    c66c:	d1e7      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    c66e:	e7da      	b.n	c626 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    c670:	4631      	mov	r1, r6
    c672:	a80a      	add	r0, sp, #40	; 0x28
    c674:	f7ff fd42 	bl	c0fc <mbedtls_mpi_copy>
    c678:	4604      	mov	r4, r0
    c67a:	2800      	cmp	r0, #0
    c67c:	d1df      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    c67e:	9903      	ldr	r1, [sp, #12]
    c680:	a80d      	add	r0, sp, #52	; 0x34
    c682:	f7ff fd3b 	bl	c0fc <mbedtls_mpi_copy>
    c686:	4604      	mov	r4, r0
    c688:	2800      	cmp	r0, #0
    c68a:	d1d8      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c68c:	6871      	ldr	r1, [r6, #4]
    c68e:	a810      	add	r0, sp, #64	; 0x40
    c690:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    c692:	950d      	str	r5, [sp, #52]	; 0x34
    c694:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c696:	f7ff fcef 	bl	c078 <mbedtls_mpi_grow>
    c69a:	4604      	mov	r4, r0
    c69c:	2800      	cmp	r0, #0
    c69e:	d1ce      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    c6a0:	4601      	mov	r1, r0
    c6a2:	a810      	add	r0, sp, #64	; 0x40
    c6a4:	f7ff fd5e 	bl	c164 <mbedtls_mpi_lset>
    c6a8:	4604      	mov	r4, r0
    c6aa:	2800      	cmp	r0, #0
    c6ac:	d1c7      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    c6ae:	6871      	ldr	r1, [r6, #4]
    c6b0:	a813      	add	r0, sp, #76	; 0x4c
    c6b2:	3102      	adds	r1, #2
    c6b4:	f7ff fce0 	bl	c078 <mbedtls_mpi_grow>
    c6b8:	4604      	mov	r4, r0
    c6ba:	2800      	cmp	r0, #0
    c6bc:	d1bf      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    c6be:	a80d      	add	r0, sp, #52	; 0x34
    c6c0:	f7ff fd7a 	bl	c1b8 <mbedtls_mpi_bitlen>
    c6c4:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    c6c8:	281f      	cmp	r0, #31
    c6ca:	d070      	beq.n	c7ae <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    c6cc:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c6d0:	4619      	mov	r1, r3
    c6d2:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    c6d4:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c6d6:	f7ff fd95 	bl	c204 <mbedtls_mpi_shift_l>
    c6da:	4604      	mov	r4, r0
    c6dc:	2800      	cmp	r0, #0
    c6de:	d1ae      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    c6e0:	9901      	ldr	r1, [sp, #4]
    c6e2:	a80d      	add	r0, sp, #52	; 0x34
    c6e4:	f7ff fd8e 	bl	c204 <mbedtls_mpi_shift_l>
    c6e8:	4604      	mov	r4, r0
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d1a7      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    c6ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    c6f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    c6f4:	a80d      	add	r0, sp, #52	; 0x34
    c6f6:	eba5 0a08 	sub.w	sl, r5, r8
    c6fa:	ea4f 194a 	mov.w	r9, sl, lsl #5
    c6fe:	4649      	mov	r1, r9
    c700:	f7ff fd80 	bl	c204 <mbedtls_mpi_shift_l>
    c704:	4604      	mov	r4, r0
    c706:	2800      	cmp	r0, #0
    c708:	d199      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    c70a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    c70e:	a90d      	add	r1, sp, #52	; 0x34
    c710:	a80a      	add	r0, sp, #40	; 0x28
    c712:	f7ff fe0c 	bl	c32e <mbedtls_mpi_cmp_mpi>
    c716:	2800      	cmp	r0, #0
    c718:	da4b      	bge.n	c7b2 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    c71a:	4649      	mov	r1, r9
    c71c:	a80d      	add	r0, sp, #52	; 0x34
    c71e:	f7ff fdc8 	bl	c2b2 <mbedtls_mpi_shift_r>
    c722:	4604      	mov	r4, r0
    c724:	2800      	cmp	r0, #0
    c726:	d18a      	bne.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    c728:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c72c:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    c72e:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    c730:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
    c734:	9306      	str	r3, [sp, #24]
    c736:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c73a:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    c73e:	3b02      	subs	r3, #2
    c740:	3d01      	subs	r5, #1
    c742:	009b      	lsls	r3, r3, #2
    c744:	eba5 0508 	sub.w	r5, r5, r8
    c748:	9308      	str	r3, [sp, #32]
    c74a:	00ab      	lsls	r3, r5, #2
    c74c:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    c74e:	9b05      	ldr	r3, [sp, #20]
    c750:	459a      	cmp	sl, r3
    c752:	d83d      	bhi.n	c7d0 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    c754:	f1bb 0f00 	cmp.w	fp, #0
    c758:	d00c      	beq.n	c774 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    c75a:	4658      	mov	r0, fp
    c75c:	a910      	add	r1, sp, #64	; 0x40
    c75e:	f7ff fccd 	bl	c0fc <mbedtls_mpi_copy>
    c762:	2800      	cmp	r0, #0
    c764:	f040 80c5 	bne.w	c8f2 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    c768:	9a03      	ldr	r2, [sp, #12]
    c76a:	6833      	ldr	r3, [r6, #0]
    c76c:	6812      	ldr	r2, [r2, #0]
    c76e:	4353      	muls	r3, r2
    c770:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    c774:	2f00      	cmp	r7, #0
    c776:	f43f af62 	beq.w	c63e <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    c77a:	9901      	ldr	r1, [sp, #4]
    c77c:	a80a      	add	r0, sp, #40	; 0x28
    c77e:	f7ff fd98 	bl	c2b2 <mbedtls_mpi_shift_r>
    c782:	2800      	cmp	r0, #0
    c784:	f040 80b5 	bne.w	c8f2 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    c788:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c78a:	a90a      	add	r1, sp, #40	; 0x28
    c78c:	4638      	mov	r0, r7
        X.s = A->s;
    c78e:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c790:	f7ff fcb4 	bl	c0fc <mbedtls_mpi_copy>
    c794:	4601      	mov	r1, r0
    c796:	2800      	cmp	r0, #0
    c798:	f040 80ad 	bne.w	c8f6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    c79c:	4638      	mov	r0, r7
    c79e:	f7ff fe07 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c7a2:	2800      	cmp	r0, #0
    c7a4:	f47f af4b 	bne.w	c63e <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    c7a8:	2301      	movs	r3, #1
    c7aa:	603b      	str	r3, [r7, #0]
    c7ac:	e747      	b.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    c7ae:	9401      	str	r4, [sp, #4]
    c7b0:	e79d      	b.n	c6ee <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    c7b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c7b4:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    c7b6:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c7ba:	4608      	mov	r0, r1
        Z.p[n - t]++;
    c7bc:	3301      	adds	r3, #1
    c7be:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c7c2:	aa0d      	add	r2, sp, #52	; 0x34
    c7c4:	f7ff fecf 	bl	c566 <mbedtls_mpi_sub_mpi>
    c7c8:	4604      	mov	r4, r0
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d09f      	beq.n	c70e <mbedtls_mpi_div_mpi+0x13e>
    c7ce:	e736      	b.n	c63e <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    c7d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7d2:	9a06      	ldr	r2, [sp, #24]
    c7d4:	9304      	str	r3, [sp, #16]
    c7d6:	4413      	add	r3, r2
    c7d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    c7dc:	9307      	str	r3, [sp, #28]
    c7de:	9b04      	ldr	r3, [sp, #16]
    c7e0:	ea4f 088a 	mov.w	r8, sl, lsl #2
    c7e4:	589a      	ldr	r2, [r3, r2]
    c7e6:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c7ea:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    c7ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c7f0:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    c7f2:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    c7f4:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    c7f6:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    c7f8:	d276      	bcs.n	c8e8 <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    c7fa:	f1a8 0004 	sub.w	r0, r8, #4
    c7fe:	2300      	movs	r3, #0
    c800:	f859 0000 	ldr.w	r0, [r9, r0]
    c804:	f7f3 fca6 	bl	154 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    c808:	2900      	cmp	r1, #0
    c80a:	bf14      	ite	ne
    c80c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    c810:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    c812:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    c816:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    c818:	bf0e      	itee	eq
    c81a:	2300      	moveq	r3, #0
    c81c:	eb09 0308 	addne.w	r3, r9, r8
    c820:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    c824:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    c826:	f1a8 0304 	sub.w	r3, r8, #4
    c82a:	f859 3003 	ldr.w	r3, [r9, r3]
    c82e:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    c830:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c834:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    c838:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    c83a:	682b      	ldr	r3, [r5, #0]
    c83c:	3301      	adds	r3, #1
    c83e:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c840:	9b08      	ldr	r3, [sp, #32]
    c842:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    c844:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    c846:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    c848:	3b01      	subs	r3, #1
    c84a:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    c84c:	a813      	add	r0, sp, #76	; 0x4c
    c84e:	f7ff fc89 	bl	c164 <mbedtls_mpi_lset>
    c852:	2800      	cmp	r0, #0
    c854:	d14d      	bne.n	c8f2 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c856:	9b05      	ldr	r3, [sp, #20]
    c858:	2b00      	cmp	r3, #0
    c85a:	d048      	beq.n	c8ee <mbedtls_mpi_div_mpi+0x31e>
    c85c:	f8d8 2000 	ldr.w	r2, [r8]
    c860:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    c862:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c864:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    c866:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    c868:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    c86a:	6812      	ldr	r2, [r2, #0]
    c86c:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    c86e:	682a      	ldr	r2, [r5, #0]
    c870:	f7ff fe7d 	bl	c56e <mbedtls_mpi_mul_int>
    c874:	2800      	cmp	r0, #0
    c876:	d13c      	bne.n	c8f2 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    c878:	a916      	add	r1, sp, #88	; 0x58
    c87a:	a813      	add	r0, sp, #76	; 0x4c
    c87c:	f7ff fd57 	bl	c32e <mbedtls_mpi_cmp_mpi>
    c880:	2800      	cmp	r0, #0
    c882:	dcdf      	bgt.n	c844 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    c884:	682a      	ldr	r2, [r5, #0]
    c886:	a90d      	add	r1, sp, #52	; 0x34
    c888:	a813      	add	r0, sp, #76	; 0x4c
    c88a:	f7ff fe70 	bl	c56e <mbedtls_mpi_mul_int>
    c88e:	bb80      	cbnz	r0, c8f2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    c890:	9b02      	ldr	r3, [sp, #8]
    c892:	a813      	add	r0, sp, #76	; 0x4c
    c894:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    c898:	4641      	mov	r1, r8
    c89a:	f7ff fcb3 	bl	c204 <mbedtls_mpi_shift_l>
    c89e:	bb40      	cbnz	r0, c8f2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    c8a0:	a90a      	add	r1, sp, #40	; 0x28
    c8a2:	4608      	mov	r0, r1
    c8a4:	aa13      	add	r2, sp, #76	; 0x4c
    c8a6:	f7ff fe5e 	bl	c566 <mbedtls_mpi_sub_mpi>
    c8aa:	4601      	mov	r1, r0
    c8ac:	bb18      	cbnz	r0, c8f6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    c8ae:	a80a      	add	r0, sp, #40	; 0x28
    c8b0:	f7ff fd7e 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c8b4:	2800      	cmp	r0, #0
    c8b6:	da12      	bge.n	c8de <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    c8b8:	a90d      	add	r1, sp, #52	; 0x34
    c8ba:	a813      	add	r0, sp, #76	; 0x4c
    c8bc:	f7ff fc1e 	bl	c0fc <mbedtls_mpi_copy>
    c8c0:	b9b8      	cbnz	r0, c8f2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    c8c2:	4641      	mov	r1, r8
    c8c4:	a813      	add	r0, sp, #76	; 0x4c
    c8c6:	f7ff fc9d 	bl	c204 <mbedtls_mpi_shift_l>
    c8ca:	b990      	cbnz	r0, c8f2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    c8cc:	a90a      	add	r1, sp, #40	; 0x28
    c8ce:	4608      	mov	r0, r1
    c8d0:	aa13      	add	r2, sp, #76	; 0x4c
    c8d2:	f7ff fe45 	bl	c560 <mbedtls_mpi_add_mpi>
    c8d6:	b960      	cbnz	r0, c8f2 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    c8d8:	682b      	ldr	r3, [r5, #0]
    c8da:	3b01      	subs	r3, #1
    c8dc:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    c8de:	9b02      	ldr	r3, [sp, #8]
    c8e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c8e4:	3b04      	subs	r3, #4
    c8e6:	e731      	b.n	c74c <mbedtls_mpi_div_mpi+0x17c>
    c8e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8ec:	e791      	b.n	c812 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c8ee:	9a05      	ldr	r2, [sp, #20]
    c8f0:	e7b6      	b.n	c860 <mbedtls_mpi_div_mpi+0x290>
    c8f2:	4604      	mov	r4, r0
    c8f4:	e6a3      	b.n	c63e <mbedtls_mpi_div_mpi+0x6e>
    c8f6:	460c      	mov	r4, r1
    c8f8:	e6a1      	b.n	c63e <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    c8fa:	f06f 040b 	mvn.w	r4, #11
    c8fe:	e693      	b.n	c628 <mbedtls_mpi_div_mpi+0x58>

0000c900 <mbedtls_mpi_mod_mpi>:
{
    c900:	b570      	push	{r4, r5, r6, lr}
    c902:	4604      	mov	r4, r0
    c904:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c906:	4610      	mov	r0, r2
    c908:	2100      	movs	r1, #0
{
    c90a:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c90c:	f7ff fd50 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c910:	2800      	cmp	r0, #0
    c912:	db24      	blt.n	c95e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    c914:	462a      	mov	r2, r5
    c916:	4633      	mov	r3, r6
    c918:	4621      	mov	r1, r4
    c91a:	2000      	movs	r0, #0
    c91c:	f7ff fe58 	bl	c5d0 <mbedtls_mpi_div_mpi>
    c920:	4605      	mov	r5, r0
    c922:	b138      	cbz	r0, c934 <mbedtls_mpi_mod_mpi+0x34>
}
    c924:	4628      	mov	r0, r5
    c926:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    c928:	4632      	mov	r2, r6
    c92a:	4621      	mov	r1, r4
    c92c:	4620      	mov	r0, r4
    c92e:	f7ff fe17 	bl	c560 <mbedtls_mpi_add_mpi>
    c932:	b990      	cbnz	r0, c95a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    c934:	2100      	movs	r1, #0
    c936:	4620      	mov	r0, r4
    c938:	f7ff fd3a 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c93c:	2800      	cmp	r0, #0
    c93e:	dbf3      	blt.n	c928 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    c940:	4631      	mov	r1, r6
    c942:	4620      	mov	r0, r4
    c944:	f7ff fcf3 	bl	c32e <mbedtls_mpi_cmp_mpi>
    c948:	2800      	cmp	r0, #0
    c94a:	dbeb      	blt.n	c924 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    c94c:	4632      	mov	r2, r6
    c94e:	4621      	mov	r1, r4
    c950:	4620      	mov	r0, r4
    c952:	f7ff fe08 	bl	c566 <mbedtls_mpi_sub_mpi>
    c956:	2800      	cmp	r0, #0
    c958:	d0f2      	beq.n	c940 <mbedtls_mpi_mod_mpi+0x40>
    c95a:	4605      	mov	r5, r0
    c95c:	e7e2      	b.n	c924 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    c95e:	f06f 0509 	mvn.w	r5, #9
    c962:	e7df      	b.n	c924 <mbedtls_mpi_mod_mpi+0x24>

0000c964 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c968:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    c96c:	9009      	str	r0, [sp, #36]	; 0x24
    c96e:	460e      	mov	r6, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c970:	4618      	mov	r0, r3
    c972:	2100      	movs	r1, #0
{
    c974:	461d      	mov	r5, r3
    c976:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c978:	f7ff fd1a 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c97c:	2800      	cmp	r0, #0
    c97e:	dc06      	bgt.n	c98e <mbedtls_mpi_exp_mod+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    c980:	f06f 0403 	mvn.w	r4, #3

    if( prec_RR == NULL || prec_RR->p == NULL )
        mbedtls_mpi_free( &RR );

    return( ret );
}
    c984:	4620      	mov	r0, r4
    c986:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c98e:	68ab      	ldr	r3, [r5, #8]
    c990:	681b      	ldr	r3, [r3, #0]
    c992:	f013 0301 	ands.w	r3, r3, #1
    c996:	9308      	str	r3, [sp, #32]
    c998:	d0f2      	beq.n	c980 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    c99a:	2100      	movs	r1, #0
    c99c:	9805      	ldr	r0, [sp, #20]
    c99e:	f7ff fd07 	bl	c3b0 <mbedtls_mpi_cmp_int>
    c9a2:	2800      	cmp	r0, #0
    c9a4:	dbec      	blt.n	c980 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c9a6:	9805      	ldr	r0, [sp, #20]
    c9a8:	f7ff fc06 	bl	c1b8 <mbedtls_mpi_bitlen>
    c9ac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c9b0:	d8e6      	bhi.n	c980 <mbedtls_mpi_exp_mod+0x1c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    c9b2:	4628      	mov	r0, r5
    c9b4:	f7ff fc00 	bl	c1b8 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c9b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c9bc:	d8e0      	bhi.n	c980 <mbedtls_mpi_exp_mod+0x1c>
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    c9be:	68a8      	ldr	r0, [r5, #8]
    c9c0:	f000 fbd3 	bl	d16a <mbedtls_mpi_core_montmul_init>
    X->n = 0;
    c9c4:	2100      	movs	r1, #0
    c9c6:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
    c9c8:	f44f 7240 	mov.w	r2, #768	; 0x300
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    c9cc:	9003      	str	r0, [sp, #12]
    memset( W, 0, sizeof( W ) );
    c9ce:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    c9d0:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    c9d4:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    c9d8:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    c9dc:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    c9e0:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    c9e4:	9116      	str	r1, [sp, #88]	; 0x58
    c9e6:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    c9e8:	f7fe fe61 	bl	b6ae <memset>
    i = mbedtls_mpi_bitlen( E );
    c9ec:	9805      	ldr	r0, [sp, #20]
    c9ee:	f7ff fbe3 	bl	c1b8 <mbedtls_mpi_bitlen>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c9f2:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    c9f6:	f080 80da 	bcs.w	cbae <mbedtls_mpi_exp_mod+0x24a>
    c9fa:	28ef      	cmp	r0, #239	; 0xef
    c9fc:	f200 80d9 	bhi.w	cbb2 <mbedtls_mpi_exp_mod+0x24e>
    ca00:	284f      	cmp	r0, #79	; 0x4f
    ca02:	f200 80d8 	bhi.w	cbb6 <mbedtls_mpi_exp_mod+0x252>
    ca06:	2818      	cmp	r0, #24
    ca08:	9b08      	ldr	r3, [sp, #32]
    ca0a:	bf28      	it	cs
    ca0c:	2303      	movcs	r3, #3
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    ca0e:	f04f 0801 	mov.w	r8, #1
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    ca12:	9304      	str	r3, [sp, #16]
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    ca14:	9b04      	ldr	r3, [sp, #16]
    mbedtls_mpi_copy( &W[x_index], X );
    ca16:	9909      	ldr	r1, [sp, #36]	; 0x24
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    ca18:	fa08 f703 	lsl.w	r7, r8, r3
    X->n = 0;
    ca1c:	2300      	movs	r3, #0
    mbedtls_mpi_copy( &W[x_index], X );
    ca1e:	a81a      	add	r0, sp, #104	; 0x68
    X->p = NULL;
    ca20:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
    X->s = 1;
    ca24:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    mbedtls_mpi_copy( &W[x_index], X );
    ca28:	f7ff fb68 	bl	c0fc <mbedtls_mpi_copy>
    j = N->n + 1;
    ca2c:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    ca2e:	a81a      	add	r0, sp, #104	; 0x68
    j = N->n + 1;
    ca30:	eb03 0908 	add.w	r9, r3, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    ca34:	4649      	mov	r1, r9
    ca36:	f7ff fb1f 	bl	c078 <mbedtls_mpi_grow>
    ca3a:	4604      	mov	r4, r0
    ca3c:	2800      	cmp	r0, #0
    ca3e:	f040 8180 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    ca42:	4649      	mov	r1, r9
    ca44:	a81d      	add	r0, sp, #116	; 0x74
    ca46:	f7ff fb17 	bl	c078 <mbedtls_mpi_grow>
    ca4a:	4604      	mov	r4, r0
    ca4c:	2800      	cmp	r0, #0
    ca4e:	f040 8178 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    ca52:	fa09 f108 	lsl.w	r1, r9, r8
    ca56:	a80e      	add	r0, sp, #56	; 0x38
    ca58:	f7ff fb0e 	bl	c078 <mbedtls_mpi_grow>
    ca5c:	4604      	mov	r4, r0
    ca5e:	2800      	cmp	r0, #0
    ca60:	f040 816f 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
    neg = ( A->s == -1 );
    ca64:	6833      	ldr	r3, [r6, #0]
    ca66:	9307      	str	r3, [sp, #28]
    if( neg )
    ca68:	3301      	adds	r3, #1
    ca6a:	d10a      	bne.n	ca82 <mbedtls_mpi_exp_mod+0x11e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    ca6c:	4631      	mov	r1, r6
    ca6e:	a814      	add	r0, sp, #80	; 0x50
    ca70:	f7ff fb44 	bl	c0fc <mbedtls_mpi_copy>
    ca74:	4604      	mov	r4, r0
    ca76:	2800      	cmp	r0, #0
    ca78:	f040 8163 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
        Apos.s = 1;
    ca7c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        A = &Apos;
    ca80:	ae14      	add	r6, sp, #80	; 0x50
    if( prec_RR == NULL || prec_RR->p == NULL )
    ca82:	9be4      	ldr	r3, [sp, #912]	; 0x390
    ca84:	b11b      	cbz	r3, ca8e <mbedtls_mpi_exp_mod+0x12a>
    ca86:	689b      	ldr	r3, [r3, #8]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	f040 8096 	bne.w	cbba <mbedtls_mpi_exp_mod+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    ca8e:	2101      	movs	r1, #1
    ca90:	a80b      	add	r0, sp, #44	; 0x2c
    ca92:	f7ff fb67 	bl	c164 <mbedtls_mpi_lset>
    ca96:	4604      	mov	r4, r0
    ca98:	2800      	cmp	r0, #0
    ca9a:	f040 8152 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    ca9e:	6869      	ldr	r1, [r5, #4]
    caa0:	a80b      	add	r0, sp, #44	; 0x2c
    caa2:	0189      	lsls	r1, r1, #6
    caa4:	f7ff fbae 	bl	c204 <mbedtls_mpi_shift_l>
    caa8:	4604      	mov	r4, r0
    caaa:	2800      	cmp	r0, #0
    caac:	f040 8149 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    cab0:	a90b      	add	r1, sp, #44	; 0x2c
    cab2:	462a      	mov	r2, r5
    cab4:	4608      	mov	r0, r1
    cab6:	f7ff ff23 	bl	c900 <mbedtls_mpi_mod_mpi>
    caba:	4604      	mov	r4, r0
    cabc:	2800      	cmp	r0, #0
    cabe:	f040 8140 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
        if( prec_RR != NULL )
    cac2:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cac4:	b123      	cbz	r3, cad0 <mbedtls_mpi_exp_mod+0x16c>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    cac6:	220c      	movs	r2, #12
    cac8:	4618      	mov	r0, r3
    caca:	a90b      	add	r1, sp, #44	; 0x2c
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    cacc:	f7fe fde4 	bl	b698 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    cad0:	4629      	mov	r1, r5
    cad2:	4630      	mov	r0, r6
    cad4:	f7ff fc2b 	bl	c32e <mbedtls_mpi_cmp_mpi>
    cad8:	2800      	cmp	r0, #0
    cada:	db72      	blt.n	cbc2 <mbedtls_mpi_exp_mod+0x25e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    cadc:	462a      	mov	r2, r5
    cade:	4631      	mov	r1, r6
    cae0:	a81d      	add	r0, sp, #116	; 0x74
    cae2:	f7ff ff0d 	bl	c900 <mbedtls_mpi_mod_mpi>
    cae6:	4604      	mov	r4, r0
    cae8:	2800      	cmp	r0, #0
    caea:	f040 812a 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    caee:	6869      	ldr	r1, [r5, #4]
    caf0:	a81d      	add	r0, sp, #116	; 0x74
    caf2:	3101      	adds	r1, #1
    caf4:	f7ff fac0 	bl	c078 <mbedtls_mpi_grow>
    caf8:	4604      	mov	r4, r0
    cafa:	2800      	cmp	r0, #0
    cafc:	f040 8121 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    cb00:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    cb04:	462a      	mov	r2, r5
    cb06:	9b03      	ldr	r3, [sp, #12]
    cb08:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cb0a:	a90b      	add	r1, sp, #44	; 0x2c
    cb0c:	f8cd 8000 	str.w	r8, [sp]
    cb10:	f7ff fa8b 	bl	c02a <mpi_montmul.isra.0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[x_index], &RR ) );
    cb14:	a90b      	add	r1, sp, #44	; 0x2c
    cb16:	a81a      	add	r0, sp, #104	; 0x68
    cb18:	f7ff faf0 	bl	c0fc <mbedtls_mpi_copy>
    cb1c:	4604      	mov	r4, r0
    cb1e:	2800      	cmp	r0, #0
    cb20:	f040 810f 	bne.w	cd42 <mbedtls_mpi_exp_mod+0x3de>
    mbedtls_mpi_uint z = 1;
    cb24:	2301      	movs	r3, #1
    cb26:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    cb28:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cb2c:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    cb2e:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cb30:	9b03      	ldr	r3, [sp, #12]
    cb32:	462a      	mov	r2, r5
    cb34:	981c      	ldr	r0, [sp, #112]	; 0x70
    cb36:	f8cd 8000 	str.w	r8, [sp]
    cb3a:	a917      	add	r1, sp, #92	; 0x5c
    cb3c:	f7ff fa75 	bl	c02a <mpi_montmul.isra.0>
    if( window_bitsize > 1 )
    cb40:	9b04      	ldr	r3, [sp, #16]
    cb42:	2b01      	cmp	r3, #1
    cb44:	d142      	bne.n	cbcc <mbedtls_mpi_exp_mod+0x268>
    size_t exponent_bits_in_window = 0;
    cb46:	2600      	movs	r6, #0
    state   = 0;
    cb48:	46b3      	mov	fp, r6
    nbits   = 0;
    cb4a:	46b1      	mov	r9, r6
    nblimbs = E->n;
    cb4c:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    cb4e:	9606      	str	r6, [sp, #24]
    nblimbs = E->n;
    cb50:	f8d3 a004 	ldr.w	sl, [r3, #4]
        if( bufsize == 0 )
    cb54:	9b06      	ldr	r3, [sp, #24]
    cb56:	b93b      	cbnz	r3, cb68 <mbedtls_mpi_exp_mod+0x204>
            if( nblimbs == 0 )
    cb58:	f1ba 0f00 	cmp.w	sl, #0
    cb5c:	f000 80da 	beq.w	cd14 <mbedtls_mpi_exp_mod+0x3b0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    cb60:	2320      	movs	r3, #32
            nblimbs--;
    cb62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    cb66:	9306      	str	r3, [sp, #24]
        bufsize--;
    cb68:	9b06      	ldr	r3, [sp, #24]
    cb6a:	3b01      	subs	r3, #1
    cb6c:	9306      	str	r3, [sp, #24]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    cb6e:	9b05      	ldr	r3, [sp, #20]
    cb70:	9a06      	ldr	r2, [sp, #24]
    cb72:	689b      	ldr	r3, [r3, #8]
    cb74:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    cb78:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    cb7a:	f013 0301 	ands.w	r3, r3, #1
    cb7e:	d16e      	bne.n	cc5e <mbedtls_mpi_exp_mod+0x2fa>
    cb80:	f1bb 0f00 	cmp.w	fp, #0
    cb84:	d0e6      	beq.n	cb54 <mbedtls_mpi_exp_mod+0x1f0>
        if( ei == 0 && state == 1 )
    cb86:	f1bb 0f01 	cmp.w	fp, #1
    cb8a:	d168      	bne.n	cc5e <mbedtls_mpi_exp_mod+0x2fa>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    cb8c:	463a      	mov	r2, r7
    cb8e:	a91a      	add	r1, sp, #104	; 0x68
    cb90:	a811      	add	r0, sp, #68	; 0x44
    cb92:	f7ff fa31 	bl	bff8 <mpi_select>
    cb96:	2800      	cmp	r0, #0
    cb98:	f040 8102 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cb9c:	462a      	mov	r2, r5
    cb9e:	9b03      	ldr	r3, [sp, #12]
    cba0:	981c      	ldr	r0, [sp, #112]	; 0x70
    cba2:	f8cd 8000 	str.w	r8, [sp]
    cba6:	a911      	add	r1, sp, #68	; 0x44
    cba8:	f7ff fa3f 	bl	c02a <mpi_montmul.isra.0>
            continue;
    cbac:	e7d2      	b.n	cb54 <mbedtls_mpi_exp_mod+0x1f0>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    cbae:	2306      	movs	r3, #6
    cbb0:	e72d      	b.n	ca0e <mbedtls_mpi_exp_mod+0xaa>
    cbb2:	2305      	movs	r3, #5
    cbb4:	e72b      	b.n	ca0e <mbedtls_mpi_exp_mod+0xaa>
    cbb6:	2304      	movs	r3, #4
    cbb8:	e729      	b.n	ca0e <mbedtls_mpi_exp_mod+0xaa>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    cbba:	220c      	movs	r2, #12
    cbbc:	99e4      	ldr	r1, [sp, #912]	; 0x390
    cbbe:	a80b      	add	r0, sp, #44	; 0x2c
    cbc0:	e784      	b.n	cacc <mbedtls_mpi_exp_mod+0x168>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    cbc2:	4631      	mov	r1, r6
    cbc4:	a81d      	add	r0, sp, #116	; 0x74
    cbc6:	f7ff fa99 	bl	c0fc <mbedtls_mpi_copy>
    cbca:	e795      	b.n	caf8 <mbedtls_mpi_exp_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    cbcc:	230c      	movs	r3, #12
        j = w_table_used_size / 2;
    cbce:	ea4f 0957 	mov.w	r9, r7, lsr #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    cbd2:	aa1a      	add	r2, sp, #104	; 0x68
    cbd4:	fb03 2609 	mla	r6, r3, r9, r2
    cbd8:	6869      	ldr	r1, [r5, #4]
    cbda:	4630      	mov	r0, r6
    cbdc:	3101      	adds	r1, #1
    cbde:	f7ff fa4b 	bl	c078 <mbedtls_mpi_grow>
    cbe2:	2800      	cmp	r0, #0
    cbe4:	f040 80dc 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    cbe8:	4630      	mov	r0, r6
    cbea:	a91d      	add	r1, sp, #116	; 0x74
    cbec:	f7ff fa86 	bl	c0fc <mbedtls_mpi_copy>
    cbf0:	2800      	cmp	r0, #0
    cbf2:	f040 80d5 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
        for( i = 0; i < window_bitsize - 1; i++ )
    cbf6:	46a2      	mov	sl, r4
    cbf8:	9b04      	ldr	r3, [sp, #16]
    cbfa:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    cbfe:	f8cd 8000 	str.w	r8, [sp]
    cc02:	462a      	mov	r2, r5
    cc04:	4631      	mov	r1, r6
    cc06:	9b03      	ldr	r3, [sp, #12]
    cc08:	68b0      	ldr	r0, [r6, #8]
        for( i = 0; i < window_bitsize - 1; i++ )
    cc0a:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    cc0e:	f7ff fa0c 	bl	c02a <mpi_montmul.isra.0>
        for( i = 0; i < window_bitsize - 1; i++ )
    cc12:	45da      	cmp	sl, fp
    cc14:	d3f3      	bcc.n	cbfe <mbedtls_mpi_exp_mod+0x29a>
        for( i = j + 1; i < w_table_used_size; i++ )
    cc16:	f109 0901 	add.w	r9, r9, #1
    cc1a:	45b9      	cmp	r9, r7
    cc1c:	d293      	bcs.n	cb46 <mbedtls_mpi_exp_mod+0x1e2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    cc1e:	6869      	ldr	r1, [r5, #4]
    cc20:	f106 0a0c 	add.w	sl, r6, #12
    cc24:	4650      	mov	r0, sl
    cc26:	3101      	adds	r1, #1
    cc28:	f7ff fa26 	bl	c078 <mbedtls_mpi_grow>
    cc2c:	2800      	cmp	r0, #0
    cc2e:	f040 80b7 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    cc32:	4631      	mov	r1, r6
    cc34:	4650      	mov	r0, sl
    cc36:	f7ff fa61 	bl	c0fc <mbedtls_mpi_copy>
    cc3a:	2800      	cmp	r0, #0
    cc3c:	f040 80b0 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    cc40:	f8cd 8000 	str.w	r8, [sp]
    cc44:	6970      	ldr	r0, [r6, #20]
    cc46:	462a      	mov	r2, r5
    cc48:	9b03      	ldr	r3, [sp, #12]
    cc4a:	a91d      	add	r1, sp, #116	; 0x74
    cc4c:	f7ff f9ed 	bl	c02a <mpi_montmul.isra.0>
        for( i = j + 1; i < w_table_used_size; i++ )
    cc50:	4656      	mov	r6, sl
    cc52:	f109 0901 	add.w	r9, r9, #1
    cc56:	e7e0      	b.n	cc1a <mbedtls_mpi_exp_mod+0x2b6>
        state = 2;
    cc58:	f04f 0b02 	mov.w	fp, #2
    cc5c:	e77a      	b.n	cb54 <mbedtls_mpi_exp_mod+0x1f0>
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    cc5e:	9a04      	ldr	r2, [sp, #16]
        nbits++;
    cc60:	f109 0901 	add.w	r9, r9, #1
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    cc64:	eba2 0209 	sub.w	r2, r2, r9
    cc68:	4093      	lsls	r3, r2
    cc6a:	431e      	orrs	r6, r3
        if( nbits == window_bitsize )
    cc6c:	9b04      	ldr	r3, [sp, #16]
    cc6e:	454b      	cmp	r3, r9
    cc70:	d1f2      	bne.n	cc58 <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < window_bitsize; i++ )
    cc72:	f04f 0b00 	mov.w	fp, #0
                MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    cc76:	2300      	movs	r3, #0
    cc78:	463a      	mov	r2, r7
    cc7a:	a91a      	add	r1, sp, #104	; 0x68
    cc7c:	a811      	add	r0, sp, #68	; 0x44
    cc7e:	f7ff f9bb 	bl	bff8 <mpi_select>
    cc82:	2800      	cmp	r0, #0
    cc84:	f040 808c 	bne.w	cda0 <mbedtls_mpi_exp_mod+0x43c>
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cc88:	462a      	mov	r2, r5
    cc8a:	9b03      	ldr	r3, [sp, #12]
    cc8c:	981c      	ldr	r0, [sp, #112]	; 0x70
    cc8e:	f8cd 8000 	str.w	r8, [sp]
    cc92:	a911      	add	r1, sp, #68	; 0x44
            for( i = 0; i < window_bitsize; i++ )
    cc94:	f10b 0b01 	add.w	fp, fp, #1
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cc98:	f7ff f9c7 	bl	c02a <mpi_montmul.isra.0>
            for( i = 0; i < window_bitsize; i++ )
    cc9c:	45d9      	cmp	r9, fp
    cc9e:	d8ea      	bhi.n	cc76 <mbedtls_mpi_exp_mod+0x312>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    cca0:	4633      	mov	r3, r6
    cca2:	463a      	mov	r2, r7
    cca4:	a91a      	add	r1, sp, #104	; 0x68
    cca6:	a811      	add	r0, sp, #68	; 0x44
    cca8:	f7ff f9a6 	bl	bff8 <mpi_select>
    ccac:	4606      	mov	r6, r0
    ccae:	2800      	cmp	r0, #0
    ccb0:	d178      	bne.n	cda4 <mbedtls_mpi_exp_mod+0x440>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    ccb2:	462a      	mov	r2, r5
    ccb4:	9b03      	ldr	r3, [sp, #12]
    ccb6:	981c      	ldr	r0, [sp, #112]	; 0x70
    ccb8:	f8cd 8000 	str.w	r8, [sp]
    ccbc:	a911      	add	r1, sp, #68	; 0x44
    ccbe:	f7ff f9b4 	bl	c02a <mpi_montmul.isra.0>
            nbits = 0;
    ccc2:	46b1      	mov	r9, r6
            state--;
    ccc4:	f8dd b020 	ldr.w	fp, [sp, #32]
    ccc8:	e744      	b.n	cb54 <mbedtls_mpi_exp_mod+0x1f0>
        MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    ccca:	2300      	movs	r3, #0
    cccc:	463a      	mov	r2, r7
    ccce:	a91a      	add	r1, sp, #104	; 0x68
    ccd0:	a811      	add	r0, sp, #68	; 0x44
    ccd2:	f7ff f991 	bl	bff8 <mpi_select>
    ccd6:	2800      	cmp	r0, #0
    ccd8:	d162      	bne.n	cda0 <mbedtls_mpi_exp_mod+0x43c>
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    ccda:	462a      	mov	r2, r5
    ccdc:	9b03      	ldr	r3, [sp, #12]
    ccde:	981c      	ldr	r0, [sp, #112]	; 0x70
    cce0:	f8cd 8000 	str.w	r8, [sp]
    cce4:	a911      	add	r1, sp, #68	; 0x44
        exponent_bits_in_window <<= 1;
    cce6:	0076      	lsls	r6, r6, #1
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cce8:	f7ff f99f 	bl	c02a <mpi_montmul.isra.0>
        if( ( exponent_bits_in_window & ( (size_t) 1 << window_bitsize ) ) != 0 )
    ccec:	4237      	tst	r7, r6
    ccee:	d00f      	beq.n	cd10 <mbedtls_mpi_exp_mod+0x3ac>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    ccf0:	2301      	movs	r3, #1
    ccf2:	463a      	mov	r2, r7
    ccf4:	a91a      	add	r1, sp, #104	; 0x68
    ccf6:	a811      	add	r0, sp, #68	; 0x44
    ccf8:	f7ff f97e 	bl	bff8 <mpi_select>
    ccfc:	2800      	cmp	r0, #0
    ccfe:	d14f      	bne.n	cda0 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    cd00:	462a      	mov	r2, r5
    cd02:	9b03      	ldr	r3, [sp, #12]
    cd04:	981c      	ldr	r0, [sp, #112]	; 0x70
    cd06:	f8cd 8000 	str.w	r8, [sp]
    cd0a:	a911      	add	r1, sp, #68	; 0x44
    cd0c:	f7ff f98d 	bl	c02a <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    cd10:	f10a 0a01 	add.w	sl, sl, #1
    cd14:	45ca      	cmp	sl, r9
    cd16:	d1d8      	bne.n	ccca <mbedtls_mpi_exp_mod+0x366>
    mbedtls_mpi_uint z = 1;
    cd18:	2301      	movs	r3, #1
    cd1a:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    cd1c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cd20:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    cd22:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cd24:	9b03      	ldr	r3, [sp, #12]
    cd26:	462a      	mov	r2, r5
    cd28:	981c      	ldr	r0, [sp, #112]	; 0x70
    cd2a:	f8cd 8000 	str.w	r8, [sp]
    cd2e:	a917      	add	r1, sp, #92	; 0x5c
    cd30:	f7ff f97b 	bl	c02a <mpi_montmul.isra.0>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    cd34:	9b07      	ldr	r3, [sp, #28]
    cd36:	3301      	adds	r3, #1
    cd38:	d020      	beq.n	cd7c <mbedtls_mpi_exp_mod+0x418>
    mbedtls_mpi_copy( X, &W[x_index] );
    cd3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd3c:	a91a      	add	r1, sp, #104	; 0x68
    cd3e:	f7ff f9dd 	bl	c0fc <mbedtls_mpi_copy>
        mbedtls_mpi_free( &W[i] );
    cd42:	260c      	movs	r6, #12
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    cd44:	087d      	lsrs	r5, r7, #1
    cd46:	42bd      	cmp	r5, r7
    cd48:	d32e      	bcc.n	cda8 <mbedtls_mpi_exp_mod+0x444>
    mbedtls_mpi_free( &W[x_index] );
    cd4a:	a81a      	add	r0, sp, #104	; 0x68
    cd4c:	f7ff f982 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &W[1] );
    cd50:	a81d      	add	r0, sp, #116	; 0x74
    cd52:	f7ff f97f 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
    cd56:	a80e      	add	r0, sp, #56	; 0x38
    cd58:	f7ff f97c 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Apos );
    cd5c:	a814      	add	r0, sp, #80	; 0x50
    cd5e:	f7ff f979 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    cd62:	a811      	add	r0, sp, #68	; 0x44
    cd64:	f7ff f976 	bl	c054 <mbedtls_mpi_free>
    if( prec_RR == NULL || prec_RR->p == NULL )
    cd68:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cd6a:	b11b      	cbz	r3, cd74 <mbedtls_mpi_exp_mod+0x410>
    cd6c:	689b      	ldr	r3, [r3, #8]
    cd6e:	2b00      	cmp	r3, #0
    cd70:	f47f ae08 	bne.w	c984 <mbedtls_mpi_exp_mod+0x20>
        mbedtls_mpi_free( &RR );
    cd74:	a80b      	add	r0, sp, #44	; 0x2c
    cd76:	f7ff f96d 	bl	c054 <mbedtls_mpi_free>
    cd7a:	e603      	b.n	c984 <mbedtls_mpi_exp_mod+0x20>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    cd7c:	9b05      	ldr	r3, [sp, #20]
    cd7e:	685b      	ldr	r3, [r3, #4]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d0da      	beq.n	cd3a <mbedtls_mpi_exp_mod+0x3d6>
    cd84:	9b05      	ldr	r3, [sp, #20]
    cd86:	689b      	ldr	r3, [r3, #8]
    cd88:	681b      	ldr	r3, [r3, #0]
    cd8a:	07db      	lsls	r3, r3, #31
    cd8c:	d5d5      	bpl.n	cd3a <mbedtls_mpi_exp_mod+0x3d6>
        W[x_index].s = -1;
    cd8e:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    cd90:	aa1a      	add	r2, sp, #104	; 0x68
    cd92:	4629      	mov	r1, r5
    cd94:	4610      	mov	r0, r2
        W[x_index].s = -1;
    cd96:	931a      	str	r3, [sp, #104]	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    cd98:	f7ff fbe2 	bl	c560 <mbedtls_mpi_add_mpi>
    cd9c:	2800      	cmp	r0, #0
    cd9e:	d0cc      	beq.n	cd3a <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    cda0:	4604      	mov	r4, r0
    cda2:	e7ce      	b.n	cd42 <mbedtls_mpi_exp_mod+0x3de>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    cda4:	4604      	mov	r4, r0
    cda6:	e7cc      	b.n	cd42 <mbedtls_mpi_exp_mod+0x3de>
        mbedtls_mpi_free( &W[i] );
    cda8:	ab1a      	add	r3, sp, #104	; 0x68
    cdaa:	fb06 3005 	mla	r0, r6, r5, r3
    cdae:	f7ff f951 	bl	c054 <mbedtls_mpi_free>
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    cdb2:	3501      	adds	r5, #1
    cdb4:	e7c7      	b.n	cd46 <mbedtls_mpi_exp_mod+0x3e2>

0000cdb6 <mbedtls_mpi_core_clz>:
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
    {
        if( a & mask ) break;
    cdb6:	1e03      	subs	r3, r0, #0
    cdb8:	db0b      	blt.n	cdd2 <mbedtls_mpi_core_clz+0x1c>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    cdba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    cdbe:	2000      	movs	r0, #0
    cdc0:	3001      	adds	r0, #1
    cdc2:	2820      	cmp	r0, #32

        mask >>= 1;
    cdc4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    cdc8:	d100      	bne.n	cdcc <mbedtls_mpi_core_clz+0x16>
    cdca:	4770      	bx	lr
        if( a & mask ) break;
    cdcc:	4213      	tst	r3, r2
    cdce:	d0f7      	beq.n	cdc0 <mbedtls_mpi_core_clz+0xa>
    }

    return( j );
}
    cdd0:	4770      	bx	lr
    for( j = 0; j < biL; j++ )
    cdd2:	2000      	movs	r0, #0
    return( j );
    cdd4:	e7fc      	b.n	cdd0 <mbedtls_mpi_core_clz+0x1a>

0000cdd6 <mbedtls_mpi_core_bitlen>:

size_t mbedtls_mpi_core_bitlen( const mbedtls_mpi_uint *A, size_t A_limbs )
{
    cdd6:	b508      	push	{r3, lr}
    cdd8:	4603      	mov	r3, r0
    size_t i, j;

    if( A_limbs == 0 )
    cdda:	4608      	mov	r0, r1
    cddc:	b141      	cbz	r1, cdf0 <mbedtls_mpi_core_bitlen+0x1a>
        return( 0 );

    for( i = A_limbs - 1; i > 0; i-- )
    cdde:	3901      	subs	r1, #1
    cde0:	b939      	cbnz	r1, cdf2 <mbedtls_mpi_core_bitlen+0x1c>
        if( A[i] != 0 )
            break;

    j = biL - mbedtls_mpi_core_clz( A[i] );
    cde2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    cde6:	f7ff ffe6 	bl	cdb6 <mbedtls_mpi_core_clz>

    return( ( i * biL ) + j );
    cdea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    cdee:	3020      	adds	r0, #32
}
    cdf0:	bd08      	pop	{r3, pc}
        if( A[i] != 0 )
    cdf2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    cdf6:	2a00      	cmp	r2, #0
    cdf8:	d1f3      	bne.n	cde2 <mbedtls_mpi_core_bitlen+0xc>
    for( i = A_limbs - 1; i > 0; i-- )
    cdfa:	3901      	subs	r1, #1
    cdfc:	e7f0      	b.n	cde0 <mbedtls_mpi_core_bitlen+0xa>

0000cdfe <mbedtls_mpi_core_bigendian_to_host>:
    return( mpi_bigendian_to_host_c( a ) );
}

void mbedtls_mpi_core_bigendian_to_host( mbedtls_mpi_uint *A,
                                         size_t A_limbs )
{
    cdfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( A_limbs == 0 )
    ce00:	b131      	cbz	r1, ce10 <mbedtls_mpi_core_bigendian_to_host+0x12>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = A, cur_limb_right = A + ( A_limbs - 1 );
    ce02:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
    ce06:	3b01      	subs	r3, #1
    ce08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         cur_limb_left <= cur_limb_right;
    ce0c:	4283      	cmp	r3, r0
    ce0e:	d201      	bcs.n	ce14 <mbedtls_mpi_core_bigendian_to_host+0x16>
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
        *cur_limb_right = tmp;
    }
}
    ce10:	b002      	add	sp, #8
    ce12:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_bigendian_to_host_c( a ) );
    ce14:	6802      	ldr	r2, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    ce16:	2400      	movs	r4, #0
    ce18:	9201      	str	r2, [sp, #4]
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
    ce1a:	2204      	movs	r2, #4
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce1c:	eb0d 0502 	add.w	r5, sp, r2
    ce20:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    ce22:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce26:	3a01      	subs	r2, #1
    ce28:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    ce2c:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce30:	d1f7      	bne.n	ce22 <mbedtls_mpi_core_bigendian_to_host+0x24>
    return( mpi_bigendian_to_host_c( a ) );
    ce32:	681d      	ldr	r5, [r3, #0]
    ce34:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    ce36:	4615      	mov	r5, r2
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce38:	3201      	adds	r2, #1
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    ce3a:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce3e:	b2d2      	uxtb	r2, r2
    ce40:	2a04      	cmp	r2, #4
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    ce42:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    ce46:	d1f7      	bne.n	ce38 <mbedtls_mpi_core_bigendian_to_host+0x3a>
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
    ce48:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    ce4c:	f843 4904 	str.w	r4, [r3], #-4
         cur_limb_left++, cur_limb_right-- )
    ce50:	e7dc      	b.n	ce0c <mbedtls_mpi_core_bigendian_to_host+0xe>

0000ce52 <mbedtls_mpi_core_cond_assign>:

void mbedtls_mpi_core_cond_assign( mbedtls_mpi_uint *X,
                                   const mbedtls_mpi_uint *A,
                                   size_t limbs,
                                   unsigned char assign )
{
    ce52:	b410      	push	{r4}
    ce54:	4604      	mov	r4, r0
    if( X == A )
    ce56:	428c      	cmp	r4, r1
{
    ce58:	4610      	mov	r0, r2
    if( X == A )
    ce5a:	d004      	beq.n	ce66 <mbedtls_mpi_core_cond_assign+0x14>
        return;

    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    ce5c:	460a      	mov	r2, r1
    ce5e:	4621      	mov	r1, r4
}
    ce60:	bc10      	pop	{r4}
    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    ce62:	f000 b9f3 	b.w	d24c <mbedtls_ct_mpi_uint_cond_assign>
}
    ce66:	bc10      	pop	{r4}
    ce68:	4770      	bx	lr

0000ce6a <mbedtls_mpi_core_read_be>:

int mbedtls_mpi_core_read_be( mbedtls_mpi_uint *X,
                              size_t X_limbs,
                              const unsigned char *input,
                              size_t input_length )
{
    ce6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce6e:	461c      	mov	r4, r3
    const size_t limbs = CHARS_TO_LIMBS( input_length );
    ce70:	f013 0303 	ands.w	r3, r3, #3
    ce74:	bf18      	it	ne
    ce76:	2301      	movne	r3, #1
    ce78:	eb03 0394 	add.w	r3, r3, r4, lsr #2

    if( X_limbs < limbs )
    ce7c:	428b      	cmp	r3, r1
{
    ce7e:	4606      	mov	r6, r0
    ce80:	460d      	mov	r5, r1
    ce82:	4690      	mov	r8, r2
    if( X_limbs < limbs )
    ce84:	d813      	bhi.n	ceae <mbedtls_mpi_core_read_be+0x44>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    /* If X_limbs is 0, input_length must also be 0 (from previous test).
     * Nothing to do. */
    if( X_limbs == 0 )
    ce86:	b179      	cbz	r1, cea8 <mbedtls_mpi_core_read_be+0x3e>
        return( 0 );

    memset( X, 0, X_limbs * ciL );
    ce88:	008f      	lsls	r7, r1, #2
    ce8a:	463a      	mov	r2, r7
    ce8c:	2100      	movs	r1, #0
    ce8e:	f7fe fc0e 	bl	b6ae <memset>

    /* memcpy() with (NULL, 0) is undefined behaviour */
    if( input_length != 0 )
    ce92:	b12c      	cbz	r4, cea0 <mbedtls_mpi_core_read_be+0x36>
    {
        size_t overhead = ( X_limbs * ciL ) - input_length;
    ce94:	1b38      	subs	r0, r7, r4
        unsigned char *Xp = (unsigned char *) X;
        memcpy( Xp + overhead, input, input_length );
    ce96:	4622      	mov	r2, r4
    ce98:	4641      	mov	r1, r8
    ce9a:	4430      	add	r0, r6
    ce9c:	f7fe fbfc 	bl	b698 <memcpy>
    }

    mbedtls_mpi_core_bigendian_to_host( X, X_limbs );
    cea0:	4629      	mov	r1, r5
    cea2:	4630      	mov	r0, r6
    cea4:	f7ff ffab 	bl	cdfe <mbedtls_mpi_core_bigendian_to_host>
        return( 0 );
    cea8:	2000      	movs	r0, #0

    return( 0 );
}
    ceaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    ceae:	f06f 0007 	mvn.w	r0, #7
    ceb2:	e7fa      	b.n	ceaa <mbedtls_mpi_core_read_be+0x40>

0000ceb4 <mbedtls_mpi_core_write_be>:
    size_t bytes_to_copy;
    unsigned char *p;

    stored_bytes = X_limbs * ciL;

    if( stored_bytes < output_length )
    ceb4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
{
    ceb8:	b570      	push	{r4, r5, r6, lr}
    ceba:	4604      	mov	r4, r0
    stored_bytes = X_limbs * ciL;
    cebc:	ea4f 0581 	mov.w	r5, r1, lsl #2
{
    cec0:	4610      	mov	r0, r2
    if( stored_bytes < output_length )
    cec2:	d919      	bls.n	cef8 <mbedtls_mpi_core_write_be+0x44>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = output + output_length - stored_bytes;
    cec4:	1b5a      	subs	r2, r3, r5
    cec6:	1886      	adds	r6, r0, r2
        memset( output, 0, output_length - stored_bytes );
    cec8:	2100      	movs	r1, #0
    ceca:	f7fe fbf0 	bl	b6ae <memset>
        p = output + output_length - stored_bytes;
    cece:	4630      	mov	r0, r6
    ced0:	462b      	mov	r3, r5
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( size_t i = 0; i < bytes_to_copy; i++ )
    ced2:	2100      	movs	r1, #0
    ced4:	18c2      	adds	r2, r0, r3
    ced6:	428b      	cmp	r3, r1
    ced8:	d110      	bne.n	cefc <mbedtls_mpi_core_write_be+0x48>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
    ceda:	2000      	movs	r0, #0
}
    cedc:	bd70      	pop	{r4, r5, r6, pc}
            if( GET_BYTE( X, i ) != 0 )
    cede:	f022 0103 	bic.w	r1, r2, #3
    cee2:	5861      	ldr	r1, [r4, r1]
    cee4:	f002 0603 	and.w	r6, r2, #3
    cee8:	00f6      	lsls	r6, r6, #3
    ceea:	40f1      	lsrs	r1, r6
    ceec:	b2c9      	uxtb	r1, r1
    ceee:	b981      	cbnz	r1, cf12 <mbedtls_mpi_core_write_be+0x5e>
        for( size_t i = bytes_to_copy; i < stored_bytes; i++ )
    cef0:	3201      	adds	r2, #1
    cef2:	42aa      	cmp	r2, r5
    cef4:	d1f3      	bne.n	cede <mbedtls_mpi_core_write_be+0x2a>
    cef6:	e7ec      	b.n	ced2 <mbedtls_mpi_core_write_be+0x1e>
    cef8:	461a      	mov	r2, r3
    cefa:	e7fa      	b.n	cef2 <mbedtls_mpi_core_write_be+0x3e>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    cefc:	f021 0003 	bic.w	r0, r1, #3
    cf00:	5820      	ldr	r0, [r4, r0]
    cf02:	f001 0503 	and.w	r5, r1, #3
    cf06:	00ed      	lsls	r5, r5, #3
    cf08:	40e8      	lsrs	r0, r5
    cf0a:	f802 0d01 	strb.w	r0, [r2, #-1]!
    for( size_t i = 0; i < bytes_to_copy; i++ )
    cf0e:	3101      	adds	r1, #1
    cf10:	e7e1      	b.n	ced6 <mbedtls_mpi_core_write_be+0x22>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    cf12:	f06f 0007 	mvn.w	r0, #7
    cf16:	e7e1      	b.n	cedc <mbedtls_mpi_core_write_be+0x28>

0000cf18 <mbedtls_mpi_core_shift_r>:
                               size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    cf18:	0953      	lsrs	r3, r2, #5
    v1 = count & (biL - 1);

    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    cf1a:	428b      	cmp	r3, r1
{
    cf1c:	b4f0      	push	{r4, r5, r6, r7}
    v1 = count & (biL - 1);
    cf1e:	f002 041f 	and.w	r4, r2, #31
    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    cf22:	d801      	bhi.n	cf28 <mbedtls_mpi_core_shift_r+0x10>
    cf24:	d109      	bne.n	cf3a <mbedtls_mpi_core_shift_r+0x22>
    cf26:	b124      	cbz	r4, cf32 <mbedtls_mpi_core_shift_r+0x1a>
            X[i - 1] >>= v1;
            X[i - 1] |= r0;
            r0 = r1;
        }
    }
}
    cf28:	bcf0      	pop	{r4, r5, r6, r7}
        memset( X, 0, limbs * ciL );
    cf2a:	008a      	lsls	r2, r1, #2
    cf2c:	2100      	movs	r1, #0
    cf2e:	f7fe bbbe 	b.w	b6ae <memset>
    if( v0 > 0 )
    cf32:	2a1f      	cmp	r2, #31
    cf34:	d803      	bhi.n	cf3e <mbedtls_mpi_core_shift_r+0x26>
}
    cf36:	bcf0      	pop	{r4, r5, r6, r7}
    cf38:	4770      	bx	lr
    if( v0 > 0 )
    cf3a:	2a1f      	cmp	r2, #31
    cf3c:	d90a      	bls.n	cf54 <mbedtls_mpi_core_shift_r+0x3c>
    cf3e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    cf42:	1f05      	subs	r5, r0, #4
    cf44:	eb00 0681 	add.w	r6, r0, r1, lsl #2
        for( i = 0; i < limbs - v0; i++ )
    cf48:	42b2      	cmp	r2, r6
    cf4a:	d116      	bne.n	cf7a <mbedtls_mpi_core_shift_r+0x62>
            X[i] = 0;
    cf4c:	2200      	movs	r2, #0
        for( i = 0; i < limbs - v0; i++ )
    cf4e:	1acb      	subs	r3, r1, r3
        for( ; i < limbs; i++ )
    cf50:	428b      	cmp	r3, r1
    cf52:	d317      	bcc.n	cf84 <mbedtls_mpi_core_shift_r+0x6c>
    if( v1 > 0 )
    cf54:	2c00      	cmp	r4, #0
    cf56:	d0ee      	beq.n	cf36 <mbedtls_mpi_core_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    cf58:	2200      	movs	r2, #0
    cf5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            r1 = X[i - 1] << (biL - v1);
    cf5e:	f1c4 0620 	rsb	r6, r4, #32
        for( i = limbs; i > 0; i-- )
    cf62:	4281      	cmp	r1, r0
    cf64:	d0e7      	beq.n	cf36 <mbedtls_mpi_core_shift_r+0x1e>
            r1 = X[i - 1] << (biL - v1);
    cf66:	f851 5c04 	ldr.w	r5, [r1, #-4]
            X[i - 1] >>= v1;
    cf6a:	fa25 f304 	lsr.w	r3, r5, r4
            X[i - 1] |= r0;
    cf6e:	4313      	orrs	r3, r2
    cf70:	f841 3d04 	str.w	r3, [r1, #-4]!
            r0 = r1;
    cf74:	fa05 f206 	lsl.w	r2, r5, r6
    cf78:	e7f3      	b.n	cf62 <mbedtls_mpi_core_shift_r+0x4a>
            X[i] = X[i + v0];
    cf7a:	f852 7b04 	ldr.w	r7, [r2], #4
    cf7e:	f845 7f04 	str.w	r7, [r5, #4]!
        for( i = 0; i < limbs - v0; i++ )
    cf82:	e7e1      	b.n	cf48 <mbedtls_mpi_core_shift_r+0x30>
            X[i] = 0;
    cf84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for( ; i < limbs; i++ )
    cf88:	3301      	adds	r3, #1
    cf8a:	e7e1      	b.n	cf50 <mbedtls_mpi_core_shift_r+0x38>

0000cf8c <mbedtls_mpi_core_add>:

mbedtls_mpi_uint mbedtls_mpi_core_add( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    cf8e:	2400      	movs	r4, #0
{
    cf90:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0;
    cf92:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    cf94:	429c      	cmp	r4, r3
    cf96:	d100      	bne.n	cf9a <mbedtls_mpi_core_add+0xe>
        c += ( t < B[i] );
        X[i] = t;
    }

    return( c );
}
    cf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint t = c + A[i];
    cf9a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        c = ( t < A[i] );
    cf9e:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
    cfa2:	182e      	adds	r6, r5, r0
    cfa4:	bf2c      	ite	cs
    cfa6:	2501      	movcs	r5, #1
    cfa8:	2500      	movcc	r5, #0
        c += ( t < B[i] );
    cfaa:	19bf      	adds	r7, r7, r6
        X[i] = t;
    cfac:	f84c 7024 	str.w	r7, [ip, r4, lsl #2]
        c += ( t < B[i] );
    cfb0:	f145 0000 	adc.w	r0, r5, #0
    for( size_t i = 0; i < limbs; i++ )
    cfb4:	3401      	adds	r4, #1
    cfb6:	e7ed      	b.n	cf94 <mbedtls_mpi_core_add+0x8>

0000cfb8 <mbedtls_mpi_core_sub>:

mbedtls_mpi_uint mbedtls_mpi_core_sub( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    cfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    cfba:	2400      	movs	r4, #0
{
    cfbc:	4606      	mov	r6, r0
    mbedtls_mpi_uint c = 0;
    cfbe:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    cfc0:	429c      	cmp	r4, r3
    cfc2:	d100      	bne.n	cfc6 <mbedtls_mpi_core_sub+0xe>
        c = ( t < B[i] ) + z;
        X[i] = t - B[i];
    }

    return( c );
}
    cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint z = ( A[i] < c );
    cfc6:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
        c = ( t < B[i] ) + z;
    cfca:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
        mbedtls_mpi_uint t = A[i] - c;
    cfce:	ebac 0500 	sub.w	r5, ip, r0
        c = ( t < B[i] ) + z;
    cfd2:	42af      	cmp	r7, r5
    cfd4:	bf94      	ite	ls
    cfd6:	f04f 0e00 	movls.w	lr, #0
    cfda:	f04f 0e01 	movhi.w	lr, #1
        X[i] = t - B[i];
    cfde:	1bed      	subs	r5, r5, r7
    cfe0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        c = ( t < B[i] ) + z;
    cfe4:	4584      	cmp	ip, r0
    cfe6:	bf2c      	ite	cs
    cfe8:	4670      	movcs	r0, lr
    cfea:	f10e 0001 	addcc.w	r0, lr, #1
    for( size_t i = 0; i < limbs; i++ )
    cfee:	3401      	adds	r4, #1
    cff0:	e7e6      	b.n	cfc0 <mbedtls_mpi_core_sub+0x8>

0000cff2 <mbedtls_mpi_core_mla>:
    /*
     * It is a documented precondition of this function that d_len >= s_len.
     * If that's not the case, we swap these round: this turns what would be
     * a buffer overflow into an incorrect result.
     */
    if( d_len < s_len )
    cff2:	428b      	cmp	r3, r1
    cff4:	bf28      	it	cs
    cff6:	460b      	movcs	r3, r1
{
    cff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cffc:	4696      	mov	lr, r2
        s_len = d_len;
    size_t excess_len = d_len - s_len;
    size_t steps_x8 = s_len / 8;
    cffe:	08de      	lsrs	r6, r3, #3
{
    d000:	4604      	mov	r4, r0
    size_t excess_len = d_len - s_len;
    d002:	1ac9      	subs	r1, r1, r3
    size_t steps_x1 = s_len & 7;
    d004:	f003 0807 	and.w	r8, r3, #7

    while( steps_x8-- )
    d008:	4675      	mov	r5, lr
    d00a:	4603      	mov	r3, r0
    size_t steps_x8 = s_len / 8;
    d00c:	46b4      	mov	ip, r6
    mbedtls_mpi_uint c = 0; /* carry */
    d00e:	2000      	movs	r0, #0
{
    d010:	9a08      	ldr	r2, [sp, #32]
    while( steps_x8-- )
    d012:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d016:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    d01a:	f103 0320 	add.w	r3, r3, #32
    d01e:	f105 0520 	add.w	r5, r5, #32
    d022:	d111      	bne.n	d048 <mbedtls_mpi_core_mla+0x56>
    d024:	eb04 1446 	add.w	r4, r4, r6, lsl #5
    d028:	4625      	mov	r5, r4
    d02a:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
    d02e:	ea4f 0c88 	mov.w	ip, r8, lsl #2
    d032:	eb06 0e88 	add.w	lr, r6, r8, lsl #2
        MULADDC_X8_INIT
        MULADDC_X8_CORE
        MULADDC_X8_STOP
    }

    while( steps_x1-- )
    d036:	4576      	cmp	r6, lr
    d038:	f040 8081 	bne.w	d13e <mbedtls_mpi_core_mla+0x14c>
    d03c:	4464      	add	r4, ip
        MULADDC_X1_INIT
        MULADDC_X1_CORE
        MULADDC_X1_STOP
    }

    while( excess_len-- )
    d03e:	3901      	subs	r1, #1
    d040:	f080 808b 	bcs.w	d15a <mbedtls_mpi_core_mla+0x168>
        c = ( *d < c );
        d++;
    }

    return( c );
}
    d044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_X8_CORE
    d048:	f855 7c20 	ldr.w	r7, [r5, #-32]
    d04c:	fba2 9707 	umull	r9, r7, r2, r7
    d050:	eb10 0909 	adds.w	r9, r0, r9
    d054:	f853 0c20 	ldr.w	r0, [r3, #-32]
    d058:	f147 0700 	adc.w	r7, r7, #0
    d05c:	eb10 0009 	adds.w	r0, r0, r9
    d060:	f843 0c20 	str.w	r0, [r3, #-32]
    d064:	f855 0c1c 	ldr.w	r0, [r5, #-28]
    d068:	f147 0700 	adc.w	r7, r7, #0
    d06c:	fba2 0900 	umull	r0, r9, r2, r0
    d070:	183f      	adds	r7, r7, r0
    d072:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    d076:	f149 0900 	adc.w	r9, r9, #0
    d07a:	19c0      	adds	r0, r0, r7
    d07c:	f843 0c1c 	str.w	r0, [r3, #-28]
    d080:	f855 0c18 	ldr.w	r0, [r5, #-24]
    d084:	f149 0900 	adc.w	r9, r9, #0
    d088:	fba2 0700 	umull	r0, r7, r2, r0
    d08c:	eb19 0900 	adds.w	r9, r9, r0
    d090:	f853 0c18 	ldr.w	r0, [r3, #-24]
    d094:	f147 0700 	adc.w	r7, r7, #0
    d098:	eb10 0009 	adds.w	r0, r0, r9
    d09c:	f843 0c18 	str.w	r0, [r3, #-24]
    d0a0:	f855 0c14 	ldr.w	r0, [r5, #-20]
    d0a4:	f147 0700 	adc.w	r7, r7, #0
    d0a8:	fba2 0900 	umull	r0, r9, r2, r0
    d0ac:	183f      	adds	r7, r7, r0
    d0ae:	f853 0c14 	ldr.w	r0, [r3, #-20]
    d0b2:	f149 0900 	adc.w	r9, r9, #0
    d0b6:	19c0      	adds	r0, r0, r7
    d0b8:	f843 0c14 	str.w	r0, [r3, #-20]
    d0bc:	f855 0c10 	ldr.w	r0, [r5, #-16]
    d0c0:	f149 0900 	adc.w	r9, r9, #0
    d0c4:	fba2 0700 	umull	r0, r7, r2, r0
    d0c8:	eb19 0900 	adds.w	r9, r9, r0
    d0cc:	f853 0c10 	ldr.w	r0, [r3, #-16]
    d0d0:	f147 0700 	adc.w	r7, r7, #0
    d0d4:	eb10 0009 	adds.w	r0, r0, r9
    d0d8:	f843 0c10 	str.w	r0, [r3, #-16]
    d0dc:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    d0e0:	f147 0700 	adc.w	r7, r7, #0
    d0e4:	fba2 0900 	umull	r0, r9, r2, r0
    d0e8:	183f      	adds	r7, r7, r0
    d0ea:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    d0ee:	f149 0900 	adc.w	r9, r9, #0
    d0f2:	19c0      	adds	r0, r0, r7
    d0f4:	f843 0c0c 	str.w	r0, [r3, #-12]
    d0f8:	f855 0c08 	ldr.w	r0, [r5, #-8]
    d0fc:	f149 0900 	adc.w	r9, r9, #0
    d100:	fba2 0700 	umull	r0, r7, r2, r0
    d104:	eb19 0900 	adds.w	r9, r9, r0
    d108:	f853 0c08 	ldr.w	r0, [r3, #-8]
    d10c:	f147 0700 	adc.w	r7, r7, #0
    d110:	eb10 0009 	adds.w	r0, r0, r9
    d114:	f843 0c08 	str.w	r0, [r3, #-8]
    d118:	f855 0c04 	ldr.w	r0, [r5, #-4]
    d11c:	f147 0700 	adc.w	r7, r7, #0
    d120:	fba2 0a00 	umull	r0, sl, r2, r0
    d124:	eb17 0900 	adds.w	r9, r7, r0
    d128:	f853 7c04 	ldr.w	r7, [r3, #-4]
    d12c:	f14a 0000 	adc.w	r0, sl, #0
    d130:	eb17 0709 	adds.w	r7, r7, r9
    d134:	f140 0000 	adc.w	r0, r0, #0
    d138:	f843 7c04 	str.w	r7, [r3, #-4]
    d13c:	e769      	b.n	d012 <mbedtls_mpi_core_mla+0x20>
        MULADDC_X1_CORE
    d13e:	f856 3b04 	ldr.w	r3, [r6], #4
    d142:	fba2 3703 	umull	r3, r7, r2, r3
    d146:	18c3      	adds	r3, r0, r3
    d148:	6828      	ldr	r0, [r5, #0]
    d14a:	f147 0700 	adc.w	r7, r7, #0
    d14e:	18c3      	adds	r3, r0, r3
    d150:	f147 0000 	adc.w	r0, r7, #0
    d154:	f845 3b04 	str.w	r3, [r5], #4
    d158:	e76d      	b.n	d036 <mbedtls_mpi_core_mla+0x44>
        *d += c;
    d15a:	6823      	ldr	r3, [r4, #0]
    d15c:	181b      	adds	r3, r3, r0
        c = ( *d < c );
    d15e:	bf2c      	ite	cs
    d160:	2001      	movcs	r0, #1
    d162:	2000      	movcc	r0, #0
        *d += c;
    d164:	f844 3b04 	str.w	r3, [r4], #4
        d++;
    d168:	e769      	b.n	d03e <mbedtls_mpi_core_mla+0x4c>

0000d16a <mbedtls_mpi_core_montmul_init>:
 */
mbedtls_mpi_uint mbedtls_mpi_core_montmul_init( const mbedtls_mpi_uint *N )
{
    mbedtls_mpi_uint x = N[0];

    x += ( ( N[0] + 2 ) & 4 ) << 1;
    d16a:	2303      	movs	r3, #3
    mbedtls_mpi_uint x = N[0];
    d16c:	6801      	ldr	r1, [r0, #0]
    x += ( ( N[0] + 2 ) & 4 ) << 1;
    d16e:	1c88      	adds	r0, r1, #2
    d170:	0040      	lsls	r0, r0, #1
    d172:	f000 0008 	and.w	r0, r0, #8
    d176:	4408      	add	r0, r1

    for( unsigned int i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( N[0] * x ) );
    d178:	fb00 f201 	mul.w	r2, r0, r1
    for( unsigned int i = biL; i >= 8; i /= 2 )
    d17c:	3b01      	subs	r3, #1
        x *= ( 2 - ( N[0] * x ) );
    d17e:	f1c2 0202 	rsb	r2, r2, #2
    d182:	fb02 f000 	mul.w	r0, r2, r0
    for( unsigned int i = biL; i >= 8; i /= 2 )
    d186:	d1f7      	bne.n	d178 <mbedtls_mpi_core_montmul_init+0xe>

    return( ~x + 1 );
}
    d188:	4240      	negs	r0, r0
    d18a:	4770      	bx	lr

0000d18c <mbedtls_mpi_core_montmul>:
                               size_t B_limbs,
                               const mbedtls_mpi_uint *N,
                               size_t AN_limbs,
                               mbedtls_mpi_uint mm,
                               mbedtls_mpi_uint *T )
{
    d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d190:	b087      	sub	sp, #28
    d192:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );

    for( size_t i = 0; i < AN_limbs; i++ )
    d194:	2400      	movs	r4, #0
    d196:	462e      	mov	r6, r5
{
    d198:	9304      	str	r3, [sp, #16]
    d19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d19c:	4691      	mov	r9, r2
    d19e:	9302      	str	r3, [sp, #8]
    d1a0:	e9dd 8311 	ldrd	r8, r3, [sp, #68]	; 0x44
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d1a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
{
    d1a8:	4683      	mov	fp, r0
    d1aa:	468a      	mov	sl, r1
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d1ac:	4628      	mov	r0, r5
    d1ae:	2100      	movs	r1, #0
    d1b0:	3204      	adds	r2, #4
{
    d1b2:	9305      	str	r3, [sp, #20]
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    d1b4:	f7fe fa7b 	bl	b6ae <memset>
    {
        /* T = (T + u0*B + u1*N) / 2^biL */
        mbedtls_mpi_uint u0 = A[i];
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;

        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d1b8:	f108 0302 	add.w	r3, r8, #2
    d1bc:	9303      	str	r3, [sp, #12]
    for( size_t i = 0; i < AN_limbs; i++ )
    d1be:	4544      	cmp	r4, r8
    d1c0:	d113      	bne.n	d1ea <mbedtls_mpi_core_montmul+0x5e>
    d1c2:	eb05 0184 	add.w	r1, r5, r4, lsl #2
     * We also look to see if there was any carry in the final additions in the
     * loop above.
     */

    mbedtls_mpi_uint carry  = T[AN_limbs];
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    d1c6:	4623      	mov	r3, r4
    d1c8:	9a02      	ldr	r2, [sp, #8]
    d1ca:	4658      	mov	r0, fp
    mbedtls_mpi_uint carry  = T[AN_limbs];
    d1cc:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    d1d0:	f7ff fef2 	bl	cfb8 <mbedtls_mpi_core_sub>
     * and (carry, borrow) = (1, 0) can't happen.
     *
     * So the correct return value is already in X if (carry ^ borrow) = 0,
     * but is in (the lower AN_limbs limbs of) T if (carry ^ borrow) = 1.
     */
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    d1d4:	460a      	mov	r2, r1
    d1d6:	ea85 0300 	eor.w	r3, r5, r0
    d1da:	4659      	mov	r1, fp
    d1dc:	4620      	mov	r0, r4
    d1de:	b2db      	uxtb	r3, r3
}
    d1e0:	b007      	add	sp, #28
    d1e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    d1e6:	f000 b831 	b.w	d24c <mbedtls_ct_mpi_uint_cond_assign>
        mbedtls_mpi_uint u0 = A[i];
    d1ea:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d1ee:	f8d9 2000 	ldr.w	r2, [r9]
    d1f2:	6837      	ldr	r7, [r6, #0]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d1f4:	4630      	mov	r0, r6
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d1f6:	fb02 7703 	mla	r7, r2, r3, r7
    d1fa:	9a05      	ldr	r2, [sp, #20]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d1fc:	9903      	ldr	r1, [sp, #12]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    d1fe:	4357      	muls	r7, r2
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    d200:	9300      	str	r3, [sp, #0]
    d202:	464a      	mov	r2, r9
    d204:	9b04      	ldr	r3, [sp, #16]
    d206:	f7ff fef4 	bl	cff2 <mbedtls_mpi_core_mla>
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, N, AN_limbs, u1 );
    d20a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    d20e:	4630      	mov	r0, r6
    d210:	4643      	mov	r3, r8
    d212:	9700      	str	r7, [sp, #0]
    d214:	f7ff feed 	bl	cff2 <mbedtls_mpi_core_mla>
        T++;
    d218:	3604      	adds	r6, #4
    for( size_t i = 0; i < AN_limbs; i++ )
    d21a:	3401      	adds	r4, #1
    d21c:	e7cf      	b.n	d1be <mbedtls_mpi_core_montmul+0x32>

0000d21e <mbedtls_mpi_core_sub_int>:

mbedtls_mpi_uint mbedtls_mpi_core_sub_int( mbedtls_mpi_uint *X,
                                           const mbedtls_mpi_uint *A,
                                           mbedtls_mpi_uint c, /* doubles as carry */
                                           size_t limbs )
{
    d21e:	b530      	push	{r4, r5, lr}
    d220:	4605      	mov	r5, r0
    for( size_t i = 0; i < limbs; i++ )
    d222:	4610      	mov	r0, r2
    d224:	2200      	movs	r2, #0
    d226:	429a      	cmp	r2, r3
    d228:	d100      	bne.n	d22c <mbedtls_mpi_core_sub_int+0xe>
        c = ( t > s );
        X[i] = t;
    }

    return( c );
}
    d22a:	bd30      	pop	{r4, r5, pc}
        mbedtls_mpi_uint t = s - c;
    d22c:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
        c = ( t > s );
    d230:	1a24      	subs	r4, r4, r0
        X[i] = t;
    d232:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        c = ( t > s );
    d236:	bf34      	ite	cc
    d238:	2001      	movcc	r0, #1
    d23a:	2000      	movcs	r0, #0
    for( size_t i = 0; i < limbs; i++ )
    d23c:	3201      	adds	r2, #1
    d23e:	e7f2      	b.n	d226 <mbedtls_mpi_core_sub_int+0x8>

0000d240 <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    d240:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    d242:	4248      	negs	r0, r1
    d244:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    d246:	43c0      	mvns	r0, r0
    d248:	0fc0      	lsrs	r0, r0, #31
    d24a:	4770      	bx	lr

0000d24c <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    d24c:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    d24e:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    d250:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    d252:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d254:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    d256:	4285      	cmp	r5, r0
    d258:	d100      	bne.n	d25c <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    d25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d25c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    d260:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d264:	403e      	ands	r6, r7
    d266:	401c      	ands	r4, r3
    d268:	4334      	orrs	r4, r6
    d26a:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    d26c:	3501      	adds	r5, #1
    d26e:	e7f2      	b.n	d256 <mbedtls_ct_mpi_uint_cond_assign+0xa>

0000d270 <mbedtls_mpi_safe_cond_assign>:
__declspec(noinline)
#endif
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d274:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    mbedtls_mpi_uint limb_mask = mbedtls_ct_mpi_uint_mask( assign );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d276:	6849      	ldr	r1, [r1, #4]
{
    d278:	4605      	mov	r5, r0
    d27a:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d27c:	f7fe fefc 	bl	c078 <mbedtls_mpi_grow>
    d280:	4680      	mov	r8, r0
    d282:	b9c8      	cbnz	r0, d2b8 <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    d284:	f1c9 0600 	rsb	r6, r9, #0
    d288:	ea46 0609 	orr.w	r6, r6, r9
    d28c:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );

    for( size_t i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    d28e:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    d290:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    d292:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    d294:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    d296:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    d298:	405c      	eors	r4, r3
    d29a:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    d29e:	405c      	eors	r4, r3
    d2a0:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    d2a2:	602c      	str	r4, [r5, #0]
    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );
    d2a4:	464b      	mov	r3, r9
    d2a6:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
    d2aa:	68a8      	ldr	r0, [r5, #8]
    d2ac:	f7ff fdd1 	bl	ce52 <mbedtls_mpi_core_cond_assign>
    for( size_t i = Y->n; i < X->n; i++ )
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	686a      	ldr	r2, [r5, #4]
    d2b4:	429a      	cmp	r2, r3
    d2b6:	d802      	bhi.n	d2be <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    d2b8:	4640      	mov	r0, r8
    d2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    d2be:	68a9      	ldr	r1, [r5, #8]
    d2c0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d2c4:	4032      	ands	r2, r6
    d2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( size_t i = Y->n; i < X->n; i++ )
    d2ca:	3301      	adds	r3, #1
    d2cc:	e7f1      	b.n	d2b2 <mbedtls_mpi_safe_cond_assign+0x42>

0000d2ce <platform_calloc_uninit>:
}
    d2ce:	2000      	movs	r0, #0
    d2d0:	4770      	bx	lr

0000d2d2 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    d2d2:	4770      	bx	lr

0000d2d4 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    d2d4:	4770      	bx	lr

0000d2d6 <mbedtls_rsa_import>:
{
    d2d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2da:	4604      	mov	r4, r0
    d2dc:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    d2e0:	4691      	mov	r9, r2
    d2e2:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d2e4:	460d      	mov	r5, r1
    d2e6:	b951      	cbnz	r1, d2fe <mbedtls_rsa_import+0x28>
    d2e8:	f1b9 0f00 	cmp.w	r9, #0
    d2ec:	d110      	bne.n	d310 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d2ee:	f1b8 0f00 	cmp.w	r8, #0
    d2f2:	d115      	bne.n	d320 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d2f4:	b9e7      	cbnz	r7, d330 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d2f6:	bb1e      	cbnz	r6, d340 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    d2f8:	bb55      	cbnz	r5, d350 <mbedtls_rsa_import+0x7a>
    return( 0 );
    d2fa:	2000      	movs	r0, #0
    d2fc:	e006      	b.n	d30c <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d2fe:	3008      	adds	r0, #8
    d300:	f7fe fefc 	bl	c0fc <mbedtls_mpi_copy>
    d304:	2800      	cmp	r0, #0
    d306:	d0ef      	beq.n	d2e8 <mbedtls_rsa_import+0x12>
    d308:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    d30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d310:	4649      	mov	r1, r9
    d312:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d316:	f7fe fef1 	bl	c0fc <mbedtls_mpi_copy>
    d31a:	2800      	cmp	r0, #0
    d31c:	d0e7      	beq.n	d2ee <mbedtls_rsa_import+0x18>
    d31e:	e7f3      	b.n	d308 <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d320:	4641      	mov	r1, r8
    d322:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d326:	f7fe fee9 	bl	c0fc <mbedtls_mpi_copy>
    d32a:	2800      	cmp	r0, #0
    d32c:	d0e2      	beq.n	d2f4 <mbedtls_rsa_import+0x1e>
    d32e:	e7eb      	b.n	d308 <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d330:	4639      	mov	r1, r7
    d332:	f104 0020 	add.w	r0, r4, #32
    d336:	f7fe fee1 	bl	c0fc <mbedtls_mpi_copy>
    d33a:	2800      	cmp	r0, #0
    d33c:	d0db      	beq.n	d2f6 <mbedtls_rsa_import+0x20>
    d33e:	e7e3      	b.n	d308 <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    d340:	4631      	mov	r1, r6
    d342:	f104 0014 	add.w	r0, r4, #20
    d346:	f7fe fed9 	bl	c0fc <mbedtls_mpi_copy>
    d34a:	2800      	cmp	r0, #0
    d34c:	d0d4      	beq.n	d2f8 <mbedtls_rsa_import+0x22>
    d34e:	e7db      	b.n	d308 <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    d350:	f104 0008 	add.w	r0, r4, #8
    d354:	f7fe ff34 	bl	c1c0 <mbedtls_mpi_size>
    d358:	6060      	str	r0, [r4, #4]
    d35a:	e7ce      	b.n	d2fa <mbedtls_rsa_import+0x24>

0000d35c <mbedtls_rsa_init>:
{
    d35c:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d35e:	22ac      	movs	r2, #172	; 0xac
    d360:	2100      	movs	r1, #0
{
    d362:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d364:	f7fe f9a3 	bl	b6ae <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    d368:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    d36a:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    d36e:	bd10      	pop	{r4, pc}

0000d370 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    d370:	b510      	push	{r4, lr}
    if( ctx == NULL )
    d372:	4604      	mov	r4, r0
    d374:	b3a0      	cbz	r0, d3e0 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    d376:	308c      	adds	r0, #140	; 0x8c
    d378:	f7fe fe6c 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    d37c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d380:	f7fe fe68 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    d384:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d388:	f7fe fe64 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    d38c:	f104 0020 	add.w	r0, r4, #32
    d390:	f7fe fe60 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    d394:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d398:	f7fe fe5c 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    d39c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d3a0:	f7fe fe58 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    d3a4:	f104 0014 	add.w	r0, r4, #20
    d3a8:	f7fe fe54 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    d3ac:	f104 0008 	add.w	r0, r4, #8
    d3b0:	f7fe fe50 	bl	c054 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    d3b4:	f104 0080 	add.w	r0, r4, #128	; 0x80
    d3b8:	f7fe fe4c 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    d3bc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    d3c0:	f7fe fe48 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    d3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d3c8:	f7fe fe44 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    d3cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d3d0:	f7fe fe40 	bl	c054 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    d3d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    d3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    d3dc:	f7fe be3a 	b.w	c054 <mbedtls_mpi_free>
}
    d3e0:	bd10      	pop	{r4, pc}

0000d3e2 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    d3e2:	226c      	movs	r2, #108	; 0x6c
    d3e4:	2100      	movs	r1, #0
    d3e6:	f7fe b962 	b.w	b6ae <memset>

0000d3ea <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    d3ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d3ee:	4605      	mov	r5, r0
    d3f0:	460e      	mov	r6, r1
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    d3f2:	4614      	mov	r4, r2
    d3f4:	b3a2      	cbz	r2, d460 <mbedtls_sha256_update+0x76>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    d3f6:	6803      	ldr	r3, [r0, #0]
    d3f8:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = SHA256_BLOCK_SIZE - left;

    ctx->total[0] += (uint32_t) ilen;
    d3fc:	189b      	adds	r3, r3, r2
    d3fe:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    d400:	bf22      	ittt	cs
    d402:	6843      	ldrcs	r3, [r0, #4]
    d404:	3301      	addcs	r3, #1
    d406:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    d408:	b387      	cbz	r7, d46c <mbedtls_sha256_update+0x82>
    fill = SHA256_BLOCK_SIZE - left;
    d40a:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    d40e:	454a      	cmp	r2, r9
    d410:	d31f      	bcc.n	d452 <mbedtls_sha256_update+0x68>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    d412:	f100 0828 	add.w	r8, r0, #40	; 0x28
    d416:	464a      	mov	r2, r9
    d418:	eb08 0007 	add.w	r0, r8, r7
    d41c:	f7fe f93c 	bl	b698 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d420:	4641      	mov	r1, r8
    d422:	4628      	mov	r0, r5
    d424:	f7f9 fc28 	bl	6c78 <mbedtls_internal_sha256_process>
    d428:	b9d8      	cbnz	r0, d462 <mbedtls_sha256_update+0x78>
            return( ret );

        input += fill;
    d42a:	4427      	add	r7, r4
        ilen  -= fill;
    d42c:	f1a7 0440 	sub.w	r4, r7, #64	; 0x40
        left = 0;
    }

    while( ilen >= SHA256_BLOCK_SIZE )
    d430:	2c3f      	cmp	r4, #63	; 0x3f
        input += fill;
    d432:	444e      	add	r6, r9
    while( ilen >= SHA256_BLOCK_SIZE )
    d434:	d90b      	bls.n	d44e <mbedtls_sha256_update+0x64>
    size_t processed = 0;
    d436:	2700      	movs	r7, #0
        if( mbedtls_internal_sha256_process_c( ctx, data ) != 0 )
    d438:	4628      	mov	r0, r5
    d43a:	19f1      	adds	r1, r6, r7
    d43c:	f7f9 fc1c 	bl	6c78 <mbedtls_internal_sha256_process>
    d440:	b988      	cbnz	r0, d466 <mbedtls_sha256_update+0x7c>
        processed += SHA256_BLOCK_SIZE;
    d442:	3740      	adds	r7, #64	; 0x40
    while( len >= SHA256_BLOCK_SIZE )
    d444:	1be3      	subs	r3, r4, r7
    d446:	2b3f      	cmp	r3, #63	; 0x3f
    d448:	d8f6      	bhi.n	d438 <mbedtls_sha256_update+0x4e>
        size_t processed =
                    mbedtls_internal_sha256_process_many( ctx, input, ilen );
        if( processed < SHA256_BLOCK_SIZE )
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );

        input += processed;
    d44a:	461c      	mov	r4, r3
    d44c:	443e      	add	r6, r7
        ilen  -= processed;
    }

    if( ilen > 0 )
    d44e:	b13c      	cbz	r4, d460 <mbedtls_sha256_update+0x76>
    d450:	2700      	movs	r7, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    d452:	f105 0028 	add.w	r0, r5, #40	; 0x28
    d456:	4622      	mov	r2, r4
    d458:	4631      	mov	r1, r6
    d45a:	4438      	add	r0, r7
    d45c:	f7fe f91c 	bl	b698 <memcpy>
        return( 0 );
    d460:	2000      	movs	r0, #0

    return( 0 );
}
    d462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );
    d466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d46a:	e7fa      	b.n	d462 <mbedtls_sha256_update+0x78>
    while( ilen >= SHA256_BLOCK_SIZE )
    d46c:	2a3f      	cmp	r2, #63	; 0x3f
    d46e:	d8e2      	bhi.n	d436 <mbedtls_sha256_update+0x4c>
    d470:	e7ef      	b.n	d452 <mbedtls_sha256_update+0x68>

0000d472 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    d472:	b570      	push	{r4, r5, r6, lr}
    d474:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    d476:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    d478:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    d47a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    d47e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    d482:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    d484:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    d486:	4403      	add	r3, r0
{
    d488:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    d48a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    d48e:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    d492:	d861      	bhi.n	d558 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    d494:	2100      	movs	r1, #0
    d496:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    d49a:	f7fe f908 	bl	b6ae <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    d49e:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    d4a2:	0f5a      	lsrs	r2, r3, #29
    d4a4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    d4a8:	00db      	lsls	r3, r3, #3
    d4aa:	ba12      	rev	r2, r2
    d4ac:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d4ae:	4631      	mov	r1, r6
    d4b0:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    d4b2:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    d4b4:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d4b6:	f7f9 fbdf 	bl	6c78 <mbedtls_internal_sha256_process>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d14b      	bne.n	d556 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    d4be:	7ae3      	ldrb	r3, [r4, #11]
    d4c0:	702b      	strb	r3, [r5, #0]
    d4c2:	8963      	ldrh	r3, [r4, #10]
    d4c4:	706b      	strb	r3, [r5, #1]
    d4c6:	68a3      	ldr	r3, [r4, #8]
    d4c8:	0a1b      	lsrs	r3, r3, #8
    d4ca:	70ab      	strb	r3, [r5, #2]
    d4cc:	68a3      	ldr	r3, [r4, #8]
    d4ce:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    d4d0:	7be3      	ldrb	r3, [r4, #15]
    d4d2:	712b      	strb	r3, [r5, #4]
    d4d4:	89e3      	ldrh	r3, [r4, #14]
    d4d6:	716b      	strb	r3, [r5, #5]
    d4d8:	68e3      	ldr	r3, [r4, #12]
    d4da:	0a1b      	lsrs	r3, r3, #8
    d4dc:	71ab      	strb	r3, [r5, #6]
    d4de:	68e3      	ldr	r3, [r4, #12]
    d4e0:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    d4e2:	7ce3      	ldrb	r3, [r4, #19]
    d4e4:	722b      	strb	r3, [r5, #8]
    d4e6:	8a63      	ldrh	r3, [r4, #18]
    d4e8:	726b      	strb	r3, [r5, #9]
    d4ea:	6923      	ldr	r3, [r4, #16]
    d4ec:	0a1b      	lsrs	r3, r3, #8
    d4ee:	72ab      	strb	r3, [r5, #10]
    d4f0:	6923      	ldr	r3, [r4, #16]
    d4f2:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    d4f4:	7de3      	ldrb	r3, [r4, #23]
    d4f6:	732b      	strb	r3, [r5, #12]
    d4f8:	8ae3      	ldrh	r3, [r4, #22]
    d4fa:	736b      	strb	r3, [r5, #13]
    d4fc:	6963      	ldr	r3, [r4, #20]
    d4fe:	0a1b      	lsrs	r3, r3, #8
    d500:	73ab      	strb	r3, [r5, #14]
    d502:	6963      	ldr	r3, [r4, #20]
    d504:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    d506:	7ee3      	ldrb	r3, [r4, #27]
    d508:	742b      	strb	r3, [r5, #16]
    d50a:	8b63      	ldrh	r3, [r4, #26]
    d50c:	746b      	strb	r3, [r5, #17]
    d50e:	69a3      	ldr	r3, [r4, #24]
    d510:	0a1b      	lsrs	r3, r3, #8
    d512:	74ab      	strb	r3, [r5, #18]
    d514:	69a3      	ldr	r3, [r4, #24]
    d516:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    d518:	7fe3      	ldrb	r3, [r4, #31]
    d51a:	752b      	strb	r3, [r5, #20]
    d51c:	8be3      	ldrh	r3, [r4, #30]
    d51e:	756b      	strb	r3, [r5, #21]
    d520:	69e3      	ldr	r3, [r4, #28]
    d522:	0a1b      	lsrs	r3, r3, #8
    d524:	75ab      	strb	r3, [r5, #22]
    d526:	69e3      	ldr	r3, [r4, #28]
    d528:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    d52a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    d52e:	762b      	strb	r3, [r5, #24]
    d530:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d532:	766b      	strb	r3, [r5, #25]
    d534:	6a23      	ldr	r3, [r4, #32]
    d536:	0a1b      	lsrs	r3, r3, #8
    d538:	76ab      	strb	r3, [r5, #26]
    d53a:	6a23      	ldr	r3, [r4, #32]
    d53c:	76eb      	strb	r3, [r5, #27]

    int truncated = 0;
#if defined(MBEDTLS_SHA224_C)
    truncated = ctx->is224;
#endif
    if( !truncated )
    d53e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d540:	b94b      	cbnz	r3, d556 <mbedtls_sha256_finish+0xe4>
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    d542:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d546:	772b      	strb	r3, [r5, #28]
    d548:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d54a:	776b      	strb	r3, [r5, #29]
    d54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d54e:	0a1b      	lsrs	r3, r3, #8
    d550:	77ab      	strb	r3, [r5, #30]
    d552:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d554:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    d556:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );
    d558:	2100      	movs	r1, #0
    d55a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    d55e:	f7fe f8a6 	bl	b6ae <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d562:	4631      	mov	r1, r6
    d564:	4620      	mov	r0, r4
    d566:	f7f9 fb87 	bl	6c78 <mbedtls_internal_sha256_process>
    d56a:	2800      	cmp	r0, #0
    d56c:	d1f3      	bne.n	d556 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    d56e:	4601      	mov	r1, r0
    d570:	2238      	movs	r2, #56	; 0x38
    d572:	4630      	mov	r0, r6
    d574:	e791      	b.n	d49a <mbedtls_sha256_finish+0x28>

0000d576 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d576:	4700      	bx	r0

0000d578 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    d578:	f000 bfc4 	b.w	e504 <z_impl_k_busy_wait>

0000d57c <clock_stop>:
{
    d57c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    d57e:	2803      	cmp	r0, #3
    d580:	f200 80a7 	bhi.w	d6d2 <clock_stop+0x156>
    d584:	e8df f000 	tbb	[pc, r0]
    d588:	35271902 	.word	0x35271902
    p_reg->INTENCLR = mask;
    d58c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d590:	2202      	movs	r2, #2
    d592:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d596:	2200      	movs	r2, #0
    d598:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d59c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5a0:	2201      	movs	r2, #1
    d5a2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d5a4:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d5a6:	2301      	movs	r3, #1
    d5a8:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    d5ac:	2803      	cmp	r0, #3
    d5ae:	f200 8090 	bhi.w	d6d2 <clock_stop+0x156>
    d5b2:	e8df f000 	tbb	[pc, r0]
    d5b6:	692c      	.short	0x692c
    d5b8:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    d5ba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d5be:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5c0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    d5c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5c6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d5ca:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d5ce:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5d2:	605a      	str	r2, [r3, #4]
    d5d4:	e7e7      	b.n	d5a6 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    d5d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d5da:	f44f 7200 	mov.w	r2, #512	; 0x200
    d5de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5e2:	2200      	movs	r2, #0
    d5e4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d5e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5ec:	2201      	movs	r2, #1
    d5ee:	625a      	str	r2, [r3, #36]	; 0x24
    d5f0:	e7d8      	b.n	d5a4 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    d5f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d5f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    d5fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5fe:	2200      	movs	r2, #0
    d600:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d604:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d608:	2201      	movs	r2, #1
    d60a:	61da      	str	r2, [r3, #28]
    d60c:	e7ca      	b.n	d5a4 <clock_stop+0x28>
    switch (domain)
    d60e:	f242 7510 	movw	r5, #10000	; 0x2710
    d612:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    d616:	b36c      	cbz	r4, d674 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d618:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d61c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    d620:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d622:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d626:	03d9      	lsls	r1, r3, #15
    d628:	d553      	bpl.n	d6d2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d62a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d62e:	2801      	cmp	r0, #1
    d630:	d14f      	bne.n	d6d2 <clock_stop+0x156>
    d632:	f7ff ffa1 	bl	d578 <nrfx_busy_wait>
    d636:	3d01      	subs	r5, #1
    d638:	d1ed      	bne.n	d616 <clock_stop+0x9a>
    d63a:	e04a      	b.n	d6d2 <clock_stop+0x156>
    d63c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d640:	2801      	cmp	r0, #1
    d642:	d146      	bne.n	d6d2 <clock_stop+0x156>
    d644:	f7ff ff98 	bl	d578 <nrfx_busy_wait>
    d648:	3d01      	subs	r5, #1
    d64a:	d152      	bne.n	d6f2 <clock_stop+0x176>
    d64c:	e041      	b.n	d6d2 <clock_stop+0x156>
    d64e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d652:	2801      	cmp	r0, #1
    d654:	d13d      	bne.n	d6d2 <clock_stop+0x156>
    d656:	f7ff ff8f 	bl	d578 <nrfx_busy_wait>
    d65a:	3d01      	subs	r5, #1
    d65c:	d039      	beq.n	d6d2 <clock_stop+0x156>
            if (p_clk_src != NULL)
    d65e:	b1c4      	cbz	r4, d692 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d660:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d664:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d668:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d66a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d66e:	03db      	lsls	r3, r3, #15
    d670:	d52f      	bpl.n	d6d2 <clock_stop+0x156>
    d672:	e7ec      	b.n	d64e <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d674:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d678:	03da      	lsls	r2, r3, #15
    d67a:	d52a      	bpl.n	d6d2 <clock_stop+0x156>
    d67c:	2001      	movs	r0, #1
    d67e:	f7ff ff7b 	bl	d578 <nrfx_busy_wait>
    d682:	3d01      	subs	r5, #1
    d684:	d1f6      	bne.n	d674 <clock_stop+0xf8>
    d686:	e024      	b.n	d6d2 <clock_stop+0x156>
    switch (domain)
    d688:	f242 7510 	movw	r5, #10000	; 0x2710
    d68c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d690:	e7e5      	b.n	d65e <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d692:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d696:	03d8      	lsls	r0, r3, #15
    d698:	d51b      	bpl.n	d6d2 <clock_stop+0x156>
    d69a:	2001      	movs	r0, #1
    d69c:	f7ff ff6c 	bl	d578 <nrfx_busy_wait>
    d6a0:	3d01      	subs	r5, #1
    d6a2:	d1f6      	bne.n	d692 <clock_stop+0x116>
    d6a4:	e015      	b.n	d6d2 <clock_stop+0x156>
    switch (domain)
    d6a6:	f242 7510 	movw	r5, #10000	; 0x2710
    d6aa:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    d6ae:	b194      	cbz	r4, d6d6 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    d6b0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d6b4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d6b8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    d6ba:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d6be:	03d9      	lsls	r1, r3, #15
    d6c0:	d507      	bpl.n	d6d2 <clock_stop+0x156>
    d6c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d6c6:	2801      	cmp	r0, #1
    d6c8:	d103      	bne.n	d6d2 <clock_stop+0x156>
    d6ca:	f7ff ff55 	bl	d578 <nrfx_busy_wait>
    d6ce:	3d01      	subs	r5, #1
    d6d0:	d1ed      	bne.n	d6ae <clock_stop+0x132>
}
    d6d2:	b002      	add	sp, #8
    d6d4:	bd70      	pop	{r4, r5, r6, pc}
    d6d6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d6da:	03da      	lsls	r2, r3, #15
    d6dc:	d5f9      	bpl.n	d6d2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d6de:	2001      	movs	r0, #1
    d6e0:	f7ff ff4a 	bl	d578 <nrfx_busy_wait>
    d6e4:	3d01      	subs	r5, #1
    d6e6:	d1f6      	bne.n	d6d6 <clock_stop+0x15a>
    d6e8:	e7f3      	b.n	d6d2 <clock_stop+0x156>
    switch (domain)
    d6ea:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    d6ee:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    d6f2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    d6f6:	03db      	lsls	r3, r3, #15
    d6f8:	d5eb      	bpl.n	d6d2 <clock_stop+0x156>
    d6fa:	2c00      	cmp	r4, #0
    d6fc:	d19e      	bne.n	d63c <clock_stop+0xc0>
    d6fe:	2001      	movs	r0, #1
    d700:	e7a0      	b.n	d644 <clock_stop+0xc8>

0000d702 <nrfx_clock_start>:
{
    d702:	b508      	push	{r3, lr}
    switch (domain)
    d704:	2803      	cmp	r0, #3
    d706:	d819      	bhi.n	d73c <nrfx_clock_start+0x3a>
    d708:	e8df f000 	tbb	[pc, r0]
    d70c:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d710:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d714:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d718:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    d71c:	03c9      	lsls	r1, r1, #15
    d71e:	d40e      	bmi.n	d73e <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    d720:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d724:	07db      	lsls	r3, r3, #31
    d726:	d513      	bpl.n	d750 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d728:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    d72c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d730:	3b01      	subs	r3, #1
    d732:	2b01      	cmp	r3, #1
    d734:	d809      	bhi.n	d74a <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    d736:	2302      	movs	r3, #2
    d738:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d73c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d73e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d742:	2b02      	cmp	r3, #2
    d744:	d005      	beq.n	d752 <nrfx_clock_start+0x50>
    d746:	2b01      	cmp	r3, #1
    d748:	d002      	beq.n	d750 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d74a:	2000      	movs	r0, #0
    d74c:	f7ff ff16 	bl	d57c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    d750:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    d752:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d756:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d75a:	2300      	movs	r3, #0
    d75c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d760:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    d764:	2302      	movs	r3, #2
    d766:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d76a:	2301      	movs	r3, #1
    d76c:	6093      	str	r3, [r2, #8]
}
    d76e:	e7e5      	b.n	d73c <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d770:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d774:	2200      	movs	r2, #0
    d776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d77a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d77e:	2201      	movs	r2, #1
    d780:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d784:	601a      	str	r2, [r3, #0]
}
    d786:	e7d9      	b.n	d73c <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d788:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d78c:	2200      	movs	r2, #0
    d78e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d792:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    d796:	f44f 7200 	mov.w	r2, #512	; 0x200
    d79a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d79e:	2201      	movs	r2, #1
    d7a0:	621a      	str	r2, [r3, #32]
}
    d7a2:	e7cb      	b.n	d73c <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d7a8:	2200      	movs	r2, #0
    d7aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d7ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    d7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    d7b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d7ba:	2201      	movs	r2, #1
    d7bc:	619a      	str	r2, [r3, #24]
}
    d7be:	e7bd      	b.n	d73c <nrfx_clock_start+0x3a>

0000d7c0 <nrfx_clock_stop>:
    clock_stop(domain);
    d7c0:	f7ff bedc 	b.w	d57c <clock_stop>

0000d7c4 <nrf_gpio_reconfigure>:
{
    d7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d7c6:	4616      	mov	r6, r2
    d7c8:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    d7cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d7ce:	a801      	add	r0, sp, #4
{
    d7d0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d7d2:	f7f9 fc9f 	bl	7114 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d7d6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d7d8:	f1b6 0c00 	subs.w	ip, r6, #0
    d7dc:	bf18      	it	ne
    d7de:	f04f 0c01 	movne.w	ip, #1
    d7e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d7e6:	1e0b      	subs	r3, r1, #0
    d7e8:	bf18      	it	ne
    d7ea:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d7ec:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d7ee:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d7f2:	bf14      	ite	ne
    d7f4:	f04f 0c0c 	movne.w	ip, #12
    d7f8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d7fc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d7fe:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d802:	bf14      	ite	ne
    d804:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    d808:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d80c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d80e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d812:	bf14      	ite	ne
    d814:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    d818:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d81c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d820:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    d824:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d828:	b101      	cbz	r1, d82c <nrf_gpio_reconfigure+0x68>
    d82a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    d82c:	b10e      	cbz	r6, d832 <nrf_gpio_reconfigure+0x6e>
    d82e:	7836      	ldrb	r6, [r6, #0]
    d830:	0076      	lsls	r6, r6, #1
    d832:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    d834:	b10d      	cbz	r5, d83a <nrf_gpio_reconfigure+0x76>
    d836:	782d      	ldrb	r5, [r5, #0]
    d838:	00ad      	lsls	r5, r5, #2
    d83a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    d83c:	b10c      	cbz	r4, d842 <nrf_gpio_reconfigure+0x7e>
    d83e:	7824      	ldrb	r4, [r4, #0]
    d840:	0224      	lsls	r4, r4, #8
    d842:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    d844:	b10f      	cbz	r7, d84a <nrf_gpio_reconfigure+0x86>
    d846:	783f      	ldrb	r7, [r7, #0]
    d848:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d84a:	430c      	orrs	r4, r1
    d84c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    d84e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    d852:	b003      	add	sp, #12
    d854:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d856 <nrf_gpio_cfg_sense_set>:
{
    d856:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d858:	f10d 030f 	add.w	r3, sp, #15
    d85c:	9301      	str	r3, [sp, #4]
    d85e:	2300      	movs	r3, #0
{
    d860:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d864:	461a      	mov	r2, r3
    d866:	4619      	mov	r1, r3
    d868:	9300      	str	r3, [sp, #0]
    d86a:	f7ff ffab 	bl	d7c4 <nrf_gpio_reconfigure>
}
    d86e:	b005      	add	sp, #20
    d870:	f85d fb04 	ldr.w	pc, [sp], #4

0000d874 <partial_word_create>:
    value32 = 0xFFFFFFFF;
    d874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    d878:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
    d87a:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    d87c:	f000 0003 	and.w	r0, r0, #3
    d880:	ab01      	add	r3, sp, #4
    d882:	4403      	add	r3, r0
    d884:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
    d886:	4291      	cmp	r1, r2
    d888:	d102      	bne.n	d890 <partial_word_create+0x1c>
}
    d88a:	9801      	ldr	r0, [sp, #4]
    d88c:	b002      	add	sp, #8
    d88e:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    d890:	f811 0b01 	ldrb.w	r0, [r1], #1
    d894:	f803 0b01 	strb.w	r0, [r3], #1
    for (uint32_t i = 0; i < bytes_count; i++)
    d898:	e7f5      	b.n	d886 <partial_word_create+0x12>

0000d89a <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    d89a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d89e:	4770      	bx	lr

0000d8a0 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    d8a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d8a4:	4770      	bx	lr

0000d8a6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    d8a6:	f44f 7080 	mov.w	r0, #256	; 0x100
    d8aa:	4770      	bx	lr

0000d8ac <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    d8ac:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    d8ae:	f7fa f85b 	bl	7968 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    d8b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    d8b6:	f7f9 bbd5 	b.w	7064 <nrfx_clock_irq_handler>

0000d8ba <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    d8ba:	2100      	movs	r1, #0
    d8bc:	f7fa b934 	b.w	7b28 <nrf_gpio_cfg.constprop.0>

0000d8c0 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    d8c0:	2302      	movs	r3, #2
    d8c2:	f7fa b889 	b.w	79d8 <qspi_xfer>

0000d8c6 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    d8c6:	2303      	movs	r3, #3
    d8c8:	f7fa b886 	b.w	79d8 <qspi_xfer>

0000d8cc <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    d8cc:	2100      	movs	r1, #0
    d8ce:	2002      	movs	r0, #2
    d8d0:	f7fa bb3c 	b.w	7f4c <nrfx_qspi_erase>

0000d8d4 <nrfx_usbd_consumer>:
{
    d8d4:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    d8d6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    d8d8:	429c      	cmp	r4, r3
    d8da:	d209      	bcs.n	d8f0 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    d8dc:	2500      	movs	r5, #0
    d8de:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d8e0:	6809      	ldr	r1, [r1, #0]
    d8e2:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    d8e4:	429a      	cmp	r2, r3
    d8e6:	d10c      	bne.n	d902 <nrfx_usbd_consumer+0x2e>
    d8e8:	1e20      	subs	r0, r4, #0
    d8ea:	bf18      	it	ne
    d8ec:	2001      	movne	r0, #1
}
    d8ee:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    d8f0:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d8f2:	680d      	ldr	r5, [r1, #0]
        size -= data_size;
    d8f4:	1ae4      	subs	r4, r4, r3
        p_next->p_data = p_transfer->p_data;
    d8f6:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    d8f8:	6808      	ldr	r0, [r1, #0]
        p_transfer->size = size;
    d8fa:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    d8fc:	4418      	add	r0, r3
    d8fe:	6008      	str	r0, [r1, #0]
    d900:	e7f0      	b.n	d8e4 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    d902:	2000      	movs	r0, #0
    d904:	e7f3      	b.n	d8ee <nrfx_usbd_consumer+0x1a>

0000d906 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    d906:	684b      	ldr	r3, [r1, #4]
    d908:	429a      	cmp	r2, r3
    d90a:	bf28      	it	cs
    d90c:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    d90e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d910:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d914:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d916:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    d918:	1a80      	subs	r0, r0, r2
    d91a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d91c:	4413      	add	r3, r2
}
    d91e:	3800      	subs	r0, #0
    d920:	bf18      	it	ne
    d922:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    d924:	600b      	str	r3, [r1, #0]
}
    d926:	4770      	bx	lr

0000d928 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    d928:	684b      	ldr	r3, [r1, #4]
    d92a:	429a      	cmp	r2, r3
    d92c:	bf28      	it	cs
    d92e:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d930:	b16a      	cbz	r2, d94e <nrfx_usbd_feeder_ram_zlp+0x26>
    d932:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d934:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d938:	684b      	ldr	r3, [r1, #4]
}
    d93a:	1e10      	subs	r0, r2, #0
    p_transfer->size -= tx_size;
    d93c:	eba3 0302 	sub.w	r3, r3, r2
    d940:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d942:	680b      	ldr	r3, [r1, #0]
}
    d944:	bf18      	it	ne
    d946:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    d948:	4413      	add	r3, r2
    d94a:	600b      	str	r3, [r1, #0]
}
    d94c:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d94e:	4613      	mov	r3, r2
    d950:	e7f0      	b.n	d934 <nrfx_usbd_feeder_ram_zlp+0xc>

0000d952 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    d952:	43c3      	mvns	r3, r0
    d954:	f000 000f 	and.w	r0, r0, #15
    d958:	f3c3 13c0 	ubfx	r3, r3, #7, #1
}
    d95c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    d960:	4770      	bx	lr

0000d962 <ev_started_handler>:
}
    d962:	4770      	bx	lr

0000d964 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    d964:	2087      	movs	r0, #135	; 0x87
    d966:	f7fa bc1f 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d96a <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    d96a:	2086      	movs	r0, #134	; 0x86
    d96c:	f7fa bc1c 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d970 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    d970:	2085      	movs	r0, #133	; 0x85
    d972:	f7fa bc19 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d976 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    d976:	2084      	movs	r0, #132	; 0x84
    d978:	f7fa bc16 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d97c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    d97c:	2083      	movs	r0, #131	; 0x83
    d97e:	f7fa bc13 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d982 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    d982:	2082      	movs	r0, #130	; 0x82
    d984:	f7fa bc10 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d988 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    d988:	2081      	movs	r0, #129	; 0x81
    d98a:	f7fa bc0d 	b.w	81a8 <nrf_usbd_epin_dma_handler>

0000d98e <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    d98e:	f7fa bc27 	b.w	81e0 <nrf_usbd_ep0in_dma_handler>

0000d992 <nrfx_usbd_ep_max_packet_size_set>:
{
    d992:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    d994:	f7fa fb40 	bl	8018 <ep_state_access>
    p_state->max_packet_size = size;
    d998:	8181      	strh	r1, [r0, #12]
}
    d99a:	bd08      	pop	{r3, pc}

0000d99c <nrfx_usbd_ep_status_get>:
{
    d99c:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    d99e:	f7fa fb3b 	bl	8018 <ep_state_access>
	__asm__ volatile(
    d9a2:	f04f 0220 	mov.w	r2, #32
    d9a6:	f3ef 8311 	mrs	r3, BASEPRI
    d9aa:	f382 8812 	msr	BASEPRI_MAX, r2
    d9ae:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    d9b2:	6882      	ldr	r2, [r0, #8]
    d9b4:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d9b6:	6802      	ldr	r2, [r0, #0]
    d9b8:	b92a      	cbnz	r2, d9c6 <nrfx_usbd_ep_status_get+0x2a>
    d9ba:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    d9bc:	f383 8811 	msr	BASEPRI, r3
    d9c0:	f3bf 8f6f 	isb	sy
}
    d9c4:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d9c6:	2004      	movs	r0, #4
    d9c8:	e7f8      	b.n	d9bc <nrfx_usbd_ep_status_get+0x20>

0000d9ca <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    d9ca:	2007      	movs	r0, #7
    d9cc:	f7fa bf02 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9d0 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    d9d0:	2006      	movs	r0, #6
    d9d2:	f7fa beff 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9d6 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    d9d6:	2005      	movs	r0, #5
    d9d8:	f7fa befc 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9dc <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    d9dc:	2004      	movs	r0, #4
    d9de:	f7fa bef9 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9e2 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    d9e2:	2003      	movs	r0, #3
    d9e4:	f7fa bef6 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9e8 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    d9e8:	2002      	movs	r0, #2
    d9ea:	f7fa bef3 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9ee <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    d9ee:	2001      	movs	r0, #1
    d9f0:	f7fa bef0 	b.w	87d4 <nrf_usbd_epout_dma_handler>

0000d9f4 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    d9f4:	f7fa bfea 	b.w	89cc <usbd_ep_abort>

0000d9f8 <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
    d9f8:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    d9fa:	6943      	ldr	r3, [r0, #20]
{
    d9fc:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    d9fe:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    da02:	4291      	cmp	r1, r2
{
    da04:	4604      	mov	r4, r0
    da06:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    da0a:	d302      	bcc.n	da12 <zcbor_new_backup+0x1a>
    da0c:	2201      	movs	r2, #1
    da0e:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    da10:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    da12:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    da14:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    da16:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    da18:	3201      	adds	r2, #1
    da1a:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    da1c:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    da1e:	6963      	ldr	r3, [r4, #20]
    da20:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    da22:	681b      	ldr	r3, [r3, #0]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    da24:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    da26:	fb02 3000 	mla	r0, r2, r0, r3
    da2a:	f7fd fe35 	bl	b698 <memcpy>
	return true;
    da2e:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    da30:	60a5      	str	r5, [r4, #8]
	return true;
    da32:	e7ed      	b.n	da10 <zcbor_new_backup+0x18>

0000da34 <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    da34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da38:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    da3a:	6942      	ldr	r2, [r0, #20]
{
    da3c:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    da3e:	6853      	ldr	r3, [r2, #4]
{
    da40:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    da42:	6807      	ldr	r7, [r0, #0]
	const uint_fast32_t elem_count = state->elem_count;
    da44:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    da48:	b923      	cbnz	r3, da54 <zcbor_process_backup+0x20>
    da4a:	2302      	movs	r3, #2
    da4c:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    da4e:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    da54:	07e9      	lsls	r1, r5, #31
    da56:	d50d      	bpl.n	da74 <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    da58:	6811      	ldr	r1, [r2, #0]
    da5a:	2218      	movs	r2, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    da5c:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    da5e:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    da60:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    da64:	d402      	bmi.n	da6c <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    da66:	7c4b      	ldrb	r3, [r1, #17]
    da68:	2b00      	cmp	r3, #0
    da6a:	d1f0      	bne.n	da4e <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    da6c:	2218      	movs	r2, #24
    da6e:	4620      	mov	r0, r4
    da70:	f7fd fe12 	bl	b698 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    da74:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    da76:	bf41      	itttt	mi
    da78:	6962      	ldrmi	r2, [r4, #20]
    da7a:	6853      	ldrmi	r3, [r2, #4]
    da7c:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    da80:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    da82:	45b0      	cmp	r8, r6
    da84:	d905      	bls.n	da92 <zcbor_process_backup+0x5e>
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    da86:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    da88:	2b00      	cmp	r3, #0
    da8a:	d0e0      	beq.n	da4e <zcbor_process_backup+0x1a>
			state->constant_state->error = err;
    da8c:	2204      	movs	r2, #4
    da8e:	60da      	str	r2, [r3, #12]
    da90:	e7dd      	b.n	da4e <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    da92:	076b      	lsls	r3, r5, #29
    da94:	d401      	bmi.n	da9a <zcbor_process_backup+0x66>
	return true;
    da96:	2001      	movs	r0, #1
    da98:	e7da      	b.n	da50 <zcbor_process_backup+0x1c>
		state->payload = payload;
    da9a:	6027      	str	r7, [r4, #0]
    da9c:	e7fb      	b.n	da96 <zcbor_process_backup+0x62>

0000da9e <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    da9e:	6881      	ldr	r1, [r0, #8]
    daa0:	f7ff bfaa 	b.w	d9f8 <zcbor_new_backup>

0000daa4 <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    daa4:	2101      	movs	r1, #1
    daa6:	6882      	ldr	r2, [r0, #8]
    daa8:	f7ff bfc4 	b.w	da34 <zcbor_process_backup>

0000daac <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    daac:	2102      	movs	r1, #2
    daae:	6882      	ldr	r2, [r0, #8]
    dab0:	f7ff bfc0 	b.w	da34 <zcbor_process_backup>

0000dab4 <zcbor_new_state>:
	return true;
}

void zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    dab4:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    dab6:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    dab8:	441a      	add	r2, r3
    daba:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
	state_array[0].indefinite_length_array = false;
    dabc:	2200      	movs	r2, #0
	state_array[0].elem_count = elem_count;
    dabe:	9b02      	ldr	r3, [sp, #8]
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    dac0:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
    dac2:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    dac4:	8202      	strh	r2, [r0, #16]
	if(n_states < 2) {
    dac6:	d801      	bhi.n	dacc <zcbor_new_state+0x18>
	state_array[0].constant_state = NULL;
    dac8:	6142      	str	r2, [r0, #20]
	state_array[0].constant_state->stop_on_error = false;
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
}
    daca:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    dacc:	2318      	movs	r3, #24
    dace:	434b      	muls	r3, r1
    dad0:	3b18      	subs	r3, #24
    dad2:	18c4      	adds	r4, r0, r3
    dad4:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
    dad6:	50c2      	str	r2, [r0, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    dad8:	6943      	ldr	r3, [r0, #20]
    dada:	1e8c      	subs	r4, r1, #2
    dadc:	609c      	str	r4, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    dade:	6943      	ldr	r3, [r0, #20]
	if (n_states > 2) {
    dae0:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    dae2:	605a      	str	r2, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    dae4:	6943      	ldr	r3, [r0, #20]
    dae6:	60da      	str	r2, [r3, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
    dae8:	bf1e      	ittt	ne
    daea:	6943      	ldrne	r3, [r0, #20]
    daec:	3018      	addne	r0, #24
    daee:	6018      	strne	r0, [r3, #0]
    daf0:	e7eb      	b.n	daca <zcbor_new_state+0x16>

0000daf2 <zcbor_error.isra.0>:
		if (state->constant_state) {
    daf2:	b100      	cbz	r0, daf6 <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
    daf4:	60c1      	str	r1, [r0, #12]
		}
	}
}
    daf6:	4770      	bx	lr

0000daf8 <initial_checks>:
		ZCBOR_ERR(err); \
	} \
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
    daf8:	b508      	push	{r3, lr}
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    dafa:	6802      	ldr	r2, [r0, #0]
    dafc:	68c3      	ldr	r3, [r0, #12]
    dafe:	429a      	cmp	r2, r3
    db00:	d305      	bcc.n	db0e <initial_checks+0x16>
    db02:	6940      	ldr	r0, [r0, #20]
    db04:	2108      	movs	r1, #8
    db06:	f7ff fff4 	bl	daf2 <zcbor_error.isra.0>
    db0a:	2000      	movs	r0, #0
	return true;
}
    db0c:	bd08      	pop	{r3, pc}
	return true;
    db0e:	2001      	movs	r0, #1
    db10:	e7fc      	b.n	db0c <initial_checks+0x14>

0000db12 <type_check>:

static bool type_check(zcbor_state_t *state, zcbor_major_type_t exp_major_type)
{
    db12:	b538      	push	{r3, r4, r5, lr}
    db14:	4604      	mov	r4, r0
    db16:	460d      	mov	r5, r1
	if (!initial_checks(state)) {
    db18:	f7ff ffee 	bl	daf8 <initial_checks>
    db1c:	b140      	cbz	r0, db30 <type_check+0x1e>
		ZCBOR_FAIL();
	}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    db1e:	6823      	ldr	r3, [r4, #0]
    db20:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    db22:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
    db26:	d004      	beq.n	db32 <type_check+0x20>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    db28:	210a      	movs	r1, #10
    db2a:	6960      	ldr	r0, [r4, #20]
    db2c:	f7ff ffe1 	bl	daf2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    db30:	2000      	movs	r0, #0
	}
	return true;
}
    db32:	bd38      	pop	{r3, r4, r5, pc}

0000db34 <list_map_end_decode>:
	return true;
}


static bool list_map_end_decode(zcbor_state_t *state)
{
    db34:	b510      	push	{r4, lr}
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    db36:	7c02      	ldrb	r2, [r0, #16]
{
    db38:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    db3a:	b192      	cbz	r2, db62 <list_map_end_decode+0x2e>
	INITIAL_CHECKS();
    db3c:	f7ff ffdc 	bl	daf8 <initial_checks>
    db40:	b138      	cbz	r0, db52 <list_map_end_decode+0x1e>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    db42:	6823      	ldr	r3, [r4, #0]
    db44:	781a      	ldrb	r2, [r3, #0]
    db46:	2aff      	cmp	r2, #255	; 0xff
    db48:	d005      	beq.n	db56 <list_map_end_decode+0x22>
    db4a:	210a      	movs	r1, #10
    db4c:	6960      	ldr	r0, [r4, #20]
    db4e:	f7ff ffd0 	bl	daf2 <zcbor_error.isra.0>
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    db52:	2000      	movs	r0, #0
    db54:	bd10      	pop	{r4, pc}
	state->payload++;
    db56:	3301      	adds	r3, #1
    db58:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    db5a:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    db5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state->indefinite_length_array = false;
    db60:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    db62:	4620      	mov	r0, r4
}
    db64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    db68:	2107      	movs	r1, #7
    db6a:	f7ff bf63 	b.w	da34 <zcbor_process_backup>

0000db6e <value_extract>:
{
    db6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db72:	4604      	mov	r4, r0
    db74:	460d      	mov	r5, r1
    db76:	4617      	mov	r7, r2
	INITIAL_CHECKS();
    db78:	f7ff ffbe 	bl	daf8 <initial_checks>
    db7c:	4680      	mov	r8, r0
    db7e:	b128      	cbz	r0, db8c <value_extract+0x1e>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    db80:	68a3      	ldr	r3, [r4, #8]
    db82:	b943      	cbnz	r3, db96 <value_extract+0x28>
    db84:	2103      	movs	r1, #3
    db86:	6960      	ldr	r0, [r4, #20]
    db88:	f7ff ffb3 	bl	daf2 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    db8c:	f04f 0800 	mov.w	r8, #0
}
    db90:	4640      	mov	r0, r8
    db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    db96:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    db98:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    db9a:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    db9c:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    db9e:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    dba0:	2100      	movs	r1, #0
    dba2:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    dba4:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    dba8:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    dbaa:	f7fd fd80 	bl	b6ae <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    dbae:	2e17      	cmp	r6, #23
    dbb0:	d804      	bhi.n	dbbc <value_extract+0x4e>
		u8_result[0] = additional;
    dbb2:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    dbb4:	68a3      	ldr	r3, [r4, #8]
    dbb6:	3b01      	subs	r3, #1
    dbb8:	60a3      	str	r3, [r4, #8]
	return true;
    dbba:	e7e9      	b.n	db90 <value_extract+0x22>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    dbbc:	3e18      	subs	r6, #24
    dbbe:	b2f2      	uxtb	r2, r6
    dbc0:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    dbc2:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    dbc4:	d807      	bhi.n	dbd6 <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    dbc6:	2101      	movs	r1, #1
    dbc8:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    dbca:	428f      	cmp	r7, r1
    dbcc:	d207      	bcs.n	dbde <value_extract+0x70>
    dbce:	3b01      	subs	r3, #1
    dbd0:	2105      	movs	r1, #5
    dbd2:	6023      	str	r3, [r4, #0]
    dbd4:	e7d7      	b.n	db86 <value_extract+0x18>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    dbd6:	3b01      	subs	r3, #1
    dbd8:	2107      	movs	r1, #7
    dbda:	6023      	str	r3, [r4, #0]
    dbdc:	e7d3      	b.n	db86 <value_extract+0x18>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    dbde:	68e0      	ldr	r0, [r4, #12]
    dbe0:	185a      	adds	r2, r3, r1
    dbe2:	4290      	cmp	r0, r2
    dbe4:	d203      	bcs.n	dbee <value_extract+0x80>
    dbe6:	3b01      	subs	r3, #1
    dbe8:	2108      	movs	r1, #8
    dbea:	6023      	str	r3, [r4, #0]
    dbec:	e7cb      	b.n	db86 <value_extract+0x18>
    dbee:	1e4b      	subs	r3, r1, #1
    dbf0:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    dbf2:	6822      	ldr	r2, [r4, #0]
    dbf4:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    dbf6:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    dbf8:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    dbfc:	d2f9      	bcs.n	dbf2 <value_extract+0x84>
		(state->payload) += len;
    dbfe:	6823      	ldr	r3, [r4, #0]
    dc00:	440b      	add	r3, r1
    dc02:	6023      	str	r3, [r4, #0]
    dc04:	e7d6      	b.n	dbb4 <value_extract+0x46>

0000dc06 <str_start_decode>:
{
    dc06:	b538      	push	{r3, r4, r5, lr}
    dc08:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    dc0a:	4611      	mov	r1, r2
{
    dc0c:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    dc0e:	f7ff ff80 	bl	db12 <type_check>
    dc12:	b908      	cbnz	r0, dc18 <str_start_decode+0x12>
    dc14:	2000      	movs	r0, #0
}
    dc16:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    dc18:	2204      	movs	r2, #4
    dc1a:	4628      	mov	r0, r5
    dc1c:	18a1      	adds	r1, r4, r2
    dc1e:	f7ff ffa6 	bl	db6e <value_extract>
    dc22:	2800      	cmp	r0, #0
    dc24:	d0f6      	beq.n	dc14 <str_start_decode+0xe>
	result->value = state->payload;
    dc26:	682b      	ldr	r3, [r5, #0]
    dc28:	6023      	str	r3, [r4, #0]
	return true;
    dc2a:	e7f4      	b.n	dc16 <str_start_decode+0x10>

0000dc2c <list_map_start_decode>:
{
    dc2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dc2e:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    dc30:	f7ff ff6f 	bl	db12 <type_check>
    dc34:	4605      	mov	r5, r0
    dc36:	b170      	cbz	r0, dc56 <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    dc38:	6822      	ldr	r2, [r4, #0]
    dc3a:	7813      	ldrb	r3, [r2, #0]
    dc3c:	f003 031f 	and.w	r3, r3, #31
    dc40:	2b1f      	cmp	r3, #31
    dc42:	d11a      	bne.n	dc7a <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    dc44:	f06f 0310 	mvn.w	r3, #16
    dc48:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    dc4a:	68a3      	ldr	r3, [r4, #8]
    dc4c:	b933      	cbnz	r3, dc5c <list_map_start_decode+0x30>
    dc4e:	2103      	movs	r1, #3
    dc50:	6960      	ldr	r0, [r4, #20]
    dc52:	f7ff ff4e 	bl	daf2 <zcbor_error.isra.0>
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    dc56:	2000      	movs	r0, #0
}
    dc58:	b003      	add	sp, #12
    dc5a:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    dc5c:	3201      	adds	r2, #1
		state->elem_count--;
    dc5e:	3b01      	subs	r3, #1
		state->payload++;
    dc60:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    dc62:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    dc64:	4620      	mov	r0, r4
    dc66:	9901      	ldr	r1, [sp, #4]
    dc68:	f7ff fec6 	bl	d9f8 <zcbor_new_backup>
    dc6c:	b978      	cbnz	r0, dc8e <list_map_start_decode+0x62>
		FAIL_RESTORE();
    dc6e:	6863      	ldr	r3, [r4, #4]
    dc70:	6023      	str	r3, [r4, #0]
    dc72:	68a3      	ldr	r3, [r4, #8]
    dc74:	3301      	adds	r3, #1
    dc76:	60a3      	str	r3, [r4, #8]
    dc78:	e7ed      	b.n	dc56 <list_map_start_decode+0x2a>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    dc7a:	2204      	movs	r2, #4
    dc7c:	4620      	mov	r0, r4
    dc7e:	eb0d 0102 	add.w	r1, sp, r2
    dc82:	f7ff ff74 	bl	db6e <value_extract>
    dc86:	2800      	cmp	r0, #0
    dc88:	d0e5      	beq.n	dc56 <list_map_start_decode+0x2a>
	bool indefinite_length_array = false;
    dc8a:	2500      	movs	r5, #0
    dc8c:	e7ea      	b.n	dc64 <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
    dc8e:	7425      	strb	r5, [r4, #16]
	return true;
    dc90:	e7e2      	b.n	dc58 <list_map_start_decode+0x2c>

0000dc92 <str_decode>:
{
    dc92:	b538      	push	{r3, r4, r5, lr}
    dc94:	4604      	mov	r4, r0
    dc96:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    dc98:	f7ff ffb5 	bl	dc06 <str_start_decode>
    dc9c:	b188      	cbz	r0, dcc2 <str_decode+0x30>
	if (result->len > (state->payload_end - state->payload)) {
    dc9e:	6823      	ldr	r3, [r4, #0]
    dca0:	68e2      	ldr	r2, [r4, #12]
    dca2:	6869      	ldr	r1, [r5, #4]
    dca4:	1ad2      	subs	r2, r2, r3
    dca6:	4291      	cmp	r1, r2
    dca8:	d802      	bhi.n	dcb0 <str_decode+0x1e>
	state->payload += result->len;
    dcaa:	440b      	add	r3, r1
    dcac:	6023      	str	r3, [r4, #0]
}
    dcae:	bd38      	pop	{r3, r4, r5, pc}
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    dcb0:	6863      	ldr	r3, [r4, #4]
    dcb2:	2108      	movs	r1, #8
    dcb4:	6023      	str	r3, [r4, #0]
    dcb6:	68a3      	ldr	r3, [r4, #8]
    dcb8:	6960      	ldr	r0, [r4, #20]
    dcba:	3301      	adds	r3, #1
    dcbc:	60a3      	str	r3, [r4, #8]
    dcbe:	f7ff ff18 	bl	daf2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    dcc2:	2000      	movs	r0, #0
    dcc4:	e7f3      	b.n	dcae <str_decode+0x1c>

0000dcc6 <str_expect>:
{
    dcc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dcc8:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    dcca:	4669      	mov	r1, sp
{
    dccc:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    dcce:	f7ff ffe0 	bl	dc92 <str_decode>
    dcd2:	4605      	mov	r5, r0
    dcd4:	b160      	cbz	r0, dcf0 <str_expect+0x2a>
	if ((tmp_result.len != result->len)
    dcd6:	9a01      	ldr	r2, [sp, #4]
    dcd8:	6873      	ldr	r3, [r6, #4]
    dcda:	429a      	cmp	r2, r3
    dcdc:	d00c      	beq.n	dcf8 <str_expect+0x32>
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    dcde:	6863      	ldr	r3, [r4, #4]
    dce0:	210b      	movs	r1, #11
    dce2:	6023      	str	r3, [r4, #0]
    dce4:	68a3      	ldr	r3, [r4, #8]
    dce6:	6960      	ldr	r0, [r4, #20]
    dce8:	3301      	adds	r3, #1
    dcea:	60a3      	str	r3, [r4, #8]
    dcec:	f7ff ff01 	bl	daf2 <zcbor_error.isra.0>
		ZCBOR_FAIL();
    dcf0:	2500      	movs	r5, #0
}
    dcf2:	4628      	mov	r0, r5
    dcf4:	b002      	add	sp, #8
    dcf6:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    dcf8:	9900      	ldr	r1, [sp, #0]
    dcfa:	6830      	ldr	r0, [r6, #0]
    dcfc:	f7fd fca5 	bl	b64a <memcmp>
    dd00:	2800      	cmp	r0, #0
    dd02:	d0f6      	beq.n	dcf2 <str_expect+0x2c>
    dd04:	e7eb      	b.n	dcde <str_expect+0x18>

0000dd06 <zcbor_int_decode>:
{
    dd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd08:	4605      	mov	r5, r0
    dd0a:	460c      	mov	r4, r1
    dd0c:	4616      	mov	r6, r2
	INITIAL_CHECKS();
    dd0e:	f7ff fef3 	bl	daf8 <initial_checks>
    dd12:	b148      	cbz	r0, dd28 <zcbor_int_decode+0x22>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    dd14:	682b      	ldr	r3, [r5, #0]
    dd16:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    dd18:	2b3f      	cmp	r3, #63	; 0x3f
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    dd1a:	ea4f 1753 	mov.w	r7, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    dd1e:	d905      	bls.n	dd2c <zcbor_int_decode+0x26>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    dd20:	210a      	movs	r1, #10
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    dd22:	6968      	ldr	r0, [r5, #20]
    dd24:	f7ff fee5 	bl	daf2 <zcbor_error.isra.0>
	INITIAL_CHECKS();
    dd28:	2000      	movs	r0, #0
    dd2a:	e017      	b.n	dd5c <zcbor_int_decode+0x56>
	if (!value_extract(state, result_int, int_size)) {
    dd2c:	4632      	mov	r2, r6
    dd2e:	4621      	mov	r1, r4
    dd30:	4628      	mov	r0, r5
    dd32:	f7ff ff1c 	bl	db6e <value_extract>
    dd36:	2800      	cmp	r0, #0
    dd38:	d0f6      	beq.n	dd28 <zcbor_int_decode+0x22>
	if (result_int8[int_size - 1] < 0) {
    dd3a:	4426      	add	r6, r4
    dd3c:	f916 3c01 	ldrsb.w	r3, [r6, #-1]
    dd40:	2b00      	cmp	r3, #0
    dd42:	da06      	bge.n	dd52 <zcbor_int_decode+0x4c>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    dd44:	686b      	ldr	r3, [r5, #4]
    dd46:	2105      	movs	r1, #5
    dd48:	602b      	str	r3, [r5, #0]
    dd4a:	68ab      	ldr	r3, [r5, #8]
    dd4c:	3301      	adds	r3, #1
    dd4e:	60ab      	str	r3, [r5, #8]
    dd50:	e7e7      	b.n	dd22 <zcbor_int_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    dd52:	2f01      	cmp	r7, #1
    dd54:	d102      	bne.n	dd5c <zcbor_int_decode+0x56>
    dd56:	4621      	mov	r1, r4
		for (int i = 0; i < int_size; i++) {
    dd58:	42b1      	cmp	r1, r6
    dd5a:	d100      	bne.n	dd5e <zcbor_int_decode+0x58>
}
    dd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result_uint8[i] = (uint8_t)~result_uint8[i];
    dd5e:	780b      	ldrb	r3, [r1, #0]
    dd60:	43db      	mvns	r3, r3
    dd62:	f801 3b01 	strb.w	r3, [r1], #1
		for (int i = 0; i < int_size; i++) {
    dd66:	e7f7      	b.n	dd58 <zcbor_int_decode+0x52>

0000dd68 <zcbor_int32_decode>:
	return zcbor_int_decode(state, result, sizeof(*result));
    dd68:	2204      	movs	r2, #4
    dd6a:	f7ff bfcc 	b.w	dd06 <zcbor_int_decode>

0000dd6e <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    dd6e:	2202      	movs	r2, #2
    dd70:	f7ff bf8f 	b.w	dc92 <str_decode>

0000dd74 <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    dd74:	2203      	movs	r2, #3
    dd76:	f7ff bfa6 	b.w	dcc6 <str_expect>

0000dd7a <zcbor_map_start_decode>:
{
    dd7a:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    dd7c:	2105      	movs	r1, #5
{
    dd7e:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    dd80:	f7ff ff54 	bl	dc2c <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    dd84:	b170      	cbz	r0, dda4 <zcbor_map_start_decode+0x2a>
    dd86:	7c23      	ldrb	r3, [r4, #16]
    dd88:	b96b      	cbnz	r3, dda6 <zcbor_map_start_decode+0x2c>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    dd8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    dd8e:	68a3      	ldr	r3, [r4, #8]
    dd90:	4293      	cmp	r3, r2
    dd92:	d309      	bcc.n	dda8 <zcbor_map_start_decode+0x2e>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    dd94:	6862      	ldr	r2, [r4, #4]
    dd96:	3301      	adds	r3, #1
    dd98:	2105      	movs	r1, #5
    dd9a:	6960      	ldr	r0, [r4, #20]
    dd9c:	6022      	str	r2, [r4, #0]
    dd9e:	60a3      	str	r3, [r4, #8]
    dda0:	f7ff fea7 	bl	daf2 <zcbor_error.isra.0>
    dda4:	2000      	movs	r0, #0
}
    dda6:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    dda8:	005b      	lsls	r3, r3, #1
    ddaa:	60a3      	str	r3, [r4, #8]
    ddac:	e7fb      	b.n	dda6 <zcbor_map_start_decode+0x2c>

0000ddae <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    ddae:	f7ff bec1 	b.w	db34 <list_map_end_decode>

0000ddb2 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    ddb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ddb6:	2107      	movs	r1, #7
    ddb8:	f7ff be3c 	b.w	da34 <zcbor_process_backup>

0000ddbc <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    ddbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddc0:	4682      	mov	sl, r0
    ddc2:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    ddc6:	4689      	mov	r9, r1
    ddc8:	4690      	mov	r8, r2
    ddca:	469b      	mov	fp, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    ddcc:	2400      	movs	r4, #0
    ddce:	454c      	cmp	r4, r9
    ddd0:	d103      	bne.n	ddda <zcbor_multi_decode+0x1e>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    ddd2:	f8c8 4000 	str.w	r4, [r8]
			return true;
    ddd6:	2601      	movs	r6, #1
    ddd8:	e016      	b.n	de08 <zcbor_multi_decode+0x4c>
		uint8_t const *payload_bak = state->payload;
    ddda:	682a      	ldr	r2, [r5, #0]
		uint_fast32_t elem_count_bak = state->elem_count;
    dddc:	68ab      	ldr	r3, [r5, #8]
		if (!decoder(state,
    ddde:	4639      	mov	r1, r7
    dde0:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    dde2:	9201      	str	r2, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    dde4:	9300      	str	r3, [sp, #0]
		if (!decoder(state,
    dde6:	47d8      	blx	fp
    dde8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddea:	4606      	mov	r6, r0
    ddec:	441f      	add	r7, r3
    ddee:	e9dd 3200 	ldrd	r3, r2, [sp]
    ddf2:	b968      	cbnz	r0, de10 <zcbor_multi_decode+0x54>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    ddf4:	4554      	cmp	r4, sl
			*num_decode = i;
    ddf6:	f8c8 4000 	str.w	r4, [r8]
			state->payload = payload_bak;
    ddfa:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    ddfc:	60ab      	str	r3, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    ddfe:	d2ea      	bcs.n	ddd6 <zcbor_multi_decode+0x1a>
    de00:	210d      	movs	r1, #13
    de02:	6968      	ldr	r0, [r5, #20]
    de04:	f7ff fe75 	bl	daf2 <zcbor_error.isra.0>
	return true;
}
    de08:	4630      	mov	r0, r6
    de0a:	b003      	add	sp, #12
    de0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    de10:	3401      	adds	r4, #1
    de12:	e7dc      	b.n	ddce <zcbor_multi_decode+0x12>

0000de14 <encode_header_byte>:
{
    de14:	b510      	push	{r4, lr}
	ZCBOR_CHECK_PAYLOAD();
    de16:	6803      	ldr	r3, [r0, #0]
    de18:	68c4      	ldr	r4, [r0, #12]
    de1a:	42a3      	cmp	r3, r4
    de1c:	d305      	bcc.n	de2a <encode_header_byte+0x16>
    de1e:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    de20:	b10b      	cbz	r3, de26 <encode_header_byte+0x12>
			state->constant_state->error = err;
    de22:	2208      	movs	r2, #8
    de24:	60da      	str	r2, [r3, #12]
    de26:	2000      	movs	r0, #0
}
    de28:	bd10      	pop	{r4, pc}
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    de2a:	f002 021f 	and.w	r2, r2, #31
    de2e:	1c5c      	adds	r4, r3, #1
    de30:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
    de34:	6004      	str	r4, [r0, #0]
	return true;
    de36:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    de38:	7019      	strb	r1, [r3, #0]
	return true;
    de3a:	e7f5      	b.n	de28 <encode_header_byte+0x14>

0000de3c <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    de3c:	b570      	push	{r4, r5, r6, lr}
    de3e:	4605      	mov	r5, r0
    de40:	460e      	mov	r6, r1
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    de42:	4610      	mov	r0, r2
    de44:	4619      	mov	r1, r3
{
    de46:	4614      	mov	r4, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    de48:	f7fa fff2 	bl	8e30 <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
    de4c:	4622      	mov	r2, r4
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    de4e:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
    de50:	4631      	mov	r1, r6
    de52:	4628      	mov	r0, r5
}
    de54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
    de58:	f7fb b800 	b.w	8e5c <value_encode_len>

0000de5c <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    de60:	f8d0 900c 	ldr.w	r9, [r0, #12]
    de64:	6805      	ldr	r5, [r0, #0]
    de66:	f8d1 a004 	ldr.w	sl, [r1, #4]
    de6a:	eba9 0305 	sub.w	r3, r9, r5
    de6e:	459a      	cmp	sl, r3
{
    de70:	4604      	mov	r4, r0
    de72:	460e      	mov	r6, r1
    de74:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    de76:	d907      	bls.n	de88 <str_encode+0x2c>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    de78:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
    de7a:	b10b      	cbz	r3, de80 <str_encode+0x24>
			state->constant_state->error = err;
    de7c:	2208      	movs	r2, #8
    de7e:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    de80:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    de82:	4628      	mov	r0, r5
    de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    de88:	460f      	mov	r7, r1
    de8a:	f857 3b04 	ldr.w	r3, [r7], #4
    de8e:	b143      	cbz	r3, dea2 <str_encode+0x46>
    de90:	2104      	movs	r1, #4
    de92:	4638      	mov	r0, r7
    de94:	f7fa ffcc 	bl	8e30 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    de98:	4455      	add	r5, sl
    de9a:	3501      	adds	r5, #1
    de9c:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    de9e:	45a9      	cmp	r9, r5
    dea0:	d3ea      	bcc.n	de78 <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    dea2:	2304      	movs	r3, #4
    dea4:	463a      	mov	r2, r7
    dea6:	4641      	mov	r1, r8
    dea8:	4620      	mov	r0, r4
    deaa:	f7ff ffc7 	bl	de3c <value_encode>
    deae:	4605      	mov	r5, r0
    deb0:	2800      	cmp	r0, #0
    deb2:	d0e5      	beq.n	de80 <str_encode+0x24>
	if (state->payload_mut != input->value) {
    deb4:	6820      	ldr	r0, [r4, #0]
    deb6:	6831      	ldr	r1, [r6, #0]
    deb8:	4288      	cmp	r0, r1
    deba:	d002      	beq.n	dec2 <str_encode+0x66>
		memmove(state->payload_mut, input->value, input->len);
    debc:	6872      	ldr	r2, [r6, #4]
    debe:	f7fd fbd4 	bl	b66a <memmove>
	state->payload += input->len;
    dec2:	6823      	ldr	r3, [r4, #0]
    dec4:	6872      	ldr	r2, [r6, #4]
    dec6:	4413      	add	r3, r2
    dec8:	6023      	str	r3, [r4, #0]
	return true;
    deca:	e7da      	b.n	de82 <str_encode+0x26>

0000decc <zcbor_int_encode>:
	if (int_size > sizeof(int64_t)) {
    decc:	2a08      	cmp	r2, #8
{
    dece:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ded0:	4613      	mov	r3, r2
    ded2:	460c      	mov	r4, r1
	if (int_size > sizeof(int64_t)) {
    ded4:	d907      	bls.n	dee6 <zcbor_int_encode+0x1a>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
    ded6:	6943      	ldr	r3, [r0, #20]
		if (state->constant_state) {
    ded8:	b913      	cbnz	r3, dee0 <zcbor_int_encode+0x14>
    deda:	2000      	movs	r0, #0
}
    dedc:	b002      	add	sp, #8
    dede:	bd70      	pop	{r4, r5, r6, pc}
			state->constant_state->error = err;
    dee0:	2205      	movs	r2, #5
    dee2:	60da      	str	r2, [r3, #12]
    dee4:	e7f9      	b.n	deda <zcbor_int_encode+0xe>
	if (input_int8[int_size - 1] < 0) {
    dee6:	188e      	adds	r6, r1, r2
    dee8:	f916 2c01 	ldrsb.w	r2, [r6, #-1]
    deec:	2a00      	cmp	r2, #0
    deee:	da0f      	bge.n	df10 <zcbor_int_encode+0x44>
    def0:	460a      	mov	r2, r1
    def2:	4669      	mov	r1, sp
    def4:	460c      	mov	r4, r1
		for (int i = 0; i < int_size; i++) {
    def6:	42b2      	cmp	r2, r6
    def8:	d104      	bne.n	df04 <zcbor_int_encode+0x38>
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    defa:	2101      	movs	r1, #1
	if (!value_encode(state, major_type, input, int_size)) {
    defc:	4622      	mov	r2, r4
    defe:	f7ff ff9d 	bl	de3c <value_encode>
    df02:	e7eb      	b.n	dedc <zcbor_int_encode+0x10>
			input_buf[i] = (uint8_t)~input_uint8[i];
    df04:	f812 5b01 	ldrb.w	r5, [r2], #1
    df08:	43ed      	mvns	r5, r5
    df0a:	f801 5b01 	strb.w	r5, [r1], #1
		for (int i = 0; i < int_size; i++) {
    df0e:	e7f2      	b.n	def6 <zcbor_int_encode+0x2a>
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    df10:	2100      	movs	r1, #0
    df12:	e7f3      	b.n	defc <zcbor_int_encode+0x30>

0000df14 <zcbor_int32_put>:
{
    df14:	b507      	push	{r0, r1, r2, lr}
	return zcbor_int_encode(state, &input, sizeof(input));
    df16:	2204      	movs	r2, #4
{
    df18:	9101      	str	r1, [sp, #4]
	return zcbor_int_encode(state, &input, sizeof(input));
    df1a:	eb0d 0102 	add.w	r1, sp, r2
    df1e:	f7ff ffd5 	bl	decc <zcbor_int_encode>
}
    df22:	b003      	add	sp, #12
    df24:	f85d fb04 	ldr.w	pc, [sp], #4

0000df28 <zcbor_uint32_put>:
{
    df28:	b507      	push	{r0, r1, r2, lr}
    df2a:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
    df2c:	2100      	movs	r1, #0
	if (!value_encode(state, major_type, input, 8)) {
    df2e:	466a      	mov	r2, sp
	return zcbor_uint64_put(state, input);
    df30:	e9cd 3100 	strd	r3, r1, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    df34:	2308      	movs	r3, #8
    df36:	f7ff ff81 	bl	de3c <value_encode>
}
    df3a:	b003      	add	sp, #12
    df3c:	f85d fb04 	ldr.w	pc, [sp], #4

0000df40 <zcbor_bstr_encode>:


bool zcbor_bstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_BSTR);
    df40:	2202      	movs	r2, #2
    df42:	f7ff bf8b 	b.w	de5c <str_encode>

0000df46 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    df46:	2203      	movs	r2, #3
    df48:	f7ff bf88 	b.w	de5c <str_encode>

0000df4c <zcbor_list_start_encode>:
	if (!value_encode(state, major_type, &max_num, sizeof(max_num))) {
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    df4c:	221f      	movs	r2, #31
    df4e:	2104      	movs	r1, #4
    df50:	f7ff bf60 	b.w	de14 <encode_header_byte>

0000df54 <zcbor_map_start_encode>:
    df54:	221f      	movs	r2, #31
    df56:	2105      	movs	r1, #5
    df58:	f7ff bf5c 	b.w	de14 <encode_header_byte>

0000df5c <zcbor_list_end_encode>:
	} else {
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
    df5c:	221f      	movs	r2, #31
    df5e:	2107      	movs	r1, #7
    df60:	f7ff bf58 	b.w	de14 <encode_header_byte>

0000df64 <zcbor_map_end_encode>:
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
    df64:	f7ff bffa 	b.w	df5c <zcbor_list_end_encode>

0000df68 <zcbor_new_encode_state>:


void zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    df68:	f7ff bda4 	b.w	dab4 <zcbor_new_state>

0000df6c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    df6c:	4770      	bx	lr

0000df6e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    df6e:	b140      	cbz	r0, df82 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    df70:	68c3      	ldr	r3, [r0, #12]
    df72:	7858      	ldrb	r0, [r3, #1]
    df74:	f010 0001 	ands.w	r0, r0, #1
    df78:	bf1e      	ittt	ne
    df7a:	7818      	ldrbne	r0, [r3, #0]
    df7c:	fab0 f080 	clzne	r0, r0
    df80:	0940      	lsrne	r0, r0, #5
}
    df82:	4770      	bx	lr

0000df84 <arch_system_halt>:
	__asm__ volatile(
    df84:	f04f 0220 	mov.w	r2, #32
    df88:	f3ef 8311 	mrs	r3, BASEPRI
    df8c:	f382 8812 	msr	BASEPRI_MAX, r2
    df90:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    df94:	e7fe      	b.n	df94 <arch_system_halt+0x10>

0000df96 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    df96:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    df98:	f7ff fff4 	bl	df84 <arch_system_halt>

0000df9c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df9e:	4605      	mov	r5, r0
    dfa0:	460e      	mov	r6, r1
    dfa2:	f04f 0320 	mov.w	r3, #32
    dfa6:	f3ef 8711 	mrs	r7, BASEPRI
    dfaa:	f383 8812 	msr	BASEPRI_MAX, r3
    dfae:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    dfb2:	f7fb fe1b 	bl	9bec <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    dfb6:	4631      	mov	r1, r6
    dfb8:	4604      	mov	r4, r0
    dfba:	4628      	mov	r0, r5
    dfbc:	f7ff ffeb 	bl	df96 <k_sys_fatal_error_handler>
	__asm__ volatile(
    dfc0:	f387 8811 	msr	BASEPRI, r7
    dfc4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    dfc8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    dfca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dfce:	f7f6 b9f1 	b.w	43b4 <z_impl_k_thread_abort>

0000dfd2 <z_early_memset>:
	(void) memset(dst, c, n);
    dfd2:	f7fd bb6c 	b.w	b6ae <memset>

0000dfd6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    dfd6:	f7fd bb5f 	b.w	b698 <memcpy>

0000dfda <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    dfda:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    dfde:	4313      	orrs	r3, r2
    dfe0:	f013 0303 	ands.w	r3, r3, #3
    dfe4:	d10c      	bne.n	e000 <create_free_list+0x26>
	slab->free_list = NULL;
    dfe6:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    dfe8:	6881      	ldr	r1, [r0, #8]
    dfea:	4299      	cmp	r1, r3
    dfec:	d801      	bhi.n	dff2 <create_free_list+0x18>
	return 0;
    dfee:	2000      	movs	r0, #0
    dff0:	4770      	bx	lr
		*(char **)p = slab->free_list;
    dff2:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    dff4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    dff6:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    dff8:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    dffa:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    dffc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    dffe:	e7f3      	b.n	dfe8 <create_free_list+0xe>
		return -EINVAL;
    e000:	f06f 0015 	mvn.w	r0, #21
}
    e004:	4770      	bx	lr

0000e006 <k_mem_slab_init>:
{
    e006:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    e008:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    e00c:	2300      	movs	r3, #0
	slab->buffer = buffer;
    e00e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    e010:	6183      	str	r3, [r0, #24]
{
    e012:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    e014:	f7ff ffe1 	bl	dfda <create_free_list>
	if (rc < 0) {
    e018:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    e01a:	bfa8      	it	ge
    e01c:	e9c4 4400 	strdge	r4, r4, [r4]
}
    e020:	bd10      	pop	{r4, pc}

0000e022 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e024:	4604      	mov	r4, r0
    e026:	460d      	mov	r5, r1
	__asm__ volatile(
    e028:	f04f 0320 	mov.w	r3, #32
    e02c:	f3ef 8611 	mrs	r6, BASEPRI
    e030:	f383 8812 	msr	BASEPRI_MAX, r3
    e034:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e038:	6947      	ldr	r7, [r0, #20]
    e03a:	b977      	cbnz	r7, e05a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e03c:	f000 f9c9 	bl	e3d2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    e040:	b158      	cbz	r0, e05a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e042:	682a      	ldr	r2, [r5, #0]
    e044:	6747      	str	r7, [r0, #116]	; 0x74
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e046:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    e048:	f000 f964 	bl	e314 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e04c:	4631      	mov	r1, r6
    e04e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    e056:	f7fb bc7d 	b.w	9954 <z_reschedule>
	**(char ***) mem = slab->free_list;
    e05a:	682b      	ldr	r3, [r5, #0]
    e05c:	6962      	ldr	r2, [r4, #20]
    e05e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e060:	682b      	ldr	r3, [r5, #0]
    e062:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e064:	69a3      	ldr	r3, [r4, #24]
    e066:	3b01      	subs	r3, #1
    e068:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e06a:	f386 8811 	msr	BASEPRI, r6
    e06e:	f3bf 8f6f 	isb	sy
}
    e072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e074 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e074:	f3ef 8005 	mrs	r0, IPSR
}
    e078:	3800      	subs	r0, #0
    e07a:	bf18      	it	ne
    e07c:	2001      	movne	r0, #1
    e07e:	4770      	bx	lr

0000e080 <z_impl_k_thread_name_set>:
}
    e080:	f06f 0057 	mvn.w	r0, #87	; 0x57
    e084:	4770      	bx	lr

0000e086 <z_impl_k_thread_start>:
	z_sched_start(thread);
    e086:	f7fb bc77 	b.w	9978 <z_sched_start>

0000e08a <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    e08a:	b508      	push	{r3, lr}
	__asm__ volatile(
    e08c:	f04f 0220 	mov.w	r2, #32
    e090:	f3ef 8311 	mrs	r3, BASEPRI
    e094:	f382 8812 	msr	BASEPRI_MAX, r2
    e098:	f3bf 8f6f 	isb	sy
    e09c:	f7f5 fe90 	bl	3dc0 <arch_cpu_idle>
    e0a0:	e7f4      	b.n	e08c <idle+0x2>

0000e0a2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    e0a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e0a6:	428b      	cmp	r3, r1
    e0a8:	d001      	beq.n	e0ae <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    e0aa:	f7fb bc0d 	b.w	98c8 <z_set_prio>
}
    e0ae:	2000      	movs	r0, #0
    e0b0:	4770      	bx	lr

0000e0b2 <z_impl_k_mutex_init>:
{
    e0b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e0b4:	2000      	movs	r0, #0
    e0b6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    e0ba:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    e0be:	4770      	bx	lr

0000e0c0 <queue_insert>:
{
    e0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0c4:	4699      	mov	r9, r3
    e0c6:	4604      	mov	r4, r0
    e0c8:	460d      	mov	r5, r1
    e0ca:	4690      	mov	r8, r2
    e0cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e0d0:	f100 0608 	add.w	r6, r0, #8
    e0d4:	f04f 0220 	mov.w	r2, #32
    e0d8:	f3ef 8711 	mrs	r7, BASEPRI
    e0dc:	f382 8812 	msr	BASEPRI_MAX, r2
    e0e0:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e0e4:	b103      	cbz	r3, e0e8 <queue_insert+0x28>
	return list->tail;
    e0e6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e0e8:	4630      	mov	r0, r6
    e0ea:	f000 f972 	bl	e3d2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e0ee:	b158      	cbz	r0, e108 <queue_insert+0x48>
    e0f0:	2300      	movs	r3, #0
    e0f2:	f8c0 8014 	str.w	r8, [r0, #20]
    e0f6:	6743      	str	r3, [r0, #116]	; 0x74
	z_ready_thread(thread);
    e0f8:	f000 f90c 	bl	e314 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    e0fc:	4630      	mov	r0, r6
    e0fe:	4639      	mov	r1, r7
    e100:	f7fb fc28 	bl	9954 <z_reschedule>
		return 0;
    e104:	2000      	movs	r0, #0
    e106:	e00c      	b.n	e122 <queue_insert+0x62>
	if (alloc) {
    e108:	f1b9 0f00 	cmp.w	r9, #0
    e10c:	d01c      	beq.n	e148 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    e10e:	2108      	movs	r1, #8
    e110:	f7fb ffde 	bl	a0d0 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e114:	b938      	cbnz	r0, e126 <queue_insert+0x66>
	__asm__ volatile(
    e116:	f387 8811 	msr	BASEPRI, r7
    e11a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e11e:	f06f 000b 	mvn.w	r0, #11
}
    e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e126:	2201      	movs	r2, #1
		anode->data = data;
    e128:	f8c0 8004 	str.w	r8, [r0, #4]
    e12c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e12e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e130:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    e134:	b965      	cbnz	r5, e150 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e136:	6822      	ldr	r2, [r4, #0]
    e138:	430a      	orrs	r2, r1
    e13a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e13c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e13e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e140:	2a00      	cmp	r2, #0
    e142:	d1db      	bne.n	e0fc <queue_insert+0x3c>
	list->tail = node;
    e144:	6060      	str	r0, [r4, #4]
}
    e146:	e7d9      	b.n	e0fc <queue_insert+0x3c>
}
    e148:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    e14a:	f8c8 9000 	str.w	r9, [r8]
}
    e14e:	e7ee      	b.n	e12e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e150:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e152:	2a03      	cmp	r2, #3
    e154:	d80b      	bhi.n	e16e <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e156:	6001      	str	r1, [r0, #0]
	return list->tail;
    e158:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e15a:	b911      	cbnz	r1, e162 <queue_insert+0xa2>
	list->head = node;
    e15c:	e9c4 0000 	strd	r0, r0, [r4]
}
    e160:	e7cc      	b.n	e0fc <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e162:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e164:	f002 0203 	and.w	r2, r2, #3
    e168:	4302      	orrs	r2, r0
    e16a:	600a      	str	r2, [r1, #0]
    e16c:	e7ea      	b.n	e144 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e16e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e172:	430a      	orrs	r2, r1
    e174:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e176:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e178:	f002 0203 	and.w	r2, r2, #3
    e17c:	ea40 0302 	orr.w	r3, r0, r2
    e180:	602b      	str	r3, [r5, #0]
}
    e182:	e7bb      	b.n	e0fc <queue_insert+0x3c>

0000e184 <z_queue_node_peek>:
{
    e184:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e186:	4604      	mov	r4, r0
    e188:	b130      	cbz	r0, e198 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e18a:	6802      	ldr	r2, [r0, #0]
    e18c:	0793      	lsls	r3, r2, #30
    e18e:	d003      	beq.n	e198 <z_queue_node_peek+0x14>
		ret = anode->data;
    e190:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e192:	b109      	cbz	r1, e198 <z_queue_node_peek+0x14>
			k_free(anode);
    e194:	f000 f9f9 	bl	e58a <k_free>
}
    e198:	4620      	mov	r0, r4
    e19a:	bd10      	pop	{r4, pc}

0000e19c <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    e19c:	2301      	movs	r3, #1
{
    e19e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e1a0:	9300      	str	r3, [sp, #0]
    e1a2:	2300      	movs	r3, #0
{
    e1a4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e1a6:	4619      	mov	r1, r3
    e1a8:	f7ff ff8a 	bl	e0c0 <queue_insert>
}
    e1ac:	b003      	add	sp, #12
    e1ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1b2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e1b2:	b13a      	cbz	r2, e1c4 <z_impl_k_sem_init+0x12>
    e1b4:	428a      	cmp	r2, r1
    e1b6:	d305      	bcc.n	e1c4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    e1b8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e1bc:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    e1c0:	2000      	movs	r0, #0
    e1c2:	4770      	bx	lr
		return -EINVAL;
    e1c4:	f06f 0015 	mvn.w	r0, #21
}
    e1c8:	4770      	bx	lr

0000e1ca <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    e1ca:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    e1cc:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e1ce:	408b      	lsls	r3, r1
    e1d0:	ea22 0303 	bic.w	r3, r2, r3
    e1d4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e1d6:	fa22 f001 	lsr.w	r0, r2, r1
}
    e1da:	f000 0001 	and.w	r0, r0, #1
    e1de:	4770      	bx	lr

0000e1e0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e1e0:	b120      	cbz	r0, e1ec <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e1e2:	2200      	movs	r2, #0
    e1e4:	3080      	adds	r0, #128	; 0x80
    e1e6:	4611      	mov	r1, r2
    e1e8:	f000 b94d 	b.w	e486 <z_sched_wake>
}
    e1ec:	4770      	bx	lr

0000e1ee <work_timeout>:
{
    e1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e1f0:	4604      	mov	r4, r0
	__asm__ volatile(
    e1f2:	f04f 0320 	mov.w	r3, #32
    e1f6:	f3ef 8511 	mrs	r5, BASEPRI
    e1fa:	f383 8812 	msr	BASEPRI_MAX, r3
    e1fe:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    e202:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e204:	f1a0 0610 	sub.w	r6, r0, #16
    e208:	2103      	movs	r1, #3
    e20a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    e20c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e20e:	f7ff ffdc 	bl	e1ca <flag_test_and_clear>
    e212:	b128      	cbz	r0, e220 <work_timeout+0x32>
		queue = dw->queue;
    e214:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
    e216:	4630      	mov	r0, r6
    e218:	a901      	add	r1, sp, #4
		queue = dw->queue;
    e21a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    e21c:	f7fb fa06 	bl	962c <submit_to_queue_locked>
	__asm__ volatile(
    e220:	f385 8811 	msr	BASEPRI, r5
    e224:	f3bf 8f6f 	isb	sy
}
    e228:	b002      	add	sp, #8
    e22a:	bd70      	pop	{r4, r5, r6, pc}

0000e22c <k_work_init>:
{
    e22c:	b538      	push	{r3, r4, r5, lr}
    e22e:	4604      	mov	r4, r0
    e230:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e232:	2210      	movs	r2, #16
    e234:	2100      	movs	r1, #0
    e236:	f7fd fa3a 	bl	b6ae <memset>
    e23a:	6065      	str	r5, [r4, #4]
}
    e23c:	bd38      	pop	{r3, r4, r5, pc}

0000e23e <z_work_submit_to_queue>:
{
    e23e:	b513      	push	{r0, r1, r4, lr}
    e240:	9001      	str	r0, [sp, #4]
    e242:	4608      	mov	r0, r1
	__asm__ volatile(
    e244:	f04f 0320 	mov.w	r3, #32
    e248:	f3ef 8411 	mrs	r4, BASEPRI
    e24c:	f383 8812 	msr	BASEPRI_MAX, r3
    e250:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e254:	a901      	add	r1, sp, #4
    e256:	f7fb f9e9 	bl	962c <submit_to_queue_locked>
	__asm__ volatile(
    e25a:	f384 8811 	msr	BASEPRI, r4
    e25e:	f3bf 8f6f 	isb	sy
}
    e262:	b002      	add	sp, #8
    e264:	bd10      	pop	{r4, pc}

0000e266 <k_work_submit_to_queue>:
{
    e266:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e268:	f7ff ffe9 	bl	e23e <z_work_submit_to_queue>
	if (ret > 0) {
    e26c:	1e04      	subs	r4, r0, #0
    e26e:	dd09      	ble.n	e284 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e270:	f04f 0320 	mov.w	r3, #32
    e274:	f3ef 8011 	mrs	r0, BASEPRI
    e278:	f383 8812 	msr	BASEPRI_MAX, r3
    e27c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e280:	f000 f8db 	bl	e43a <z_reschedule_irqlock>
}
    e284:	4620      	mov	r0, r4
    e286:	bd10      	pop	{r4, pc}

0000e288 <k_work_init_delayable>:
{
    e288:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    e28a:	2230      	movs	r2, #48	; 0x30
{
    e28c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    e28e:	2100      	movs	r1, #0
{
    e290:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
    e292:	f7fd fa0c 	bl	b6ae <memset>
    e296:	f44f 7380 	mov.w	r3, #256	; 0x100
    e29a:	6065      	str	r5, [r4, #4]
    e29c:	60e3      	str	r3, [r4, #12]
}
    e29e:	bd38      	pop	{r3, r4, r5, pc}

0000e2a0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e2a0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e2a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e2a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e2a8:	2300      	movs	r3, #0
	node->prev = NULL;
    e2aa:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    e2ae:	4770      	bx	lr

0000e2b0 <unpend_thread_no_timeout>:
{
    e2b0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e2b2:	f7ff fff5 	bl	e2a0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e2b6:	7b43      	ldrb	r3, [r0, #13]
    e2b8:	f023 0302 	bic.w	r3, r3, #2
    e2bc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e2be:	2300      	movs	r3, #0
    e2c0:	6083      	str	r3, [r0, #8]
}
    e2c2:	bd08      	pop	{r3, pc}

0000e2c4 <add_to_waitq_locked>:
{
    e2c4:	b538      	push	{r3, r4, r5, lr}
    e2c6:	4604      	mov	r4, r0
    e2c8:	460d      	mov	r5, r1
	unready_thread(thread);
    e2ca:	f7fb fa81 	bl	97d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e2ce:	7b63      	ldrb	r3, [r4, #13]
    e2d0:	f043 0302 	orr.w	r3, r3, #2
    e2d4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e2d6:	b1e5      	cbz	r5, e312 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e2d8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e2da:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e2dc:	429d      	cmp	r5, r3
    e2de:	d109      	bne.n	e2f4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e2e0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e2e2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e2e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e2e8:	606c      	str	r4, [r5, #4]
}
    e2ea:	e012      	b.n	e312 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e2ec:	686a      	ldr	r2, [r5, #4]
    e2ee:	429a      	cmp	r2, r3
    e2f0:	d0f6      	beq.n	e2e0 <add_to_waitq_locked+0x1c>
    e2f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d0f3      	beq.n	e2e0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e2f8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e2fc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e300:	428a      	cmp	r2, r1
    e302:	d0f3      	beq.n	e2ec <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e304:	4291      	cmp	r1, r2
    e306:	ddf1      	ble.n	e2ec <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e308:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e30a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e30e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e310:	605c      	str	r4, [r3, #4]
}
    e312:	bd38      	pop	{r3, r4, r5, pc}

0000e314 <z_ready_thread>:
{
    e314:	b510      	push	{r4, lr}
    e316:	f04f 0320 	mov.w	r3, #32
    e31a:	f3ef 8411 	mrs	r4, BASEPRI
    e31e:	f383 8812 	msr	BASEPRI_MAX, r3
    e322:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e326:	f7fb fa83 	bl	9830 <ready_thread>
	__asm__ volatile(
    e32a:	f384 8811 	msr	BASEPRI, r4
    e32e:	f3bf 8f6f 	isb	sy
}
    e332:	bd10      	pop	{r4, pc}

0000e334 <z_unpend_thread_no_timeout>:
{
    e334:	b508      	push	{r3, lr}
	__asm__ volatile(
    e336:	f04f 0220 	mov.w	r2, #32
    e33a:	f3ef 8111 	mrs	r1, BASEPRI
    e33e:	f382 8812 	msr	BASEPRI_MAX, r2
    e342:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e346:	6883      	ldr	r3, [r0, #8]
    e348:	b10b      	cbz	r3, e34e <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    e34a:	f7ff ffb1 	bl	e2b0 <unpend_thread_no_timeout>
	__asm__ volatile(
    e34e:	f381 8811 	msr	BASEPRI, r1
    e352:	f3bf 8f6f 	isb	sy
}
    e356:	bd08      	pop	{r3, pc}

0000e358 <z_sched_wake_thread>:
{
    e358:	b538      	push	{r3, r4, r5, lr}
    e35a:	4604      	mov	r4, r0
	__asm__ volatile(
    e35c:	f04f 0320 	mov.w	r3, #32
    e360:	f3ef 8511 	mrs	r5, BASEPRI
    e364:	f383 8812 	msr	BASEPRI_MAX, r3
    e368:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e36c:	7b43      	ldrb	r3, [r0, #13]
    e36e:	f013 0f28 	tst.w	r3, #40	; 0x28
    e372:	d10b      	bne.n	e38c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    e374:	6883      	ldr	r3, [r0, #8]
    e376:	b10b      	cbz	r3, e37c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    e378:	f7ff ff9a 	bl	e2b0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e37c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    e37e:	b951      	cbnz	r1, e396 <z_sched_wake_thread+0x3e>
    e380:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    e384:	4620      	mov	r0, r4
    e386:	7363      	strb	r3, [r4, #13]
    e388:	f7fb fa52 	bl	9830 <ready_thread>
	__asm__ volatile(
    e38c:	f385 8811 	msr	BASEPRI, r5
    e390:	f3bf 8f6f 	isb	sy
}
    e394:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e396:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    e39a:	e7f3      	b.n	e384 <z_sched_wake_thread+0x2c>

0000e39c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    e39c:	2101      	movs	r1, #1
    e39e:	3818      	subs	r0, #24
    e3a0:	f7ff bfda 	b.w	e358 <z_sched_wake_thread>

0000e3a4 <z_unpend1_no_timeout>:
{
    e3a4:	b508      	push	{r3, lr}
    e3a6:	4603      	mov	r3, r0
	__asm__ volatile(
    e3a8:	f04f 0220 	mov.w	r2, #32
    e3ac:	f3ef 8111 	mrs	r1, BASEPRI
    e3b0:	f382 8812 	msr	BASEPRI_MAX, r2
    e3b4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e3b8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e3ba:	4283      	cmp	r3, r0
    e3bc:	d007      	beq.n	e3ce <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e3be:	b108      	cbz	r0, e3c4 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e3c0:	f7ff ff76 	bl	e2b0 <unpend_thread_no_timeout>
	__asm__ volatile(
    e3c4:	f381 8811 	msr	BASEPRI, r1
    e3c8:	f3bf 8f6f 	isb	sy
}
    e3cc:	bd08      	pop	{r3, pc}
    e3ce:	2000      	movs	r0, #0
    e3d0:	e7f8      	b.n	e3c4 <z_unpend1_no_timeout+0x20>

0000e3d2 <z_unpend_first_thread>:
{
    e3d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e3d4:	f04f 0320 	mov.w	r3, #32
    e3d8:	f3ef 8511 	mrs	r5, BASEPRI
    e3dc:	f383 8812 	msr	BASEPRI_MAX, r3
    e3e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e3e4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e3e6:	42a0      	cmp	r0, r4
    e3e8:	d00d      	beq.n	e406 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e3ea:	b134      	cbz	r4, e3fa <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e3ec:	4620      	mov	r0, r4
    e3ee:	f7ff ff5f 	bl	e2b0 <unpend_thread_no_timeout>
    e3f2:	f104 0018 	add.w	r0, r4, #24
    e3f6:	f000 f869 	bl	e4cc <z_abort_timeout>
	__asm__ volatile(
    e3fa:	f385 8811 	msr	BASEPRI, r5
    e3fe:	f3bf 8f6f 	isb	sy
}
    e402:	4620      	mov	r0, r4
    e404:	bd38      	pop	{r3, r4, r5, pc}
    e406:	2400      	movs	r4, #0
    e408:	e7f7      	b.n	e3fa <z_unpend_first_thread+0x28>

0000e40a <z_unpend_thread>:
{
    e40a:	4601      	mov	r1, r0
    e40c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e40e:	f04f 0320 	mov.w	r3, #32
    e412:	f3ef 8411 	mrs	r4, BASEPRI
    e416:	f383 8812 	msr	BASEPRI_MAX, r3
    e41a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e41e:	6883      	ldr	r3, [r0, #8]
    e420:	b10b      	cbz	r3, e426 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    e422:	f7ff ff45 	bl	e2b0 <unpend_thread_no_timeout>
	__asm__ volatile(
    e426:	f384 8811 	msr	BASEPRI, r4
    e42a:	f3bf 8f6f 	isb	sy
}
    e42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e432:	f101 0018 	add.w	r0, r1, #24
    e436:	f000 b849 	b.w	e4cc <z_abort_timeout>

0000e43a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e43a:	4603      	mov	r3, r0
    e43c:	b920      	cbnz	r0, e448 <z_reschedule_irqlock+0xe>
    e43e:	f3ef 8205 	mrs	r2, IPSR
    e442:	b90a      	cbnz	r2, e448 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e444:	f7f5 bd48 	b.w	3ed8 <arch_swap>
    e448:	f383 8811 	msr	BASEPRI, r3
    e44c:	f3bf 8f6f 	isb	sy
}
    e450:	4770      	bx	lr

0000e452 <z_reschedule_unlocked>:
	__asm__ volatile(
    e452:	f04f 0320 	mov.w	r3, #32
    e456:	f3ef 8011 	mrs	r0, BASEPRI
    e45a:	f383 8812 	msr	BASEPRI_MAX, r3
    e45e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e462:	f7ff bfea 	b.w	e43a <z_reschedule_irqlock>

0000e466 <z_unpend_all>:
{
    e466:	b538      	push	{r3, r4, r5, lr}
    e468:	4605      	mov	r5, r0
	int need_sched = 0;
    e46a:	2000      	movs	r0, #0
	return list->head == list;
    e46c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e46e:	42a5      	cmp	r5, r4
    e470:	d000      	beq.n	e474 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e472:	b904      	cbnz	r4, e476 <z_unpend_all+0x10>
}
    e474:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e476:	4620      	mov	r0, r4
    e478:	f7ff ffc7 	bl	e40a <z_unpend_thread>
		z_ready_thread(thread);
    e47c:	4620      	mov	r0, r4
    e47e:	f7ff ff49 	bl	e314 <z_ready_thread>
		need_sched = 1;
    e482:	2001      	movs	r0, #1
    e484:	e7f2      	b.n	e46c <z_unpend_all+0x6>

0000e486 <z_sched_wake>:
{
    e486:	b538      	push	{r3, r4, r5, lr}
    e488:	f04f 0320 	mov.w	r3, #32
    e48c:	f3ef 8511 	mrs	r5, BASEPRI
    e490:	f383 8812 	msr	BASEPRI_MAX, r3
    e494:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e498:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e49a:	42a0      	cmp	r0, r4
    e49c:	d012      	beq.n	e4c4 <z_sched_wake+0x3e>
		if (thread != NULL) {
    e49e:	b19c      	cbz	r4, e4c8 <z_sched_wake+0x42>
    e4a0:	6761      	str	r1, [r4, #116]	; 0x74
	thread->base.swap_data = data;
    e4a2:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e4a4:	4620      	mov	r0, r4
    e4a6:	f7ff ff03 	bl	e2b0 <unpend_thread_no_timeout>
    e4aa:	f104 0018 	add.w	r0, r4, #24
    e4ae:	f000 f80d 	bl	e4cc <z_abort_timeout>
			ready_thread(thread);
    e4b2:	4620      	mov	r0, r4
    e4b4:	f7fb f9bc 	bl	9830 <ready_thread>
			ret = true;
    e4b8:	2001      	movs	r0, #1
	__asm__ volatile(
    e4ba:	f385 8811 	msr	BASEPRI, r5
    e4be:	f3bf 8f6f 	isb	sy
}
    e4c2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e4c4:	2000      	movs	r0, #0
    e4c6:	e7f8      	b.n	e4ba <z_sched_wake+0x34>
    e4c8:	4620      	mov	r0, r4
    e4ca:	e7f6      	b.n	e4ba <z_sched_wake+0x34>

0000e4cc <z_abort_timeout>:
{
    e4cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    e4ce:	f04f 0220 	mov.w	r2, #32
    e4d2:	f3ef 8411 	mrs	r4, BASEPRI
    e4d6:	f382 8812 	msr	BASEPRI_MAX, r2
    e4da:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e4de:	6803      	ldr	r3, [r0, #0]
    e4e0:	b13b      	cbz	r3, e4f2 <z_abort_timeout+0x26>
			remove_timeout(to);
    e4e2:	f7fb fc3f 	bl	9d64 <remove_timeout>
			ret = 0;
    e4e6:	2000      	movs	r0, #0
	__asm__ volatile(
    e4e8:	f384 8811 	msr	BASEPRI, r4
    e4ec:	f3bf 8f6f 	isb	sy
}
    e4f0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e4f2:	f06f 0015 	mvn.w	r0, #21
    e4f6:	e7f7      	b.n	e4e8 <z_abort_timeout+0x1c>

0000e4f8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e4f8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e4fa:	f7fb fd2d 	bl	9f58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e4fe:	bd08      	pop	{r3, pc}

0000e500 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e500:	f7fb bd2a 	b.w	9f58 <sys_clock_tick_get>

0000e504 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e504:	b108      	cbz	r0, e50a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e506:	f7f3 bc53 	b.w	1db0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e50a:	4770      	bx	lr

0000e50c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e50c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e510:	bf08      	it	eq
    e512:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e516:	b538      	push	{r3, r4, r5, lr}
    e518:	460c      	mov	r4, r1
    e51a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e51c:	d014      	beq.n	e548 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e51e:	4308      	orrs	r0, r1
    e520:	d103      	bne.n	e52a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e526:	f7fb bd17 	b.w	9f58 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e52a:	f06f 0001 	mvn.w	r0, #1
    e52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e532:	1b40      	subs	r0, r0, r5
    e534:	eb63 0101 	sbc.w	r1, r3, r1
    e538:	2900      	cmp	r1, #0
    e53a:	da04      	bge.n	e546 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e53c:	f7fb fd0c 	bl	9f58 <sys_clock_tick_get>
    e540:	1940      	adds	r0, r0, r5
    e542:	eb41 0104 	adc.w	r1, r1, r4
}
    e546:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e54c:	4601      	mov	r1, r0
    e54e:	e7fa      	b.n	e546 <sys_clock_timeout_end_calc+0x3a>

0000e550 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e550:	b510      	push	{r4, lr}
    e552:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e554:	f7ff ffba 	bl	e4cc <z_abort_timeout>

	if (inactive) {
    e558:	b9b0      	cbnz	r0, e588 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e55c:	b10b      	cbz	r3, e562 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e55e:	4620      	mov	r0, r4
    e560:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e562:	f104 0018 	add.w	r0, r4, #24
    e566:	f7ff ff1d 	bl	e3a4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e56a:	b168      	cbz	r0, e588 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e56c:	f7ff fed2 	bl	e314 <z_ready_thread>
	__asm__ volatile(
    e570:	f04f 0320 	mov.w	r3, #32
    e574:	f3ef 8011 	mrs	r0, BASEPRI
    e578:	f383 8812 	msr	BASEPRI_MAX, r3
    e57c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e584:	f7ff bf59 	b.w	e43a <z_reschedule_irqlock>
    e588:	bd10      	pop	{r4, pc}

0000e58a <k_free>:
	if (ptr != NULL) {
    e58a:	b120      	cbz	r0, e596 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e58c:	1f01      	subs	r1, r0, #4
    e58e:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e592:	f000 b857 	b.w	e644 <k_heap_free>
}
    e596:	4770      	bx	lr

0000e598 <boot_banner>:
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
    e598:	4770      	bx	lr

0000e59a <k_heap_init>:
{
    e59a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    e59c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e5a0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e5a4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e5a6:	f7fc bbd2 	b.w	ad4e <sys_heap_init>

0000e5aa <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e5aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5ae:	b085      	sub	sp, #20
    e5b0:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e5b4:	4607      	mov	r7, r0
    e5b6:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e5b8:	4650      	mov	r0, sl
    e5ba:	4621      	mov	r1, r4
{
    e5bc:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e5be:	f7ff ffa5 	bl	e50c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e5c2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e5c6:	bf08      	it	eq
    e5c8:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e5cc:	4605      	mov	r5, r0
    e5ce:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e5d0:	bf04      	itt	eq
    e5d2:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    e5d6:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e5da:	f107 0a14 	add.w	sl, r7, #20
    e5de:	f04f 0320 	mov.w	r3, #32
    e5e2:	f3ef 8411 	mrs	r4, BASEPRI
    e5e6:	f383 8812 	msr	BASEPRI_MAX, r3
    e5ea:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e5ee:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e5f2:	464a      	mov	r2, r9
    e5f4:	4641      	mov	r1, r8
    e5f6:	4638      	mov	r0, r7
    e5f8:	f7fc fb36 	bl	ac68 <sys_heap_aligned_alloc>
    e5fc:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e5fe:	f7fb fcab 	bl	9f58 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e602:	9b03      	ldr	r3, [sp, #12]
    e604:	b13b      	cbz	r3, e616 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e606:	f384 8811 	msr	BASEPRI, r4
    e60a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e60e:	4618      	mov	r0, r3
    e610:	b005      	add	sp, #20
    e612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e616:	1a28      	subs	r0, r5, r0
    e618:	eb66 0101 	sbc.w	r1, r6, r1
    e61c:	2801      	cmp	r0, #1
    e61e:	f171 0200 	sbcs.w	r2, r1, #0
    e622:	dbf0      	blt.n	e606 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e624:	e9cd 0100 	strd	r0, r1, [sp]
    e628:	465a      	mov	r2, fp
    e62a:	4621      	mov	r1, r4
    e62c:	4650      	mov	r0, sl
    e62e:	f7fb f933 	bl	9898 <z_pend_curr>
	__asm__ volatile(
    e632:	f04f 0320 	mov.w	r3, #32
    e636:	f3ef 8411 	mrs	r4, BASEPRI
    e63a:	f383 8812 	msr	BASEPRI_MAX, r3
    e63e:	f3bf 8f6f 	isb	sy
	return k;
    e642:	e7d6      	b.n	e5f2 <k_heap_aligned_alloc+0x48>

0000e644 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e644:	b538      	push	{r3, r4, r5, lr}
    e646:	4604      	mov	r4, r0
    e648:	f04f 0320 	mov.w	r3, #32
    e64c:	f3ef 8511 	mrs	r5, BASEPRI
    e650:	f383 8812 	msr	BASEPRI_MAX, r3
    e654:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e658:	f7fc fabd 	bl	abd6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e65c:	f104 000c 	add.w	r0, r4, #12
    e660:	f7ff ff01 	bl	e466 <z_unpend_all>
    e664:	b130      	cbz	r0, e674 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e666:	4629      	mov	r1, r5
    e668:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e670:	f7fb b970 	b.w	9954 <z_reschedule>
	__asm__ volatile(
    e674:	f385 8811 	msr	BASEPRI, r5
    e678:	f3bf 8f6f 	isb	sy
}
    e67c:	bd38      	pop	{r3, r4, r5, pc}

0000e67e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e67e:	4770      	bx	lr
