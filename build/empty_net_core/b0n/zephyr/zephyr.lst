
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	58 0d 00 21 e9 1d 00 01 81 3e 00 01 bd 1d 00 01     X..!.....>......
 1000010:	bd 1d 00 01 bd 1d 00 01 bd 1d 00 01 00 00 00 00     ................
	...
 100002c:	05 19 00 01 bd 1d 00 01 00 00 00 00 bd 1d 00 01     ................
 100003c:	bd 1d 00 01                                         ....

01000040 <_irq_vector_table>:
 1000040:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 1000050:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 1000060:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 1000070:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 1000080:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 1000090:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 10000a0:	61 19 00 01 61 19 00 01 61 19 00 01 61 19 00 01     a...a...a...a...
 10000b0:	61 19 00 01 61 19 00 01                             a...a...

010000b8 <_vector_end>:
	...

01000200 <m_firmware_info>:
 1000200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
 1000210:	54 54 00 00 01 00 00 00 00 00 00 01 00 00 00 01     TT..............
 1000220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0100023c <__aeabi_uldivmod>:
 100023c:	b953      	cbnz	r3, 1000254 <__aeabi_uldivmod+0x18>
 100023e:	b94a      	cbnz	r2, 1000254 <__aeabi_uldivmod+0x18>
 1000240:	2900      	cmp	r1, #0
 1000242:	bf08      	it	eq
 1000244:	2800      	cmpeq	r0, #0
 1000246:	bf1c      	itt	ne
 1000248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 100024c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 1000250:	f000 b80c 	b.w	100026c <__aeabi_idiv0>
 1000254:	f1ad 0c08 	sub.w	ip, sp, #8
 1000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 100025c:	f000 f9d0 	bl	1000600 <__udivmoddi4>
 1000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 1000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1000268:	b004      	add	sp, #16
 100026a:	4770      	bx	lr

0100026c <__aeabi_idiv0>:
 100026c:	4770      	bx	lr
 100026e:	bf00      	nop

01000270 <ocrypto_constant_time_equal>:
 1000270:	b430      	push	{r4, r5}
 1000272:	f04f 0300 	mov.w	r3, #0

01000276 <constant_time_equal_loop>:
 1000276:	f810 4b01 	ldrb.w	r4, [r0], #1
 100027a:	f811 5b01 	ldrb.w	r5, [r1], #1
 100027e:	3a01      	subs	r2, #1
 1000280:	ea84 0405 	eor.w	r4, r4, r5
 1000284:	ea43 0304 	orr.w	r3, r3, r4
 1000288:	d1f5      	bne.n	1000276 <constant_time_equal_loop>
 100028a:	f1a3 0301 	sub.w	r3, r3, #1
 100028e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
 1000292:	bc30      	pop	{r4, r5}
 1000294:	4770      	bx	lr
 1000296:	bf00      	nop

01000298 <ocrypto_constant_time_is_zero>:
 1000298:	f04f 0300 	mov.w	r3, #0

0100029c <constant_time_is_zero_loop>:
 100029c:	f810 2b01 	ldrb.w	r2, [r0], #1
 10002a0:	3901      	subs	r1, #1
 10002a2:	ea43 0302 	orr.w	r3, r3, r2
 10002a6:	d1f9      	bne.n	100029c <constant_time_is_zero_loop>
 10002a8:	f1a3 0301 	sub.w	r3, r3, #1
 10002ac:	ea4f 70d3 	mov.w	r0, r3, lsr #31
 10002b0:	4770      	bx	lr
 10002b2:	bf00      	nop

010002b4 <ocrypto_constant_time_xor>:
 10002b4:	b430      	push	{r4, r5}

010002b6 <constant_time_xor_loop>:
 10002b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 10002ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 10002be:	406c      	eors	r4, r5
 10002c0:	f800 4b01 	strb.w	r4, [r0], #1
 10002c4:	3b01      	subs	r3, #1
 10002c6:	d1f6      	bne.n	10002b6 <constant_time_xor_loop>
 10002c8:	bc30      	pop	{r4, r5}
 10002ca:	4770      	bx	lr

010002cc <ocrypto_sha256_loop>:
 10002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10002d0:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
 10002d4:	f100 0040 	add.w	r0, r0, #64	; 0x40
 10002d8:	f04f 0e04 	mov.w	lr, #4
 10002dc:	e059      	b.n	1000392 <sha256_loop_start>

010002de <sha256_loop>:
 10002de:	b4f0      	push	{r4, r5, r6, r7}
 10002e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 10002e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 10002e4:	6804      	ldr	r4, [r0, #0]
 10002e6:	2505      	movs	r5, #5
 10002e8:	2624      	movs	r6, #36	; 0x24

010002ea <sha256_loop2>:
 10002ea:	5987      	ldr	r7, [r0, r6]
 10002ec:	443c      	add	r4, r7
 10002ee:	ea4f 4772 	mov.w	r7, r2, ror #17
 10002f2:	ea87 47f2 	eor.w	r7, r7, r2, ror #19
 10002f6:	ea87 2792 	eor.w	r7, r7, r2, lsr #10
 10002fa:	443c      	add	r4, r7
 10002fc:	6842      	ldr	r2, [r0, #4]
 10002fe:	ea4f 17f2 	mov.w	r7, r2, ror #7
 1000302:	ea87 47b2 	eor.w	r7, r7, r2, ror #18
 1000306:	ea87 07d2 	eor.w	r7, r7, r2, lsr #3
 100030a:	443c      	add	r4, r7
 100030c:	f840 4b04 	str.w	r4, [r0], #4
 1000310:	2d03      	cmp	r5, #3
 1000312:	bf08      	it	eq
 1000314:	f06f 061b 	mvneq.w	r6, #27
 1000318:	5987      	ldr	r7, [r0, r6]
 100031a:	443a      	add	r2, r7
 100031c:	ea4f 4773 	mov.w	r7, r3, ror #17
 1000320:	ea87 47f3 	eor.w	r7, r7, r3, ror #19
 1000324:	ea87 2793 	eor.w	r7, r7, r3, lsr #10
 1000328:	443a      	add	r2, r7
 100032a:	6843      	ldr	r3, [r0, #4]
 100032c:	ea4f 17f3 	mov.w	r7, r3, ror #7
 1000330:	ea87 47b3 	eor.w	r7, r7, r3, ror #18
 1000334:	ea87 07d3 	eor.w	r7, r7, r3, lsr #3
 1000338:	443a      	add	r2, r7
 100033a:	f840 2b04 	str.w	r2, [r0], #4
 100033e:	5987      	ldr	r7, [r0, r6]
 1000340:	443b      	add	r3, r7
 1000342:	ea4f 4774 	mov.w	r7, r4, ror #17
 1000346:	ea87 47f4 	eor.w	r7, r7, r4, ror #19
 100034a:	ea87 2794 	eor.w	r7, r7, r4, lsr #10
 100034e:	443b      	add	r3, r7
 1000350:	6844      	ldr	r4, [r0, #4]
 1000352:	ea4f 17f4 	mov.w	r7, r4, ror #7
 1000356:	ea87 47b4 	eor.w	r7, r7, r4, ror #18
 100035a:	ea87 07d4 	eor.w	r7, r7, r4, lsr #3
 100035e:	443b      	add	r3, r7
 1000360:	f840 3b04 	str.w	r3, [r0], #4
 1000364:	3d01      	subs	r5, #1
 1000366:	d1c0      	bne.n	10002ea <sha256_loop2>
 1000368:	f1a0 003c 	sub.w	r0, r0, #60	; 0x3c
 100036c:	6a07      	ldr	r7, [r0, #32]
 100036e:	443c      	add	r4, r7
 1000370:	ea4f 4772 	mov.w	r7, r2, ror #17
 1000374:	ea87 47f2 	eor.w	r7, r7, r2, ror #19
 1000378:	ea87 2792 	eor.w	r7, r7, r2, lsr #10
 100037c:	443c      	add	r4, r7
 100037e:	6802      	ldr	r2, [r0, #0]
 1000380:	ea4f 17f2 	mov.w	r7, r2, ror #7
 1000384:	ea87 47b2 	eor.w	r7, r7, r2, ror #18
 1000388:	ea87 07d2 	eor.w	r7, r7, r2, lsr #3
 100038c:	443c      	add	r4, r7
 100038e:	63c4      	str	r4, [r0, #60]	; 0x3c
 1000390:	bcf0      	pop	{r4, r5, r6, r7}

01000392 <sha256_loop_start>:
 1000392:	f04f 0202 	mov.w	r2, #2

01000396 <sha256_loop1>:
 1000396:	ea88 1c78 	eor.w	ip, r8, r8, ror #5
 100039a:	ea8c 4cf8 	eor.w	ip, ip, r8, ror #19
 100039e:	eb0b 1cbc 	add.w	ip, fp, ip, ror #6
 10003a2:	ea8a 0309 	eor.w	r3, sl, r9
 10003a6:	ea03 0308 	and.w	r3, r3, r8
 10003aa:	ea83 030a 	eor.w	r3, r3, sl
 10003ae:	449c      	add	ip, r3
 10003b0:	f850 3b04 	ldr.w	r3, [r0], #4
 10003b4:	449c      	add	ip, r3
 10003b6:	f851 3b04 	ldr.w	r3, [r1], #4
 10003ba:	449c      	add	ip, r3
 10003bc:	4467      	add	r7, ip
 10003be:	ea44 0b05 	orr.w	fp, r4, r5
 10003c2:	ea0b 0b06 	and.w	fp, fp, r6
 10003c6:	ea04 0305 	and.w	r3, r4, r5
 10003ca:	ea4b 0b03 	orr.w	fp, fp, r3
 10003ce:	44e3      	add	fp, ip
 10003d0:	ea84 23f4 	eor.w	r3, r4, r4, ror #11
 10003d4:	ea83 5334 	eor.w	r3, r3, r4, ror #20
 10003d8:	eb0b 0bb3 	add.w	fp, fp, r3, ror #2
 10003dc:	ea87 1c77 	eor.w	ip, r7, r7, ror #5
 10003e0:	ea8c 4cf7 	eor.w	ip, ip, r7, ror #19
 10003e4:	eb0a 1cbc 	add.w	ip, sl, ip, ror #6
 10003e8:	ea89 0308 	eor.w	r3, r9, r8
 10003ec:	ea03 0307 	and.w	r3, r3, r7
 10003f0:	ea83 0309 	eor.w	r3, r3, r9
 10003f4:	449c      	add	ip, r3
 10003f6:	f850 3b04 	ldr.w	r3, [r0], #4
 10003fa:	449c      	add	ip, r3
 10003fc:	f851 3b04 	ldr.w	r3, [r1], #4
 1000400:	449c      	add	ip, r3
 1000402:	4466      	add	r6, ip
 1000404:	ea4b 0a04 	orr.w	sl, fp, r4
 1000408:	ea0a 0a05 	and.w	sl, sl, r5
 100040c:	ea0b 0304 	and.w	r3, fp, r4
 1000410:	ea4a 0a03 	orr.w	sl, sl, r3
 1000414:	44e2      	add	sl, ip
 1000416:	ea8b 23fb 	eor.w	r3, fp, fp, ror #11
 100041a:	ea83 533b 	eor.w	r3, r3, fp, ror #20
 100041e:	eb0a 0ab3 	add.w	sl, sl, r3, ror #2
 1000422:	ea86 1c76 	eor.w	ip, r6, r6, ror #5
 1000426:	ea8c 4cf6 	eor.w	ip, ip, r6, ror #19
 100042a:	eb09 1cbc 	add.w	ip, r9, ip, ror #6
 100042e:	ea88 0307 	eor.w	r3, r8, r7
 1000432:	ea03 0306 	and.w	r3, r3, r6
 1000436:	ea83 0308 	eor.w	r3, r3, r8
 100043a:	449c      	add	ip, r3
 100043c:	f850 3b04 	ldr.w	r3, [r0], #4
 1000440:	449c      	add	ip, r3
 1000442:	f851 3b04 	ldr.w	r3, [r1], #4
 1000446:	449c      	add	ip, r3
 1000448:	4465      	add	r5, ip
 100044a:	ea4a 090b 	orr.w	r9, sl, fp
 100044e:	ea09 0904 	and.w	r9, r9, r4
 1000452:	ea0a 030b 	and.w	r3, sl, fp
 1000456:	ea49 0903 	orr.w	r9, r9, r3
 100045a:	44e1      	add	r9, ip
 100045c:	ea8a 23fa 	eor.w	r3, sl, sl, ror #11
 1000460:	ea83 533a 	eor.w	r3, r3, sl, ror #20
 1000464:	eb09 09b3 	add.w	r9, r9, r3, ror #2
 1000468:	ea85 1c75 	eor.w	ip, r5, r5, ror #5
 100046c:	ea8c 4cf5 	eor.w	ip, ip, r5, ror #19
 1000470:	eb08 1cbc 	add.w	ip, r8, ip, ror #6
 1000474:	ea87 0306 	eor.w	r3, r7, r6
 1000478:	ea03 0305 	and.w	r3, r3, r5
 100047c:	ea83 0307 	eor.w	r3, r3, r7
 1000480:	449c      	add	ip, r3
 1000482:	f850 3b04 	ldr.w	r3, [r0], #4
 1000486:	449c      	add	ip, r3
 1000488:	f851 3b04 	ldr.w	r3, [r1], #4
 100048c:	449c      	add	ip, r3
 100048e:	4464      	add	r4, ip
 1000490:	ea49 080a 	orr.w	r8, r9, sl
 1000494:	ea08 080b 	and.w	r8, r8, fp
 1000498:	ea09 030a 	and.w	r3, r9, sl
 100049c:	ea48 0803 	orr.w	r8, r8, r3
 10004a0:	44e0      	add	r8, ip
 10004a2:	ea89 23f9 	eor.w	r3, r9, r9, ror #11
 10004a6:	ea83 5339 	eor.w	r3, r3, r9, ror #20
 10004aa:	eb08 08b3 	add.w	r8, r8, r3, ror #2
 10004ae:	ea84 1c74 	eor.w	ip, r4, r4, ror #5
 10004b2:	ea8c 4cf4 	eor.w	ip, ip, r4, ror #19
 10004b6:	eb07 1cbc 	add.w	ip, r7, ip, ror #6
 10004ba:	ea86 0305 	eor.w	r3, r6, r5
 10004be:	ea03 0304 	and.w	r3, r3, r4
 10004c2:	ea83 0306 	eor.w	r3, r3, r6
 10004c6:	449c      	add	ip, r3
 10004c8:	f850 3b04 	ldr.w	r3, [r0], #4
 10004cc:	449c      	add	ip, r3
 10004ce:	f851 3b04 	ldr.w	r3, [r1], #4
 10004d2:	449c      	add	ip, r3
 10004d4:	44e3      	add	fp, ip
 10004d6:	ea48 0709 	orr.w	r7, r8, r9
 10004da:	ea07 070a 	and.w	r7, r7, sl
 10004de:	ea08 0309 	and.w	r3, r8, r9
 10004e2:	ea47 0703 	orr.w	r7, r7, r3
 10004e6:	4467      	add	r7, ip
 10004e8:	ea88 23f8 	eor.w	r3, r8, r8, ror #11
 10004ec:	ea83 5338 	eor.w	r3, r3, r8, ror #20
 10004f0:	eb07 07b3 	add.w	r7, r7, r3, ror #2
 10004f4:	ea8b 1c7b 	eor.w	ip, fp, fp, ror #5
 10004f8:	ea8c 4cfb 	eor.w	ip, ip, fp, ror #19
 10004fc:	eb06 1cbc 	add.w	ip, r6, ip, ror #6
 1000500:	ea85 0304 	eor.w	r3, r5, r4
 1000504:	ea03 030b 	and.w	r3, r3, fp
 1000508:	ea83 0305 	eor.w	r3, r3, r5
 100050c:	449c      	add	ip, r3
 100050e:	f850 3b04 	ldr.w	r3, [r0], #4
 1000512:	449c      	add	ip, r3
 1000514:	f851 3b04 	ldr.w	r3, [r1], #4
 1000518:	449c      	add	ip, r3
 100051a:	44e2      	add	sl, ip
 100051c:	ea47 0608 	orr.w	r6, r7, r8
 1000520:	ea06 0609 	and.w	r6, r6, r9
 1000524:	ea07 0308 	and.w	r3, r7, r8
 1000528:	ea46 0603 	orr.w	r6, r6, r3
 100052c:	4466      	add	r6, ip
 100052e:	ea87 23f7 	eor.w	r3, r7, r7, ror #11
 1000532:	ea83 5337 	eor.w	r3, r3, r7, ror #20
 1000536:	eb06 06b3 	add.w	r6, r6, r3, ror #2
 100053a:	ea8a 1c7a 	eor.w	ip, sl, sl, ror #5
 100053e:	ea8c 4cfa 	eor.w	ip, ip, sl, ror #19
 1000542:	eb05 1cbc 	add.w	ip, r5, ip, ror #6
 1000546:	ea84 030b 	eor.w	r3, r4, fp
 100054a:	ea03 030a 	and.w	r3, r3, sl
 100054e:	ea83 0304 	eor.w	r3, r3, r4
 1000552:	449c      	add	ip, r3
 1000554:	f850 3b04 	ldr.w	r3, [r0], #4
 1000558:	449c      	add	ip, r3
 100055a:	f851 3b04 	ldr.w	r3, [r1], #4
 100055e:	449c      	add	ip, r3
 1000560:	44e1      	add	r9, ip
 1000562:	ea46 0507 	orr.w	r5, r6, r7
 1000566:	ea05 0508 	and.w	r5, r5, r8
 100056a:	ea06 0307 	and.w	r3, r6, r7
 100056e:	ea45 0503 	orr.w	r5, r5, r3
 1000572:	4465      	add	r5, ip
 1000574:	ea86 23f6 	eor.w	r3, r6, r6, ror #11
 1000578:	ea83 5336 	eor.w	r3, r3, r6, ror #20
 100057c:	eb05 05b3 	add.w	r5, r5, r3, ror #2
 1000580:	ea89 1c79 	eor.w	ip, r9, r9, ror #5
 1000584:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 1000588:	eb04 1cbc 	add.w	ip, r4, ip, ror #6
 100058c:	ea8b 030a 	eor.w	r3, fp, sl
 1000590:	ea03 0309 	and.w	r3, r3, r9
 1000594:	ea83 030b 	eor.w	r3, r3, fp
 1000598:	449c      	add	ip, r3
 100059a:	f850 3b04 	ldr.w	r3, [r0], #4
 100059e:	449c      	add	ip, r3
 10005a0:	f851 3b04 	ldr.w	r3, [r1], #4
 10005a4:	449c      	add	ip, r3
 10005a6:	44e0      	add	r8, ip
 10005a8:	ea45 0406 	orr.w	r4, r5, r6
 10005ac:	ea04 0407 	and.w	r4, r4, r7
 10005b0:	ea05 0306 	and.w	r3, r5, r6
 10005b4:	ea44 0403 	orr.w	r4, r4, r3
 10005b8:	4464      	add	r4, ip
 10005ba:	ea85 23f5 	eor.w	r3, r5, r5, ror #11
 10005be:	ea83 5335 	eor.w	r3, r3, r5, ror #20
 10005c2:	eb04 04b3 	add.w	r4, r4, r3, ror #2
 10005c6:	3a01      	subs	r2, #1
 10005c8:	f47f aee5 	bne.w	1000396 <sha256_loop1>
 10005cc:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
 10005d0:	f1be 0e01 	subs.w	lr, lr, #1
 10005d4:	f47f ae83 	bne.w	10002de <sha256_loop>
 10005d8:	f1a0 0c40 	sub.w	ip, r0, #64	; 0x40
 10005dc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 10005e0:	1900      	adds	r0, r0, r4
 10005e2:	1949      	adds	r1, r1, r5
 10005e4:	1992      	adds	r2, r2, r6
 10005e6:	19db      	adds	r3, r3, r7
 10005e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 10005ec:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 10005f0:	4440      	add	r0, r8
 10005f2:	4449      	add	r1, r9
 10005f4:	4452      	add	r2, sl
 10005f6:	445b      	add	r3, fp
 10005f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 10005fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01000600 <__udivmoddi4>:
 1000600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1000604:	4686      	mov	lr, r0
 1000606:	468c      	mov	ip, r1
 1000608:	4608      	mov	r0, r1
 100060a:	9e08      	ldr	r6, [sp, #32]
 100060c:	4615      	mov	r5, r2
 100060e:	4674      	mov	r4, lr
 1000610:	4619      	mov	r1, r3
 1000612:	2b00      	cmp	r3, #0
 1000614:	f040 80c1 	bne.w	100079a <__udivmoddi4+0x19a>
 1000618:	4285      	cmp	r5, r0
 100061a:	fab2 f282 	clz	r2, r2
 100061e:	d945      	bls.n	10006ac <__udivmoddi4+0xac>
 1000620:	b14a      	cbz	r2, 1000636 <__udivmoddi4+0x36>
 1000622:	f1c2 0320 	rsb	r3, r2, #32
 1000626:	fa00 fc02 	lsl.w	ip, r0, r2
 100062a:	4095      	lsls	r5, r2
 100062c:	4094      	lsls	r4, r2
 100062e:	fa2e f303 	lsr.w	r3, lr, r3
 1000632:	ea43 0c0c 	orr.w	ip, r3, ip
 1000636:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 100063a:	b2a8      	uxth	r0, r5
 100063c:	0c23      	lsrs	r3, r4, #16
 100063e:	fbbc f8fe 	udiv	r8, ip, lr
 1000642:	fb0e cc18 	mls	ip, lr, r8, ip
 1000646:	fb08 f900 	mul.w	r9, r8, r0
 100064a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 100064e:	4599      	cmp	r9, r3
 1000650:	d928      	bls.n	10006a4 <__udivmoddi4+0xa4>
 1000652:	18eb      	adds	r3, r5, r3
 1000654:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 1000658:	d204      	bcs.n	1000664 <__udivmoddi4+0x64>
 100065a:	4599      	cmp	r9, r3
 100065c:	d902      	bls.n	1000664 <__udivmoddi4+0x64>
 100065e:	f1a8 0702 	sub.w	r7, r8, #2
 1000662:	442b      	add	r3, r5
 1000664:	eba3 0309 	sub.w	r3, r3, r9
 1000668:	b2a4      	uxth	r4, r4
 100066a:	fbb3 fcfe 	udiv	ip, r3, lr
 100066e:	fb0e 331c 	mls	r3, lr, ip, r3
 1000672:	fb0c f000 	mul.w	r0, ip, r0
 1000676:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 100067a:	42a0      	cmp	r0, r4
 100067c:	d914      	bls.n	10006a8 <__udivmoddi4+0xa8>
 100067e:	192c      	adds	r4, r5, r4
 1000680:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 1000684:	d204      	bcs.n	1000690 <__udivmoddi4+0x90>
 1000686:	42a0      	cmp	r0, r4
 1000688:	d902      	bls.n	1000690 <__udivmoddi4+0x90>
 100068a:	f1ac 0302 	sub.w	r3, ip, #2
 100068e:	442c      	add	r4, r5
 1000690:	1a24      	subs	r4, r4, r0
 1000692:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 1000696:	b11e      	cbz	r6, 10006a0 <__udivmoddi4+0xa0>
 1000698:	40d4      	lsrs	r4, r2
 100069a:	2300      	movs	r3, #0
 100069c:	6034      	str	r4, [r6, #0]
 100069e:	6073      	str	r3, [r6, #4]
 10006a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10006a4:	4647      	mov	r7, r8
 10006a6:	e7dd      	b.n	1000664 <__udivmoddi4+0x64>
 10006a8:	4663      	mov	r3, ip
 10006aa:	e7f1      	b.n	1000690 <__udivmoddi4+0x90>
 10006ac:	bb92      	cbnz	r2, 1000714 <__udivmoddi4+0x114>
 10006ae:	1b43      	subs	r3, r0, r5
 10006b0:	2101      	movs	r1, #1
 10006b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10006b6:	b2af      	uxth	r7, r5
 10006b8:	0c20      	lsrs	r0, r4, #16
 10006ba:	fbb3 fcfe 	udiv	ip, r3, lr
 10006be:	fb0e 331c 	mls	r3, lr, ip, r3
 10006c2:	fb0c f807 	mul.w	r8, ip, r7
 10006c6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 10006ca:	4598      	cmp	r8, r3
 10006cc:	d961      	bls.n	1000792 <__udivmoddi4+0x192>
 10006ce:	18eb      	adds	r3, r5, r3
 10006d0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 10006d4:	d204      	bcs.n	10006e0 <__udivmoddi4+0xe0>
 10006d6:	4598      	cmp	r8, r3
 10006d8:	d902      	bls.n	10006e0 <__udivmoddi4+0xe0>
 10006da:	f1ac 0002 	sub.w	r0, ip, #2
 10006de:	442b      	add	r3, r5
 10006e0:	eba3 0308 	sub.w	r3, r3, r8
 10006e4:	b2a4      	uxth	r4, r4
 10006e6:	fbb3 fcfe 	udiv	ip, r3, lr
 10006ea:	fb0e 331c 	mls	r3, lr, ip, r3
 10006ee:	fb0c f707 	mul.w	r7, ip, r7
 10006f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 10006f6:	42a7      	cmp	r7, r4
 10006f8:	d94d      	bls.n	1000796 <__udivmoddi4+0x196>
 10006fa:	192c      	adds	r4, r5, r4
 10006fc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 1000700:	d204      	bcs.n	100070c <__udivmoddi4+0x10c>
 1000702:	42a7      	cmp	r7, r4
 1000704:	d902      	bls.n	100070c <__udivmoddi4+0x10c>
 1000706:	f1ac 0302 	sub.w	r3, ip, #2
 100070a:	442c      	add	r4, r5
 100070c:	1be4      	subs	r4, r4, r7
 100070e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000712:	e7c0      	b.n	1000696 <__udivmoddi4+0x96>
 1000714:	f1c2 0320 	rsb	r3, r2, #32
 1000718:	4095      	lsls	r5, r2
 100071a:	4094      	lsls	r4, r2
 100071c:	fa20 f103 	lsr.w	r1, r0, r3
 1000720:	fa2e f303 	lsr.w	r3, lr, r3
 1000724:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 1000728:	4090      	lsls	r0, r2
 100072a:	b2af      	uxth	r7, r5
 100072c:	4303      	orrs	r3, r0
 100072e:	fbb1 fcfe 	udiv	ip, r1, lr
 1000732:	fb0e 101c 	mls	r0, lr, ip, r1
 1000736:	0c19      	lsrs	r1, r3, #16
 1000738:	fb0c f807 	mul.w	r8, ip, r7
 100073c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1000740:	4588      	cmp	r8, r1
 1000742:	d922      	bls.n	100078a <__udivmoddi4+0x18a>
 1000744:	1869      	adds	r1, r5, r1
 1000746:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 100074a:	d204      	bcs.n	1000756 <__udivmoddi4+0x156>
 100074c:	4588      	cmp	r8, r1
 100074e:	d902      	bls.n	1000756 <__udivmoddi4+0x156>
 1000750:	f1ac 0002 	sub.w	r0, ip, #2
 1000754:	4429      	add	r1, r5
 1000756:	eba1 0108 	sub.w	r1, r1, r8
 100075a:	b29b      	uxth	r3, r3
 100075c:	fbb1 fcfe 	udiv	ip, r1, lr
 1000760:	fb0e 111c 	mls	r1, lr, ip, r1
 1000764:	fb0c f707 	mul.w	r7, ip, r7
 1000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 100076c:	429f      	cmp	r7, r3
 100076e:	d90e      	bls.n	100078e <__udivmoddi4+0x18e>
 1000770:	18eb      	adds	r3, r5, r3
 1000772:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 1000776:	d204      	bcs.n	1000782 <__udivmoddi4+0x182>
 1000778:	429f      	cmp	r7, r3
 100077a:	d902      	bls.n	1000782 <__udivmoddi4+0x182>
 100077c:	f1ac 0102 	sub.w	r1, ip, #2
 1000780:	442b      	add	r3, r5
 1000782:	1bdb      	subs	r3, r3, r7
 1000784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1000788:	e793      	b.n	10006b2 <__udivmoddi4+0xb2>
 100078a:	4660      	mov	r0, ip
 100078c:	e7e3      	b.n	1000756 <__udivmoddi4+0x156>
 100078e:	4661      	mov	r1, ip
 1000790:	e7f7      	b.n	1000782 <__udivmoddi4+0x182>
 1000792:	4660      	mov	r0, ip
 1000794:	e7a4      	b.n	10006e0 <__udivmoddi4+0xe0>
 1000796:	4663      	mov	r3, ip
 1000798:	e7b8      	b.n	100070c <__udivmoddi4+0x10c>
 100079a:	4283      	cmp	r3, r0
 100079c:	d906      	bls.n	10007ac <__udivmoddi4+0x1ac>
 100079e:	b916      	cbnz	r6, 10007a6 <__udivmoddi4+0x1a6>
 10007a0:	2100      	movs	r1, #0
 10007a2:	4608      	mov	r0, r1
 10007a4:	e77c      	b.n	10006a0 <__udivmoddi4+0xa0>
 10007a6:	e9c6 e000 	strd	lr, r0, [r6]
 10007aa:	e7f9      	b.n	10007a0 <__udivmoddi4+0x1a0>
 10007ac:	fab3 f783 	clz	r7, r3
 10007b0:	b98f      	cbnz	r7, 10007d6 <__udivmoddi4+0x1d6>
 10007b2:	4283      	cmp	r3, r0
 10007b4:	d301      	bcc.n	10007ba <__udivmoddi4+0x1ba>
 10007b6:	4572      	cmp	r2, lr
 10007b8:	d808      	bhi.n	10007cc <__udivmoddi4+0x1cc>
 10007ba:	ebbe 0402 	subs.w	r4, lr, r2
 10007be:	eb60 0303 	sbc.w	r3, r0, r3
 10007c2:	2001      	movs	r0, #1
 10007c4:	469c      	mov	ip, r3
 10007c6:	b91e      	cbnz	r6, 10007d0 <__udivmoddi4+0x1d0>
 10007c8:	2100      	movs	r1, #0
 10007ca:	e769      	b.n	10006a0 <__udivmoddi4+0xa0>
 10007cc:	4638      	mov	r0, r7
 10007ce:	e7fa      	b.n	10007c6 <__udivmoddi4+0x1c6>
 10007d0:	e9c6 4c00 	strd	r4, ip, [r6]
 10007d4:	e7f8      	b.n	10007c8 <__udivmoddi4+0x1c8>
 10007d6:	f1c7 0c20 	rsb	ip, r7, #32
 10007da:	40bb      	lsls	r3, r7
 10007dc:	fa0e f507 	lsl.w	r5, lr, r7
 10007e0:	fa22 f40c 	lsr.w	r4, r2, ip
 10007e4:	fa2e f10c 	lsr.w	r1, lr, ip
 10007e8:	40ba      	lsls	r2, r7
 10007ea:	431c      	orrs	r4, r3
 10007ec:	fa20 f30c 	lsr.w	r3, r0, ip
 10007f0:	40b8      	lsls	r0, r7
 10007f2:	ea4f 4914 	mov.w	r9, r4, lsr #16
 10007f6:	4301      	orrs	r1, r0
 10007f8:	fa1f fe84 	uxth.w	lr, r4
 10007fc:	fbb3 f8f9 	udiv	r8, r3, r9
 1000800:	fb09 3018 	mls	r0, r9, r8, r3
 1000804:	0c0b      	lsrs	r3, r1, #16
 1000806:	fb08 fa0e 	mul.w	sl, r8, lr
 100080a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 100080e:	459a      	cmp	sl, r3
 1000810:	d940      	bls.n	1000894 <__udivmoddi4+0x294>
 1000812:	18e3      	adds	r3, r4, r3
 1000814:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 1000818:	d204      	bcs.n	1000824 <__udivmoddi4+0x224>
 100081a:	459a      	cmp	sl, r3
 100081c:	d902      	bls.n	1000824 <__udivmoddi4+0x224>
 100081e:	f1a8 0002 	sub.w	r0, r8, #2
 1000822:	4423      	add	r3, r4
 1000824:	eba3 030a 	sub.w	r3, r3, sl
 1000828:	b289      	uxth	r1, r1
 100082a:	fbb3 f8f9 	udiv	r8, r3, r9
 100082e:	fb09 3318 	mls	r3, r9, r8, r3
 1000832:	fb08 fe0e 	mul.w	lr, r8, lr
 1000836:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 100083a:	458e      	cmp	lr, r1
 100083c:	d92c      	bls.n	1000898 <__udivmoddi4+0x298>
 100083e:	1861      	adds	r1, r4, r1
 1000840:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 1000844:	d204      	bcs.n	1000850 <__udivmoddi4+0x250>
 1000846:	458e      	cmp	lr, r1
 1000848:	d902      	bls.n	1000850 <__udivmoddi4+0x250>
 100084a:	f1a8 0302 	sub.w	r3, r8, #2
 100084e:	4421      	add	r1, r4
 1000850:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000854:	eba1 010e 	sub.w	r1, r1, lr
 1000858:	fba0 9802 	umull	r9, r8, r0, r2
 100085c:	4541      	cmp	r1, r8
 100085e:	46ce      	mov	lr, r9
 1000860:	4643      	mov	r3, r8
 1000862:	d302      	bcc.n	100086a <__udivmoddi4+0x26a>
 1000864:	d106      	bne.n	1000874 <__udivmoddi4+0x274>
 1000866:	454d      	cmp	r5, r9
 1000868:	d204      	bcs.n	1000874 <__udivmoddi4+0x274>
 100086a:	3801      	subs	r0, #1
 100086c:	ebb9 0e02 	subs.w	lr, r9, r2
 1000870:	eb68 0304 	sbc.w	r3, r8, r4
 1000874:	2e00      	cmp	r6, #0
 1000876:	d0a7      	beq.n	10007c8 <__udivmoddi4+0x1c8>
 1000878:	ebb5 020e 	subs.w	r2, r5, lr
 100087c:	eb61 0103 	sbc.w	r1, r1, r3
 1000880:	fa01 fc0c 	lsl.w	ip, r1, ip
 1000884:	fa22 f307 	lsr.w	r3, r2, r7
 1000888:	40f9      	lsrs	r1, r7
 100088a:	ea4c 0303 	orr.w	r3, ip, r3
 100088e:	e9c6 3100 	strd	r3, r1, [r6]
 1000892:	e799      	b.n	10007c8 <__udivmoddi4+0x1c8>
 1000894:	4640      	mov	r0, r8
 1000896:	e7c5      	b.n	1000824 <__udivmoddi4+0x224>
 1000898:	4643      	mov	r3, r8
 100089a:	e7d9      	b.n	1000850 <__udivmoddi4+0x250>

0100089c <main>:
#include <dfu/pcd.h>
#include <zephyr/device.h>
#include <zephyr/devicetree.h>

int main(void)
{
 100089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 10008a0:	b085      	sub	sp, #20
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 10008a2:	4830      	ldr	r0, [pc, #192]	; (1000964 <main+0xc8>)
 10008a4:	f003 fca4 	bl	10041f0 <z_device_is_ready>
	int err;
	const struct device *fdev = DEVICE_DT_GET(DT_CHOSEN(zephyr_flash_controller));

	if (!device_is_ready(fdev)) {
 10008a8:	b930      	cbnz	r0, 10008b8 <main+0x1c>
		printk("Flash device not ready\n");
 10008aa:	482f      	ldr	r0, [pc, #188]	; (1000968 <main+0xcc>)
 10008ac:	f003 f996 	bl	1003bdc <printk>
	return 0;

failure:
	pcd_fw_copy_invalidate();
	return 0;
}
 10008b0:	2000      	movs	r0, #0
 10008b2:	b005      	add	sp, #20
 10008b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = fprotect_area(PM_B0N_CONTAINER_ADDRESS, PM_B0N_CONTAINER_SIZE);
 10008b8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 10008bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 10008c0:	f003 fbef 	bl	10040a2 <fprotect_area>
	if (err) {
 10008c4:	b128      	cbz	r0, 10008d2 <main+0x36>
		printk("Failed to protect b0n flash, cancel startup\n\r");
 10008c6:	4829      	ldr	r0, [pc, #164]	; (100096c <main+0xd0>)
 10008c8:	f003 f988 	bl	1003bdc <printk>
	pcd_fw_copy_invalidate();
 10008cc:	f002 f9b0 	bl	1002c30 <pcd_fw_copy_invalidate>
	return 0;
 10008d0:	e7ee      	b.n	10008b0 <main+0x14>
	uint32_t s0_addr = s0_address_read();
 10008d2:	f002 f9a7 	bl	1002c24 <s0_address_read>
 10008d6:	4605      	mov	r5, r0
	if (pcd_fw_copy_status_get() == PCD_STATUS_COPY) {
 10008d8:	f002 f9b2 	bl	1002c40 <pcd_fw_copy_status_get>
 10008dc:	b9e8      	cbnz	r0, 100091a <main+0x7e>
		uint32_t update_addr = (uint32_t)pcd_cmd_data_ptr_get();
 10008de:	f003 fc58 	bl	1004192 <pcd_cmd_data_ptr_get>
 10008e2:	4604      	mov	r4, r0
		valid = bl_validate_firmware(s0_addr, update_addr);
 10008e4:	4601      	mov	r1, r0
 10008e6:	4628      	mov	r0, r5
 10008e8:	f003 fc17 	bl	100411a <bl_validate_firmware>
		if (!valid) {
 10008ec:	b910      	cbnz	r0, 10008f4 <main+0x58>
			printk("Unable to find valid firmware inside %p\n\r",
 10008ee:	4621      	mov	r1, r4
			printk("Unable to find valid firmware inside %p\n\r",
 10008f0:	481f      	ldr	r0, [pc, #124]	; (1000970 <main+0xd4>)
 10008f2:	e005      	b.n	1000900 <main+0x64>
		err = pcd_fw_copy(fdev);
 10008f4:	481b      	ldr	r0, [pc, #108]	; (1000964 <main+0xc8>)
 10008f6:	f002 f9b5 	bl	1002c64 <pcd_fw_copy>
		if (err != 0) {
 10008fa:	4601      	mov	r1, r0
 10008fc:	b118      	cbz	r0, 1000906 <main+0x6a>
			printk("Failed to transfer image: %d\n\r", err);
 10008fe:	481d      	ldr	r0, [pc, #116]	; (1000974 <main+0xd8>)
		printk("Failed to protect app flash: %d\n\r", err);
 1000900:	f003 f96c 	bl	1003bdc <printk>
		goto failure;
 1000904:	e7e2      	b.n	10008cc <main+0x30>
		valid = bl_validate_firmware(s0_addr, s0_addr);
 1000906:	4629      	mov	r1, r5
 1000908:	4628      	mov	r0, r5
 100090a:	f003 fc06 	bl	100411a <bl_validate_firmware>
		if (valid) {
 100090e:	b110      	cbz	r0, 1000916 <main+0x7a>
			pcd_fw_copy_done();
 1000910:	f002 f9e4 	bl	1002cdc <pcd_fw_copy_done>
		while (1)
 1000914:	e7fe      	b.n	1000914 <main+0x78>
			printk("Unable to find valid firmware inside %p\n\r",
 1000916:	4629      	mov	r1, r5
 1000918:	e7ea      	b.n	10008f0 <main+0x54>
	err = fprotect_area(PM_APP_ADDRESS, PM_APP_SIZE);
 100091a:	f44f 315e 	mov.w	r1, #227328	; 0x37800
 100091e:	4816      	ldr	r0, [pc, #88]	; (1000978 <main+0xdc>)
 1000920:	f003 fbbf 	bl	10040a2 <fprotect_area>
	if (err) {
 1000924:	4601      	mov	r1, r0
 1000926:	b108      	cbz	r0, 100092c <main+0x90>
		printk("Failed to protect app flash: %d\n\r", err);
 1000928:	4814      	ldr	r0, [pc, #80]	; (100097c <main+0xe0>)
 100092a:	e7e9      	b.n	1000900 <main+0x64>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 100092c:	4604      	mov	r4, r0
 100092e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1000980 <main+0xe4>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
 1000932:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1000984 <main+0xe8>
 1000936:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
 1000938:	f859 6b04 	ldr.w	r6, [r9], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
 100093c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	finfo = (const struct fw_info *)(fw_info_addr);
 1000940:	442e      	add	r6, r5
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
 1000942:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
 1000946:	220c      	movs	r2, #12
 1000948:	4639      	mov	r1, r7
 100094a:	4630      	mov	r0, r6
 100094c:	f003 faaf 	bl	1003eae <memcmp>
 1000950:	b900      	cbnz	r0, 1000954 <main+0xb8>
		if (finfo) {
 1000952:	b91e      	cbnz	r6, 100095c <main+0xc0>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 1000954:	3401      	adds	r4, #1
 1000956:	2c05      	cmp	r4, #5
 1000958:	d1ee      	bne.n	1000938 <main+0x9c>
			return finfo;
		}
	}
	return NULL;
 100095a:	2600      	movs	r6, #0
	bl_boot(fw_info_find(s0_addr));
 100095c:	4630      	mov	r0, r6
 100095e:	f001 ffa3 	bl	10028a8 <bl_boot>
	return 0;
 1000962:	e7a5      	b.n	10008b0 <main+0x14>
 1000964:	0100426c 	.word	0x0100426c
 1000968:	010045dc 	.word	0x010045dc
 100096c:	010045f4 	.word	0x010045f4
 1000970:	01004622 	.word	0x01004622
 1000974:	0100464c 	.word	0x0100464c
 1000978:	01008800 	.word	0x01008800
 100097c:	0100466b 	.word	0x0100466b
 1000980:	01004418 	.word	0x01004418
 1000984:	010043d0 	.word	0x010043d0

01000988 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 1000988:	4b01      	ldr	r3, [pc, #4]	; (1000990 <char_out+0x8>)
 100098a:	681b      	ldr	r3, [r3, #0]
 100098c:	4718      	bx	r3
 100098e:	bf00      	nop
 1000990:	21000000 	.word	0x21000000

01000994 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 1000994:	b507      	push	{r0, r1, r2, lr}
 1000996:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 1000998:	2100      	movs	r1, #0
 100099a:	4602      	mov	r2, r0
 100099c:	9100      	str	r1, [sp, #0]
 100099e:	4803      	ldr	r0, [pc, #12]	; (10009ac <vprintk+0x18>)
 10009a0:	f000 fa08 	bl	1000db4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 10009a4:	b003      	add	sp, #12
 10009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 10009aa:	bf00      	nop
 10009ac:	01000989 	.word	0x01000989

010009b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 10009b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10009b4:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10009b6:	8b02      	ldrh	r2, [r0, #24]
{
 10009b8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 10009ba:	0710      	lsls	r0, r2, #28
 10009bc:	d412      	bmi.n	10009e4 <process_event+0x34>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
 10009be:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10009c0:	f002 0207 	and.w	r2, r2, #7
		if (evt == EVT_RECHECK) {
 10009c4:	d15b      	bne.n	1000a7e <process_event+0xce>
			evt = process_recheck(mgr);
 10009c6:	4620      	mov	r0, r4
 10009c8:	f003 f915 	bl	1003bf6 <process_recheck>
		}

		if (evt == EVT_NOP) {
 10009cc:	b188      	cbz	r0, 10009f2 <process_event+0x42>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
 10009ce:	3801      	subs	r0, #1
 10009d0:	2804      	cmp	r0, #4
 10009d2:	f200 8110 	bhi.w	1000bf6 <process_event+0x246>
 10009d6:	e8df f010 	tbh	[pc, r0, lsl #1]
 10009da:	0052      	.short	0x0052
 10009dc:	0074010e 	.word	0x0074010e
 10009e0:	00e000b3 	.word	0x00e000b3
		if (evt == EVT_COMPLETE) {
 10009e4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 10009e6:	bf0c      	ite	eq
 10009e8:	f042 0210 	orreq.w	r2, r2, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
 10009ec:	f042 0220 	orrne.w	r2, r2, #32
 10009f0:	8322      	strh	r2, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 10009f2:	f386 8811 	msr	BASEPRI, r6
 10009f6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 10009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 10009fe:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 1000a02:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 1000a04:	2801      	cmp	r0, #1
 1000a06:	d81e      	bhi.n	1000a46 <process_event+0x96>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 1000a08:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
 1000a0a:	2906      	cmp	r1, #6
		*clients = mgr->clients;
 1000a0c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
 1000a0e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 1000a12:	d114      	bne.n	1000a3e <process_event+0x8e>
		*clients = mgr->clients;
 1000a14:	4639      	mov	r1, r7
 1000a16:	e003      	b.n	1000a20 <process_event+0x70>
				mgr->refs += 1U;
 1000a18:	8b60      	ldrh	r0, [r4, #26]
 1000a1a:	3001      	adds	r0, #1
 1000a1c:	8360      	strh	r0, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 1000a1e:	6809      	ldr	r1, [r1, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 1000a20:	2900      	cmp	r1, #0
 1000a22:	d1f9      	bne.n	1000a18 <process_event+0x68>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000a24:	f023 0307 	bic.w	r3, r3, #7
 1000a28:	f043 0102 	orr.w	r1, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
 1000a2c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000a2e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1000a30:	f003 f8e1 	bl	1003bf6 <process_recheck>
 1000a34:	b390      	cbz	r0, 1000a9c <process_event+0xec>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000a36:	f041 0120 	orr.w	r1, r1, #32
 1000a3a:	8321      	strh	r1, [r4, #24]
 1000a3c:	e02e      	b.n	1000a9c <process_event+0xec>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000a3e:	f023 0307 	bic.w	r3, r3, #7
 1000a42:	b299      	uxth	r1, r3
}
 1000a44:	e7f2      	b.n	1000a2c <process_event+0x7c>
	} else if (state == ONOFF_STATE_TO_OFF) {
 1000a46:	2904      	cmp	r1, #4
 1000a48:	d130      	bne.n	1000aac <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000a4a:	f023 0307 	bic.w	r3, r3, #7
 1000a4e:	b299      	uxth	r1, r3
		if (process_recheck(mgr) != EVT_NOP) {
 1000a50:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000a52:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1000a54:	f003 f8cf 	bl	1003bf6 <process_recheck>
 1000a58:	b110      	cbz	r0, 1000a60 <process_event+0xb0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000a5a:	f041 0120 	orr.w	r1, r1, #32
 1000a5e:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000a60:	8b23      	ldrh	r3, [r4, #24]
 1000a62:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000a66:	4591      	cmp	r9, r2
 1000a68:	f040 80ce 	bne.w	1000c08 <process_event+0x258>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 1000a6c:	8b22      	ldrh	r2, [r4, #24]
 1000a6e:	06d1      	lsls	r1, r2, #27
 1000a70:	f140 80f6 	bpl.w	1000c60 <process_event+0x2b0>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000a74:	f022 0310 	bic.w	r3, r2, #16
 1000a78:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000a7a:	f002 0207 	and.w	r2, r2, #7
			res = mgr->last_res;
 1000a7e:	f8d4 8014 	ldr.w	r8, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000a82:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
 1000a84:	f1b8 0f00 	cmp.w	r8, #0
 1000a88:	dab9      	bge.n	10009fe <process_event+0x4e>
	list->head = NULL;
 1000a8a:	2100      	movs	r1, #0
		*clients = mgr->clients;
 1000a8c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000a8e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
 1000a92:	e9c4 1100 	strd	r1, r1, [r4]
 1000a96:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000a9a:	8323      	strh	r3, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000a9c:	8b23      	ldrh	r3, [r4, #24]
 1000a9e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000aa2:	4591      	cmp	r9, r2
 1000aa4:	f000 80e5 	beq.w	1000c72 <process_event+0x2c2>
 1000aa8:	2500      	movs	r5, #0
 1000aaa:	e036      	b.n	1000b1a <process_event+0x16a>
		__ASSERT_NO_MSG(false);
 1000aac:	497c      	ldr	r1, [pc, #496]	; (1000ca0 <process_event+0x2f0>)
 1000aae:	f240 121b 	movw	r2, #283	; 0x11b
 1000ab2:	487c      	ldr	r0, [pc, #496]	; (1000ca4 <process_event+0x2f4>)
 1000ab4:	f003 f977 	bl	1003da6 <assert_print>
 1000ab8:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
 1000abc:	4878      	ldr	r0, [pc, #480]	; (1000ca0 <process_event+0x2f0>)
 1000abe:	f003 f96b 	bl	1003d98 <assert_post_action>
 1000ac2:	b142      	cbz	r2, 1000ad6 <process_event+0x126>
 1000ac4:	4976      	ldr	r1, [pc, #472]	; (1000ca0 <process_event+0x2f0>)
 1000ac6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 1000aca:	4876      	ldr	r0, [pc, #472]	; (1000ca4 <process_event+0x2f4>)
 1000acc:	f003 f96b 	bl	1003da6 <assert_print>
 1000ad0:	f44f 71ab 	mov.w	r1, #342	; 0x156
 1000ad4:	e7f2      	b.n	1000abc <process_event+0x10c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
 1000ad6:	6823      	ldr	r3, [r4, #0]
 1000ad8:	b943      	cbnz	r3, 1000aec <process_event+0x13c>
 1000ada:	4971      	ldr	r1, [pc, #452]	; (1000ca0 <process_event+0x2f0>)
 1000adc:	f240 1257 	movw	r2, #343	; 0x157
 1000ae0:	4870      	ldr	r0, [pc, #448]	; (1000ca4 <process_event+0x2f4>)
 1000ae2:	f003 f960 	bl	1003da6 <assert_print>
 1000ae6:	f240 1157 	movw	r1, #343	; 0x157
 1000aea:	e7e7      	b.n	1000abc <process_event+0x10c>
			transit = mgr->transitions->start;
 1000aec:	6923      	ldr	r3, [r4, #16]
 1000aee:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
 1000af0:	b945      	cbnz	r5, 1000b04 <process_event+0x154>
 1000af2:	496b      	ldr	r1, [pc, #428]	; (1000ca0 <process_event+0x2f0>)
 1000af4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 1000af8:	486a      	ldr	r0, [pc, #424]	; (1000ca4 <process_event+0x2f4>)
 1000afa:	f003 f954 	bl	1003da6 <assert_print>
 1000afe:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 1000b02:	e7db      	b.n	1000abc <process_event+0x10c>
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000b04:	4617      	mov	r7, r2
		res = 0;
 1000b06:	4690      	mov	r8, r2
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000b08:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000b0c:	8b23      	ldrh	r3, [r4, #24]
 1000b0e:	f023 0307 	bic.w	r3, r3, #7
 1000b12:	f043 0306 	orr.w	r3, r3, #6
 1000b16:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000b18:	8323      	strh	r3, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1000b1a:	68a2      	ldr	r2, [r4, #8]
 1000b1c:	2a00      	cmp	r2, #0
 1000b1e:	d176      	bne.n	1000c0e <process_event+0x25e>
		    || !sys_slist_is_empty(&clients)
 1000b20:	2f00      	cmp	r7, #0
 1000b22:	f040 80aa 	bne.w	1000c7a <process_event+0x2ca>
		    || (transit != NULL)) {
 1000b26:	2d00      	cmp	r5, #0
 1000b28:	d0a0      	beq.n	1000a6c <process_event+0xbc>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000b2a:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
 1000b2e:	8323      	strh	r3, [r4, #24]
 1000b30:	f386 8811 	msr	BASEPRI, r6
 1000b34:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
 1000b38:	4620      	mov	r0, r4
 1000b3a:	495b      	ldr	r1, [pc, #364]	; (1000ca8 <process_event+0x2f8>)
 1000b3c:	47a8      	blx	r5
 1000b3e:	e082      	b.n	1000c46 <process_event+0x296>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
 1000b40:	2a02      	cmp	r2, #2
 1000b42:	d008      	beq.n	1000b56 <process_event+0x1a6>
 1000b44:	4956      	ldr	r1, [pc, #344]	; (1000ca0 <process_event+0x2f0>)
 1000b46:	f240 125d 	movw	r2, #349	; 0x15d
 1000b4a:	4856      	ldr	r0, [pc, #344]	; (1000ca4 <process_event+0x2f4>)
 1000b4c:	f003 f92b 	bl	1003da6 <assert_print>
 1000b50:	f240 115d 	movw	r1, #349	; 0x15d
 1000b54:	e7b2      	b.n	1000abc <process_event+0x10c>
			__ASSERT_NO_MSG(mgr->refs == 0);
 1000b56:	8b67      	ldrh	r7, [r4, #26]
 1000b58:	b147      	cbz	r7, 1000b6c <process_event+0x1bc>
 1000b5a:	4951      	ldr	r1, [pc, #324]	; (1000ca0 <process_event+0x2f0>)
 1000b5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 1000b60:	4850      	ldr	r0, [pc, #320]	; (1000ca4 <process_event+0x2f4>)
 1000b62:	f003 f920 	bl	1003da6 <assert_print>
 1000b66:	f44f 71af 	mov.w	r1, #350	; 0x15e
 1000b6a:	e7a7      	b.n	1000abc <process_event+0x10c>
			transit = mgr->transitions->stop;
 1000b6c:	6923      	ldr	r3, [r4, #16]
 1000b6e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
 1000b70:	b945      	cbnz	r5, 1000b84 <process_event+0x1d4>
 1000b72:	494b      	ldr	r1, [pc, #300]	; (1000ca0 <process_event+0x2f0>)
 1000b74:	f240 1261 	movw	r2, #353	; 0x161
 1000b78:	484a      	ldr	r0, [pc, #296]	; (1000ca4 <process_event+0x2f4>)
 1000b7a:	f003 f914 	bl	1003da6 <assert_print>
 1000b7e:	f240 1161 	movw	r1, #353	; 0x161
 1000b82:	e79b      	b.n	1000abc <process_event+0x10c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000b84:	8b23      	ldrh	r3, [r4, #24]
		res = 0;
 1000b86:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000b88:	f023 0307 	bic.w	r3, r3, #7
 1000b8c:	f043 0304 	orr.w	r3, r3, #4
 1000b90:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000b92:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000b96:	8323      	strh	r3, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000b98:	e7bf      	b.n	1000b1a <process_event+0x16a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
 1000b9a:	2a01      	cmp	r2, #1
 1000b9c:	d008      	beq.n	1000bb0 <process_event+0x200>
 1000b9e:	4940      	ldr	r1, [pc, #256]	; (1000ca0 <process_event+0x2f0>)
 1000ba0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 1000ba4:	483f      	ldr	r0, [pc, #252]	; (1000ca4 <process_event+0x2f4>)
 1000ba6:	f003 f8fe 	bl	1003da6 <assert_print>
 1000baa:	f44f 71b2 	mov.w	r1, #356	; 0x164
 1000bae:	e785      	b.n	1000abc <process_event+0x10c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
 1000bb0:	6823      	ldr	r3, [r4, #0]
 1000bb2:	b943      	cbnz	r3, 1000bc6 <process_event+0x216>
 1000bb4:	493a      	ldr	r1, [pc, #232]	; (1000ca0 <process_event+0x2f0>)
 1000bb6:	f240 1265 	movw	r2, #357	; 0x165
 1000bba:	483a      	ldr	r0, [pc, #232]	; (1000ca4 <process_event+0x2f4>)
 1000bbc:	f003 f8f3 	bl	1003da6 <assert_print>
 1000bc0:	f240 1165 	movw	r1, #357	; 0x165
 1000bc4:	e77a      	b.n	1000abc <process_event+0x10c>
			transit = mgr->transitions->reset;
 1000bc6:	6923      	ldr	r3, [r4, #16]
 1000bc8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
 1000bca:	b945      	cbnz	r5, 1000bde <process_event+0x22e>
 1000bcc:	4934      	ldr	r1, [pc, #208]	; (1000ca0 <process_event+0x2f0>)
 1000bce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 1000bd2:	4834      	ldr	r0, [pc, #208]	; (1000ca4 <process_event+0x2f4>)
 1000bd4:	f003 f8e7 	bl	1003da6 <assert_print>
 1000bd8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 1000bdc:	e76e      	b.n	1000abc <process_event+0x10c>
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000bde:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000be0:	8b23      	ldrh	r3, [r4, #24]
		res = 0;
 1000be2:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000be4:	f023 0307 	bic.w	r3, r3, #7
 1000be8:	f043 0305 	orr.w	r3, r3, #5
 1000bec:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000bee:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000bf2:	8323      	strh	r3, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000bf4:	e791      	b.n	1000b1a <process_event+0x16a>
			__ASSERT_NO_MSG(false);
 1000bf6:	492a      	ldr	r1, [pc, #168]	; (1000ca0 <process_event+0x2f0>)
 1000bf8:	f240 126b 	movw	r2, #363	; 0x16b
 1000bfc:	4829      	ldr	r0, [pc, #164]	; (1000ca4 <process_event+0x2f4>)
 1000bfe:	f003 f8d2 	bl	1003da6 <assert_print>
 1000c02:	f240 116b 	movw	r1, #363	; 0x16b
 1000c06:	e759      	b.n	1000abc <process_event+0x10c>
				   && !sys_slist_is_empty(&mgr->monitors);
 1000c08:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
 1000c0a:	463d      	mov	r5, r7
 1000c0c:	e785      	b.n	1000b1a <process_event+0x16a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000c0e:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
 1000c12:	8323      	strh	r3, [r4, #24]
 1000c14:	f386 8811 	msr	BASEPRI, r6
 1000c18:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 1000c1c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000c1e:	2900      	cmp	r1, #0
 1000c20:	d032      	beq.n	1000c88 <process_event+0x2d8>
	return node->next;
 1000c22:	680e      	ldr	r6, [r1, #0]
 1000c24:	b381      	cbz	r1, 1000c88 <process_event+0x2d8>
		mon->callback(mgr, mon, state, res);
 1000c26:	4643      	mov	r3, r8
 1000c28:	464a      	mov	r2, r9
 1000c2a:	4620      	mov	r0, r4
 1000c2c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 1000c30:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000c32:	b11e      	cbz	r6, 1000c3c <process_event+0x28c>
 1000c34:	6833      	ldr	r3, [r6, #0]
 1000c36:	4631      	mov	r1, r6
 1000c38:	461e      	mov	r6, r3
 1000c3a:	e7f3      	b.n	1000c24 <process_event+0x274>
 1000c3c:	4633      	mov	r3, r6
 1000c3e:	e7fa      	b.n	1000c36 <process_event+0x286>
			if (transit != NULL) {
 1000c40:	2d00      	cmp	r5, #0
 1000c42:	f47f af79 	bne.w	1000b38 <process_event+0x188>
	__asm__ volatile(
 1000c46:	f04f 0320 	mov.w	r3, #32
 1000c4a:	f3ef 8611 	mrs	r6, BASEPRI
 1000c4e:	f383 8812 	msr	BASEPRI_MAX, r3
 1000c52:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 1000c56:	8b23      	ldrh	r3, [r4, #24]
 1000c58:	f023 0308 	bic.w	r3, r3, #8
 1000c5c:	8323      	strh	r3, [r4, #24]
 1000c5e:	e705      	b.n	1000a6c <process_event+0xbc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 1000c60:	0693      	lsls	r3, r2, #26
 1000c62:	f57f aec6 	bpl.w	10009f2 <process_event+0x42>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1000c66:	f022 0320 	bic.w	r3, r2, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000c6a:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000c6c:	f002 0207 	and.w	r2, r2, #7
		if (evt == EVT_RECHECK) {
 1000c70:	e6a9      	b.n	10009c6 <process_event+0x16>
		    || !sys_slist_is_empty(&clients)
 1000c72:	2f00      	cmp	r7, #0
 1000c74:	f43f aefa 	beq.w	1000a6c <process_event+0xbc>
 1000c78:	2500      	movs	r5, #0
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000c7a:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
 1000c7e:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
 1000c80:	f386 8811 	msr	BASEPRI, r6
 1000c84:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
 1000c88:	2f00      	cmp	r7, #0
 1000c8a:	d0d9      	beq.n	1000c40 <process_event+0x290>
 1000c8c:	683e      	ldr	r6, [r7, #0]
		notify_one(mgr, cli, state, res);
 1000c8e:	4639      	mov	r1, r7
 1000c90:	4643      	mov	r3, r8
 1000c92:	464a      	mov	r2, r9
 1000c94:	4620      	mov	r0, r4
 1000c96:	f002 ffda 	bl	1003c4e <notify_one>
	list->head = node;
 1000c9a:	4637      	mov	r7, r6
	while (!sys_slist_is_empty(list)) {
 1000c9c:	e7f4      	b.n	1000c88 <process_event+0x2d8>
 1000c9e:	bf00      	nop
 1000ca0:	0100469e 	.word	0x0100469e
 1000ca4:	010046c0 	.word	0x010046c0
 1000ca8:	01003c7b 	.word	0x01003c7b

01000cac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 1000cac:	b570      	push	{r4, r5, r6, lr}
 1000cae:	4605      	mov	r5, r0
 1000cb0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 1000cb2:	f002 ffbc 	bl	1003c2e <validate_args>

	if (rv < 0) {
 1000cb6:	1e04      	subs	r4, r0, #0
 1000cb8:	db15      	blt.n	1000ce6 <onoff_request+0x3a>
	__asm__ volatile(
 1000cba:	f04f 0320 	mov.w	r3, #32
 1000cbe:	f3ef 8211 	mrs	r2, BASEPRI
 1000cc2:	f383 8812 	msr	BASEPRI_MAX, r3
 1000cc6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 1000cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 1000cce:	8b6b      	ldrh	r3, [r5, #26]
 1000cd0:	8b2c      	ldrh	r4, [r5, #24]
 1000cd2:	428b      	cmp	r3, r1
 1000cd4:	f004 0407 	and.w	r4, r4, #7
 1000cd8:	d107      	bne.n	1000cea <onoff_request+0x3e>
	__asm__ volatile(
 1000cda:	f382 8811 	msr	BASEPRI, r2
 1000cde:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
 1000ce2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
 1000ce6:	4620      	mov	r0, r4
 1000ce8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
 1000cea:	2c02      	cmp	r4, #2
 1000cec:	d10c      	bne.n	1000d08 <onoff_request+0x5c>
		mgr->refs += 1U;
 1000cee:	3301      	adds	r3, #1
 1000cf0:	836b      	strh	r3, [r5, #26]
 1000cf2:	f382 8811 	msr	BASEPRI, r2
 1000cf6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
 1000cfa:	2300      	movs	r3, #0
 1000cfc:	4622      	mov	r2, r4
 1000cfe:	4631      	mov	r1, r6
 1000d00:	4628      	mov	r0, r5
 1000d02:	f002 ffa4 	bl	1003c4e <notify_one>
 1000d06:	e7ee      	b.n	1000ce6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
 1000d08:	2c06      	cmp	r4, #6
 1000d0a:	d811      	bhi.n	1000d30 <onoff_request+0x84>
 1000d0c:	e8df f004 	tbb	[pc, r4]
 1000d10:	10101e04 	.word	0x10101e04
 1000d14:	2504      	.short	0x2504
 1000d16:	04          	.byte	0x04
 1000d17:	00          	.byte	0x00
	parent->next = child;
 1000d18:	2300      	movs	r3, #0
 1000d1a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 1000d1c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 1000d1e:	b993      	cbnz	r3, 1000d46 <onoff_request+0x9a>
	list->head = node;
 1000d20:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
 1000d24:	bb04      	cbnz	r4, 1000d68 <onoff_request+0xbc>
		process_event(mgr, EVT_RECHECK, key);
 1000d26:	2102      	movs	r1, #2
 1000d28:	4628      	mov	r0, r5
 1000d2a:	f7ff fe41 	bl	10009b0 <process_event>
 1000d2e:	e7da      	b.n	1000ce6 <onoff_request+0x3a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
 1000d30:	4910      	ldr	r1, [pc, #64]	; (1000d74 <onoff_request+0xc8>)
 1000d32:	4811      	ldr	r0, [pc, #68]	; (1000d78 <onoff_request+0xcc>)
 1000d34:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 1000d38:	f003 f835 	bl	1003da6 <assert_print>
 1000d3c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 1000d40:	480c      	ldr	r0, [pc, #48]	; (1000d74 <onoff_request+0xc8>)
 1000d42:	f003 f829 	bl	1003d98 <assert_post_action>
	parent->next = child;
 1000d46:	601e      	str	r6, [r3, #0]
	list->tail = node;
 1000d48:	606e      	str	r6, [r5, #4]
}
 1000d4a:	e7eb      	b.n	1000d24 <onoff_request+0x78>
 1000d4c:	f382 8811 	msr	BASEPRI, r2
 1000d50:	f3bf 8f6f 	isb	sy
 1000d54:	f06f 0404 	mvn.w	r4, #4
 1000d58:	e7c5      	b.n	1000ce6 <onoff_request+0x3a>
 1000d5a:	f382 8811 	msr	BASEPRI, r2
 1000d5e:	f3bf 8f6f 	isb	sy
 1000d62:	f06f 0485 	mvn.w	r4, #133	; 0x85
 1000d66:	e7be      	b.n	1000ce6 <onoff_request+0x3a>
 1000d68:	f382 8811 	msr	BASEPRI, r2
 1000d6c:	f3bf 8f6f 	isb	sy
		if (notify) {
 1000d70:	e7b9      	b.n	1000ce6 <onoff_request+0x3a>
 1000d72:	bf00      	nop
 1000d74:	0100469e 	.word	0x0100469e
 1000d78:	010046c0 	.word	0x010046c0

01000d7c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 1000d7c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 1000d7e:	6842      	ldr	r2, [r0, #4]
 1000d80:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
 1000d82:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 1000d86:	2a03      	cmp	r2, #3
	notify->result = res;
 1000d88:	6081      	str	r1, [r0, #8]
	switch (method) {
 1000d8a:	d002      	beq.n	1000d92 <sys_notify_finalize+0x16>
 1000d8c:	b12a      	cbz	r2, 1000d9a <sys_notify_finalize+0x1e>
 1000d8e:	2000      	movs	r0, #0
 1000d90:	e000      	b.n	1000d94 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 1000d92:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 1000d94:	2200      	movs	r2, #0
 1000d96:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 1000d98:	bd08      	pop	{r3, pc}
		__ASSERT_NO_MSG(false);
 1000d9a:	4904      	ldr	r1, [pc, #16]	; (1000dac <sys_notify_finalize+0x30>)
 1000d9c:	4804      	ldr	r0, [pc, #16]	; (1000db0 <sys_notify_finalize+0x34>)
 1000d9e:	2245      	movs	r2, #69	; 0x45
 1000da0:	f003 f801 	bl	1003da6 <assert_print>
 1000da4:	2145      	movs	r1, #69	; 0x45
 1000da6:	4801      	ldr	r0, [pc, #4]	; (1000dac <sys_notify_finalize+0x30>)
 1000da8:	f002 fff6 	bl	1003d98 <assert_post_action>
 1000dac:	010046d8 	.word	0x010046d8
 1000db0:	010046c0 	.word	0x010046c0

01000db4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 1000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000db8:	4681      	mov	r9, r0
 1000dba:	468b      	mov	fp, r1
 1000dbc:	4617      	mov	r7, r2
 1000dbe:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 1000dc0:	2500      	movs	r5, #0
{
 1000dc2:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 1000dc4:	7838      	ldrb	r0, [r7, #0]
 1000dc6:	b908      	cbnz	r0, 1000dcc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 1000dc8:	4628      	mov	r0, r5
 1000dca:	e357      	b.n	100147c <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 1000dcc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 1000dce:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 1000dd0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 1000dd2:	d006      	beq.n	1000de2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 1000dd4:	4659      	mov	r1, fp
 1000dd6:	47c8      	blx	r9
 1000dd8:	2800      	cmp	r0, #0
 1000dda:	f2c0 834f 	blt.w	100147c <z_cbvprintf_impl+0x6c8>
 1000dde:	3501      	adds	r5, #1
		if (bps == NULL) {
 1000de0:	e1fb      	b.n	10011da <z_cbvprintf_impl+0x426>
		} state = {
 1000de2:	2218      	movs	r2, #24
 1000de4:	2100      	movs	r1, #0
 1000de6:	a80e      	add	r0, sp, #56	; 0x38
 1000de8:	f003 f87c 	bl	1003ee4 <memset>
	if (*sp == '%') {
 1000dec:	787b      	ldrb	r3, [r7, #1]
 1000dee:	2b25      	cmp	r3, #37	; 0x25
 1000df0:	d07d      	beq.n	1000eee <z_cbvprintf_impl+0x13a>
 1000df2:	2300      	movs	r3, #0
 1000df4:	4698      	mov	r8, r3
 1000df6:	469e      	mov	lr, r3
 1000df8:	469c      	mov	ip, r3
 1000dfa:	461e      	mov	r6, r3
 1000dfc:	1c78      	adds	r0, r7, #1
 1000dfe:	4601      	mov	r1, r0
		switch (*sp) {
 1000e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 1000e04:	2a2b      	cmp	r2, #43	; 0x2b
 1000e06:	f000 80a1 	beq.w	1000f4c <z_cbvprintf_impl+0x198>
 1000e0a:	f200 8098 	bhi.w	1000f3e <z_cbvprintf_impl+0x18a>
 1000e0e:	2a20      	cmp	r2, #32
 1000e10:	f000 809f 	beq.w	1000f52 <z_cbvprintf_impl+0x19e>
 1000e14:	2a23      	cmp	r2, #35	; 0x23
 1000e16:	f000 809f 	beq.w	1000f58 <z_cbvprintf_impl+0x1a4>
 1000e1a:	b12b      	cbz	r3, 1000e28 <z_cbvprintf_impl+0x74>
 1000e1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1000e24:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1000e28:	f1b8 0f00 	cmp.w	r8, #0
 1000e2c:	d005      	beq.n	1000e3a <z_cbvprintf_impl+0x86>
 1000e2e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e32:	f043 0320 	orr.w	r3, r3, #32
 1000e36:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1000e3a:	f1be 0f00 	cmp.w	lr, #0
 1000e3e:	d005      	beq.n	1000e4c <z_cbvprintf_impl+0x98>
 1000e40:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e44:	f043 0310 	orr.w	r3, r3, #16
 1000e48:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1000e4c:	f1bc 0f00 	cmp.w	ip, #0
 1000e50:	d005      	beq.n	1000e5e <z_cbvprintf_impl+0xaa>
 1000e52:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e56:	f043 0308 	orr.w	r3, r3, #8
 1000e5a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1000e5e:	b12e      	cbz	r6, 1000e6c <z_cbvprintf_impl+0xb8>
 1000e60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e64:	f043 0304 	orr.w	r3, r3, #4
 1000e68:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 1000e6c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1000e70:	f003 0044 	and.w	r0, r3, #68	; 0x44
 1000e74:	2844      	cmp	r0, #68	; 0x44
 1000e76:	d103      	bne.n	1000e80 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 1000e78:	f36f 1386 	bfc	r3, #6, #1
 1000e7c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 1000e80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 1000e84:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 1000e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1000e8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 1000e8e:	d17f      	bne.n	1000f90 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 1000e90:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 1000e94:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 1000e96:	f042 0201 	orr.w	r2, r2, #1
 1000e9a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 1000e9e:	781a      	ldrb	r2, [r3, #0]
 1000ea0:	2a2e      	cmp	r2, #46	; 0x2e
 1000ea2:	bf0c      	ite	eq
 1000ea4:	2101      	moveq	r1, #1
 1000ea6:	2100      	movne	r1, #0
 1000ea8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1000eac:	f361 0241 	bfi	r2, r1, #1, #1
 1000eb0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 1000eb4:	d178      	bne.n	1000fa8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 1000eb6:	785a      	ldrb	r2, [r3, #1]
 1000eb8:	2a2a      	cmp	r2, #42	; 0x2a
 1000eba:	d06e      	beq.n	1000f9a <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 1000ebc:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1000ebe:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 1000ec2:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 1000ec4:	4619      	mov	r1, r3
 1000ec6:	f811 0b01 	ldrb.w	r0, [r1], #1
 1000eca:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 1000ece:	2e09      	cmp	r6, #9
 1000ed0:	f240 8095 	bls.w	1000ffe <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 1000ed4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 1000ed8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 1000eda:	f3c1 0040 	ubfx	r0, r1, #1, #1
 1000ede:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 1000ee2:	460a      	mov	r2, r1
 1000ee4:	f360 0241 	bfi	r2, r0, #1, #1
 1000ee8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 1000eec:	e05c      	b.n	1000fa8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 1000eee:	1cba      	adds	r2, r7, #2
 1000ef0:	9203      	str	r2, [sp, #12]
 1000ef2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 1000ef6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1000efa:	07da      	lsls	r2, r3, #31
 1000efc:	f140 812e 	bpl.w	100115c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 1000f00:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 1000f04:	f1b8 0f00 	cmp.w	r8, #0
 1000f08:	da07      	bge.n	1000f1a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 1000f0a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 1000f0e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 1000f12:	f042 0204 	orr.w	r2, r2, #4
 1000f16:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 1000f1a:	075e      	lsls	r6, r3, #29
 1000f1c:	f140 8127 	bpl.w	100116e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 1000f20:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 1000f24:	f1ba 0f00 	cmp.w	sl, #0
 1000f28:	f280 8126 	bge.w	1001178 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 1000f2c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1000f30:	f36f 0341 	bfc	r3, #1, #1
 1000f34:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 1000f38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 1000f3c:	e11c      	b.n	1001178 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 1000f3e:	2a2d      	cmp	r2, #45	; 0x2d
 1000f40:	d00d      	beq.n	1000f5e <z_cbvprintf_impl+0x1aa>
 1000f42:	2a30      	cmp	r2, #48	; 0x30
 1000f44:	f47f af69 	bne.w	1000e1a <z_cbvprintf_impl+0x66>
 1000f48:	2301      	movs	r3, #1
	} while (loop);
 1000f4a:	e758      	b.n	1000dfe <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 1000f4c:	f04f 0c01 	mov.w	ip, #1
 1000f50:	e755      	b.n	1000dfe <z_cbvprintf_impl+0x4a>
 1000f52:	f04f 0e01 	mov.w	lr, #1
 1000f56:	e752      	b.n	1000dfe <z_cbvprintf_impl+0x4a>
 1000f58:	f04f 0801 	mov.w	r8, #1
 1000f5c:	e74f      	b.n	1000dfe <z_cbvprintf_impl+0x4a>
 1000f5e:	2601      	movs	r6, #1
 1000f60:	e74d      	b.n	1000dfe <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 1000f62:	4603      	mov	r3, r0
 1000f64:	fb0e 6202 	mla	r2, lr, r2, r6
 1000f68:	3a30      	subs	r2, #48	; 0x30
 1000f6a:	4618      	mov	r0, r3
 1000f6c:	f810 6b01 	ldrb.w	r6, [r0], #1
 1000f70:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 1000f74:	f1bc 0f09 	cmp.w	ip, #9
 1000f78:	d9f3      	bls.n	1000f62 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 1000f7a:	4299      	cmp	r1, r3
 1000f7c:	d08f      	beq.n	1000e9e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 1000f7e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 1000f82:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 1000f84:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 1000f86:	f362 0141 	bfi	r1, r2, #1, #1
 1000f8a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 1000f8e:	e786      	b.n	1000e9e <z_cbvprintf_impl+0xea>
 1000f90:	460b      	mov	r3, r1
	size_t val = 0;
 1000f92:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1000f94:	f04f 0e0a 	mov.w	lr, #10
 1000f98:	e7e7      	b.n	1000f6a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 1000f9a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 1000f9e:	3302      	adds	r3, #2
		conv->prec_star = true;
 1000fa0:	f042 0204 	orr.w	r2, r2, #4
 1000fa4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 1000fa8:	781a      	ldrb	r2, [r3, #0]
 1000faa:	2a6c      	cmp	r2, #108	; 0x6c
 1000fac:	d047      	beq.n	100103e <z_cbvprintf_impl+0x28a>
 1000fae:	d82b      	bhi.n	1001008 <z_cbvprintf_impl+0x254>
 1000fb0:	2a68      	cmp	r2, #104	; 0x68
 1000fb2:	d031      	beq.n	1001018 <z_cbvprintf_impl+0x264>
 1000fb4:	2a6a      	cmp	r2, #106	; 0x6a
 1000fb6:	d04b      	beq.n	1001050 <z_cbvprintf_impl+0x29c>
 1000fb8:	2a4c      	cmp	r2, #76	; 0x4c
 1000fba:	d051      	beq.n	1001060 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 1000fbc:	461a      	mov	r2, r3
 1000fbe:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 1000fc2:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 1000fc4:	9203      	str	r2, [sp, #12]
 1000fc6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000fca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 1000fce:	f200 80be 	bhi.w	100114e <z_cbvprintf_impl+0x39a>
 1000fd2:	2b6d      	cmp	r3, #109	; 0x6d
 1000fd4:	d851      	bhi.n	100107a <z_cbvprintf_impl+0x2c6>
 1000fd6:	2b69      	cmp	r3, #105	; 0x69
 1000fd8:	f200 80b9 	bhi.w	100114e <z_cbvprintf_impl+0x39a>
 1000fdc:	2b57      	cmp	r3, #87	; 0x57
 1000fde:	d867      	bhi.n	10010b0 <z_cbvprintf_impl+0x2fc>
 1000fe0:	2b41      	cmp	r3, #65	; 0x41
 1000fe2:	d003      	beq.n	1000fec <z_cbvprintf_impl+0x238>
 1000fe4:	3b45      	subs	r3, #69	; 0x45
 1000fe6:	2b02      	cmp	r3, #2
 1000fe8:	f200 80b1 	bhi.w	100114e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 1000fec:	2204      	movs	r2, #4
 1000fee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1000ff2:	f362 0302 	bfi	r3, r2, #0, #3
 1000ff6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 1000ffa:	2301      	movs	r3, #1
			break;
 1000ffc:	e073      	b.n	10010e6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 1000ffe:	fb0c 0202 	mla	r2, ip, r2, r0
 1001002:	460b      	mov	r3, r1
 1001004:	3a30      	subs	r2, #48	; 0x30
 1001006:	e75d      	b.n	1000ec4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 1001008:	2a74      	cmp	r2, #116	; 0x74
 100100a:	d025      	beq.n	1001058 <z_cbvprintf_impl+0x2a4>
 100100c:	2a7a      	cmp	r2, #122	; 0x7a
 100100e:	d1d5      	bne.n	1000fbc <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 1001010:	2106      	movs	r1, #6
 1001012:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1001016:	e00c      	b.n	1001032 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 1001018:	785a      	ldrb	r2, [r3, #1]
 100101a:	2a68      	cmp	r2, #104	; 0x68
 100101c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1001020:	d106      	bne.n	1001030 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 1001022:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 1001024:	f361 02c6 	bfi	r2, r1, #3, #4
 1001028:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 100102c:	3302      	adds	r3, #2
 100102e:	e7c5      	b.n	1000fbc <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 1001030:	2102      	movs	r1, #2
 1001032:	f361 02c6 	bfi	r2, r1, #3, #4
 1001036:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 100103a:	3301      	adds	r3, #1
 100103c:	e7be      	b.n	1000fbc <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 100103e:	785a      	ldrb	r2, [r3, #1]
 1001040:	2a6c      	cmp	r2, #108	; 0x6c
 1001042:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1001046:	d101      	bne.n	100104c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 1001048:	2104      	movs	r1, #4
 100104a:	e7eb      	b.n	1001024 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 100104c:	2103      	movs	r1, #3
 100104e:	e7f0      	b.n	1001032 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 1001050:	2105      	movs	r1, #5
 1001052:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1001056:	e7ec      	b.n	1001032 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 1001058:	2107      	movs	r1, #7
 100105a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 100105e:	e7e8      	b.n	1001032 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 1001060:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 1001064:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 1001068:	f022 0202 	bic.w	r2, r2, #2
 100106c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 1001070:	f042 0202 	orr.w	r2, r2, #2
 1001074:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 1001078:	e7df      	b.n	100103a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 100107a:	3b6e      	subs	r3, #110	; 0x6e
 100107c:	b2d9      	uxtb	r1, r3
 100107e:	2301      	movs	r3, #1
 1001080:	408b      	lsls	r3, r1
 1001082:	f240 4182 	movw	r1, #1154	; 0x482
 1001086:	420b      	tst	r3, r1
 1001088:	d137      	bne.n	10010fa <z_cbvprintf_impl+0x346>
 100108a:	f013 0f24 	tst.w	r3, #36	; 0x24
 100108e:	d151      	bne.n	1001134 <z_cbvprintf_impl+0x380>
 1001090:	07d8      	lsls	r0, r3, #31
 1001092:	d55c      	bpl.n	100114e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 1001094:	2103      	movs	r1, #3
 1001096:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 100109a:	f361 0302 	bfi	r3, r1, #0, #3
 100109e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 10010a2:	f002 0378 	and.w	r3, r2, #120	; 0x78
 10010a6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 10010aa:	424b      	negs	r3, r1
 10010ac:	414b      	adcs	r3, r1
 10010ae:	e01a      	b.n	10010e6 <z_cbvprintf_impl+0x332>
 10010b0:	2001      	movs	r0, #1
	switch (conv->specifier) {
 10010b2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 10010b6:	b2c9      	uxtb	r1, r1
 10010b8:	fa00 f101 	lsl.w	r1, r0, r1
 10010bc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 10010c0:	d194      	bne.n	1000fec <z_cbvprintf_impl+0x238>
 10010c2:	f640 0601 	movw	r6, #2049	; 0x801
 10010c6:	4231      	tst	r1, r6
 10010c8:	d11d      	bne.n	1001106 <z_cbvprintf_impl+0x352>
 10010ca:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 10010ce:	d03e      	beq.n	100114e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 10010d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 10010d4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 10010d8:	f002 0278 	and.w	r2, r2, #120	; 0x78
 10010dc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 10010de:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 10010e2:	d034      	beq.n	100114e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 10010e4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 10010e6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 10010ea:	f3c2 0140 	ubfx	r1, r2, #1, #1
 10010ee:	430b      	orrs	r3, r1
 10010f0:	f363 0241 	bfi	r2, r3, #1, #1
 10010f4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 10010f8:	e6fd      	b.n	1000ef6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 10010fa:	2102      	movs	r1, #2
 10010fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1001100:	f361 0302 	bfi	r3, r1, #0, #3
 1001104:	e7e8      	b.n	10010d8 <z_cbvprintf_impl+0x324>
 1001106:	2002      	movs	r0, #2
 1001108:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 100110c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1001110:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1001114:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 1001116:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 100111a:	bf02      	ittt	eq
 100111c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 1001120:	f041 0101 	orreq.w	r1, r1, #1
 1001124:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 1001128:	2b63      	cmp	r3, #99	; 0x63
 100112a:	d1db      	bne.n	10010e4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 100112c:	1e13      	subs	r3, r2, #0
 100112e:	bf18      	it	ne
 1001130:	2301      	movne	r3, #1
 1001132:	e7d8      	b.n	10010e6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 1001134:	2103      	movs	r1, #3
 1001136:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 100113a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 100113e:	f361 0302 	bfi	r3, r1, #0, #3
 1001142:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 1001146:	bf14      	ite	ne
 1001148:	2301      	movne	r3, #1
 100114a:	2300      	moveq	r3, #0
 100114c:	e7cb      	b.n	10010e6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 100114e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1001152:	f043 0301 	orr.w	r3, r3, #1
 1001156:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 100115a:	e7c3      	b.n	10010e4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 100115c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 1001160:	2a00      	cmp	r2, #0
		int width = -1;
 1001162:	bfac      	ite	ge
 1001164:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
 1001168:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 100116c:	e6d5      	b.n	1000f1a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 100116e:	0798      	lsls	r0, r3, #30
 1001170:	f57f aee2 	bpl.w	1000f38 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 1001174:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 1001178:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 100117a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 100117e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 1001182:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 1001186:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 100118a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 100118c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 1001190:	d133      	bne.n	10011fa <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 1001192:	1ecb      	subs	r3, r1, #3
 1001194:	2b04      	cmp	r3, #4
 1001196:	d804      	bhi.n	10011a2 <z_cbvprintf_impl+0x3ee>
 1001198:	e8df f003 	tbb	[pc, r3]
 100119c:	21464621 	.word	0x21464621
 10011a0:	21          	.byte	0x21
 10011a1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 10011a2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 10011a4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 10011a6:	ea4f 72e3 	mov.w	r2, r3, asr #31
 10011aa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 10011ae:	d11c      	bne.n	10011ea <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 10011b0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 10011b4:	17da      	asrs	r2, r3, #31
 10011b6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 10011ba:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 10011bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 10011c0:	f013 0603 	ands.w	r6, r3, #3
 10011c4:	d050      	beq.n	1001268 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 10011c6:	463a      	mov	r2, r7
 10011c8:	4659      	mov	r1, fp
 10011ca:	4648      	mov	r0, r9
 10011cc:	9b03      	ldr	r3, [sp, #12]
 10011ce:	f002 fdcc 	bl	1003d6a <outs>
 10011d2:	2800      	cmp	r0, #0
 10011d4:	f2c0 8152 	blt.w	100147c <z_cbvprintf_impl+0x6c8>
 10011d8:	4405      	add	r5, r0
			continue;
 10011da:	9f03      	ldr	r7, [sp, #12]
 10011dc:	e5f2      	b.n	1000dc4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 10011de:	f854 3b04 	ldr.w	r3, [r4], #4
 10011e2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 10011e4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 10011e8:	e7e8      	b.n	10011bc <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 10011ea:	2902      	cmp	r1, #2
 10011ec:	d1e5      	bne.n	10011ba <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 10011ee:	b21a      	sxth	r2, r3
 10011f0:	f343 33c0 	sbfx	r3, r3, #15, #1
 10011f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 10011f8:	e7df      	b.n	10011ba <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 10011fa:	2b02      	cmp	r3, #2
 10011fc:	d124      	bne.n	1001248 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 10011fe:	1ecb      	subs	r3, r1, #3
 1001200:	2b04      	cmp	r3, #4
 1001202:	d804      	bhi.n	100120e <z_cbvprintf_impl+0x45a>
 1001204:	e8df f003 	tbb	[pc, r3]
 1001208:	18101018 	.word	0x18101018
 100120c:	18          	.byte	0x18
 100120d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 100120e:	2901      	cmp	r1, #1
 1001210:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 1001214:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1001218:	d014      	beq.n	1001244 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 100121a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 100121c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 1001220:	d1cc      	bne.n	10011bc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 1001222:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 1001224:	930e      	str	r3, [sp, #56]	; 0x38
 1001226:	e7c9      	b.n	10011bc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 1001228:	3407      	adds	r4, #7
 100122a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 100122e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 1001232:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 1001236:	e7c1      	b.n	10011bc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 1001238:	f854 3b04 	ldr.w	r3, [r4], #4
 100123c:	930e      	str	r3, [sp, #56]	; 0x38
 100123e:	2300      	movs	r3, #0
 1001240:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 1001242:	e7bb      	b.n	10011bc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 1001244:	b2db      	uxtb	r3, r3
 1001246:	e7cd      	b.n	10011e4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 1001248:	2b04      	cmp	r3, #4
 100124a:	d108      	bne.n	100125e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 100124c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 100124e:	f024 0407 	bic.w	r4, r4, #7
 1001252:	e9d4 2300 	ldrd	r2, r3, [r4]
 1001256:	3408      	adds	r4, #8
 1001258:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 100125c:	e7ae      	b.n	10011bc <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 100125e:	2b03      	cmp	r3, #3
 1001260:	d1ac      	bne.n	10011bc <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 1001262:	f854 3b04 	ldr.w	r3, [r4], #4
 1001266:	e7dd      	b.n	1001224 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 1001268:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 100126c:	2878      	cmp	r0, #120	; 0x78
 100126e:	d8b4      	bhi.n	10011da <z_cbvprintf_impl+0x426>
 1001270:	2862      	cmp	r0, #98	; 0x62
 1001272:	d81c      	bhi.n	10012ae <z_cbvprintf_impl+0x4fa>
 1001274:	2825      	cmp	r0, #37	; 0x25
 1001276:	f43f adad 	beq.w	1000dd4 <z_cbvprintf_impl+0x20>
 100127a:	2858      	cmp	r0, #88	; 0x58
 100127c:	d1ad      	bne.n	10011da <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 100127e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 1001282:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1001286:	9300      	str	r3, [sp, #0]
 1001288:	aa10      	add	r2, sp, #64	; 0x40
 100128a:	ab08      	add	r3, sp, #32
 100128c:	f002 fd27 	bl	1003cde <encode_uint>
			if (precision >= 0) {
 1001290:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 1001294:	4607      	mov	r7, r0
			if (precision >= 0) {
 1001296:	f280 8099 	bge.w	10013cc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 100129a:	2f00      	cmp	r7, #0
 100129c:	d09d      	beq.n	10011da <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 100129e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10012a2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 10012a4:	2e00      	cmp	r6, #0
 10012a6:	f000 80c0 	beq.w	100142a <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 10012aa:	3001      	adds	r0, #1
 10012ac:	e0bd      	b.n	100142a <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 10012ae:	3863      	subs	r0, #99	; 0x63
 10012b0:	2815      	cmp	r0, #21
 10012b2:	d892      	bhi.n	10011da <z_cbvprintf_impl+0x426>
 10012b4:	a201      	add	r2, pc, #4	; (adr r2, 10012bc <z_cbvprintf_impl+0x508>)
 10012b6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 10012ba:	bf00      	nop
 10012bc:	01001391 	.word	0x01001391
 10012c0:	010013a3 	.word	0x010013a3
 10012c4:	010011db 	.word	0x010011db
 10012c8:	010011db 	.word	0x010011db
 10012cc:	010011db 	.word	0x010011db
 10012d0:	010011db 	.word	0x010011db
 10012d4:	010013a3 	.word	0x010013a3
 10012d8:	010011db 	.word	0x010011db
 10012dc:	010011db 	.word	0x010011db
 10012e0:	010011db 	.word	0x010011db
 10012e4:	010011db 	.word	0x010011db
 10012e8:	0100142f 	.word	0x0100142f
 10012ec:	010013c7 	.word	0x010013c7
 10012f0:	010013ed 	.word	0x010013ed
 10012f4:	010011db 	.word	0x010011db
 10012f8:	010011db 	.word	0x010011db
 10012fc:	01001315 	.word	0x01001315
 1001300:	010011db 	.word	0x010011db
 1001304:	010013c7 	.word	0x010013c7
 1001308:	010011db 	.word	0x010011db
 100130c:	010011db 	.word	0x010011db
 1001310:	010013c7 	.word	0x010013c7
			if (precision >= 0) {
 1001314:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 1001318:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 100131a:	db35      	blt.n	1001388 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 100131c:	4651      	mov	r1, sl
 100131e:	4638      	mov	r0, r7
 1001320:	f002 fdbc 	bl	1003e9c <strnlen>
			bpe = bps + len;
 1001324:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 1001328:	2f00      	cmp	r7, #0
 100132a:	f43f af56 	beq.w	10011da <z_cbvprintf_impl+0x426>
		char sign = 0;
 100132e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 1001330:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1001334:	f013 0210 	ands.w	r2, r3, #16
 1001338:	9205      	str	r2, [sp, #20]
 100133a:	f000 8092 	beq.w	1001462 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 100133e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 1001340:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 1001342:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 1001344:	bf48      	it	mi
 1001346:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 1001348:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 100134a:	bf48      	it	mi
 100134c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 100134e:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 1001352:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 1001354:	f340 809f 	ble.w	1001496 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 1001358:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 100135c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 1001360:	f3c2 0380 	ubfx	r3, r2, #2, #1
 1001364:	0750      	lsls	r0, r2, #29
 1001366:	9306      	str	r3, [sp, #24]
 1001368:	f100 8095 	bmi.w	1001496 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 100136c:	0651      	lsls	r1, r2, #25
 100136e:	f140 8088 	bpl.w	1001482 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 1001372:	b13e      	cbz	r6, 1001384 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 1001374:	4659      	mov	r1, fp
 1001376:	4630      	mov	r0, r6
 1001378:	47c8      	blx	r9
 100137a:	2800      	cmp	r0, #0
 100137c:	db7e      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 100137e:	9b06      	ldr	r3, [sp, #24]
 1001380:	3501      	adds	r5, #1
 1001382:	461e      	mov	r6, r3
					pad = '0';
 1001384:	2230      	movs	r2, #48	; 0x30
 1001386:	e07d      	b.n	1001484 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 1001388:	4638      	mov	r0, r7
 100138a:	f002 fd80 	bl	1003e8e <strlen>
 100138e:	e7c9      	b.n	1001324 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1001390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 1001392:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 1001394:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 1001396:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 100139a:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 100139c:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 10013a0:	e7c6      	b.n	1001330 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 10013a2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 10013a4:	bf5a      	itte	pl
 10013a6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 10013aa:	015e      	lslpl	r6, r3, #5
				sign = '+';
 10013ac:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 10013ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 10013b2:	2b00      	cmp	r3, #0
 10013b4:	f6bf af63 	bge.w	100127e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 10013b8:	4252      	negs	r2, r2
 10013ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 10013be:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 10013c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 10013c4:	e75b      	b.n	100127e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 10013c6:	2600      	movs	r6, #0
 10013c8:	e759      	b.n	100127e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 10013ca:	2600      	movs	r6, #0
				conv->flag_zero = false;
 10013cc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 10013d0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10013d4:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 10013d6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 10013da:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 10013dc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 10013e0:	f67f af5b 	bls.w	100129a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 10013e4:	ebaa 0303 	sub.w	r3, sl, r3
 10013e8:	9311      	str	r3, [sp, #68]	; 0x44
 10013ea:	e756      	b.n	100129a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 10013ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 10013ee:	b390      	cbz	r0, 1001456 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 10013f0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10013f4:	9300      	str	r3, [sp, #0]
 10013f6:	2100      	movs	r1, #0
 10013f8:	ab08      	add	r3, sp, #32
 10013fa:	aa10      	add	r2, sp, #64	; 0x40
 10013fc:	f002 fc6f 	bl	1003cde <encode_uint>
				conv->altform_0c = true;
 1001400:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 1001404:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 1001408:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 100140c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 1001410:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1001414:	4607      	mov	r7, r0
				conv->altform_0c = true;
 1001416:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 100141a:	dad6      	bge.n	10013ca <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 100141c:	2800      	cmp	r0, #0
 100141e:	f43f aedc 	beq.w	10011da <z_cbvprintf_impl+0x426>
		char sign = 0;
 1001422:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 1001424:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1001428:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 100142a:	469a      	mov	sl, r3
 100142c:	e780      	b.n	1001330 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 100142e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 1001430:	2907      	cmp	r1, #7
 1001432:	f63f aed2 	bhi.w	10011da <z_cbvprintf_impl+0x426>
 1001436:	e8df f001 	tbb	[pc, r1]
 100143a:	040c      	.short	0x040c
 100143c:	08080c06 	.word	0x08080c06
 1001440:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 1001442:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 1001444:	e6c9      	b.n	10011da <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 1001446:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 1001448:	e6c7      	b.n	10011da <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 100144a:	17ea      	asrs	r2, r5, #31
 100144c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 1001450:	e6c3      	b.n	10011da <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 1001452:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 1001454:	e6c1      	b.n	10011da <z_cbvprintf_impl+0x426>
 1001456:	4f2f      	ldr	r7, [pc, #188]	; (1001514 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 1001458:	4606      	mov	r6, r0
			bpe = bps + 5;
 100145a:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 100145e:	2005      	movs	r0, #5
 1001460:	e766      	b.n	1001330 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 1001462:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 1001464:	bf48      	it	mi
 1001466:	3001      	addmi	r0, #1
 1001468:	e76a      	b.n	1001340 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 100146a:	4610      	mov	r0, r2
 100146c:	9307      	str	r3, [sp, #28]
 100146e:	9206      	str	r2, [sp, #24]
 1001470:	4659      	mov	r1, fp
 1001472:	47c8      	blx	r9
 1001474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 1001478:	2800      	cmp	r0, #0
 100147a:	da04      	bge.n	1001486 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 100147c:	b015      	add	sp, #84	; 0x54
 100147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 1001482:	2220      	movs	r2, #32
					pad = '0';
 1001484:	4643      	mov	r3, r8
				while (width-- > 0) {
 1001486:	4619      	mov	r1, r3
 1001488:	2900      	cmp	r1, #0
 100148a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 100148e:	dcec      	bgt.n	100146a <z_cbvprintf_impl+0x6b6>
 1001490:	4445      	add	r5, r8
 1001492:	4698      	mov	r8, r3
 1001494:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 1001496:	b12e      	cbz	r6, 10014a4 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 1001498:	4659      	mov	r1, fp
 100149a:	4630      	mov	r0, r6
 100149c:	47c8      	blx	r9
 100149e:	2800      	cmp	r0, #0
 10014a0:	dbec      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 10014a2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 10014a4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 10014a8:	06da      	lsls	r2, r3, #27
 10014aa:	d401      	bmi.n	10014b0 <z_cbvprintf_impl+0x6fc>
 10014ac:	071b      	lsls	r3, r3, #28
 10014ae:	d505      	bpl.n	10014bc <z_cbvprintf_impl+0x708>
				OUTC('0');
 10014b0:	4659      	mov	r1, fp
 10014b2:	2030      	movs	r0, #48	; 0x30
 10014b4:	47c8      	blx	r9
 10014b6:	2800      	cmp	r0, #0
 10014b8:	dbe0      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 10014ba:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 10014bc:	9b05      	ldr	r3, [sp, #20]
 10014be:	b133      	cbz	r3, 10014ce <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 10014c0:	4659      	mov	r1, fp
 10014c2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 10014c6:	47c8      	blx	r9
 10014c8:	2800      	cmp	r0, #0
 10014ca:	dbd7      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 10014cc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 10014ce:	9e04      	ldr	r6, [sp, #16]
 10014d0:	442e      	add	r6, r5
 10014d2:	e005      	b.n	10014e0 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 10014d4:	4659      	mov	r1, fp
 10014d6:	2030      	movs	r0, #48	; 0x30
 10014d8:	47c8      	blx	r9
 10014da:	2800      	cmp	r0, #0
 10014dc:	dbce      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 10014de:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 10014e0:	1b73      	subs	r3, r6, r5
 10014e2:	2b00      	cmp	r3, #0
 10014e4:	dcf6      	bgt.n	10014d4 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 10014e6:	4653      	mov	r3, sl
 10014e8:	463a      	mov	r2, r7
 10014ea:	4659      	mov	r1, fp
 10014ec:	4648      	mov	r0, r9
 10014ee:	f002 fc3c 	bl	1003d6a <outs>
 10014f2:	2800      	cmp	r0, #0
 10014f4:	dbc2      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 10014f6:	4405      	add	r5, r0
		while (width > 0) {
 10014f8:	44a8      	add	r8, r5
 10014fa:	eba8 0305 	sub.w	r3, r8, r5
 10014fe:	2b00      	cmp	r3, #0
 1001500:	f77f ae6b 	ble.w	10011da <z_cbvprintf_impl+0x426>
			OUTC(' ');
 1001504:	4659      	mov	r1, fp
 1001506:	2020      	movs	r0, #32
 1001508:	47c8      	blx	r9
 100150a:	2800      	cmp	r0, #0
 100150c:	dbb6      	blt.n	100147c <z_cbvprintf_impl+0x6c8>
 100150e:	3501      	adds	r5, #1
			--width;
 1001510:	e7f3      	b.n	10014fa <z_cbvprintf_impl+0x746>
 1001512:	bf00      	nop
 1001514:	010046fb 	.word	0x010046fb

01001518 <nordicsemi_nrf53_init>:
	__asm__ volatile(
 1001518:	f04f 0220 	mov.w	r2, #32
 100151c:	f3ef 8311 	mrs	r3, BASEPRI
 1001520:	f382 8812 	msr	BASEPRI_MAX, r2
 1001524:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 1001528:	2101      	movs	r1, #1
 100152a:	4a04      	ldr	r2, [pc, #16]	; (100153c <nordicsemi_nrf53_init+0x24>)
 100152c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
 1001530:	f383 8811 	msr	BASEPRI, r3
 1001534:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 1001538:	2000      	movs	r0, #0
 100153a:	4770      	bx	lr
 100153c:	41080000 	.word	0x41080000

01001540 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 1001540:	2305      	movs	r3, #5
{
 1001542:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 1001544:	4d14      	ldr	r5, [pc, #80]	; (1001598 <z_arm_on_enter_cpu_idle+0x58>)
 1001546:	4e15      	ldr	r6, [pc, #84]	; (100159c <z_arm_on_enter_cpu_idle+0x5c>)
 1001548:	782c      	ldrb	r4, [r5, #0]
 100154a:	3401      	adds	r4, #1
 100154c:	fbb4 f3f3 	udiv	r3, r4, r3
 1001550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 1001554:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 1001556:	f002 fda0 	bl	100409a <sys_clock_cycle_get_32>
	if (timestamps_filled &&
 100155a:	4a11      	ldr	r2, [pc, #68]	; (10015a0 <z_arm_on_enter_cpu_idle+0x60>)
 100155c:	7813      	ldrb	r3, [r2, #0]
 100155e:	b123      	cbz	r3, 100156a <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
 1001560:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 1001564:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
 1001566:	2807      	cmp	r0, #7
 1001568:	d913      	bls.n	1001592 <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100156a:	4b0e      	ldr	r3, [pc, #56]	; (10015a4 <z_arm_on_enter_cpu_idle+0x64>)
 100156c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
 1001570:	b141      	cbz	r1, 1001584 <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1001572:	2100      	movs	r1, #0
 1001574:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 1001578:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
 100157c:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
 100157e:	b90c      	cbnz	r4, 1001584 <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
 1001580:	2301      	movs	r3, #1
 1001582:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
 1001584:	782c      	ldrb	r4, [r5, #0]
 1001586:	f002 fd88 	bl	100409a <sys_clock_cycle_get_32>
 100158a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
 100158e:	2001      	movs	r0, #1
}
 1001590:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 1001592:	2000      	movs	r0, #0
 1001594:	e7fc      	b.n	1001590 <z_arm_on_enter_cpu_idle+0x50>
 1001596:	bf00      	nop
 1001598:	21000151 	.word	0x21000151
 100159c:	210000b0 	.word	0x210000b0
 10015a0:	21000150 	.word	0x21000150
 10015a4:	41005000 	.word	0x41005000

010015a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
 10015a8:	b120      	cbz	r0, 10015b4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 10015aa:	4b03      	ldr	r3, [pc, #12]	; (10015b8 <arch_busy_wait+0x10>)
 10015ac:	0180      	lsls	r0, r0, #6
 10015ae:	f043 0301 	orr.w	r3, r3, #1
 10015b2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
 10015b4:	4770      	bx	lr
 10015b6:	bf00      	nop
 10015b8:	01004410 	.word	0x01004410

010015bc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 10015bc:	f001 bc58 	b.w	1002e70 <SystemInit>

010015c0 <find_flash_total_size>:
	size_t total_size;
};

static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
 10015c0:	b510      	push	{r4, lr}
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
 10015c2:	6843      	ldr	r3, [r0, #4]
 10015c4:	680a      	ldr	r2, [r1, #0]
{
 10015c6:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
 10015c8:	429a      	cmp	r2, r3
 10015ca:	d907      	bls.n	10015dc <find_flash_total_size+0x1c>
		LOG_ERR("Buffer size is bigger than page");
 10015cc:	4805      	ldr	r0, [pc, #20]	; (10015e4 <find_flash_total_size+0x24>)
 10015ce:	2145      	movs	r1, #69	; 0x45
 10015d0:	f002 fbf7 	bl	1003dc2 <z_log_minimal_printk>
 10015d4:	2300      	movs	r3, #0
 10015d6:	4618      	mov	r0, r3
		ctx->total_size = 0;
 10015d8:	6063      	str	r3, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
 10015da:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
 10015dc:	684a      	ldr	r2, [r1, #4]
	return true;
 10015de:	2001      	movs	r0, #1
	ctx->total_size += info->size;
 10015e0:	4413      	add	r3, r2
	return true;
 10015e2:	e7f9      	b.n	10015d8 <find_flash_total_size+0x18>
 10015e4:	01004705 	.word	0x01004705

010015e8 <stream_flash_erase_page>:
{
 10015e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 10015ea:	4605      	mov	r5, r0
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
 10015ec:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 10015ee:	aa01      	add	r2, sp, #4
 10015f0:	f002 fd20 	bl	1004034 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
 10015f4:	4604      	mov	r4, r0
 10015f6:	b138      	cbz	r0, 1001608 <stream_flash_erase_page+0x20>
		LOG_ERR("Error %d while getting page info", rc);
 10015f8:	4602      	mov	r2, r0
 10015fa:	2145      	movs	r1, #69	; 0x45
 10015fc:	480d      	ldr	r0, [pc, #52]	; (1001634 <stream_flash_erase_page+0x4c>)
 10015fe:	f002 fbe0 	bl	1003dc2 <z_log_minimal_printk>
}
 1001602:	4620      	mov	r0, r4
 1001604:	b004      	add	sp, #16
 1001606:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
 1001608:	9901      	ldr	r1, [sp, #4]
 100160a:	6a2b      	ldr	r3, [r5, #32]
 100160c:	428b      	cmp	r3, r1
 100160e:	d0f8      	beq.n	1001602 <stream_flash_erase_page+0x1a>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
 1001610:	68e8      	ldr	r0, [r5, #12]
 1001612:	9a02      	ldr	r2, [sp, #8]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
 1001614:	6883      	ldr	r3, [r0, #8]
 1001616:	689b      	ldr	r3, [r3, #8]
 1001618:	4798      	blx	r3
	if (rc != 0) {
 100161a:	4606      	mov	r6, r0
 100161c:	b130      	cbz	r0, 100162c <stream_flash_erase_page+0x44>
		LOG_ERR("Error %d while erasing page", rc);
 100161e:	4602      	mov	r2, r0
 1001620:	2145      	movs	r1, #69	; 0x45
 1001622:	4805      	ldr	r0, [pc, #20]	; (1001638 <stream_flash_erase_page+0x50>)
 1001624:	f002 fbcd 	bl	1003dc2 <z_log_minimal_printk>
 1001628:	4634      	mov	r4, r6
 100162a:	e7ea      	b.n	1001602 <stream_flash_erase_page+0x1a>
		ctx->last_erased_page_start_offset = page.start_offset;
 100162c:	9b01      	ldr	r3, [sp, #4]
 100162e:	622b      	str	r3, [r5, #32]
 1001630:	e7e7      	b.n	1001602 <stream_flash_erase_page+0x1a>
 1001632:	bf00      	nop
 1001634:	0100472a 	.word	0x0100472a
 1001638:	01004750 	.word	0x01004750

0100163c <flash_sync>:
{
 100163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
 100163e:	6881      	ldr	r1, [r0, #8]
{
 1001640:	4605      	mov	r5, r0
	if (ctx->buf_bytes == 0) {
 1001642:	2900      	cmp	r1, #0
 1001644:	d03c      	beq.n	10016c0 <flash_sync+0x84>
	size_t write_addr = ctx->offset + ctx->bytes_written;
 1001646:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
 100164a:	3901      	subs	r1, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
 100164c:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
 100164e:	4431      	add	r1, r6
 1001650:	f7ff ffca 	bl	10015e8 <stream_flash_erase_page>
		if (rc < 0) {
 1001654:	1e04      	subs	r4, r0, #0
 1001656:	da07      	bge.n	1001668 <flash_sync+0x2c>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
 1001658:	4633      	mov	r3, r6
 100165a:	4622      	mov	r2, r4
 100165c:	2145      	movs	r1, #69	; 0x45
 100165e:	482a      	ldr	r0, [pc, #168]	; (1001708 <flash_sync+0xcc>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
 1001660:	f002 fbaf 	bl	1003dc2 <z_log_minimal_printk>
}
 1001664:	4620      	mov	r0, r4
 1001666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
 1001668:	68e8      	ldr	r0, [r5, #12]
 100166a:	f002 fbb7 	bl	1003ddc <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
 100166e:	68ac      	ldr	r4, [r5, #8]
 1001670:	fbb4 f3f0 	udiv	r3, r4, r0
 1001674:	fb00 4413 	mls	r4, r0, r3, r4
 1001678:	b15c      	cbz	r4, 1001692 <flash_sync+0x56>
		fill_length -= ctx->buf_bytes % fill_length;
 100167a:	1b04      	subs	r4, r0, r4
		filler = flash_get_parameters(ctx->fdev)->erase_value;
 100167c:	68e8      	ldr	r0, [r5, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
 100167e:	6883      	ldr	r3, [r0, #8]
 1001680:	68db      	ldr	r3, [r3, #12]
 1001682:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
 1001684:	682f      	ldr	r7, [r5, #0]
 1001686:	68ab      	ldr	r3, [r5, #8]
 1001688:	7901      	ldrb	r1, [r0, #4]
 100168a:	4622      	mov	r2, r4
 100168c:	18f8      	adds	r0, r7, r3
 100168e:	f002 fc29 	bl	1003ee4 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
 1001692:	68ab      	ldr	r3, [r5, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
 1001694:	68e8      	ldr	r0, [r5, #12]
 1001696:	682a      	ldr	r2, [r5, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
 1001698:	4423      	add	r3, r4
	rc = api->write(dev, offset, data, len);
 100169a:	6881      	ldr	r1, [r0, #8]
 100169c:	684c      	ldr	r4, [r1, #4]
 100169e:	4631      	mov	r1, r6
 10016a0:	47a0      	blx	r4
	if (rc != 0) {
 10016a2:	4604      	mov	r4, r0
 10016a4:	b120      	cbz	r0, 10016b0 <flash_sync+0x74>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
 10016a6:	4602      	mov	r2, r0
 10016a8:	4633      	mov	r3, r6
 10016aa:	2145      	movs	r1, #69	; 0x45
 10016ac:	4817      	ldr	r0, [pc, #92]	; (100170c <flash_sync+0xd0>)
 10016ae:	e7d7      	b.n	1001660 <flash_sync+0x24>
	if (ctx->callback) {
 10016b0:	69eb      	ldr	r3, [r5, #28]
 10016b2:	b95b      	cbnz	r3, 10016cc <flash_sync+0x90>
	ctx->bytes_written += ctx->buf_bytes;
 10016b4:	692b      	ldr	r3, [r5, #16]
 10016b6:	68aa      	ldr	r2, [r5, #8]
 10016b8:	4413      	add	r3, r2
 10016ba:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
 10016bc:	2300      	movs	r3, #0
 10016be:	60ab      	str	r3, [r5, #8]
		return 0;
 10016c0:	2400      	movs	r4, #0
 10016c2:	e7cf      	b.n	1001664 <flash_sync+0x28>
			ctx->buf[i] = ~ctx->buf[i];
 10016c4:	5d13      	ldrb	r3, [r2, r4]
 10016c6:	43db      	mvns	r3, r3
 10016c8:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
 10016ca:	3401      	adds	r4, #1
 10016cc:	68ab      	ldr	r3, [r5, #8]
			ctx->buf[i] = ~ctx->buf[i];
 10016ce:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
 10016d0:	429c      	cmp	r4, r3
 10016d2:	d3f7      	bcc.n	10016c4 <flash_sync+0x88>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
 10016d4:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
 10016d6:	6881      	ldr	r1, [r0, #8]
 10016d8:	680c      	ldr	r4, [r1, #0]
 10016da:	4631      	mov	r1, r6
 10016dc:	47a0      	blx	r4
		if (rc != 0) {
 10016de:	4604      	mov	r4, r0
 10016e0:	b128      	cbz	r0, 10016ee <flash_sync+0xb2>
			LOG_ERR("flash read failed: %d", rc);
 10016e2:	2145      	movs	r1, #69	; 0x45
 10016e4:	4602      	mov	r2, r0
 10016e6:	480a      	ldr	r0, [pc, #40]	; (1001710 <flash_sync+0xd4>)
			LOG_ERR("callback failed: %d", rc);
 10016e8:	f002 fb6b 	bl	1003dc2 <z_log_minimal_printk>
			return rc;
 10016ec:	e7ba      	b.n	1001664 <flash_sync+0x28>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
 10016ee:	4632      	mov	r2, r6
 10016f0:	69eb      	ldr	r3, [r5, #28]
 10016f2:	68a9      	ldr	r1, [r5, #8]
 10016f4:	6828      	ldr	r0, [r5, #0]
 10016f6:	4798      	blx	r3
		if (rc != 0) {
 10016f8:	4604      	mov	r4, r0
 10016fa:	2800      	cmp	r0, #0
 10016fc:	d0da      	beq.n	10016b4 <flash_sync+0x78>
			LOG_ERR("callback failed: %d", rc);
 10016fe:	4602      	mov	r2, r0
 1001700:	2145      	movs	r1, #69	; 0x45
 1001702:	4804      	ldr	r0, [pc, #16]	; (1001714 <flash_sync+0xd8>)
 1001704:	e7f0      	b.n	10016e8 <flash_sync+0xac>
 1001706:	bf00      	nop
 1001708:	01004771 	.word	0x01004771
 100170c:	010047a4 	.word	0x010047a4
 1001710:	010047cd 	.word	0x010047cd
 1001714:	010047e8 	.word	0x010047e8

01001718 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
 1001718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 100171c:	460d      	mov	r5, r1
 100171e:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
 1001722:	4691      	mov	r9, r2
 1001724:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
 1001726:	4604      	mov	r4, r0
 1001728:	b180      	cbz	r0, 100174c <stream_flash_init+0x34>
 100172a:	b179      	cbz	r1, 100174c <stream_flash_init+0x34>
 100172c:	b172      	cbz	r2, 100174c <stream_flash_init+0x34>
		LOG_ERR("Error %d initializing settings subsystem", rc);
		return rc;
	}
#endif

	struct _inspect_flash inspect_flash_ctx = {
 100172e:	9300      	str	r3, [sp, #0]
 1001730:	2300      	movs	r3, #0
		.buf_len = buf_len,
		.total_size = 0
	};

	if (buf_len % flash_get_write_block_size(fdev)) {
 1001732:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
 1001734:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
 1001736:	f002 fb51 	bl	1003ddc <flash_get_write_block_size>
 100173a:	fbb7 f3f0 	udiv	r3, r7, r0
 100173e:	fb03 7010 	mls	r0, r3, r0, r7
 1001742:	b140      	cbz	r0, 1001756 <stream_flash_init+0x3e>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
 1001744:	2145      	movs	r1, #69	; 0x45
 1001746:	4819      	ldr	r0, [pc, #100]	; (10017ac <stream_flash_init+0x94>)
 1001748:	f002 fb3b 	bl	1003dc2 <z_log_minimal_printk>
		return -EFAULT;
 100174c:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
 1001750:	b003      	add	sp, #12
 1001752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
 1001756:	466a      	mov	r2, sp
 1001758:	4628      	mov	r0, r5
 100175a:	4915      	ldr	r1, [pc, #84]	; (10017b0 <stream_flash_init+0x98>)
 100175c:	f002 fc6e 	bl	100403c <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
 1001760:	9b01      	ldr	r3, [sp, #4]
 1001762:	2b00      	cmp	r3, #0
 1001764:	d0f2      	beq.n	100174c <stream_flash_init+0x34>
	if ((offset + size) > inspect_flash_ctx.total_size ||
 1001766:	eb08 0206 	add.w	r2, r8, r6
 100176a:	4293      	cmp	r3, r2
 100176c:	d202      	bcs.n	1001774 <stream_flash_init+0x5c>
		LOG_ERR("Incorrect parameter");
 100176e:	2145      	movs	r1, #69	; 0x45
 1001770:	4810      	ldr	r0, [pc, #64]	; (10017b4 <stream_flash_init+0x9c>)
 1001772:	e7e9      	b.n	1001748 <stream_flash_init+0x30>
	    offset % flash_get_write_block_size(fdev)) {
 1001774:	4628      	mov	r0, r5
 1001776:	f002 fb31 	bl	1003ddc <flash_get_write_block_size>
 100177a:	fbb8 f3f0 	udiv	r3, r8, r0
 100177e:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
 1001782:	2800      	cmp	r0, #0
 1001784:	d1f3      	bne.n	100176e <stream_flash_init+0x56>
	ctx->buf_len = buf_len;
 1001786:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
 100178a:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
 100178c:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
 100178e:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
 1001790:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
 1001794:	b916      	cbnz	r6, 100179c <stream_flash_init+0x84>
 1001796:	9e01      	ldr	r6, [sp, #4]
 1001798:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
 100179c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
 100179e:	2000      	movs	r0, #0
	ctx->callback = cb;
 10017a0:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
 10017a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
 10017a6:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
 10017a8:	6223      	str	r3, [r4, #32]
	return 0;
 10017aa:	e7d1      	b.n	1001750 <stream_flash_init+0x38>
 10017ac:	01004801 	.word	0x01004801
 10017b0:	010015c1 	.word	0x010015c1
 10017b4:	0100483d 	.word	0x0100483d

010017b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 10017b8:	4901      	ldr	r1, [pc, #4]	; (10017c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 10017ba:	2210      	movs	r2, #16
	str	r2, [r1]
 10017bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 10017be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 10017c0:	e000ed10 	.word	0xe000ed10

010017c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 10017c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 10017c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 10017c8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
 10017cc:	b501      	push	{r0, lr}
 10017ce:	f7ff feb7 	bl	1001540 <z_arm_on_enter_cpu_idle>
 10017d2:	2800      	cmp	r0, #0
 10017d4:	d006      	beq.n	10017e4 <_skip_1>
 10017d6:	f3bf 8f4f 	dsb	sy
 10017da:	bf20      	wfe
 10017dc:	bf00      	nop
 10017de:	bf00      	nop
 10017e0:	bf00      	nop
 10017e2:	bf00      	nop

010017e4 <_skip_1>:
 10017e4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
 10017e8:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 10017ec:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 10017ee:	4770      	bx	lr

010017f0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 10017f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10017f2:	4605      	mov	r5, r0

	if (esf != NULL) {
 10017f4:	460c      	mov	r4, r1
 10017f6:	b1c9      	cbz	r1, 100182c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 10017f8:	688b      	ldr	r3, [r1, #8]
 10017fa:	4810      	ldr	r0, [pc, #64]	; (100183c <z_arm_fatal_error+0x4c>)
 10017fc:	9300      	str	r3, [sp, #0]
 10017fe:	e9d1 2300 	ldrd	r2, r3, [r1]
 1001802:	2145      	movs	r1, #69	; 0x45
 1001804:	f002 fadd 	bl	1003dc2 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 1001808:	6963      	ldr	r3, [r4, #20]
 100180a:	2145      	movs	r1, #69	; 0x45
 100180c:	9300      	str	r3, [sp, #0]
 100180e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 1001812:	480b      	ldr	r0, [pc, #44]	; (1001840 <z_arm_fatal_error+0x50>)
 1001814:	f002 fad5 	bl	1003dc2 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 1001818:	2145      	movs	r1, #69	; 0x45
 100181a:	69e2      	ldr	r2, [r4, #28]
 100181c:	4809      	ldr	r0, [pc, #36]	; (1001844 <z_arm_fatal_error+0x54>)
 100181e:	f002 fad0 	bl	1003dc2 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 1001822:	2145      	movs	r1, #69	; 0x45
 1001824:	69a2      	ldr	r2, [r4, #24]
 1001826:	4808      	ldr	r0, [pc, #32]	; (1001848 <z_arm_fatal_error+0x58>)
 1001828:	f002 facb 	bl	1003dc2 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 100182c:	4621      	mov	r1, r4
 100182e:	4628      	mov	r0, r5
}
 1001830:	b003      	add	sp, #12
 1001832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
 1001836:	f001 bd69 	b.w	100330c <z_fatal_error>
 100183a:	bf00      	nop
 100183c:	01004863 	.word	0x01004863
 1001840:	01004897 	.word	0x01004897
 1001844:	010048cb 	.word	0x010048cb
 1001848:	010048df 	.word	0x010048df

0100184c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 100184c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 100184e:	2800      	cmp	r0, #0
 1001850:	db07      	blt.n	1001862 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1001852:	2301      	movs	r3, #1
 1001854:	0941      	lsrs	r1, r0, #5
 1001856:	4a03      	ldr	r2, [pc, #12]	; (1001864 <arch_irq_enable+0x18>)
 1001858:	f000 001f 	and.w	r0, r0, #31
 100185c:	4083      	lsls	r3, r0
 100185e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 1001862:	4770      	bx	lr
 1001864:	e000e100 	.word	0xe000e100

01001868 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 1001868:	4b05      	ldr	r3, [pc, #20]	; (1001880 <arch_irq_is_enabled+0x18>)
 100186a:	0942      	lsrs	r2, r0, #5
 100186c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1001870:	2301      	movs	r3, #1
 1001872:	f000 001f 	and.w	r0, r0, #31
 1001876:	fa03 f000 	lsl.w	r0, r3, r0
}
 100187a:	4010      	ands	r0, r2
 100187c:	4770      	bx	lr
 100187e:	bf00      	nop
 1001880:	e000e100 	.word	0xe000e100

01001884 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
 1001884:	3101      	adds	r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 1001886:	2907      	cmp	r1, #7
{
 1001888:	b508      	push	{r3, lr}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 100188a:	d908      	bls.n	100189e <z_arm_irq_priority_set+0x1a>
 100188c:	490d      	ldr	r1, [pc, #52]	; (10018c4 <z_arm_irq_priority_set+0x40>)
 100188e:	480e      	ldr	r0, [pc, #56]	; (10018c8 <z_arm_irq_priority_set+0x44>)
 1001890:	225b      	movs	r2, #91	; 0x5b
 1001892:	f002 fa88 	bl	1003da6 <assert_print>
 1001896:	215b      	movs	r1, #91	; 0x5b
 1001898:	480a      	ldr	r0, [pc, #40]	; (10018c4 <z_arm_irq_priority_set+0x40>)
 100189a:	f002 fa7d 	bl	1003d98 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 100189e:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 10018a0:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018a2:	bfac      	ite	ge
 10018a4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018a8:	4b08      	ldrlt	r3, [pc, #32]	; (10018cc <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018aa:	ea4f 1141 	mov.w	r1, r1, lsl #5
 10018ae:	b2c9      	uxtb	r1, r1
 10018b0:	bfab      	itete	ge
 10018b2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018b6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018ba:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10018be:	5419      	strblt	r1, [r3, r0]
}
 10018c0:	bd08      	pop	{r3, pc}
 10018c2:	bf00      	nop
 10018c4:	01004912 	.word	0x01004912
 10018c8:	010046c0 	.word	0x010046c0
 10018cc:	e000ed14 	.word	0xe000ed14

010018d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 10018d0:	bf30      	wfi
    b z_SysNmiOnReset
 10018d2:	f7ff bffd 	b.w	10018d0 <z_SysNmiOnReset>
 10018d6:	bf00      	nop

010018d8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 10018d8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 10018da:	4b08      	ldr	r3, [pc, #32]	; (10018fc <z_arm_prep_c+0x24>)
 10018dc:	4a08      	ldr	r2, [pc, #32]	; (1001900 <z_arm_prep_c+0x28>)
 10018de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 10018e2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 10018e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 10018e8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 10018ec:	f001 fd96 	bl	100341c <z_bss_zero>
	z_data_copy();
 10018f0:	f001 fdd8 	bl	10034a4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 10018f4:	f000 fa6c 	bl	1001dd0 <z_arm_interrupt_init>
	z_cstart();
 10018f8:	f001 fd9c 	bl	1003434 <z_cstart>
 10018fc:	01000000 	.word	0x01000000
 1001900:	e000ed00 	.word	0xe000ed00

01001904 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 1001904:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 1001908:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 100190a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 100190e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 1001912:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 1001914:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 1001918:	2902      	cmp	r1, #2
    beq _oops
 100191a:	d0ff      	beq.n	100191c <_oops>

0100191c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 100191c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 100191e:	f002 faa7 	bl	1003e70 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 1001922:	bd01      	pop	{r0, pc}

01001924 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
 1001924:	4604      	mov	r4, r0
 1001926:	4608      	mov	r0, r1
 1001928:	4611      	mov	r1, r2
 100192a:	461a      	mov	r2, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 100192c:	2300      	movs	r3, #0
 100192e:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
 1001932:	4b0a      	ldr	r3, [pc, #40]	; (100195c <loop+0x2>)
 1001934:	2520      	movs	r5, #32
 1001936:	f5a3 6680 	sub.w	r6, r3, #1024	; 0x400
 100193a:	f386 880b 	msr	PSPLIM, r6
 100193e:	f383 8809 	msr	PSP, r3
 1001942:	b663      	cpsie	if
 1001944:	f04f 0300 	mov.w	r3, #0
 1001948:	f383 8811 	msr	BASEPRI, r3
 100194c:	f3bf 8f6f 	isb	sy
 1001950:	47a0      	blx	r4
 1001952:	f385 8811 	msr	BASEPRI, r5
 1001956:	f3bf 8f6f 	isb	sy

0100195a <loop>:
 100195a:	e7fe      	b.n	100195a <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 100195c:	21000d58 	.word	0x21000d58

01001960 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 1001960:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 1001962:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 1001966:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 100196a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 100196e:	4904      	ldr	r1, [pc, #16]	; (1001980 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 1001970:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 1001972:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 1001974:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 1001976:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 100197a:	4902      	ldr	r1, [pc, #8]	; (1001984 <_isr_wrapper+0x24>)
	bx r1
 100197c:	4708      	bx	r1
 100197e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1001980:	01004284 	.word	0x01004284
	ldr r1, =z_arm_int_exit
 1001984:	01001989 	.word	0x01001989

01001988 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 1001988:	4770      	bx	lr
 100198a:	bf00      	nop

0100198c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 100198c:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 100198e:	4c24      	ldr	r4, [pc, #144]	; (1001a20 <usage_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 1001990:	2145      	movs	r1, #69	; 0x45
 1001992:	4824      	ldr	r0, [pc, #144]	; (1001a24 <usage_fault.constprop.0+0x98>)
 1001994:	f002 fa15 	bl	1003dc2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1001998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100199a:	0199      	lsls	r1, r3, #6
 100199c:	d53e      	bpl.n	1001a1c <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
 100199e:	4822      	ldr	r0, [pc, #136]	; (1001a28 <usage_fault.constprop.0+0x9c>)
 10019a0:	2145      	movs	r1, #69	; 0x45
 10019a2:	f002 fa0e 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_DIV_0;
 10019a6:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 10019a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10019aa:	01da      	lsls	r2, r3, #7
 10019ac:	d504      	bpl.n	10019b8 <usage_fault.constprop.0+0x2c>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
 10019ae:	481f      	ldr	r0, [pc, #124]	; (1001a2c <usage_fault.constprop.0+0xa0>)
 10019b0:	2145      	movs	r1, #69	; 0x45
 10019b2:	f002 fa06 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 10019b6:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 10019b8:	4c19      	ldr	r4, [pc, #100]	; (1001a20 <usage_fault.constprop.0+0x94>)
 10019ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10019bc:	02db      	lsls	r3, r3, #11
 10019be:	d504      	bpl.n	10019ca <usage_fault.constprop.0+0x3e>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
 10019c0:	481b      	ldr	r0, [pc, #108]	; (1001a30 <usage_fault.constprop.0+0xa4>)
 10019c2:	2145      	movs	r1, #69	; 0x45
 10019c4:	f002 f9fd 	bl	1003dc2 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
 10019c8:	2002      	movs	r0, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 10019ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10019cc:	031c      	lsls	r4, r3, #12
 10019ce:	d504      	bpl.n	10019da <usage_fault.constprop.0+0x4e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
 10019d0:	4818      	ldr	r0, [pc, #96]	; (1001a34 <usage_fault.constprop.0+0xa8>)
 10019d2:	2145      	movs	r1, #69	; 0x45
 10019d4:	f002 f9f5 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 10019d8:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 10019da:	4c11      	ldr	r4, [pc, #68]	; (1001a20 <usage_fault.constprop.0+0x94>)
 10019dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10019de:	0359      	lsls	r1, r3, #13
 10019e0:	d504      	bpl.n	10019ec <usage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 10019e2:	4815      	ldr	r0, [pc, #84]	; (1001a38 <usage_fault.constprop.0+0xac>)
 10019e4:	2145      	movs	r1, #69	; 0x45
 10019e6:	f002 f9ec 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 10019ea:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 10019ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10019ee:	039a      	lsls	r2, r3, #14
 10019f0:	d504      	bpl.n	10019fc <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
 10019f2:	4812      	ldr	r0, [pc, #72]	; (1001a3c <usage_fault.constprop.0+0xb0>)
 10019f4:	2145      	movs	r1, #69	; 0x45
 10019f6:	f002 f9e4 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 10019fa:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 10019fc:	4c08      	ldr	r4, [pc, #32]	; (1001a20 <usage_fault.constprop.0+0x94>)
 10019fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a00:	03db      	lsls	r3, r3, #15
 1001a02:	d504      	bpl.n	1001a0e <usage_fault.constprop.0+0x82>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 1001a04:	480e      	ldr	r0, [pc, #56]	; (1001a40 <usage_fault.constprop.0+0xb4>)
 1001a06:	2145      	movs	r1, #69	; 0x45
 1001a08:	f002 f9db 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 1001a0c:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1001a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a10:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 1001a14:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 1001a18:	62a3      	str	r3, [r4, #40]	; 0x28

	return reason;
}
 1001a1a:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 1001a1c:	201d      	movs	r0, #29
 1001a1e:	e7c3      	b.n	10019a8 <usage_fault.constprop.0+0x1c>
 1001a20:	e000ed00 	.word	0xe000ed00
 1001a24:	01004948 	.word	0x01004948
 1001a28:	01004965 	.word	0x01004965
 1001a2c:	0100497d 	.word	0x0100497d
 1001a30:	0100499c 	.word	0x0100499c
 1001a34:	010049cb 	.word	0x010049cb
 1001a38:	010049ee 	.word	0x010049ee
 1001a3c:	01004a18 	.word	0x01004a18
 1001a40:	01004a37 	.word	0x01004a37

01001a44 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 1001a44:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1001a46:	4c24      	ldr	r4, [pc, #144]	; (1001ad8 <bus_fault.constprop.0+0x94>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 1001a48:	4606      	mov	r6, r0
 1001a4a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 1001a4c:	4823      	ldr	r0, [pc, #140]	; (1001adc <bus_fault.constprop.0+0x98>)
 1001a4e:	2145      	movs	r1, #69	; 0x45
 1001a50:	f002 f9b7 	bl	1003dc2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1001a54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a56:	04d9      	lsls	r1, r3, #19
 1001a58:	d53b      	bpl.n	1001ad2 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Stacking error");
 1001a5a:	4821      	ldr	r0, [pc, #132]	; (1001ae0 <bus_fault.constprop.0+0x9c>)
 1001a5c:	2145      	movs	r1, #69	; 0x45
 1001a5e:	f002 f9b0 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_STACKING;
 1001a62:	2017      	movs	r0, #23
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 1001a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a66:	051a      	lsls	r2, r3, #20
 1001a68:	d504      	bpl.n	1001a74 <bus_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Unstacking error");
 1001a6a:	481e      	ldr	r0, [pc, #120]	; (1001ae4 <bus_fault.constprop.0+0xa0>)
 1001a6c:	2145      	movs	r1, #69	; 0x45
 1001a6e:	f002 f9a8 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_UNSTACKING;
 1001a72:	2018      	movs	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 1001a74:	4c18      	ldr	r4, [pc, #96]	; (1001ad8 <bus_fault.constprop.0+0x94>)
 1001a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a78:	059b      	lsls	r3, r3, #22
 1001a7a:	d511      	bpl.n	1001aa0 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Precise data bus error");
 1001a7c:	2145      	movs	r1, #69	; 0x45
 1001a7e:	481a      	ldr	r0, [pc, #104]	; (1001ae8 <bus_fault.constprop.0+0xa4>)
 1001a80:	f002 f99f 	bl	1003dc2 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
 1001a84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 1001a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a88:	0419      	lsls	r1, r3, #16
 1001a8a:	d508      	bpl.n	1001a9e <bus_fault.constprop.0+0x5a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 1001a8c:	2145      	movs	r1, #69	; 0x45
 1001a8e:	4817      	ldr	r0, [pc, #92]	; (1001aec <bus_fault.constprop.0+0xa8>)
 1001a90:	f002 f997 	bl	1003dc2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
 1001a94:	b11e      	cbz	r6, 1001a9e <bus_fault.constprop.0+0x5a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 1001a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001a98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 1001a9c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 1001a9e:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 1001aa0:	4c0d      	ldr	r4, [pc, #52]	; (1001ad8 <bus_fault.constprop.0+0x94>)
 1001aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001aa4:	055a      	lsls	r2, r3, #21
 1001aa6:	d504      	bpl.n	1001ab2 <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
 1001aa8:	4811      	ldr	r0, [pc, #68]	; (1001af0 <bus_fault.constprop.0+0xac>)
 1001aaa:	2145      	movs	r1, #69	; 0x45
 1001aac:	f002 f989 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 1001ab0:	201a      	movs	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 1001ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001ab4:	05db      	lsls	r3, r3, #23
 1001ab6:	d504      	bpl.n	1001ac2 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction bus error");
 1001ab8:	480e      	ldr	r0, [pc, #56]	; (1001af4 <bus_fault.constprop.0+0xb0>)
 1001aba:	2145      	movs	r1, #69	; 0x45
 1001abc:	f002 f981 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 1001ac0:	201b      	movs	r0, #27
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 1001ac2:	4a05      	ldr	r2, [pc, #20]	; (1001ad8 <bus_fault.constprop.0+0x94>)
 1001ac4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1001ac6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 1001aca:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1001acc:	2300      	movs	r3, #0
 1001ace:	702b      	strb	r3, [r5, #0]
}
 1001ad0:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 1001ad2:	2016      	movs	r0, #22
 1001ad4:	e7c6      	b.n	1001a64 <bus_fault.constprop.0+0x20>
 1001ad6:	bf00      	nop
 1001ad8:	e000ed00 	.word	0xe000ed00
 1001adc:	01004a67 	.word	0x01004a67
 1001ae0:	01004a82 	.word	0x01004a82
 1001ae4:	01004a98 	.word	0x01004a98
 1001ae8:	01004ab0 	.word	0x01004ab0
 1001aec:	01004ace 	.word	0x01004ace
 1001af0:	01004ae8 	.word	0x01004ae8
 1001af4:	01004b08 	.word	0x01004b08

01001af8 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 1001af8:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 1001afa:	4c2a      	ldr	r4, [pc, #168]	; (1001ba4 <mem_manage_fault.constprop.0+0xac>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 1001afc:	4606      	mov	r6, r0
 1001afe:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 1001b00:	4829      	ldr	r0, [pc, #164]	; (1001ba8 <mem_manage_fault.constprop.0+0xb0>)
 1001b02:	2145      	movs	r1, #69	; 0x45
 1001b04:	f002 f95d 	bl	1003dc2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 1001b08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b0a:	06d8      	lsls	r0, r3, #27
 1001b0c:	d540      	bpl.n	1001b90 <mem_manage_fault.constprop.0+0x98>
		PR_FAULT_INFO("  Stacking error (context area might be"
 1001b0e:	4827      	ldr	r0, [pc, #156]	; (1001bac <mem_manage_fault.constprop.0+0xb4>)
 1001b10:	2145      	movs	r1, #69	; 0x45
 1001b12:	f002 f956 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_STACKING;
 1001b16:	2011      	movs	r0, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 1001b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b1a:	0719      	lsls	r1, r3, #28
 1001b1c:	d504      	bpl.n	1001b28 <mem_manage_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Unstacking error");
 1001b1e:	4824      	ldr	r0, [pc, #144]	; (1001bb0 <mem_manage_fault.constprop.0+0xb8>)
 1001b20:	2145      	movs	r1, #69	; 0x45
 1001b22:	f002 f94e 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_UNSTACKING;
 1001b26:	2012      	movs	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 1001b28:	4c1e      	ldr	r4, [pc, #120]	; (1001ba4 <mem_manage_fault.constprop.0+0xac>)
 1001b2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b2c:	079a      	lsls	r2, r3, #30
 1001b2e:	d511      	bpl.n	1001b54 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Data Access Violation");
 1001b30:	2145      	movs	r1, #69	; 0x45
 1001b32:	4820      	ldr	r0, [pc, #128]	; (1001bb4 <mem_manage_fault.constprop.0+0xbc>)
 1001b34:	f002 f945 	bl	1003dc2 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
 1001b38:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 1001b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b3c:	061b      	lsls	r3, r3, #24
 1001b3e:	d508      	bpl.n	1001b52 <mem_manage_fault.constprop.0+0x5a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 1001b40:	2145      	movs	r1, #69	; 0x45
 1001b42:	481d      	ldr	r0, [pc, #116]	; (1001bb8 <mem_manage_fault.constprop.0+0xc0>)
 1001b44:	f002 f93d 	bl	1003dc2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
 1001b48:	b11e      	cbz	r6, 1001b52 <mem_manage_fault.constprop.0+0x5a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 1001b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1001b50:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 1001b52:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 1001b54:	4c13      	ldr	r4, [pc, #76]	; (1001ba4 <mem_manage_fault.constprop.0+0xac>)
 1001b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b58:	07de      	lsls	r6, r3, #31
 1001b5a:	d504      	bpl.n	1001b66 <mem_manage_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Instruction Access Violation");
 1001b5c:	4817      	ldr	r0, [pc, #92]	; (1001bbc <mem_manage_fault.constprop.0+0xc4>)
 1001b5e:	2145      	movs	r1, #69	; 0x45
 1001b60:	f002 f92f 	bl	1003dc2 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 1001b64:	2014      	movs	r0, #20
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 1001b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001b68:	06d9      	lsls	r1, r3, #27
 1001b6a:	d402      	bmi.n	1001b72 <mem_manage_fault.constprop.0+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 1001b6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 1001b6e:	079a      	lsls	r2, r3, #30
 1001b70:	d510      	bpl.n	1001b94 <mem_manage_fault.constprop.0+0x9c>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
 1001b72:	4b0c      	ldr	r3, [pc, #48]	; (1001ba4 <mem_manage_fault.constprop.0+0xac>)
 1001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1001b76:	06db      	lsls	r3, r3, #27
 1001b78:	d50c      	bpl.n	1001b94 <mem_manage_fault.constprop.0+0x9c>
 1001b7a:	4911      	ldr	r1, [pc, #68]	; (1001bc0 <mem_manage_fault.constprop.0+0xc8>)
 1001b7c:	4811      	ldr	r0, [pc, #68]	; (1001bc4 <mem_manage_fault.constprop.0+0xcc>)
 1001b7e:	f240 1261 	movw	r2, #353	; 0x161
 1001b82:	f002 f910 	bl	1003da6 <assert_print>
 1001b86:	f240 1161 	movw	r1, #353	; 0x161
 1001b8a:	480d      	ldr	r0, [pc, #52]	; (1001bc0 <mem_manage_fault.constprop.0+0xc8>)
 1001b8c:	f002 f904 	bl	1003d98 <assert_post_action>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 1001b90:	2010      	movs	r0, #16
 1001b92:	e7c1      	b.n	1001b18 <mem_manage_fault.constprop.0+0x20>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 1001b94:	4a03      	ldr	r2, [pc, #12]	; (1001ba4 <mem_manage_fault.constprop.0+0xac>)
 1001b96:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1001b98:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 1001b9c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1001b9e:	2300      	movs	r3, #0
 1001ba0:	702b      	strb	r3, [r5, #0]
}
 1001ba2:	bd70      	pop	{r4, r5, r6, pc}
 1001ba4:	e000ed00 	.word	0xe000ed00
 1001ba8:	01004b25 	.word	0x01004b25
 1001bac:	01004b40 	.word	0x01004b40
 1001bb0:	01004a98 	.word	0x01004a98
 1001bb4:	01004b78 	.word	0x01004b78
 1001bb8:	01004b95 	.word	0x01004b95
 1001bbc:	01004bb0 	.word	0x01004bb0
 1001bc0:	01004bd4 	.word	0x01004bd4
 1001bc4:	010046c0 	.word	0x010046c0

01001bc8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1001bc8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1001bca:	4b69      	ldr	r3, [pc, #420]	; (1001d70 <z_arm_fault+0x1a8>)
{
 1001bcc:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1001bce:	6858      	ldr	r0, [r3, #4]
 1001bd0:	2600      	movs	r6, #0
{
 1001bd2:	b08a      	sub	sp, #40	; 0x28
 1001bd4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 1001bd8:	f386 8811 	msr	BASEPRI, r6
 1001bdc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 1001be0:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 1001be4:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 1001be8:	d107      	bne.n	1001bfa <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 1001bea:	f002 040c 	and.w	r4, r2, #12
 1001bee:	2c08      	cmp	r4, #8
 1001bf0:	d10e      	bne.n	1001c10 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 1001bf2:	2145      	movs	r1, #69	; 0x45
 1001bf4:	485f      	ldr	r0, [pc, #380]	; (1001d74 <z_arm_fault+0x1ac>)
 1001bf6:	f002 f8e4 	bl	1003dc2 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
 1001bfa:	495f      	ldr	r1, [pc, #380]	; (1001d78 <z_arm_fault+0x1b0>)
 1001bfc:	f240 423e 	movw	r2, #1086	; 0x43e
 1001c00:	485e      	ldr	r0, [pc, #376]	; (1001d7c <z_arm_fault+0x1b4>)
 1001c02:	f002 f8d0 	bl	1003da6 <assert_print>
 1001c06:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
 1001c0a:	485b      	ldr	r0, [pc, #364]	; (1001d78 <z_arm_fault+0x1b0>)
 1001c0c:	f002 f8c4 	bl	1003d98 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 1001c10:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 1001c12:	bf4c      	ite	mi
 1001c14:	460d      	movmi	r5, r1
			*nested_exc = true;
 1001c16:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
 1001c18:	2d00      	cmp	r5, #0
 1001c1a:	d0ee      	beq.n	1001bfa <z_arm_fault+0x32>
	*recoverable = false;
 1001c1c:	2400      	movs	r4, #0
	switch (fault) {
 1001c1e:	1eda      	subs	r2, r3, #3
	*recoverable = false;
 1001c20:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
 1001c24:	2a09      	cmp	r2, #9
 1001c26:	f200 8092 	bhi.w	1001d4e <z_arm_fault+0x186>
 1001c2a:	e8df f002 	tbb	[pc, r2]
 1001c2e:	8505      	.short	0x8505
 1001c30:	90907089 	.word	0x90907089
 1001c34:	8d909090 	.word	0x8d909090
	PR_FAULT_INFO("***** HARD FAULT *****");
 1001c38:	2145      	movs	r1, #69	; 0x45
 1001c3a:	4851      	ldr	r0, [pc, #324]	; (1001d80 <z_arm_fault+0x1b8>)
 1001c3c:	f002 f8c1 	bl	1003dc2 <z_log_minimal_printk>
	*recoverable = false;
 1001c40:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 1001c44:	4c4a      	ldr	r4, [pc, #296]	; (1001d70 <z_arm_fault+0x1a8>)
 1001c46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001c48:	079a      	lsls	r2, r3, #30
 1001c4a:	d505      	bpl.n	1001c58 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
 1001c4c:	2145      	movs	r1, #69	; 0x45
 1001c4e:	484d      	ldr	r0, [pc, #308]	; (1001d84 <z_arm_fault+0x1bc>)
	PR_FAULT_INFO(
 1001c50:	f002 f8b7 	bl	1003dc2 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 1001c54:	2400      	movs	r4, #0
 1001c56:	e029      	b.n	1001cac <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 1001c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001c5a:	2b00      	cmp	r3, #0
 1001c5c:	da02      	bge.n	1001c64 <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
 1001c5e:	2145      	movs	r1, #69	; 0x45
 1001c60:	4849      	ldr	r0, [pc, #292]	; (1001d88 <z_arm_fault+0x1c0>)
 1001c62:	e7f5      	b.n	1001c50 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 1001c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1001c66:	005b      	lsls	r3, r3, #1
 1001c68:	d55d      	bpl.n	1001d26 <z_arm_fault+0x15e>
		PR_EXC("  Fault escalation (see below)");
 1001c6a:	2145      	movs	r1, #69	; 0x45
 1001c6c:	4847      	ldr	r0, [pc, #284]	; (1001d8c <z_arm_fault+0x1c4>)
 1001c6e:	f002 f8a8 	bl	1003dc2 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1001c72:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 1001c74:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 1001c7a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1001c7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001c80:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1001c84:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 1001c86:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1001c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 1001c8e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1001c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001c94:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 1001c98:	f64d 7302 	movw	r3, #57090	; 0xdf02
 1001c9c:	429a      	cmp	r2, r3
 1001c9e:	d11e      	bne.n	1001cde <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 1001ca0:	2145      	movs	r1, #69	; 0x45
 1001ca2:	682a      	ldr	r2, [r5, #0]
 1001ca4:	483a      	ldr	r0, [pc, #232]	; (1001d90 <z_arm_fault+0x1c8>)
 1001ca6:	f002 f88c 	bl	1003dc2 <z_log_minimal_printk>
			reason = esf->basic.r0;
 1001caa:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 1001cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 1001cb0:	b99b      	cbnz	r3, 1001cda <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 1001cb2:	2220      	movs	r2, #32
 1001cb4:	4629      	mov	r1, r5
 1001cb6:	a802      	add	r0, sp, #8
 1001cb8:	f002 f909 	bl	1003ece <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 1001cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1001cbe:	2e00      	cmp	r6, #0
 1001cc0:	d051      	beq.n	1001d66 <z_arm_fault+0x19e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 1001cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1001cc6:	b922      	cbnz	r2, 1001cd2 <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1001cc8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1001ccc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1001cd0:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 1001cd2:	4620      	mov	r0, r4
 1001cd4:	a902      	add	r1, sp, #8
 1001cd6:	f7ff fd8b 	bl	10017f0 <z_arm_fatal_error>
}
 1001cda:	b00a      	add	sp, #40	; 0x28
 1001cdc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 1001cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001ce0:	b2db      	uxtb	r3, r3
 1001ce2:	b133      	cbz	r3, 1001cf2 <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
 1001ce4:	2001      	movs	r0, #1
 1001ce6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 1001cea:	f7ff ff05 	bl	1001af8 <mem_manage_fault.constprop.0>
 1001cee:	4604      	mov	r4, r0
		break;
 1001cf0:	e7dc      	b.n	1001cac <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 1001cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001cf4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 1001cf8:	d005      	beq.n	1001d06 <z_arm_fault+0x13e>
			reason = bus_fault(esf, 1, recoverable);
 1001cfa:	2001      	movs	r0, #1
 1001cfc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 1001d00:	f7ff fea0 	bl	1001a44 <bus_fault.constprop.0>
 1001d04:	e7f3      	b.n	1001cee <z_arm_fault+0x126>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 1001d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 1001d0c:	d302      	bcc.n	1001d14 <z_arm_fault+0x14c>
		reason = usage_fault(esf);
 1001d0e:	f7ff fe3d 	bl	100198c <usage_fault.constprop.0>
 1001d12:	e7ec      	b.n	1001cee <z_arm_fault+0x126>
			__ASSERT(0,
 1001d14:	4918      	ldr	r1, [pc, #96]	; (1001d78 <z_arm_fault+0x1b0>)
 1001d16:	f44f 7244 	mov.w	r2, #784	; 0x310
 1001d1a:	4818      	ldr	r0, [pc, #96]	; (1001d7c <z_arm_fault+0x1b4>)
 1001d1c:	f002 f843 	bl	1003da6 <assert_print>
 1001d20:	f44f 7144 	mov.w	r1, #784	; 0x310
 1001d24:	e771      	b.n	1001c0a <z_arm_fault+0x42>
		__ASSERT(0,
 1001d26:	4914      	ldr	r1, [pc, #80]	; (1001d78 <z_arm_fault+0x1b0>)
 1001d28:	f44f 7245 	mov.w	r2, #788	; 0x314
 1001d2c:	4813      	ldr	r0, [pc, #76]	; (1001d7c <z_arm_fault+0x1b4>)
 1001d2e:	f002 f83a 	bl	1003da6 <assert_print>
 1001d32:	f44f 7145 	mov.w	r1, #788	; 0x314
 1001d36:	e768      	b.n	1001c0a <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
 1001d38:	2000      	movs	r0, #0
 1001d3a:	f10d 0107 	add.w	r1, sp, #7
 1001d3e:	e7d4      	b.n	1001cea <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
 1001d40:	2000      	movs	r0, #0
 1001d42:	f10d 0107 	add.w	r1, sp, #7
 1001d46:	e7db      	b.n	1001d00 <z_arm_fault+0x138>
	PR_FAULT_INFO(
 1001d48:	2145      	movs	r1, #69	; 0x45
 1001d4a:	4812      	ldr	r0, [pc, #72]	; (1001d94 <z_arm_fault+0x1cc>)
 1001d4c:	e780      	b.n	1001c50 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
 1001d4e:	4912      	ldr	r1, [pc, #72]	; (1001d98 <z_arm_fault+0x1d0>)
 1001d50:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
 1001d54:	4a11      	ldr	r2, [pc, #68]	; (1001d9c <z_arm_fault+0x1d4>)
 1001d56:	4812      	ldr	r0, [pc, #72]	; (1001da0 <z_arm_fault+0x1d8>)
 1001d58:	bf08      	it	eq
 1001d5a:	460a      	moveq	r2, r1
 1001d5c:	3b10      	subs	r3, #16
 1001d5e:	2145      	movs	r1, #69	; 0x45
 1001d60:	f002 f82f 	bl	1003dc2 <z_log_minimal_printk>
}
 1001d64:	e776      	b.n	1001c54 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1001d66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1001d6a:	f023 0301 	bic.w	r3, r3, #1
 1001d6e:	e7af      	b.n	1001cd0 <z_arm_fault+0x108>
 1001d70:	e000ed00 	.word	0xe000ed00
 1001d74:	01004c3c 	.word	0x01004c3c
 1001d78:	01004bd4 	.word	0x01004bd4
 1001d7c:	010046c0 	.word	0x010046c0
 1001d80:	01004c6c 	.word	0x01004c6c
 1001d84:	01004c88 	.word	0x01004c88
 1001d88:	01004cae 	.word	0x01004cae
 1001d8c:	01004cc1 	.word	0x01004cc1
 1001d90:	01004ce5 	.word	0x01004ce5
 1001d94:	01004d06 	.word	0x01004d06
 1001d98:	01004c0e 	.word	0x01004c0e
 1001d9c:	01004c23 	.word	0x01004c23
 1001da0:	01004d2f 	.word	0x01004d2f

01001da4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1001da4:	4b04      	ldr	r3, [pc, #16]	; (1001db8 <z_arm_fault_init+0x14>)
 1001da6:	695a      	ldr	r2, [r3, #20]
 1001da8:	f042 0210 	orr.w	r2, r2, #16
 1001dac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 1001dae:	695a      	ldr	r2, [r3, #20]
 1001db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1001db4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 1001db6:	4770      	bx	lr
 1001db8:	e000ed00 	.word	0xe000ed00

01001dbc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1001dbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 1001dc0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1001dc4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1001dc6:	4672      	mov	r2, lr
	bl z_arm_fault
 1001dc8:	f7ff fefe 	bl	1001bc8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1001dcc:	bd01      	pop	{r0, pc}
 1001dce:	bf00      	nop

01001dd0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 1001dd0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1001dd2:	2120      	movs	r1, #32
 1001dd4:	4803      	ldr	r0, [pc, #12]	; (1001de4 <z_arm_interrupt_init+0x14>)
 1001dd6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1001dd8:	3301      	adds	r3, #1
 1001dda:	2b1e      	cmp	r3, #30
 1001ddc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 1001de0:	d1f9      	bne.n	1001dd6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 1001de2:	4770      	bx	lr
 1001de4:	e000e100 	.word	0xe000e100

01001de8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 1001de8:	2000      	movs	r0, #0
    msr CONTROL, r0
 1001dea:	f380 8814 	msr	CONTROL, r0
    isb
 1001dee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 1001df2:	2000      	movs	r0, #0
    msr MSPLIM, r0
 1001df4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 1001df8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 1001dfc:	f7ff fbde 	bl	10015bc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 1001e00:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 1001e02:	490e      	ldr	r1, [pc, #56]	; (1001e3c <__start+0x54>)
    str r0, [r1]
 1001e04:	6008      	str	r0, [r1, #0]
    dsb
 1001e06:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1001e0a:	480d      	ldr	r0, [pc, #52]	; (1001e40 <__start+0x58>)
    msr msp, r0
 1001e0c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 1001e10:	f000 f83e 	bl	1001e90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1001e14:	2020      	movs	r0, #32
    msr BASEPRI, r0
 1001e16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 1001e1a:	480a      	ldr	r0, [pc, #40]	; (1001e44 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 1001e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 1001e20:	1840      	adds	r0, r0, r1
    msr PSP, r0
 1001e22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 1001e26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 1001e2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 1001e2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 1001e2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 1001e32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 1001e36:	f7ff fd4f 	bl	10018d8 <z_arm_prep_c>
 1001e3a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 1001e3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1001e40:	21000d58 	.word	0x21000d58
    ldr r0, =z_interrupt_stacks
 1001e44:	21000158 	.word	0x21000158

01001e48 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1001e48:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1001e4c:	4905      	ldr	r1, [pc, #20]	; (1001e64 <sys_arch_reboot+0x1c>)
 1001e4e:	4b06      	ldr	r3, [pc, #24]	; (1001e68 <sys_arch_reboot+0x20>)
 1001e50:	68ca      	ldr	r2, [r1, #12]
 1001e52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1001e56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1001e58:	60cb      	str	r3, [r1, #12]
 1001e5a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 1001e5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 1001e60:	e7fd      	b.n	1001e5e <sys_arch_reboot+0x16>
 1001e62:	bf00      	nop
 1001e64:	e000ed00 	.word	0xe000ed00
 1001e68:	05fa0004 	.word	0x05fa0004

01001e6c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1001e6c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 1001e6e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 1001e70:	4906      	ldr	r1, [pc, #24]	; (1001e8c <z_arm_clear_arm_mpu_config+0x20>)
 1001e72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1001e76:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1001e7a:	4293      	cmp	r3, r2
 1001e7c:	db00      	blt.n	1001e80 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 1001e7e:	4770      	bx	lr
  mpu->RNR = rnr;
 1001e80:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1001e84:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1001e88:	3301      	adds	r3, #1
 1001e8a:	e7f6      	b.n	1001e7a <z_arm_clear_arm_mpu_config+0xe>
 1001e8c:	e000ed00 	.word	0xe000ed00

01001e90 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
 1001e90:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 1001e92:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1001e94:	2400      	movs	r4, #0
 1001e96:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1001e9a:	f7ff ffe7 	bl	1001e6c <z_arm_clear_arm_mpu_config>
 1001e9e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 1001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1001ea4:	4a0c      	ldr	r2, [pc, #48]	; (1001ed8 <z_arm_init_arch_hw_at_boot+0x48>)
 1001ea6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1001eaa:	3301      	adds	r3, #1
 1001eac:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 1001eae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1001eb2:	d1f8      	bne.n	1001ea6 <z_arm_init_arch_hw_at_boot+0x16>
 1001eb4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1001eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 1001eba:	4a07      	ldr	r2, [pc, #28]	; (1001ed8 <z_arm_init_arch_hw_at_boot+0x48>)
 1001ebc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1001ec0:	3301      	adds	r3, #1
 1001ec2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1001ec4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1001ec8:	d1f8      	bne.n	1001ebc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 1001eca:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1001ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001ed0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 1001ed4:	bd10      	pop	{r4, pc}
 1001ed6:	bf00      	nop
 1001ed8:	e000e100 	.word	0xe000e100

01001edc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001edc:	2340      	movs	r3, #64	; 0x40
{
 1001ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 1001ee0:	4c0b      	ldr	r4, [pc, #44]	; (1001f10 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001ee2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 1001ee4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001ee6:	460b      	mov	r3, r1
{
 1001ee8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001eea:	490a      	ldr	r1, [pc, #40]	; (1001f14 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
 1001eec:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001eee:	4361      	muls	r1, r4
{
 1001ef0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001ef2:	4a09      	ldr	r2, [pc, #36]	; (1001f18 <onoff_start+0x3c>)
 1001ef4:	4809      	ldr	r0, [pc, #36]	; (1001f1c <onoff_start+0x40>)
 1001ef6:	f002 f811 	bl	1003f1c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 1001efa:	1e01      	subs	r1, r0, #0
 1001efc:	da05      	bge.n	1001f0a <onoff_start+0x2e>
		notify(mgr, err);
 1001efe:	4630      	mov	r0, r6
 1001f00:	462b      	mov	r3, r5
	}
}
 1001f02:	b002      	add	sp, #8
 1001f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
 1001f08:	4718      	bx	r3
}
 1001f0a:	b002      	add	sp, #8
 1001f0c:	bd70      	pop	{r4, r5, r6, pc}
 1001f0e:	bf00      	nop
 1001f10:	210000d8 	.word	0x210000d8
 1001f14:	b6db6db7 	.word	0xb6db6db7
 1001f18:	01003f8d 	.word	0x01003f8d
 1001f1c:	01004254 	.word	0x01004254

01001f20 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1001f20:	b2c9      	uxtb	r1, r1
 1001f22:	2901      	cmp	r1, #1
{
 1001f24:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1001f26:	d908      	bls.n	1001f3a <get_status+0x1a>
 1001f28:	4908      	ldr	r1, [pc, #32]	; (1001f4c <get_status+0x2c>)
 1001f2a:	4809      	ldr	r0, [pc, #36]	; (1001f50 <get_status+0x30>)
 1001f2c:	227a      	movs	r2, #122	; 0x7a
 1001f2e:	f001 ff3a 	bl	1003da6 <assert_print>
 1001f32:	217a      	movs	r1, #122	; 0x7a
 1001f34:	4805      	ldr	r0, [pc, #20]	; (1001f4c <get_status+0x2c>)
 1001f36:	f001 ff2f 	bl	1003d98 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
 1001f3a:	220c      	movs	r2, #12
 1001f3c:	6903      	ldr	r3, [r0, #16]
 1001f3e:	fb01 3302 	mla	r3, r1, r2, r3
 1001f42:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 1001f44:	f000 0007 	and.w	r0, r0, #7
 1001f48:	bd08      	pop	{r3, pc}
 1001f4a:	bf00      	nop
 1001f4c:	01004d47 	.word	0x01004d47
 1001f50:	010046c0 	.word	0x010046c0

01001f54 <stop>:
{
 1001f54:	b570      	push	{r4, r5, r6, lr}
 1001f56:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1001f58:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
 1001f5a:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1001f5c:	d90a      	bls.n	1001f74 <stop+0x20>
 1001f5e:	4918      	ldr	r1, [pc, #96]	; (1001fc0 <stop+0x6c>)
 1001f60:	4818      	ldr	r0, [pc, #96]	; (1001fc4 <stop+0x70>)
 1001f62:	f240 125d 	movw	r2, #349	; 0x15d
 1001f66:	f001 ff1e 	bl	1003da6 <assert_print>
 1001f6a:	f240 115d 	movw	r1, #349	; 0x15d
 1001f6e:	4814      	ldr	r0, [pc, #80]	; (1001fc0 <stop+0x6c>)
 1001f70:	f001 ff12 	bl	1003d98 <assert_post_action>
	__asm__ volatile(
 1001f74:	f04f 0420 	mov.w	r4, #32
 1001f78:	f3ef 8511 	mrs	r5, BASEPRI
 1001f7c:	f384 8812 	msr	BASEPRI_MAX, r4
 1001f80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1001f84:	260c      	movs	r6, #12
 1001f86:	fb06 3401 	mla	r4, r6, r1, r3
 1001f8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 1001f8c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 1001f90:	d008      	beq.n	1001fa4 <stop+0x50>
 1001f92:	42a2      	cmp	r2, r4
 1001f94:	d006      	beq.n	1001fa4 <stop+0x50>
	__asm__ volatile(
 1001f96:	f385 8811 	msr	BASEPRI, r5
 1001f9a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
 1001f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 1001fa2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
 1001fa4:	2201      	movs	r2, #1
 1001fa6:	4371      	muls	r1, r6
 1001fa8:	440b      	add	r3, r1
 1001faa:	641a      	str	r2, [r3, #64]	; 0x40
 1001fac:	f385 8811 	msr	BASEPRI, r5
 1001fb0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
 1001fb4:	6843      	ldr	r3, [r0, #4]
 1001fb6:	440b      	add	r3, r1
 1001fb8:	685b      	ldr	r3, [r3, #4]
 1001fba:	4798      	blx	r3
	return 0;
 1001fbc:	2000      	movs	r0, #0
 1001fbe:	e7f0      	b.n	1001fa2 <stop+0x4e>
 1001fc0:	01004d47 	.word	0x01004d47
 1001fc4:	010046c0 	.word	0x010046c0

01001fc8 <onoff_stop>:
	size_t offset = (size_t)(mgr - data->mgr);
 1001fc8:	4b08      	ldr	r3, [pc, #32]	; (1001fec <onoff_stop+0x24>)
{
 1001fca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 1001fcc:	1ac3      	subs	r3, r0, r3
{
 1001fce:	460d      	mov	r5, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 1001fd0:	4907      	ldr	r1, [pc, #28]	; (1001ff0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
 1001fd2:	109b      	asrs	r3, r3, #2
{
 1001fd4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 1001fd6:	4359      	muls	r1, r3
 1001fd8:	2240      	movs	r2, #64	; 0x40
 1001fda:	4806      	ldr	r0, [pc, #24]	; (1001ff4 <onoff_stop+0x2c>)
 1001fdc:	f7ff ffba 	bl	1001f54 <stop>
	notify(mgr, res);
 1001fe0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 1001fe2:	4601      	mov	r1, r0
	notify(mgr, res);
 1001fe4:	4620      	mov	r0, r4
}
 1001fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 1001fea:	4718      	bx	r3
 1001fec:	210000d8 	.word	0x210000d8
 1001ff0:	b6db6db7 	.word	0xb6db6db7
 1001ff4:	01004254 	.word	0x01004254

01001ff8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 1001ff8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1001ffa:	2200      	movs	r2, #0
 1001ffc:	2101      	movs	r1, #1
{
 1001ffe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1002000:	2005      	movs	r0, #5
 1002002:	f7ff fc3f 	bl	1001884 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
 1002006:	480f      	ldr	r0, [pc, #60]	; (1002044 <clk_init+0x4c>)
 1002008:	f001 f80a 	bl	1003020 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 100200c:	4b0e      	ldr	r3, [pc, #56]	; (1002048 <clk_init+0x50>)
 100200e:	4298      	cmp	r0, r3
 1002010:	d115      	bne.n	100203e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
 1002012:	f001 f827 	bl	1003064 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 1002016:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 1002018:	490c      	ldr	r1, [pc, #48]	; (100204c <clk_init+0x54>)
 100201a:	4630      	mov	r0, r6
 100201c:	f001 fe3b 	bl	1003c96 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 1002020:	2800      	cmp	r0, #0
 1002022:	db0b      	blt.n	100203c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1002024:	2501      	movs	r5, #1
 1002026:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
 1002028:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 100202a:	4908      	ldr	r1, [pc, #32]	; (100204c <clk_init+0x54>)
 100202c:	f104 001c 	add.w	r0, r4, #28
 1002030:	f001 fe31 	bl	1003c96 <onoff_manager_init>
		if (err < 0) {
 1002034:	2800      	cmp	r0, #0
 1002036:	db01      	blt.n	100203c <clk_init+0x44>
	}

	return 0;
 1002038:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100203a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 100203c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 100203e:	f06f 0004 	mvn.w	r0, #4
 1002042:	e7fb      	b.n	100203c <clk_init+0x44>
 1002044:	01002085 	.word	0x01002085
 1002048:	0bad0000 	.word	0x0bad0000
 100204c:	0100442c 	.word	0x0100442c

01002050 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 1002050:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 1002052:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 1002054:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
 1002056:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
 1002058:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 100205a:	4808      	ldr	r0, [pc, #32]	; (100207c <clkstarted_handle.constprop.0+0x2c>)
 100205c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 100205e:	3340      	adds	r3, #64	; 0x40
 1002060:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
 1002062:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
 1002066:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 1002068:	f001 ff45 	bl	1003ef6 <set_on_state>
	if (callback) {
 100206c:	b12d      	cbz	r5, 100207a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 100206e:	4632      	mov	r2, r6
 1002070:	462b      	mov	r3, r5
}
 1002072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 1002076:	4802      	ldr	r0, [pc, #8]	; (1002080 <clkstarted_handle.constprop.0+0x30>)
 1002078:	4718      	bx	r3
}
 100207a:	bd70      	pop	{r4, r5, r6, pc}
 100207c:	210000d8 	.word	0x210000d8
 1002080:	01004254 	.word	0x01004254

01002084 <clock_event_handler>:
	switch (event) {
 1002084:	2801      	cmp	r0, #1
{
 1002086:	b508      	push	{r3, lr}
	switch (event) {
 1002088:	d006      	beq.n	1002098 <clock_event_handler+0x14>
 100208a:	2803      	cmp	r0, #3
 100208c:	d008      	beq.n	10020a0 <clock_event_handler+0x1c>
 100208e:	b990      	cbnz	r0, 10020b6 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 1002090:	4b0e      	ldr	r3, [pc, #56]	; (10020cc <clock_event_handler+0x48>)
 1002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1002094:	075b      	lsls	r3, r3, #29
 1002096:	d117      	bne.n	10020c8 <clock_event_handler+0x44>
}
 1002098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 100209c:	f7ff bfd8 	b.w	1002050 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
 10020a0:	490b      	ldr	r1, [pc, #44]	; (10020d0 <clock_event_handler+0x4c>)
 10020a2:	f240 226e 	movw	r2, #622	; 0x26e
 10020a6:	480b      	ldr	r0, [pc, #44]	; (10020d4 <clock_event_handler+0x50>)
 10020a8:	f001 fe7d 	bl	1003da6 <assert_print>
 10020ac:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
 10020b0:	4807      	ldr	r0, [pc, #28]	; (10020d0 <clock_event_handler+0x4c>)
 10020b2:	f001 fe71 	bl	1003d98 <assert_post_action>
 10020b6:	4906      	ldr	r1, [pc, #24]	; (10020d0 <clock_event_handler+0x4c>)
 10020b8:	f240 2272 	movw	r2, #626	; 0x272
 10020bc:	4805      	ldr	r0, [pc, #20]	; (10020d4 <clock_event_handler+0x50>)
 10020be:	f001 fe72 	bl	1003da6 <assert_print>
 10020c2:	f240 2172 	movw	r1, #626	; 0x272
 10020c6:	e7f3      	b.n	10020b0 <clock_event_handler+0x2c>
}
 10020c8:	bd08      	pop	{r3, pc}
 10020ca:	bf00      	nop
 10020cc:	210000d8 	.word	0x210000d8
 10020d0:	01004d47 	.word	0x01004d47
 10020d4:	010046c0 	.word	0x010046c0

010020d8 <generic_hfclk_start>:
{
 10020d8:	b508      	push	{r3, lr}
	__asm__ volatile(
 10020da:	f04f 0320 	mov.w	r3, #32
 10020de:	f3ef 8111 	mrs	r1, BASEPRI
 10020e2:	f383 8812 	msr	BASEPRI_MAX, r3
 10020e6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 10020ea:	4a11      	ldr	r2, [pc, #68]	; (1002130 <generic_hfclk_start+0x58>)
 10020ec:	6813      	ldr	r3, [r2, #0]
 10020ee:	f043 0002 	orr.w	r0, r3, #2
 10020f2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 10020f4:	07da      	lsls	r2, r3, #31
 10020f6:	d408      	bmi.n	100210a <generic_hfclk_start+0x32>
	__asm__ volatile(
 10020f8:	f381 8811 	msr	BASEPRI, r1
 10020fc:	f3bf 8f6f 	isb	sy
}
 1002100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 1002104:	2001      	movs	r0, #1
 1002106:	f000 bfd3 	b.w	10030b0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 100210a:	4b0a      	ldr	r3, [pc, #40]	; (1002134 <generic_hfclk_start+0x5c>)
 100210c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 1002110:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 1002114:	07d3      	lsls	r3, r2, #31
 1002116:	d5ef      	bpl.n	10020f8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
 1002118:	4807      	ldr	r0, [pc, #28]	; (1002138 <generic_hfclk_start+0x60>)
 100211a:	f001 feec 	bl	1003ef6 <set_on_state>
 100211e:	f381 8811 	msr	BASEPRI, r1
 1002122:	f3bf 8f6f 	isb	sy
}
 1002126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 100212a:	2000      	movs	r0, #0
 100212c:	f7ff bf90 	b.w	1002050 <clkstarted_handle.constprop.0>
 1002130:	21000128 	.word	0x21000128
 1002134:	41005000 	.word	0x41005000
 1002138:	21000118 	.word	0x21000118

0100213c <generic_hfclk_stop>:
{
 100213c:	b510      	push	{r4, lr}
	__asm__ volatile(
 100213e:	f04f 0320 	mov.w	r3, #32
 1002142:	f3ef 8411 	mrs	r4, BASEPRI
 1002146:	f383 8812 	msr	BASEPRI_MAX, r3
 100214a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
 100214e:	4a07      	ldr	r2, [pc, #28]	; (100216c <generic_hfclk_stop+0x30>)
 1002150:	6813      	ldr	r3, [r2, #0]
 1002152:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
 1002156:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
 1002158:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
 100215a:	d402      	bmi.n	1002162 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 100215c:	2001      	movs	r0, #1
 100215e:	f001 f803 	bl	1003168 <nrfx_clock_stop>
	__asm__ volatile(
 1002162:	f384 8811 	msr	BASEPRI, r4
 1002166:	f3bf 8f6f 	isb	sy
}
 100216a:	bd10      	pop	{r4, pc}
 100216c:	21000128 	.word	0x21000128

01002170 <z_nrf_clock_control_lf_on>:
{
 1002170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 1002174:	2201      	movs	r2, #1
 1002176:	4606      	mov	r6, r0
 1002178:	493e      	ldr	r1, [pc, #248]	; (1002274 <z_nrf_clock_control_lf_on+0x104>)
 100217a:	e8d1 3fef 	ldaex	r3, [r1]
 100217e:	e8c1 2fe0 	stlex	r0, r2, [r1]
 1002182:	2800      	cmp	r0, #0
 1002184:	d1f9      	bne.n	100217a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
 1002186:	b99b      	cbnz	r3, 10021b0 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 1002188:	493b      	ldr	r1, [pc, #236]	; (1002278 <z_nrf_clock_control_lf_on+0x108>)
		err = onoff_request(mgr, &cli);
 100218a:	483c      	ldr	r0, [pc, #240]	; (100227c <z_nrf_clock_control_lf_on+0x10c>)
 100218c:	604b      	str	r3, [r1, #4]
 100218e:	60cb      	str	r3, [r1, #12]
 1002190:	608a      	str	r2, [r1, #8]
 1002192:	f7fe fd8b 	bl	1000cac <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
 1002196:	2800      	cmp	r0, #0
 1002198:	da0a      	bge.n	10021b0 <z_nrf_clock_control_lf_on+0x40>
 100219a:	4939      	ldr	r1, [pc, #228]	; (1002280 <z_nrf_clock_control_lf_on+0x110>)
 100219c:	f44f 720c 	mov.w	r2, #560	; 0x230
 10021a0:	4838      	ldr	r0, [pc, #224]	; (1002284 <z_nrf_clock_control_lf_on+0x114>)
 10021a2:	f001 fe00 	bl	1003da6 <assert_print>
 10021a6:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
 10021aa:	4835      	ldr	r0, [pc, #212]	; (1002280 <z_nrf_clock_control_lf_on+0x110>)
 10021ac:	f001 fdf4 	bl	1003d98 <assert_post_action>
	switch (start_mode) {
 10021b0:	b36e      	cbz	r6, 100220e <z_nrf_clock_control_lf_on+0x9e>
 10021b2:	1e73      	subs	r3, r6, #1
 10021b4:	2b01      	cmp	r3, #1
 10021b6:	d853      	bhi.n	1002260 <z_nrf_clock_control_lf_on+0xf0>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
 10021b8:	2e01      	cmp	r6, #1
 10021ba:	d106      	bne.n	10021ca <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 10021bc:	4b32      	ldr	r3, [pc, #200]	; (1002288 <z_nrf_clock_control_lf_on+0x118>)
 10021be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
 10021c2:	f003 0303 	and.w	r3, r3, #3
 10021c6:	2b02      	cmp	r3, #2
 10021c8:	d021      	beq.n	100220e <z_nrf_clock_control_lf_on+0x9e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 10021ca:	f002 f820 	bl	100420e <k_is_in_isr>
 10021ce:	4605      	mov	r5, r0
 10021d0:	b9f8      	cbnz	r0, 1002212 <z_nrf_clock_control_lf_on+0xa2>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 10021d2:	4b2e      	ldr	r3, [pc, #184]	; (100228c <z_nrf_clock_control_lf_on+0x11c>)
 10021d4:	781b      	ldrb	r3, [r3, #0]
 10021d6:	b1e3      	cbz	r3, 1002212 <z_nrf_clock_control_lf_on+0xa2>
    p_reg->INTENCLR = mask;
 10021d8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
 10021da:	4607      	mov	r7, r0
 10021dc:	4b2a      	ldr	r3, [pc, #168]	; (1002288 <z_nrf_clock_control_lf_on+0x118>)
 10021de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10021e2:	f04f 0800 	mov.w	r8, #0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10021e6:	4c28      	ldr	r4, [pc, #160]	; (1002288 <z_nrf_clock_control_lf_on+0x118>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10021e8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1002290 <z_nrf_clock_control_lf_on+0x120>
 10021ec:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10021f0:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
 10021f4:	03d2      	lsls	r2, r2, #15
 10021f6:	d516      	bpl.n	1002226 <z_nrf_clock_control_lf_on+0xb6>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 10021f8:	f003 0303 	and.w	r3, r3, #3
 10021fc:	2b02      	cmp	r3, #2
 10021fe:	d001      	beq.n	1002204 <z_nrf_clock_control_lf_on+0x94>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 1002200:	2e01      	cmp	r6, #1
 1002202:	d110      	bne.n	1002226 <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
 1002204:	b33d      	cbz	r5, 1002256 <z_nrf_clock_control_lf_on+0xe6>
 1002206:	f387 8811 	msr	BASEPRI, r7
 100220a:	f3bf 8f6f 	isb	sy
}
 100220e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
 1002212:	f04f 0320 	mov.w	r3, #32
 1002216:	f3ef 8711 	mrs	r7, BASEPRI
 100221a:	f383 8812 	msr	BASEPRI_MAX, r3
 100221e:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 1002222:	2501      	movs	r5, #1
 1002224:	e7dd      	b.n	10021e2 <z_nrf_clock_control_lf_on+0x72>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 1002226:	4638      	mov	r0, r7
 1002228:	f7ff facc 	bl	10017c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
 100222c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
 1002230:	b2db      	uxtb	r3, r3
 1002232:	2b01      	cmp	r3, #1
 1002234:	d1da      	bne.n	10021ec <z_nrf_clock_control_lf_on+0x7c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1002236:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
 100223a:	2a00      	cmp	r2, #0
 100223c:	d0d6      	beq.n	10021ec <z_nrf_clock_control_lf_on+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100223e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 1002242:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
 1002246:	2202      	movs	r2, #2
 1002248:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 100224c:	2220      	movs	r2, #32
 100224e:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002252:	60a3      	str	r3, [r4, #8]
}
 1002254:	e7ca      	b.n	10021ec <z_nrf_clock_control_lf_on+0x7c>
    p_reg->INTENSET = mask;
 1002256:	2202      	movs	r2, #2
 1002258:	4b0b      	ldr	r3, [pc, #44]	; (1002288 <z_nrf_clock_control_lf_on+0x118>)
 100225a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
 100225e:	e7d6      	b.n	100220e <z_nrf_clock_control_lf_on+0x9e>
		__ASSERT_NO_MSG(false);
 1002260:	4907      	ldr	r1, [pc, #28]	; (1002280 <z_nrf_clock_control_lf_on+0x110>)
 1002262:	f240 2242 	movw	r2, #578	; 0x242
 1002266:	4807      	ldr	r0, [pc, #28]	; (1002284 <z_nrf_clock_control_lf_on+0x114>)
 1002268:	f001 fd9d 	bl	1003da6 <assert_print>
 100226c:	f240 2142 	movw	r1, #578	; 0x242
 1002270:	e79b      	b.n	10021aa <z_nrf_clock_control_lf_on+0x3a>
 1002272:	bf00      	nop
 1002274:	210000d4 	.word	0x210000d4
 1002278:	210000c4 	.word	0x210000c4
 100227c:	210000f4 	.word	0x210000f4
 1002280:	01004d47 	.word	0x01004d47
 1002284:	010046c0 	.word	0x010046c0
 1002288:	41005000 	.word	0x41005000
 100228c:	21000152 	.word	0x21000152
 1002290:	e000e100 	.word	0xe000e100

01002294 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
 1002294:	4b02      	ldr	r3, [pc, #8]	; (10022a0 <flash_nrf_pages_layout+0xc>)
 1002296:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
 1002298:	2301      	movs	r3, #1
 100229a:	6013      	str	r3, [r2, #0]
}
 100229c:	4770      	bx	lr
 100229e:	bf00      	nop
 10022a0:	2100012c 	.word	0x2100012c

010022a4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
 10022a4:	4800      	ldr	r0, [pc, #0]	; (10022a8 <flash_nrf_get_parameters+0x4>)
 10022a6:	4770      	bx	lr
 10022a8:	01004480 	.word	0x01004480

010022ac <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
 10022ac:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
 10022ae:	f001 ff9c 	bl	10041ea <nrfx_nvmc_flash_page_count_get>
 10022b2:	4c03      	ldr	r4, [pc, #12]	; (10022c0 <nrf_flash_init+0x14>)
 10022b4:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
 10022b6:	f001 ff95 	bl	10041e4 <nrfx_nvmc_flash_page_size_get>
 10022ba:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
 10022bc:	2000      	movs	r0, #0
 10022be:	bd10      	pop	{r4, pc}
 10022c0:	2100012c 	.word	0x2100012c

010022c4 <flash_nrf_erase>:
{
 10022c4:	b570      	push	{r4, r5, r6, lr}
 10022c6:	460c      	mov	r4, r1
 10022c8:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
 10022ca:	f001 ff8b 	bl	10041e4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
 10022ce:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
 10022d0:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
 10022d2:	4620      	mov	r0, r4
 10022d4:	f001 fe6c 	bl	1003fb0 <is_regular_addr_valid>
 10022d8:	b310      	cbz	r0, 1002320 <flash_nrf_erase+0x5c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
 10022da:	fbb4 f3f6 	udiv	r3, r4, r6
 10022de:	fb06 4313 	mls	r3, r6, r3, r4
 10022e2:	b923      	cbnz	r3, 10022ee <flash_nrf_erase+0x2a>
 10022e4:	fbb5 f3f6 	udiv	r3, r5, r6
 10022e8:	fb06 5313 	mls	r3, r6, r3, r5
 10022ec:	b143      	cbz	r3, 1002300 <flash_nrf_erase+0x3c>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
 10022ee:	462b      	mov	r3, r5
 10022f0:	4622      	mov	r2, r4
 10022f2:	2145      	movs	r1, #69	; 0x45
 10022f4:	480d      	ldr	r0, [pc, #52]	; (100232c <flash_nrf_erase+0x68>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
 10022f6:	f001 fd64 	bl	1003dc2 <z_log_minimal_printk>
			return -EINVAL;
 10022fa:	f06f 0015 	mvn.w	r0, #21
 10022fe:	e002      	b.n	1002306 <flash_nrf_erase+0x42>
		if (!n_pages) {
 1002300:	42ae      	cmp	r6, r5
 1002302:	d901      	bls.n	1002308 <flash_nrf_erase+0x44>
			return 0;
 1002304:	2000      	movs	r0, #0
}
 1002306:	bd70      	pop	{r4, r5, r6, pc}

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
 1002308:	f001 ff6c 	bl	10041e4 <nrfx_nvmc_flash_page_size_get>
 100230c:	4606      	mov	r6, r0
		addr += DT_REG_ADDR(SOC_NV_FLASH_NODE);
 100230e:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
 1002312:	4620      	mov	r0, r4
 1002314:	f000 ff82 	bl	100321c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
 1002318:	1bad      	subs	r5, r5, r6
 100231a:	4434      	add	r4, r6
 100231c:	d1f9      	bne.n	1002312 <flash_nrf_erase+0x4e>
 100231e:	e7f1      	b.n	1002304 <flash_nrf_erase+0x40>
		LOG_ERR("invalid address: 0x%08lx:%zu",
 1002320:	462b      	mov	r3, r5
 1002322:	4622      	mov	r2, r4
 1002324:	2145      	movs	r1, #69	; 0x45
 1002326:	4802      	ldr	r0, [pc, #8]	; (1002330 <flash_nrf_erase+0x6c>)
 1002328:	e7e5      	b.n	10022f6 <flash_nrf_erase+0x32>
 100232a:	bf00      	nop
 100232c:	01004dad 	.word	0x01004dad
 1002330:	01004dd1 	.word	0x01004dd1

01002334 <flash_nrf_write>:
{
 1002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002336:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
 1002338:	4619      	mov	r1, r3
 100233a:	4620      	mov	r0, r4
{
 100233c:	4616      	mov	r6, r2
 100233e:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
 1002340:	f001 fe36 	bl	1003fb0 <is_regular_addr_valid>
 1002344:	b150      	cbz	r0, 100235c <flash_nrf_write+0x28>
		addr += DT_REG_ADDR(SOC_NV_FLASH_NODE);
 1002346:	f104 7780 	add.w	r7, r4, #16777216	; 0x1000000
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
 100234a:	432c      	orrs	r4, r5
 100234c:	f014 0403 	ands.w	r4, r4, #3
 1002350:	d00d      	beq.n	100236e <flash_nrf_write+0x3a>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
 1002352:	462b      	mov	r3, r5
 1002354:	463a      	mov	r2, r7
 1002356:	2145      	movs	r1, #69	; 0x45
 1002358:	480e      	ldr	r0, [pc, #56]	; (1002394 <flash_nrf_write+0x60>)
 100235a:	e003      	b.n	1002364 <flash_nrf_write+0x30>
		LOG_ERR("invalid address: 0x%08lx:%zu",
 100235c:	462b      	mov	r3, r5
 100235e:	4622      	mov	r2, r4
 1002360:	2145      	movs	r1, #69	; 0x45
 1002362:	480d      	ldr	r0, [pc, #52]	; (1002398 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
 1002364:	f001 fd2d 	bl	1003dc2 <z_log_minimal_printk>
		return -EINVAL;
 1002368:	f06f 0015 	mvn.w	r0, #21
}
 100236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!len) {
 100236e:	b14d      	cbz	r5, 1002384 <flash_nrf_write+0x50>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
 1002370:	192b      	adds	r3, r5, r4
 1002372:	2b03      	cmp	r3, #3
 1002374:	eba7 0004 	sub.w	r0, r7, r4
 1002378:	d806      	bhi.n	1002388 <flash_nrf_write+0x54>
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
 100237a:	4a08      	ldr	r2, [pc, #32]	; (100239c <flash_nrf_write+0x68>)
 100237c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
 1002380:	07db      	lsls	r3, r3, #31
 1002382:	d5fb      	bpl.n	100237c <flash_nrf_write+0x48>
	return ret;
 1002384:	2000      	movs	r0, #0
 1002386:	e7f1      	b.n	100236c <flash_nrf_write+0x38>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
 1002388:	1b33      	subs	r3, r6, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
 100238a:	6819      	ldr	r1, [r3, #0]
 100238c:	f000 ff76 	bl	100327c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
 1002390:	3c04      	subs	r4, #4
}
 1002392:	e7ed      	b.n	1002370 <flash_nrf_write+0x3c>
 1002394:	01004df3 	.word	0x01004df3
 1002398:	01004dd1 	.word	0x01004dd1
 100239c:	41080000 	.word	0x41080000

010023a0 <flash_nrf_read>:
{
 10023a0:	b570      	push	{r4, r5, r6, lr}
 10023a2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
 10023a4:	4619      	mov	r1, r3
 10023a6:	4628      	mov	r0, r5
{
 10023a8:	4616      	mov	r6, r2
 10023aa:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
 10023ac:	f001 fe00 	bl	1003fb0 <is_regular_addr_valid>
 10023b0:	b140      	cbz	r0, 10023c4 <flash_nrf_read+0x24>
	if (!len) {
 10023b2:	b12c      	cbz	r4, 10023c0 <flash_nrf_read+0x20>
	memcpy(data, (void *)addr, len);
 10023b4:	4622      	mov	r2, r4
 10023b6:	4630      	mov	r0, r6
 10023b8:	f105 7180 	add.w	r1, r5, #16777216	; 0x1000000
 10023bc:	f001 fd87 	bl	1003ece <memcpy>
		return 0;
 10023c0:	2000      	movs	r0, #0
 10023c2:	e007      	b.n	10023d4 <flash_nrf_read+0x34>
		LOG_ERR("invalid address: 0x%08lx:%zu",
 10023c4:	4804      	ldr	r0, [pc, #16]	; (10023d8 <flash_nrf_read+0x38>)
 10023c6:	4623      	mov	r3, r4
 10023c8:	462a      	mov	r2, r5
 10023ca:	2145      	movs	r1, #69	; 0x45
 10023cc:	f001 fcf9 	bl	1003dc2 <z_log_minimal_printk>
 10023d0:	f06f 0015 	mvn.w	r0, #21
}
 10023d4:	bd70      	pop	{r4, r5, r6, pc}
 10023d6:	bf00      	nop
 10023d8:	01004dd1 	.word	0x01004dd1

010023dc <z_nrf_rtc_timer_read>:
	compare_int_unlock(chan, key);
}

uint64_t z_nrf_rtc_timer_read(void)
{
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
 10023dc:	4b0d      	ldr	r3, [pc, #52]	; (1002414 <z_nrf_rtc_timer_read+0x38>)
 10023de:	6818      	ldr	r0, [r3, #0]
 10023e0:	0a01      	lsrs	r1, r0, #8
 10023e2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
 10023e4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
 10023e8:	4b0b      	ldr	r3, [pc, #44]	; (1002418 <z_nrf_rtc_timer_read+0x3c>)
 10023ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	__DMB();

	uint32_t cntr = counter();

	val += cntr;
 10023ee:	1818      	adds	r0, r3, r0
 10023f0:	f141 0100 	adc.w	r1, r1, #0

	if (cntr < OVERFLOW_RISK_RANGE_END) {
 10023f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 10023f8:	d20a      	bcs.n	1002410 <z_nrf_rtc_timer_read+0x34>
		 * due to possibility that this code preempted overflow interrupt before final write
		 * of `overflow_cnt`. Update of `anchor` occurs far in time from this moment, so
		 * `anchor` is considered valid and stable. Because of this timing there is no risk
		 * of incorrect `anchor` value caused by non-atomic read of 64-bit `anchor`.
		 */
		if (val < anchor) {
 10023fa:	4b08      	ldr	r3, [pc, #32]	; (100241c <z_nrf_rtc_timer_read+0x40>)
 10023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 1002400:	4290      	cmp	r0, r2
 1002402:	eb71 0303 	sbcs.w	r3, r1, r3
 1002406:	d203      	bcs.n	1002410 <z_nrf_rtc_timer_read+0x34>
			/* Unhandled overflow, detected, let's add correction */
			val += COUNTER_SPAN;
 1002408:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 100240c:	f141 0100 	adc.w	r1, r1, #0
		 * check validity using `anchor`
		 */
	}

	return val;
}
 1002410:	4770      	bx	lr
 1002412:	bf00      	nop
 1002414:	2100013c 	.word	0x2100013c
 1002418:	41016000 	.word	0x41016000
 100241c:	21000028 	.word	0x21000028

01002420 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
 1002420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
 1002424:	4b2e      	ldr	r3, [pc, #184]	; (10024e0 <rtc_nrf_isr+0xc0>)
 1002426:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
 100242a:	0790      	lsls	r0, r2, #30
 100242c:	d50b      	bpl.n	1002446 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100242e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1002432:	b142      	cbz	r2, 1002446 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002434:	2200      	movs	r2, #0
 1002436:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
 100243a:	4a2a      	ldr	r2, [pc, #168]	; (10024e4 <rtc_nrf_isr+0xc4>)
 100243c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1002440:	6813      	ldr	r3, [r2, #0]
 1002442:	3301      	adds	r3, #1
 1002444:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
 1002446:	4a26      	ldr	r2, [pc, #152]	; (10024e0 <rtc_nrf_isr+0xc0>)
 1002448:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
 100244c:	03d9      	lsls	r1, r3, #15
 100244e:	d527      	bpl.n	10024a0 <rtc_nrf_isr+0x80>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002450:	4b25      	ldr	r3, [pc, #148]	; (10024e8 <rtc_nrf_isr+0xc8>)
 1002452:	e8d3 1fef 	ldaex	r1, [r3]
 1002456:	f021 0001 	bic.w	r0, r1, #1
 100245a:	e8c3 0fe4 	stlex	r4, r0, [r3]
 100245e:	2c00      	cmp	r4, #0
 1002460:	d1f7      	bne.n	1002452 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
 1002462:	07cb      	lsls	r3, r1, #31
 1002464:	d402      	bmi.n	100246c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002466:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
 100246a:	b1cb      	cbz	r3, 10024a0 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 100246c:	2500      	movs	r5, #0
 100246e:	4c1c      	ldr	r4, [pc, #112]	; (10024e0 <rtc_nrf_isr+0xc0>)
 1002470:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 1002474:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
 1002478:	f7ff ffb0 	bl	10023dc <z_nrf_rtc_timer_read>
 100247c:	f04f 0320 	mov.w	r3, #32
 1002480:	f3ef 8211 	mrs	r2, BASEPRI
 1002484:	f383 8812 	msr	BASEPRI_MAX, r3
 1002488:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
 100248c:	4b17      	ldr	r3, [pc, #92]	; (10024ec <rtc_nrf_isr+0xcc>)
 100248e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
 1002492:	42b0      	cmp	r0, r6
 1002494:	41b9      	sbcs	r1, r7
 1002496:	d206      	bcs.n	10024a6 <rtc_nrf_isr+0x86>
	__asm__ volatile(
 1002498:	f382 8811 	msr	BASEPRI, r2
 100249c:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
 10024a0:	b003      	add	sp, #12
 10024a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 10024a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
 10024aa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 10024ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
 10024b2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 10024b4:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
 10024b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 10024bc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 10024c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 10024c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 10024c8:	f382 8811 	msr	BASEPRI, r2
 10024cc:	f3bf 8f6f 	isb	sy
		if (handler) {
 10024d0:	2900      	cmp	r1, #0
 10024d2:	d0e5      	beq.n	10024a0 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
 10024d4:	9000      	str	r0, [sp, #0]
 10024d6:	4632      	mov	r2, r6
 10024d8:	463b      	mov	r3, r7
 10024da:	4628      	mov	r0, r5
 10024dc:	4788      	blx	r1
 10024de:	e7df      	b.n	10024a0 <rtc_nrf_isr+0x80>
 10024e0:	41016000 	.word	0x41016000
 10024e4:	2100013c 	.word	0x2100013c
 10024e8:	21000134 	.word	0x21000134
 10024ec:	21000010 	.word	0x21000010

010024f0 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
 10024f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 10024f4:	f04f 0801 	mov.w	r8, #1
 10024f8:	fa08 f800 	lsl.w	r8, r8, r0
static int compare_set(int32_t chan, uint64_t target_time,
 10024fc:	4614      	mov	r4, r2
 10024fe:	4606      	mov	r6, r0
 1002500:	461d      	mov	r5, r3
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1002502:	ea6f 0208 	mvn.w	r2, r8
 1002506:	f8df a130 	ldr.w	sl, [pc, #304]	; 1002638 <compare_set.constprop.0.isra.0+0x148>
 100250a:	e8da 3fef 	ldaex	r3, [sl]
 100250e:	ea03 0102 	and.w	r1, r3, r2
 1002512:	e8ca 1fe0 	stlex	r0, r1, [sl]
 1002516:	2800      	cmp	r0, #0
 1002518:	d1f7      	bne.n	100250a <compare_set.constprop.0.isra.0+0x1a>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 100251a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    p_reg->INTENCLR = mask;
 100251e:	f8df 911c 	ldr.w	r9, [pc, #284]	; 100263c <compare_set.constprop.0.isra.0+0x14c>
 1002522:	40b7      	lsls	r7, r6
 1002524:	f8c9 7308 	str.w	r7, [r9, #776]	; 0x308
 1002528:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 100252c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
 1002530:	ea08 0303 	and.w	r3, r8, r3
 1002534:	9300      	str	r3, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
 1002536:	f7ff ff51 	bl	10023dc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
 100253a:	42a0      	cmp	r0, r4
 100253c:	eb71 0305 	sbcs.w	r3, r1, r5
 1002540:	d24b      	bcs.n	10025da <compare_set.constprop.0.isra.0+0xea>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
 1002542:	4b3f      	ldr	r3, [pc, #252]	; (1002640 <compare_set.constprop.0.isra.0+0x150>)
 1002544:	1a20      	subs	r0, r4, r0
 1002546:	eb65 0101 	sbc.w	r1, r5, r1
 100254a:	4298      	cmp	r0, r3
 100254c:	f171 0100 	sbcs.w	r1, r1, #0
 1002550:	d256      	bcs.n	1002600 <compare_set.constprop.0.isra.0+0x110>
		if (target_time != cc_data[chan].target_time) {
 1002552:	4b3c      	ldr	r3, [pc, #240]	; (1002644 <compare_set.constprop.0.isra.0+0x154>)
 1002554:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 1002558:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 100255c:	429d      	cmp	r5, r3
 100255e:	bf08      	it	eq
 1002560:	4294      	cmpeq	r4, r2
 1002562:	d043      	beq.n	10025ec <compare_set.constprop.0.isra.0+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002564:	f04f 0b00 	mov.w	fp, #0
	return absolute_time & COUNTER_MAX;
 1002568:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
 100256c:	46f4      	mov	ip, lr
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
 100256e:	2003      	movs	r0, #3
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 1002570:	f106 0350 	add.w	r3, r6, #80	; 0x50
 1002574:	009b      	lsls	r3, r3, #2
 1002576:	b29b      	uxth	r3, r3
 1002578:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100257c:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
    p_reg->EVTENCLR = mask;
 1002580:	f8c9 7348 	str.w	r7, [r9, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002584:	f8c3 b000 	str.w	fp, [r3]
 1002588:	681a      	ldr	r2, [r3, #0]
    p_reg->CC[ch] = cc_val;
 100258a:	f506 72a8 	add.w	r2, r6, #336	; 0x150
 100258e:	9201      	str	r2, [sp, #4]
 1002590:	9901      	ldr	r1, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1002592:	f02c 427f 	bic.w	r2, ip, #4278190080	; 0xff000000
 1002596:	f849 2021 	str.w	r2, [r9, r1, lsl #2]
	return (a - b) & COUNTER_MAX;
 100259a:	f06f 0202 	mvn.w	r2, #2
    p_reg->EVTENSET = mask;
 100259e:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
     return p_reg->COUNTER;
 10025a2:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
 10025a6:	1a52      	subs	r2, r2, r1
 10025a8:	4462      	add	r2, ip
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
 10025aa:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1002648 <compare_set.constprop.0.isra.0+0x158>
	return (a - b) & COUNTER_MAX;
 10025ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
 10025b2:	4562      	cmp	r2, ip
 10025b4:	d91a      	bls.n	10025ec <compare_set.constprop.0.isra.0+0xfc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10025b6:	681a      	ldr	r2, [r3, #0]
			if (event_check(chan)) {
 10025b8:	b15a      	cbz	r2, 10025d2 <compare_set.constprop.0.isra.0+0xe2>
     return p_reg->COUNTER;
 10025ba:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 10025be:	eba1 020e 	sub.w	r2, r1, lr
 10025c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
 10025c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 10025ca:	d90f      	bls.n	10025ec <compare_set.constprop.0.isra.0+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 10025cc:	f8c3 b000 	str.w	fp, [r3]
 10025d0:	681a      	ldr	r2, [r3, #0]
			cc_val = now + cc_inc;
 10025d2:	eb00 0c01 	add.w	ip, r0, r1
			cc_inc++;
 10025d6:	3001      	adds	r0, #1
	for (;;) {
 10025d8:	e7da      	b.n	1002590 <compare_set.constprop.0.isra.0+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 10025da:	4b1c      	ldr	r3, [pc, #112]	; (100264c <compare_set.constprop.0.isra.0+0x15c>)
 10025dc:	e8d3 1fef 	ldaex	r1, [r3]
 10025e0:	ea41 0108 	orr.w	r1, r1, r8
 10025e4:	e8c3 1fe2 	stlex	r2, r1, [r3]
 10025e8:	2a00      	cmp	r2, #0
 10025ea:	d1f7      	bne.n	10025dc <compare_set.constprop.0.isra.0+0xec>
	cc_data[chan].target_time = target_time;
 10025ec:	4915      	ldr	r1, [pc, #84]	; (1002644 <compare_set.constprop.0.isra.0+0x154>)
	cc_data[chan].callback = handler;
 10025ee:	4818      	ldr	r0, [pc, #96]	; (1002650 <compare_set.constprop.0.isra.0+0x160>)
	cc_data[chan].target_time = target_time;
 10025f0:	0133      	lsls	r3, r6, #4
	cc_data[chan].callback = handler;
 10025f2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
 10025f4:	2300      	movs	r3, #0
	cc_data[chan].target_time = target_time;
 10025f6:	eb01 1206 	add.w	r2, r1, r6, lsl #4
 10025fa:	e9c2 4502 	strd	r4, r5, [r2, #8]
	cc_data[chan].user_context = user_data;
 10025fe:	6053      	str	r3, [r2, #4]
	if (key) {
 1002600:	9b00      	ldr	r3, [sp, #0]
 1002602:	b1ab      	cbz	r3, 1002630 <compare_set.constprop.0.isra.0+0x140>
 1002604:	e8da 3fef 	ldaex	r3, [sl]
 1002608:	ea43 0308 	orr.w	r3, r3, r8
 100260c:	e8ca 3fe2 	stlex	r2, r3, [sl]
 1002610:	2a00      	cmp	r2, #0
 1002612:	d1f7      	bne.n	1002604 <compare_set.constprop.0.isra.0+0x114>
    p_reg->INTENSET = mask;
 1002614:	4b09      	ldr	r3, [pc, #36]	; (100263c <compare_set.constprop.0.isra.0+0x14c>)
 1002616:	f8c3 7304 	str.w	r7, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 100261a:	4b0c      	ldr	r3, [pc, #48]	; (100264c <compare_set.constprop.0.isra.0+0x15c>)
 100261c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
 1002620:	40f3      	lsrs	r3, r6
 1002622:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002624:	bf42      	ittt	mi
 1002626:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 100262a:	4b0a      	ldrmi	r3, [pc, #40]	; (1002654 <compare_set.constprop.0.isra.0+0x164>)
 100262c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
 1002630:	b003      	add	sp, #12
 1002632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1002636:	bf00      	nop
 1002638:	21000138 	.word	0x21000138
 100263c:	41016000 	.word	0x41016000
 1002640:	00800001 	.word	0x00800001
 1002644:	21000010 	.word	0x21000010
 1002648:	007ffffd 	.word	0x007ffffd
 100264c:	21000134 	.word	0x21000134
 1002650:	010026d9 	.word	0x010026d9
 1002654:	e000e100 	.word	0xe000e100

01002658 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
 1002658:	b570      	push	{r4, r5, r6, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
 100265a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    p_reg->PRESCALER = val;
 100265e:	2500      	movs	r5, #0
 1002660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
 1002664:	4c17      	ldr	r4, [pc, #92]	; (10026c4 <sys_clock_driver_init+0x6c>)
 1002666:	4b18      	ldr	r3, [pc, #96]	; (10026c8 <sys_clock_driver_init+0x70>)
    p_reg->INTENSET = mask;
 1002668:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
 100266a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
 100266e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
 1002672:	4b16      	ldr	r3, [pc, #88]	; (10026cc <sys_clock_driver_init+0x74>)
    p_reg->PRESCALER = val;
 1002674:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 1002678:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
 100267c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002680:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 1002684:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 1002688:	4b11      	ldr	r3, [pc, #68]	; (10026d0 <sys_clock_driver_init+0x78>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 100268a:	2101      	movs	r1, #1
 100268c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
 1002690:	2016      	movs	r0, #22
 1002692:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1002696:	462a      	mov	r2, r5
 1002698:	f7ff f8f4 	bl	1001884 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 100269c:	2016      	movs	r0, #22
 100269e:	f7ff f8d5 	bl	100184c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 10026a2:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 10026a4:	4a0b      	ldr	r2, [pc, #44]	; (10026d4 <sys_clock_driver_init+0x7c>)
 10026a6:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 10026a8:	4628      	mov	r0, r5
 10026aa:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
 10026ac:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 10026ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 10026b2:	2300      	movs	r3, #0
 10026b4:	f7ff ff1c 	bl	10024f0 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
 10026b8:	4630      	mov	r0, r6
 10026ba:	f7ff fd59 	bl	1002170 <z_nrf_clock_control_lf_on>

	return 0;
}
 10026be:	4628      	mov	r0, r5
 10026c0:	bd70      	pop	{r4, r5, r6, pc}
 10026c2:	bf00      	nop
 10026c4:	41016000 	.word	0x41016000
 10026c8:	000f0003 	.word	0x000f0003
 10026cc:	21000010 	.word	0x21000010
 10026d0:	e000e100 	.word	0xe000e100
 10026d4:	21000138 	.word	0x21000138

010026d8 <sys_clock_timeout_handler>:
{
 10026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
 10026da:	4914      	ldr	r1, [pc, #80]	; (100272c <sys_clock_timeout_handler+0x54>)
	return absolute_time & COUNTER_MAX;
 10026dc:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
 10026e0:	e9d1 6300 	ldrd	r6, r3, [r1]
 10026e4:	1b92      	subs	r2, r2, r6
 10026e6:	0a14      	lsrs	r4, r2, #8
	last_count += dticks * CYC_PER_TICK;
 10026e8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 10026ec:	1992      	adds	r2, r2, r6
 10026ee:	f143 0300 	adc.w	r3, r3, #0
 10026f2:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
 10026f6:	f5a5 1100 	sub.w	r1, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
 10026fa:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 10026fe:	d20a      	bcs.n	1002716 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
 1002700:	490b      	ldr	r1, [pc, #44]	; (1002730 <sys_clock_timeout_handler+0x58>)
 1002702:	6809      	ldr	r1, [r1, #0]
 1002704:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 1002708:	0609      	lsls	r1, r1, #24
 100270a:	194e      	adds	r6, r1, r5
 100270c:	4909      	ldr	r1, [pc, #36]	; (1002734 <sys_clock_timeout_handler+0x5c>)
 100270e:	f14c 0700 	adc.w	r7, ip, #0
 1002712:	e9c1 6700 	strd	r6, r7, [r1]
		compare_set(chan, last_count + CYC_PER_TICK,
 1002716:	f512 7280 	adds.w	r2, r2, #256	; 0x100
 100271a:	f143 0300 	adc.w	r3, r3, #0
 100271e:	f7ff fee7 	bl	10024f0 <compare_set.constprop.0.isra.0>
	sys_clock_announce(dticks);
 1002722:	4620      	mov	r0, r4
}
 1002724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sys_clock_announce(dticks);
 1002728:	f000 bf1c 	b.w	1003564 <sys_clock_announce>
 100272c:	21000020 	.word	0x21000020
 1002730:	2100013c 	.word	0x2100013c
 1002734:	21000028 	.word	0x21000028

01002738 <find_free_region>:
#include <zephyr/sys/__assert.h>
#include <zephyr/kernel.h>

/* Find the first unused ACL region. */
static int find_free_region(uint32_t *region_idx)
{
 1002738:	b530      	push	{r4, r5, lr}
 100273a:	4602      	mov	r2, r0
	static uint32_t idx;

	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
 100273c:	2400      	movs	r4, #0
 100273e:	490b      	ldr	r1, [pc, #44]	; (100276c <find_free_region+0x34>)
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
 1002740:	4d0b      	ldr	r5, [pc, #44]	; (1002770 <find_free_region+0x38>)
 1002742:	680b      	ldr	r3, [r1, #0]
 1002744:	eb05 1003 	add.w	r0, r5, r3, lsl #4
 1002748:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 100274c:	b2c0      	uxtb	r0, r0
 100274e:	b918      	cbnz	r0, 1002758 <find_free_region+0x20>
 1002750:	b104      	cbz	r4, 1002754 <find_free_region+0x1c>
 1002752:	600b      	str	r3, [r1, #0]
			*region_idx = idx;
			return -ENOSPC;
		}
	}
	*region_idx = idx;
	return 0;
 1002754:	2000      	movs	r0, #0
 1002756:	e007      	b.n	1002768 <find_free_region+0x30>
		idx++;
 1002758:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
 100275a:	2b07      	cmp	r3, #7
 100275c:	f04f 0401 	mov.w	r4, #1
 1002760:	d9f0      	bls.n	1002744 <find_free_region+0xc>
			return -ENOSPC;
 1002762:	f06f 001b 	mvn.w	r0, #27
 1002766:	600b      	str	r3, [r1, #0]
			*region_idx = idx;
 1002768:	6013      	str	r3, [r2, #0]
}
 100276a:	bd30      	pop	{r4, r5, pc}
 100276c:	21000140 	.word	0x21000140
 1002770:	41080000 	.word	0x41080000

01002774 <fprotect_set_permission>:

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
 1002774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
 1002776:	4d43      	ldr	r5, [pc, #268]	; (1002884 <fprotect_set_permission+0x110>)
 1002778:	4606      	mov	r6, r0
 100277a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
 100277e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nrf_ficr_codepagesize_get(NRF_FICR) ==
 1002780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
{
 1002784:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(nrf_ficr_codepagesize_get(NRF_FICR) ==
 1002786:	d008      	beq.n	100279a <fprotect_set_permission+0x26>
 1002788:	493f      	ldr	r1, [pc, #252]	; (1002888 <fprotect_set_permission+0x114>)
 100278a:	4840      	ldr	r0, [pc, #256]	; (100288c <fprotect_set_permission+0x118>)
 100278c:	2221      	movs	r2, #33	; 0x21
 100278e:	f001 fb0a 	bl	1003da6 <assert_print>
 1002792:	2121      	movs	r1, #33	; 0x21
 1002794:	483c      	ldr	r0, [pc, #240]	; (1002888 <fprotect_set_permission+0x114>)
    NRFX_ASSERT(region_id < ACL_REGIONS_COUNT);
 1002796:	f001 faff 	bl	1003d98 <assert_post_action>
			CONFIG_FPROTECT_BLOCK_SIZE);

	uint32_t region_idx;
	int result = find_free_region(&region_idx);
 100279a:	a801      	add	r0, sp, #4
 100279c:	f7ff ffcc 	bl	1002738 <find_free_region>

	if (result != 0) {
 10027a0:	2800      	cmp	r0, #0
 10027a2:	d167      	bne.n	1002874 <fprotect_set_permission+0x100>
 10027a4:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
 10027a8:	fbb6 f3f2 	udiv	r3, r6, r2
 10027ac:	fb02 6313 	mls	r3, r2, r3, r6
 10027b0:	2b00      	cmp	r3, #0
 10027b2:	d161      	bne.n	1002878 <fprotect_set_permission+0x104>
 10027b4:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
 10027b8:	fbb4 f3f2 	udiv	r3, r4, r2
 10027bc:	fb02 4313 	mls	r3, r2, r3, r4
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
 10027c0:	2b00      	cmp	r3, #0
 10027c2:	d159      	bne.n	1002878 <fprotect_set_permission+0x104>
 10027c4:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
}

NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
 10027c8:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
 10027cc:	4353      	muls	r3, r2
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
 10027ce:	42a3      	cmp	r3, r4
 10027d0:	d352      	bcc.n	1002878 <fprotect_set_permission+0x104>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
 10027d2:	2c00      	cmp	r4, #0
 10027d4:	d050      	beq.n	1002878 <fprotect_set_permission+0x104>
		return -EINVAL;
	}

	nrf_acl_region_set(NRF_ACL, region_idx, start, length, permission);
 10027d6:	9b01      	ldr	r3, [sp, #4]
 10027d8:	2b07      	cmp	r3, #7
 10027da:	d907      	bls.n	10027ec <fprotect_set_permission+0x78>
 10027dc:	492c      	ldr	r1, [pc, #176]	; (1002890 <fprotect_set_permission+0x11c>)
 10027de:	2277      	movs	r2, #119	; 0x77
 10027e0:	482a      	ldr	r0, [pc, #168]	; (100288c <fprotect_set_permission+0x118>)
 10027e2:	f001 fae0 	bl	1003da6 <assert_print>
 10027e6:	2177      	movs	r1, #119	; 0x77
 10027e8:	4829      	ldr	r0, [pc, #164]	; (1002890 <fprotect_set_permission+0x11c>)
 10027ea:	e7d4      	b.n	1002796 <fprotect_set_permission+0x22>
    return p_reg->INFO.CODEPAGESIZE;
 10027ec:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
    NRFX_ASSERT(address % nrf_ficr_codepagesize_get(NRF_FICR) == 0);
 10027f0:	fbb6 f2f1 	udiv	r2, r6, r1
 10027f4:	fb01 6212 	mls	r2, r1, r2, r6
 10027f8:	b132      	cbz	r2, 1002808 <fprotect_set_permission+0x94>
 10027fa:	4925      	ldr	r1, [pc, #148]	; (1002890 <fprotect_set_permission+0x11c>)
 10027fc:	2278      	movs	r2, #120	; 0x78
 10027fe:	4823      	ldr	r0, [pc, #140]	; (100288c <fprotect_set_permission+0x118>)
 1002800:	f001 fad1 	bl	1003da6 <assert_print>
 1002804:	2178      	movs	r1, #120	; 0x78
 1002806:	e7ef      	b.n	10027e8 <fprotect_set_permission+0x74>
 1002808:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
    return p_reg->INFO.CODESIZE;
 100280c:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
    NRFX_ASSERT(size <= NRF_ACL_REGION_SIZE_MAX);
 1002810:	434a      	muls	r2, r1
 1002812:	4294      	cmp	r4, r2
 1002814:	d906      	bls.n	1002824 <fprotect_set_permission+0xb0>
 1002816:	491e      	ldr	r1, [pc, #120]	; (1002890 <fprotect_set_permission+0x11c>)
 1002818:	2279      	movs	r2, #121	; 0x79
 100281a:	481c      	ldr	r0, [pc, #112]	; (100288c <fprotect_set_permission+0x118>)
 100281c:	f001 fac3 	bl	1003da6 <assert_print>
 1002820:	2179      	movs	r1, #121	; 0x79
 1002822:	e7e1      	b.n	10027e8 <fprotect_set_permission+0x74>
    return p_reg->INFO.CODEPAGESIZE;
 1002824:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
    NRFX_ASSERT(size % nrf_ficr_codepagesize_get(NRF_FICR) == 0);
 1002828:	fbb4 f2f1 	udiv	r2, r4, r1
 100282c:	fb01 4212 	mls	r2, r1, r2, r4
 1002830:	b132      	cbz	r2, 1002840 <fprotect_set_permission+0xcc>
 1002832:	4917      	ldr	r1, [pc, #92]	; (1002890 <fprotect_set_permission+0x11c>)
 1002834:	227b      	movs	r2, #123	; 0x7b
 1002836:	4815      	ldr	r0, [pc, #84]	; (100288c <fprotect_set_permission+0x118>)
 1002838:	f001 fab5 	bl	1003da6 <assert_print>
 100283c:	217b      	movs	r1, #123	; 0x7b
 100283e:	e7d3      	b.n	10027e8 <fprotect_set_permission+0x74>
    p_reg->ACL[region_id].ADDR = address;
 1002840:	011b      	lsls	r3, r3, #4
 1002842:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
 1002846:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 100284a:	f8c1 6800 	str.w	r6, [r1, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
 100284e:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
 1002852:	f8c1 7808 	str.w	r7, [r1, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
 1002856:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800

	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
 100285a:	4296      	cmp	r6, r2
 100285c:	d10f      	bne.n	100287e <fprotect_set_permission+0x10a>
    return (size_t)p_reg->ACL[region_id].SIZE;
 100285e:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
 1002862:	4294      	cmp	r4, r2
 1002864:	d10b      	bne.n	100287e <fprotect_set_permission+0x10a>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
 1002866:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
 100286a:	b2db      	uxtb	r3, r3
		return -EFAULT;
 100286c:	429f      	cmp	r7, r3
 100286e:	bf18      	it	ne
 1002870:	f06f 000d 	mvnne.w	r0, #13
	}

	return 0;
}
 1002874:	b003      	add	sp, #12
 1002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
 1002878:	f06f 0015 	mvn.w	r0, #21
 100287c:	e7fa      	b.n	1002874 <fprotect_set_permission+0x100>
		return -EFAULT;
 100287e:	f06f 000d 	mvn.w	r0, #13
 1002882:	e7f7      	b.n	1002874 <fprotect_set_permission+0x100>
 1002884:	01ff0000 	.word	0x01ff0000
 1002888:	01004e3a 	.word	0x01004e3a
 100288c:	010046c0 	.word	0x010046c0
 1002890:	01004e66 	.word	0x01004e66

01002894 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
 1002894:	4803      	ldr	r0, [pc, #12]	; (10028a4 <k_sys_fatal_error_handler+0x10>)
 1002896:	2145      	movs	r1, #69	; 0x45
{
 1002898:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
 100289a:	f001 fa92 	bl	1003dc2 <z_log_minimal_printk>
		sys_arch_reboot(0);
 100289e:	2000      	movs	r0, #0
 10028a0:	f7ff fad2 	bl	1001e48 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
 10028a4:	01004e98 	.word	0x01004e98

010028a8 <bl_boot>:
#else
#define VTOR SCB->VTOR
#endif

void bl_boot(const struct fw_info *fw_info)
{
 10028a8:	b538      	push	{r3, r4, r5, lr}
 10028aa:	4604      	mov	r4, r0
#if CONFIG_ARCH_HAS_USERSPACE
	__ASSERT(!(CONTROL_nPRIV_Msk & __get_CONTROL()),
			"Not in Privileged mode");
#endif

	printk("Booting (0x%x).\r\n", fw_info->address);
 10028ac:	6981      	ldr	r1, [r0, #24]
 10028ae:	4829      	ldr	r0, [pc, #164]	; (1002954 <bl_boot+0xac>)
 10028b0:	f001 f994 	bl	1003bdc <printk>
    p_reg->INTENCLR = mask;
 10028b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 10028b8:	4b27      	ldr	r3, [pc, #156]	; (1002958 <bl_boot+0xb0>)
 10028ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 10028be:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
 10028c2:	b672      	cpsid	i
 10028c4:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();
	NVIC_Type *nvic = NVIC;
	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICER); i++) {
		nvic->ICER[i] = 0xFFFFFFFF;
 10028c6:	4925      	ldr	r1, [pc, #148]	; (100295c <bl_boot+0xb4>)
 10028c8:	f103 0020 	add.w	r0, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICER); i++) {
 10028cc:	3301      	adds	r3, #1
 10028ce:	2b10      	cmp	r3, #16
		nvic->ICER[i] = 0xFFFFFFFF;
 10028d0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICER); i++) {
 10028d4:	d1f8      	bne.n	10028c8 <bl_boot+0x20>
 10028d6:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICPR); i++) {
		nvic->ICPR[i] = 0xFFFFFFFF;
 10028d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 10028dc:	4a1f      	ldr	r2, [pc, #124]	; (100295c <bl_boot+0xb4>)
 10028de:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICPR); i++) {
 10028e2:	3301      	adds	r3, #1
 10028e4:	2b10      	cmp	r3, #16
		nvic->ICPR[i] = 0xFFFFFFFF;
 10028e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(nvic->ICPR); i++) {
 10028ea:	d1f8      	bne.n	10028de <bl_boot+0x36>
	}


	SysTick->CTRL = 0;
 10028ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 10028f0:	2200      	movs	r2, #0
 10028f2:	611a      	str	r2, [r3, #16]

	/* Disable fault handlers used by the bootloader */
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 10028f4:	f8d3 2d04 	ldr.w	r2, [r3, #3332]	; 0xd04
 10028f8:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 10028fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 1002900:	605a      	str	r2, [r3, #4]

#ifndef CONFIG_CPU_CORTEX_M0
	SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
 1002902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 1002904:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 1002908:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 100290a:	f3ef 8214 	mrs	r2, CONTROL
			SCB_SHCSR_MEMFAULTENA_Msk);
#endif

	/* Activate the MSP if the core is currently running with the PSP */
	if (CONTROL_SPSEL_Msk & __get_CONTROL()) {
 100290e:	0792      	lsls	r2, r2, #30
 1002910:	d507      	bpl.n	1002922 <bl_boot+0x7a>
 1002912:	f3ef 8214 	mrs	r2, CONTROL
		__set_CONTROL(__get_CONTROL() & ~CONTROL_SPSEL_Msk);
 1002916:	f022 0202 	bic.w	r2, r2, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 100291a:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 100291e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 1002922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002926:	f3bf 8f6f 	isb	sy
	}

	__DSB(); /* Force Memory Write before continuing */
	__ISB(); /* Flush and refill pipeline with updated permissions */

	VTOR = fw_info->address;
 100292a:	69a2      	ldr	r2, [r4, #24]
	uint32_t *vector_table = (uint32_t *)fw_info->address;

	if (!fw_info_ext_api_provide(fw_info, true)) {
 100292c:	2101      	movs	r1, #1
	VTOR = fw_info->address;
 100292e:	609a      	str	r2, [r3, #8]
	if (!fw_info_ext_api_provide(fw_info, true)) {
 1002930:	4620      	mov	r0, r4
	uint32_t *vector_table = (uint32_t *)fw_info->address;
 1002932:	69a5      	ldr	r5, [r4, #24]
	if (!fw_info_ext_api_provide(fw_info, true)) {
 1002934:	f000 fa2a 	bl	1002d8c <fw_info_ext_api_provide>
 1002938:	b158      	cbz	r0, 1002952 <bl_boot+0xaa>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 100293a:	2300      	movs	r3, #0
 100293c:	f383 880b 	msr	PSPLIM, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1002940:	f383 880a 	msr	MSPLIM, r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1002944:	682a      	ldr	r2, [r5, #0]
 1002946:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 100294a:	f383 8809 	msr	PSP, r3
	/* Set MSP to the new address and clear any information from PSP */
	__set_MSP(vector_table[0]);
	__set_PSP(0);

	/* Call reset handler. */
	((void (*)(void))vector_table[1])();
 100294e:	686b      	ldr	r3, [r5, #4]
 1002950:	4798      	blx	r3
	CODE_UNREACHABLE;
}
 1002952:	bd38      	pop	{r3, r4, r5, pc}
 1002954:	01004eba 	.word	0x01004eba
 1002958:	41005000 	.word	0x41005000
 100295c:	e000e100 	.word	0xe000e100

01002960 <fw_info_check>:
{
 1002960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 1002962:	4604      	mov	r4, r0
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
 1002964:	4a07      	ldr	r2, [pc, #28]	; (1002984 <fw_info_check+0x24>)
 1002966:	ab01      	add	r3, sp, #4
 1002968:	ca07      	ldmia	r2, {r0, r1, r2}
 100296a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
 100296e:	220c      	movs	r2, #12
 1002970:	4619      	mov	r1, r3
 1002972:	4620      	mov	r0, r4
 1002974:	f001 fa9b 	bl	1003eae <memcmp>
	return NULL;
 1002978:	2800      	cmp	r0, #0
}
 100297a:	bf0c      	ite	eq
 100297c:	4620      	moveq	r0, r4
 100297e:	2000      	movne	r0, #0
 1002980:	b004      	add	sp, #16
 1002982:	bd10      	pop	{r4, pc}
 1002984:	010043dc 	.word	0x010043dc

01002988 <fw_info_find>:
{
 1002988:	b570      	push	{r4, r5, r6, lr}
 100298a:	4605      	mov	r5, r0
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 100298c:	2400      	movs	r4, #0
 100298e:	4e05      	ldr	r6, [pc, #20]	; (10029a4 <fw_info_find+0x1c>)
						fw_info_allowed_offsets[i]);
 1002990:	f856 0b04 	ldr.w	r0, [r6], #4
		finfo = fw_info_check(firmware_address +
 1002994:	4428      	add	r0, r5
 1002996:	f7ff ffe3 	bl	1002960 <fw_info_check>
		if (finfo) {
 100299a:	b910      	cbnz	r0, 10029a2 <fw_info_find+0x1a>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 100299c:	3401      	adds	r4, #1
 100299e:	2c05      	cmp	r4, #5
 10029a0:	d1f6      	bne.n	1002990 <fw_info_find+0x8>
}
 10029a2:	bd70      	pop	{r4, r5, r6, pc}
 10029a4:	01004488 	.word	0x01004488

010029a8 <validate_firmware>:
#endif


static bool validate_firmware(uint32_t fw_dst_address, uint32_t fw_src_address,
			      const struct fw_info *fwinfo, bool external)
{
 10029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10029ac:	4681      	mov	r9, r0
 10029ae:	b087      	sub	sp, #28
	if (!fwinfo) {
		PRINT("NULL parameter.\n\r");
		return false;
	}

	if (!fw_info_check((uint32_t)fwinfo)) {
 10029b0:	4610      	mov	r0, r2
{
 10029b2:	460e      	mov	r6, r1
 10029b4:	4614      	mov	r4, r2
 10029b6:	461d      	mov	r5, r3
	const uint32_t fwinfo_end = (fwinfo_address + fwinfo->total_size);
 10029b8:	68d7      	ldr	r7, [r2, #12]
	const uint32_t fw_dst_end = (fw_dst_address + fwinfo->size);
 10029ba:	f8d2 8010 	ldr.w	r8, [r2, #16]
	if (!fw_info_check((uint32_t)fwinfo)) {
 10029be:	f7ff ffcf 	bl	1002960 <fw_info_check>
 10029c2:	b938      	cbnz	r0, 10029d4 <validate_firmware+0x2c>
		PRINT("Invalid firmware info format.\n\r");
 10029c4:	b915      	cbnz	r5, 10029cc <validate_firmware+0x24>
 10029c6:	486d      	ldr	r0, [pc, #436]	; (1002b7c <validate_firmware+0x1d4>)
		return false;
	}

	if (fw_dst_address != fwinfo->address) {
		PRINT("The firmware doesn't belong at destination addr.\n\r");
 10029c8:	f001 f908 	bl	1003bdc <printk>
		return false;
 10029cc:	2000      	movs	r0, #0
	return validate_hash(fw_src_address, fwinfo->size, fw_val_info,
				external);
#else
	#error "Validation not specified."
#endif
}
 10029ce:	b007      	add	sp, #28
 10029d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fw_dst_address != fwinfo->address) {
 10029d4:	69a0      	ldr	r0, [r4, #24]
 10029d6:	4548      	cmp	r0, r9
 10029d8:	d003      	beq.n	10029e2 <validate_firmware+0x3a>
		PRINT("The firmware doesn't belong at destination addr.\n\r");
 10029da:	2d00      	cmp	r5, #0
 10029dc:	d1f6      	bne.n	10029cc <validate_firmware+0x24>
 10029de:	4868      	ldr	r0, [pc, #416]	; (1002b80 <validate_firmware+0x1d8>)
 10029e0:	e7f2      	b.n	10029c8 <validate_firmware+0x20>
	if (!external && (fw_src_address != fw_dst_address)) {
 10029e2:	b91d      	cbnz	r5, 10029ec <validate_firmware+0x44>
 10029e4:	42b0      	cmp	r0, r6
 10029e6:	d03d      	beq.n	1002a64 <validate_firmware+0xbc>
		PRINT("src and dst must be equal for local calls.\n\r");
 10029e8:	4866      	ldr	r0, [pc, #408]	; (1002b84 <validate_firmware+0x1dc>)
 10029ea:	e7ed      	b.n	10029c8 <validate_firmware+0x20>
	if (fw_info_find(fw_src_address) != fwinfo) {
 10029ec:	4630      	mov	r0, r6
 10029ee:	f7ff ffcb 	bl	1002988 <fw_info_find>
 10029f2:	4284      	cmp	r4, r0
 10029f4:	d1ea      	bne.n	10029cc <validate_firmware+0x24>
	if (fwinfo->valid != CONFIG_FW_INFO_VALID_VAL) {
 10029f6:	6a22      	ldr	r2, [r4, #32]
 10029f8:	4b63      	ldr	r3, [pc, #396]	; (1002b88 <validate_firmware+0x1e0>)
 10029fa:	429a      	cmp	r2, r3
 10029fc:	d1e6      	bne.n	10029cc <validate_firmware+0x24>
 10029fe:	19e3      	adds	r3, r4, r7
 1002a00:	bf2c      	ite	cs
 1002a02:	2701      	movcs	r7, #1
 1002a04:	2700      	movcc	r7, #0
	int err = get_monotonic_version(&stored_version);
 1002a06:	f10d 000a 	add.w	r0, sp, #10
 1002a0a:	eb18 0a06 	adds.w	sl, r8, r6
 1002a0e:	bf2c      	ite	cs
 1002a10:	f04f 0b01 	movcs.w	fp, #1
 1002a14:	f04f 0b00 	movcc.w	fp, #0
 1002a18:	9301      	str	r3, [sp, #4]
 1002a1a:	f001 fb6c 	bl	10040f6 <get_monotonic_version>
	if (err) {
 1002a1e:	4601      	mov	r1, r0
 1002a20:	2800      	cmp	r0, #0
 1002a22:	d040      	beq.n	1002aa6 <validate_firmware+0xfe>
		PRINT("Cannot read the firmware version. %d\n\r", err);
 1002a24:	bb65      	cbnz	r5, 1002a80 <validate_firmware+0xd8>
 1002a26:	4859      	ldr	r0, [pc, #356]	; (1002b8c <validate_firmware+0x1e4>)
 1002a28:	f001 f8d8 	bl	1003bdc <printk>
		PRINT("We assume this is due to the firmware version not being enabled.\n\r");
 1002a2c:	4858      	ldr	r0, [pc, #352]	; (1002b90 <validate_firmware+0x1e8>)
 1002a2e:	f001 f8d5 	bl	1003bdc <printk>
		stored_version = 0;
 1002a32:	f8ad 500a 	strh.w	r5, [sp, #10]
}

static bool region_within(uint32_t inner_start, uint32_t inner_end,
			uint32_t start, uint32_t end)
{
	if (inner_start > inner_end) {
 1002a36:	2f00      	cmp	r7, #0
 1002a38:	d14b      	bne.n	1002ad2 <validate_firmware+0x12a>
	if (start > end) {
 1002a3a:	f1bb 0f00 	cmp.w	fp, #0
 1002a3e:	d148      	bne.n	1002ad2 <validate_firmware+0x12a>
	if (addr < start) {
 1002a40:	42b4      	cmp	r4, r6
 1002a42:	d346      	bcc.n	1002ad2 <validate_firmware+0x12a>
	if (addr >= end) {
 1002a44:	4554      	cmp	r4, sl
 1002a46:	d244      	bcs.n	1002ad2 <validate_firmware+0x12a>
		return false;
	}
	if (!within(inner_start, start, end)) {
		return false;
	}
	if (!within(inner_end - 1, start, end)) {
 1002a48:	9b01      	ldr	r3, [sp, #4]
 1002a4a:	1e5f      	subs	r7, r3, #1
	if (addr < start) {
 1002a4c:	42be      	cmp	r6, r7
 1002a4e:	d83d      	bhi.n	1002acc <validate_firmware+0x124>
	if (addr >= end) {
 1002a50:	45ba      	cmp	sl, r7
 1002a52:	d93b      	bls.n	1002acc <validate_firmware+0x124>
	if (start > end) {
 1002a54:	eb18 0809 	adds.w	r8, r8, r9
	if (!within(fwinfo->boot_address, fw_dst_address, fw_dst_end)) {
 1002a58:	69e3      	ldr	r3, [r4, #28]
 1002a5a:	d33c      	bcc.n	1002ad6 <validate_firmware+0x12e>
		PRINT("Boot address is not within signed region.\n\r");
 1002a5c:	2d00      	cmp	r5, #0
 1002a5e:	d1b5      	bne.n	10029cc <validate_firmware+0x24>
 1002a60:	484c      	ldr	r0, [pc, #304]	; (1002b94 <validate_firmware+0x1ec>)
 1002a62:	e7b1      	b.n	10029c8 <validate_firmware+0x20>
	if (fw_info_find(fw_src_address) != fwinfo) {
 1002a64:	f7ff ff90 	bl	1002988 <fw_info_find>
 1002a68:	4284      	cmp	r4, r0
 1002a6a:	d001      	beq.n	1002a70 <validate_firmware+0xc8>
		PRINT("Firmware info doesn't point to itself.\n\r");
 1002a6c:	484a      	ldr	r0, [pc, #296]	; (1002b98 <validate_firmware+0x1f0>)
 1002a6e:	e7ab      	b.n	10029c8 <validate_firmware+0x20>
	if (fwinfo->valid != CONFIG_FW_INFO_VALID_VAL) {
 1002a70:	6a21      	ldr	r1, [r4, #32]
 1002a72:	4b45      	ldr	r3, [pc, #276]	; (1002b88 <validate_firmware+0x1e0>)
 1002a74:	4299      	cmp	r1, r3
 1002a76:	d0c2      	beq.n	10029fe <validate_firmware+0x56>
		PRINT("Firwmare has been invalidated: 0x%x.\n\r",
 1002a78:	4848      	ldr	r0, [pc, #288]	; (1002b9c <validate_firmware+0x1f4>)
		PRINT("Firmware validation failed with error %d.\n\r",
 1002a7a:	f001 f8af 	bl	1003bdc <printk>
 1002a7e:	e7a5      	b.n	10029cc <validate_firmware+0x24>
		stored_version = 0;
 1002a80:	2200      	movs	r2, #0
 1002a82:	f8ad 200a 	strh.w	r2, [sp, #10]
	if (inner_start > inner_end) {
 1002a86:	2f00      	cmp	r7, #0
 1002a88:	d1a0      	bne.n	10029cc <validate_firmware+0x24>
	if (start > end) {
 1002a8a:	f1bb 0f00 	cmp.w	fp, #0
 1002a8e:	d19d      	bne.n	10029cc <validate_firmware+0x24>
	if (addr < start) {
 1002a90:	42b4      	cmp	r4, r6
 1002a92:	d39b      	bcc.n	10029cc <validate_firmware+0x24>
	if (addr >= end) {
 1002a94:	4554      	cmp	r4, sl
 1002a96:	d299      	bcs.n	10029cc <validate_firmware+0x24>
	if (!within(inner_end - 1, start, end)) {
 1002a98:	9b01      	ldr	r3, [sp, #4]
 1002a9a:	1e5f      	subs	r7, r3, #1
	if (addr < start) {
 1002a9c:	42be      	cmp	r6, r7
 1002a9e:	d895      	bhi.n	10029cc <validate_firmware+0x24>
	if (addr >= end) {
 1002aa0:	45ba      	cmp	sl, r7
 1002aa2:	d8d7      	bhi.n	1002a54 <validate_firmware+0xac>
 1002aa4:	e792      	b.n	10029cc <validate_firmware+0x24>
	if (fwinfo->version < stored_version) {
 1002aa6:	6961      	ldr	r1, [r4, #20]
 1002aa8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 1002aac:	4291      	cmp	r1, r2
 1002aae:	d205      	bcs.n	1002abc <validate_firmware+0x114>
		PRINT("Firmware version (%u) is smaller than monotonic counter (%u).\n\r",
 1002ab0:	2d00      	cmp	r5, #0
 1002ab2:	d18b      	bne.n	10029cc <validate_firmware+0x24>
 1002ab4:	483a      	ldr	r0, [pc, #232]	; (1002ba0 <validate_firmware+0x1f8>)
 1002ab6:	f001 f891 	bl	1003bdc <printk>
 1002aba:	e787      	b.n	10029cc <validate_firmware+0x24>
	if (inner_start > inner_end) {
 1002abc:	b937      	cbnz	r7, 1002acc <validate_firmware+0x124>
	if (start > end) {
 1002abe:	f1bb 0f00 	cmp.w	fp, #0
 1002ac2:	d103      	bne.n	1002acc <validate_firmware+0x124>
	if (addr < start) {
 1002ac4:	42b4      	cmp	r4, r6
 1002ac6:	d301      	bcc.n	1002acc <validate_firmware+0x124>
	if (addr >= end) {
 1002ac8:	4554      	cmp	r4, sl
 1002aca:	d3bd      	bcc.n	1002a48 <validate_firmware+0xa0>
		PRINT("Firmware info is not within signed region.\n\r");
 1002acc:	2d00      	cmp	r5, #0
 1002ace:	f47f af7d 	bne.w	10029cc <validate_firmware+0x24>
 1002ad2:	4834      	ldr	r0, [pc, #208]	; (1002ba4 <validate_firmware+0x1fc>)
 1002ad4:	e778      	b.n	10029c8 <validate_firmware+0x20>
	if (addr < start) {
 1002ad6:	454b      	cmp	r3, r9
 1002ad8:	d3c0      	bcc.n	1002a5c <validate_firmware+0xb4>
	if (addr >= end) {
 1002ada:	4543      	cmp	r3, r8
 1002adc:	d2be      	bcs.n	1002a5c <validate_firmware+0xb4>
	const uint32_t reset_vector = ((const uint32_t *)(fw_src_address + stack_ptr_offset))[1];
 1002ade:	1d32      	adds	r2, r6, #4
 1002ae0:	eba2 0209 	sub.w	r2, r2, r9
 1002ae4:	58d3      	ldr	r3, [r2, r3]
	if (addr < start) {
 1002ae6:	4599      	cmp	r9, r3
 1002ae8:	d904      	bls.n	1002af4 <validate_firmware+0x14c>
		PRINT("Reset handler is not within signed region.\n\r");
 1002aea:	2d00      	cmp	r5, #0
 1002aec:	f47f af6e 	bne.w	10029cc <validate_firmware+0x24>
 1002af0:	482d      	ldr	r0, [pc, #180]	; (1002ba8 <validate_firmware+0x200>)
 1002af2:	e769      	b.n	10029c8 <validate_firmware+0x20>
	if (addr >= end) {
 1002af4:	4598      	cmp	r8, r3
 1002af6:	d9f8      	bls.n	1002aea <validate_firmware+0x142>
	fw_val_info = validation_info_find(fw_src_address + fwinfo->size, 4);
 1002af8:	6927      	ldr	r7, [r4, #16]
	const uint32_t validation_info_magic[] = {VALIDATION_INFO_MAGIC};
 1002afa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1002bac <validate_firmware+0x204>
	fw_val_info = validation_info_find(fw_src_address + fwinfo->size, 4);
 1002afe:	4437      	add	r7, r6
	for (int i = 0; i <= search_distance; i++) {
 1002b00:	f107 0a05 	add.w	sl, r7, #5
	const uint32_t validation_info_magic[] = {VALIDATION_INFO_MAGIC};
 1002b04:	f10d 080c 	add.w	r8, sp, #12
 1002b08:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 1002b0c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	if (memcmp(vinfo->magic, validation_info_magic,
 1002b10:	220c      	movs	r2, #12
 1002b12:	4641      	mov	r1, r8
 1002b14:	4638      	mov	r0, r7
 1002b16:	f001 f9ca 	bl	1003eae <memcmp>
 1002b1a:	b900      	cbnz	r0, 1002b1e <validate_firmware+0x176>
		if (validation_info_check(vinfo)) {
 1002b1c:	b93f      	cbnz	r7, 1002b2e <validate_firmware+0x186>
	for (int i = 0; i <= search_distance; i++) {
 1002b1e:	3701      	adds	r7, #1
 1002b20:	45ba      	cmp	sl, r7
 1002b22:	d1f1      	bne.n	1002b08 <validate_firmware+0x160>
		PRINT("Could not find valid firmware validation info.\n\r");
 1002b24:	2d00      	cmp	r5, #0
 1002b26:	f47f af51 	bne.w	10029cc <validate_firmware+0x24>
 1002b2a:	4821      	ldr	r0, [pc, #132]	; (1002bb0 <validate_firmware+0x208>)
 1002b2c:	e74c      	b.n	10029c8 <validate_firmware+0x20>
	if (fw_val_info->address != fwinfo->address) {
 1002b2e:	68fa      	ldr	r2, [r7, #12]
 1002b30:	69a3      	ldr	r3, [r4, #24]
 1002b32:	429a      	cmp	r2, r3
 1002b34:	d109      	bne.n	1002b4a <validate_firmware+0x1a2>
	return validate_hash(fw_src_address, fwinfo->size, fw_val_info,
 1002b36:	6924      	ldr	r4, [r4, #16]
	int retval = bl_crypto_init();
 1002b38:	f001 faba 	bl	10040b0 <bl_crypto_init>
	if (retval) {
 1002b3c:	4601      	mov	r1, r0
 1002b3e:	b148      	cbz	r0, 1002b54 <validate_firmware+0x1ac>
		PRINT("bl_crypto_init() returned %d.\n\r", retval);
 1002b40:	2d00      	cmp	r5, #0
 1002b42:	f47f af43 	bne.w	10029cc <validate_firmware+0x24>
 1002b46:	481b      	ldr	r0, [pc, #108]	; (1002bb4 <validate_firmware+0x20c>)
 1002b48:	e797      	b.n	1002a7a <validate_firmware+0xd2>
		PRINT("Validation info doesn't belong to this firmware.\n\r");
 1002b4a:	2d00      	cmp	r5, #0
 1002b4c:	f47f af3e 	bne.w	10029cc <validate_firmware+0x24>
 1002b50:	4819      	ldr	r0, [pc, #100]	; (1002bb8 <validate_firmware+0x210>)
 1002b52:	e739      	b.n	10029c8 <validate_firmware+0x20>
	retval = bl_sha256_verify((const uint8_t *)fw_src_address, fw_size,
 1002b54:	4621      	mov	r1, r4
 1002b56:	4630      	mov	r0, r6
 1002b58:	f107 0210 	add.w	r2, r7, #16
 1002b5c:	f001 faaf 	bl	10040be <bl_sha256_verify>
	if (retval != 0) {
 1002b60:	4601      	mov	r1, r0
 1002b62:	b120      	cbz	r0, 1002b6e <validate_firmware+0x1c6>
		PRINT("Firmware validation failed with error %d.\n\r",
 1002b64:	2d00      	cmp	r5, #0
 1002b66:	f47f af31 	bne.w	10029cc <validate_firmware+0x24>
 1002b6a:	4814      	ldr	r0, [pc, #80]	; (1002bbc <validate_firmware+0x214>)
 1002b6c:	e785      	b.n	1002a7a <validate_firmware+0xd2>
	PRINT("Firmware hash verified.\n\r");
 1002b6e:	b915      	cbnz	r5, 1002b76 <validate_firmware+0x1ce>
 1002b70:	4813      	ldr	r0, [pc, #76]	; (1002bc0 <validate_firmware+0x218>)
 1002b72:	f001 f833 	bl	1003bdc <printk>
	return true;
 1002b76:	2001      	movs	r0, #1
 1002b78:	e729      	b.n	10029ce <validate_firmware+0x26>
 1002b7a:	bf00      	nop
 1002b7c:	01004ecc 	.word	0x01004ecc
 1002b80:	01004eec 	.word	0x01004eec
 1002b84:	01004f1f 	.word	0x01004f1f
 1002b88:	9102ffff 	.word	0x9102ffff
 1002b8c:	01004f9c 	.word	0x01004f9c
 1002b90:	01004fc3 	.word	0x01004fc3
 1002b94:	01005073 	.word	0x01005073
 1002b98:	01004f4c 	.word	0x01004f4c
 1002b9c:	01004f75 	.word	0x01004f75
 1002ba0:	01005006 	.word	0x01005006
 1002ba4:	01005046 	.word	0x01005046
 1002ba8:	0100509f 	.word	0x0100509f
 1002bac:	010043e8 	.word	0x010043e8
 1002bb0:	010050cc 	.word	0x010050cc
 1002bb4:	01005130 	.word	0x01005130
 1002bb8:	010050fd 	.word	0x010050fd
 1002bbc:	01005150 	.word	0x01005150
 1002bc0:	0100517c 	.word	0x0100517c

01002bc4 <get_counter_struct>:
}

/** Get the counter_collection data structure in the provision data. */
static const struct counter_collection *get_counter_collection(void)
{
	const struct counter_collection *collection = (struct counter_collection *)
 1002bc4:	2214      	movs	r2, #20
/** Get one of the (possibly multiple) counters in the provision data.
 *
 *  param[in]  description  Which counter to get. See COUNTER_DESC_*.
 */
static const struct monotonic_counter *get_counter_struct(uint16_t description)
{
 1002bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return nrf_nvmc_ready_check(NRF_NVMC);
}

NRFX_STATIC_INLINE uint32_t nrfx_nvmc_uicr_word_read(uint32_t const volatile *address)
{
    uint32_t value = *address;
 1002bca:	4b14      	ldr	r3, [pc, #80]	; (1002c1c <get_counter_struct+0x58>)
	const struct counter_collection *collection = (struct counter_collection *)
 1002bcc:	4d14      	ldr	r5, [pc, #80]	; (1002c20 <get_counter_struct+0x5c>)
 1002bce:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
{
 1002bd2:	4607      	mov	r7, r0
	const struct counter_collection *collection = (struct counter_collection *)
 1002bd4:	fb02 5503 	mla	r5, r2, r3, r5
	return nrfx_nvmc_otp_halfword_read((uint32_t)&collection->type) == TYPE_COUNTERS
 1002bd8:	4628      	mov	r0, r5
 1002bda:	f000 fb7d 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>
		? collection : NULL;
 1002bde:	2801      	cmp	r0, #1
 1002be0:	d003      	beq.n	1002bea <get_counter_struct+0x26>
	const struct counter_collection *counters = get_counter_collection();

	if (counters == NULL) {
		return NULL;
 1002be2:	2400      	movs	r4, #0

		current = (const struct monotonic_counter *)
					&current->counter_slots[num_slots];
	}
	return NULL;
}
 1002be4:	4620      	mov	r0, r4
 1002be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < nrfx_nvmc_otp_halfword_read(
 1002bea:	f04f 0800 	mov.w	r8, #0
	const struct monotonic_counter *current = counters->counters;
 1002bee:	1d2c      	adds	r4, r5, #4
		(uint32_t)&counters->num_counters); i++) {
 1002bf0:	1cae      	adds	r6, r5, #2
	for (size_t i = 0; i < nrfx_nvmc_otp_halfword_read(
 1002bf2:	4630      	mov	r0, r6
 1002bf4:	f000 fb70 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>
 1002bf8:	4540      	cmp	r0, r8
 1002bfa:	d9f2      	bls.n	1002be2 <get_counter_struct+0x1e>
		uint16_t num_slots = nrfx_nvmc_otp_halfword_read(
 1002bfc:	1ca0      	adds	r0, r4, #2
 1002bfe:	f000 fb6b 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>
 1002c02:	4605      	mov	r5, r0
		if (nrfx_nvmc_otp_halfword_read((uint32_t)&current->description) == description) {
 1002c04:	4620      	mov	r0, r4
 1002c06:	f000 fb67 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>
 1002c0a:	42b8      	cmp	r0, r7
 1002c0c:	d0ea      	beq.n	1002be4 <get_counter_struct+0x20>
		current = (const struct monotonic_counter *)
 1002c0e:	3502      	adds	r5, #2
 1002c10:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		(uint32_t)&counters->num_counters); i++) {
 1002c14:	f108 0801 	add.w	r8, r8, #1
 1002c18:	e7eb      	b.n	1002bf2 <get_counter_struct+0x2e>
 1002c1a:	bf00      	nop
 1002c1c:	01008000 	.word	0x01008000
 1002c20:	010085b4 	.word	0x010085b4

01002c24 <s0_address_read>:
 1002c24:	4b01      	ldr	r3, [pc, #4]	; (1002c2c <s0_address_read+0x8>)
 1002c26:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
}
 1002c2a:	4770      	bx	lr
 1002c2c:	01008000 	.word	0x01008000

01002c30 <pcd_fw_copy_invalidate>:

static struct pcd_cmd *cmd = (struct pcd_cmd *)PCD_CMD_ADDRESS;

void pcd_fw_copy_invalidate(void)
{
	cmd->magic = PCD_CMD_MAGIC_FAIL;
 1002c30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 1002c34:	4a01      	ldr	r2, [pc, #4]	; (1002c3c <pcd_fw_copy_invalidate+0xc>)
 1002c36:	601a      	str	r2, [r3, #0]
}
 1002c38:	4770      	bx	lr
 1002c3a:	bf00      	nop
 1002c3c:	25bafc15 	.word	0x25bafc15

01002c40 <pcd_fw_copy_status_get>:

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
 1002c40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 1002c44:	6818      	ldr	r0, [r3, #0]
 1002c46:	4b05      	ldr	r3, [pc, #20]	; (1002c5c <pcd_fw_copy_status_get+0x1c>)
 1002c48:	4298      	cmp	r0, r3
 1002c4a:	d005      	beq.n	1002c58 <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
 1002c4c:	4b04      	ldr	r3, [pc, #16]	; (1002c60 <pcd_fw_copy_status_get+0x20>)
 1002c4e:	4298      	cmp	r0, r3
 1002c50:	bf0c      	ite	eq
 1002c52:	2001      	moveq	r0, #1
 1002c54:	2002      	movne	r0, #2
 1002c56:	4770      	bx	lr
		return PCD_STATUS_COPY;
 1002c58:	2000      	movs	r0, #0
}
 1002c5a:	4770      	bx	lr
 1002c5c:	b5b4b3b6 	.word	0xb5b4b3b6
 1002c60:	f103ce5d 	.word	0xf103ce5d

01002c64 <pcd_fw_copy>:
}

#ifdef CONFIG_PCD_NET

int pcd_fw_copy(const struct device *fdev)
{
 1002c64:	b530      	push	{r4, r5, lr}
	struct stream_flash_ctx stream;
	uint8_t buf[CONFIG_PCD_BUF_SIZE];
	int rc;

	if (cmd->magic != PCD_CMD_MAGIC_COPY) {
 1002c66:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
 1002c6a:	4b18      	ldr	r3, [pc, #96]	; (1002ccc <pcd_fw_copy+0x68>)
 1002c6c:	682a      	ldr	r2, [r5, #0]
{
 1002c6e:	4601      	mov	r1, r0
	if (cmd->magic != PCD_CMD_MAGIC_COPY) {
 1002c70:	429a      	cmp	r2, r3
{
 1002c72:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
	if (cmd->magic != PCD_CMD_MAGIC_COPY) {
 1002c76:	d126      	bne.n	1002cc6 <pcd_fw_copy+0x62>
		return -EFAULT;
	}

	rc = stream_flash_init(&stream, fdev, buf, sizeof(buf),
 1002c78:	2300      	movs	r3, #0
 1002c7a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 1002c7e:	68eb      	ldr	r3, [r5, #12]
 1002c80:	aa0e      	add	r2, sp, #56	; 0x38
 1002c82:	9300      	str	r3, [sp, #0]
 1002c84:	a805      	add	r0, sp, #20
 1002c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 1002c8a:	f7fe fd45 	bl	1001718 <stream_flash_init>
			       cmd->offset, 0, NULL);
	if (rc != 0) {
 1002c8e:	4604      	mov	r4, r0
 1002c90:	b140      	cbz	r0, 1002ca4 <pcd_fw_copy+0x40>
		LOG_ERR("stream_flash_init failed: %d", rc);
 1002c92:	2145      	movs	r1, #69	; 0x45
 1002c94:	4602      	mov	r2, r0
 1002c96:	480e      	ldr	r0, [pc, #56]	; (1002cd0 <pcd_fw_copy+0x6c>)
	}

	rc = stream_flash_buffered_write(&stream, (uint8_t *)cmd->data,
					 cmd->len, true);
	if (rc != 0) {
		LOG_ERR("stream_flash_buffered_write fail: %d", rc);
 1002c98:	f001 f893 	bl	1003dc2 <z_log_minimal_printk>
	}

	LOG_INF("Transfer done");

	return 0;
}
 1002c9c:	4620      	mov	r0, r4
 1002c9e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 1002ca2:	bd30      	pop	{r4, r5, pc}
	rc = stream_flash_buffered_write(&stream, (uint8_t *)cmd->data,
 1002ca4:	2301      	movs	r3, #1
 1002ca6:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 1002caa:	a805      	add	r0, sp, #20
 1002cac:	f001 f89c 	bl	1003de8 <stream_flash_buffered_write>
	if (rc != 0) {
 1002cb0:	4604      	mov	r4, r0
 1002cb2:	b118      	cbz	r0, 1002cbc <pcd_fw_copy+0x58>
		LOG_ERR("stream_flash_buffered_write fail: %d", rc);
 1002cb4:	4602      	mov	r2, r0
 1002cb6:	2145      	movs	r1, #69	; 0x45
 1002cb8:	4806      	ldr	r0, [pc, #24]	; (1002cd4 <pcd_fw_copy+0x70>)
 1002cba:	e7ed      	b.n	1002c98 <pcd_fw_copy+0x34>
	LOG_INF("Transfer done");
 1002cbc:	2149      	movs	r1, #73	; 0x49
 1002cbe:	4806      	ldr	r0, [pc, #24]	; (1002cd8 <pcd_fw_copy+0x74>)
 1002cc0:	f001 f87f 	bl	1003dc2 <z_log_minimal_printk>
	return 0;
 1002cc4:	e7ea      	b.n	1002c9c <pcd_fw_copy+0x38>
		return -EFAULT;
 1002cc6:	f06f 040d 	mvn.w	r4, #13
 1002cca:	e7e7      	b.n	1002c9c <pcd_fw_copy+0x38>
 1002ccc:	b5b4b3b6 	.word	0xb5b4b3b6
 1002cd0:	01005196 	.word	0x01005196
 1002cd4:	010051b8 	.word	0x010051b8
 1002cd8:	010051e2 	.word	0x010051e2

01002cdc <pcd_fw_copy_done>:

void pcd_fw_copy_done(void)
{
	/* Signal complete by setting magic to DONE */
	cmd->magic = PCD_CMD_MAGIC_DONE;
 1002cdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 1002ce0:	4a01      	ldr	r2, [pc, #4]	; (1002ce8 <pcd_fw_copy_done+0xc>)
 1002ce2:	601a      	str	r2, [r3, #0]
}
 1002ce4:	4770      	bx	lr
 1002ce6:	bf00      	nop
 1002ce8:	f103ce5d 	.word	0xf103ce5d

01002cec <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(void)
{
 1002cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
 1002cf0:	4822      	ldr	r0, [pc, #136]	; (1002d7c <check_ext_api_requests+0x90>)
{
 1002cf2:	b085      	sub	sp, #20
			skip_ext_apis(&m_firmware_info);
 1002cf4:	f001 fa51 	bl	100419a <skip_ext_apis>

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
 1002cf8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
 1002cfa:	4604      	mov	r4, r0
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
 1002cfc:	4b1f      	ldr	r3, [pc, #124]	; (1002d7c <check_ext_api_requests+0x90>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
 1002cfe:	4e20      	ldr	r6, [pc, #128]	; (1002d80 <check_ext_api_requests+0x94>)
 1002d00:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
 1002d04:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1002d84 <check_ext_api_requests+0x98>
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
 1002d08:	45a8      	cmp	r8, r5
 1002d0a:	d803      	bhi.n	1002d14 <check_ext_api_requests+0x28>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
 1002d0c:	2000      	movs	r0, #0
 1002d0e:	b005      	add	sp, #20
 1002d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
 1002d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1002d16:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 1002d1a:	681f      	ldr	r7, [r3, #0]
 1002d1c:	ab01      	add	r3, sp, #4
 1002d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
 1002d22:	220c      	movs	r2, #12
 1002d24:	4619      	mov	r1, r3
 1002d26:	4638      	mov	r0, r7
 1002d28:	f001 f8c1 	bl	1003eae <memcmp>
 1002d2c:	b988      	cbnz	r0, 1002d52 <check_ext_api_requests+0x66>
 1002d2e:	b187      	cbz	r7, 1002d52 <check_ext_api_requests+0x66>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
 1002d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
 1002d32:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
 1002d34:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
 1002d36:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
 1002d38:	4291      	cmp	r1, r2
 1002d3a:	d10a      	bne.n	1002d52 <check_ext_api_requests+0x66>
		&&  (ext_api->ext_api_version >= req_min_version)
 1002d3c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
 1002d3e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
 1002d40:	4291      	cmp	r1, r2
 1002d42:	d806      	bhi.n	1002d52 <check_ext_api_requests+0x66>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
 1002d44:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
 1002d46:	4291      	cmp	r1, r2
 1002d48:	d903      	bls.n	1002d52 <check_ext_api_requests+0x66>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
 1002d4a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
 1002d4c:	695b      	ldr	r3, [r3, #20]
 1002d4e:	439a      	bics	r2, r3
 1002d50:	d00a      	beq.n	1002d68 <check_ext_api_requests+0x7c>
		} else if (ext_api_req->required) {
 1002d52:	6a27      	ldr	r7, [r4, #32]
 1002d54:	b167      	cbz	r7, 1002d70 <check_ext_api_requests+0x84>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
 1002d56:	480c      	ldr	r0, [pc, #48]	; (1002d88 <check_ext_api_requests+0x9c>)
 1002d58:	f000 ff40 	bl	1003bdc <printk>
			k_panic();
 1002d5c:	4040      	eors	r0, r0
 1002d5e:	f380 8811 	msr	BASEPRI, r0
 1002d62:	f04f 0004 	mov.w	r0, #4
 1002d66:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
 1002d68:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
 1002d6a:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
 1002d6c:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
 1002d6e:	e7cb      	b.n	1002d08 <check_ext_api_requests+0x1c>
			printk("WARNING: Optional EXT_API request not "
 1002d70:	4648      	mov	r0, r9
 1002d72:	f000 ff33 	bl	1003bdc <printk>
			*ext_api_req->ext_api = NULL;
 1002d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1002d78:	601f      	str	r7, [r3, #0]
 1002d7a:	e7f5      	b.n	1002d68 <check_ext_api_requests+0x7c>
 1002d7c:	01000200 	.word	0x01000200
 1002d80:	010043f4 	.word	0x010043f4
 1002d84:	01005222 	.word	0x01005222
 1002d88:	010051f9 	.word	0x010051f9

01002d8c <fw_info_ext_api_provide>:
{
 1002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1002d90:	460f      	mov	r7, r1
	if (fw_info == NULL) {
 1002d92:	4606      	mov	r6, r0
{
 1002d94:	b087      	sub	sp, #28
	if (fw_info == NULL) {
 1002d96:	b3a0      	cbz	r0, 1002e02 <fw_info_ext_api_provide+0x76>
				skip_ext_apis(fw_info);
 1002d98:	f001 f9ff 	bl	100419a <skip_ext_apis>
	for (uint32_t i = 0; i < fw_info->ext_api_request_num; i++) {
 1002d9c:	f04f 0800 	mov.w	r8, #0
				skip_ext_apis(fw_info);
 1002da0:	4604      	mov	r4, r0
	for (uint32_t i = 0; i < fw_info->ext_api_request_num; i++) {
 1002da2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 1002da4:	4543      	cmp	r3, r8
 1002da6:	d94e      	bls.n	1002e46 <fw_info_ext_api_provide+0xba>
	for (uint32_t i = 0; i < (uint32_t)_fw_info_images_size; i++) {
 1002da8:	f04f 0900 	mov.w	r9, #0
 1002dac:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1002e5c <fw_info_ext_api_provide+0xd0>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 1002db0:	f04f 0a00 	mov.w	sl, #0
				fw_info_find(_fw_info_images_start[i]);
 1002db4:	f85b 3b04 	ldr.w	r3, [fp], #4
 1002db8:	9300      	str	r3, [sp, #0]
 1002dba:	4b29      	ldr	r3, [pc, #164]	; (1002e60 <fw_info_ext_api_provide+0xd4>)
						fw_info_allowed_offsets[i]);
 1002dbc:	f853 5b04 	ldr.w	r5, [r3], #4
 1002dc0:	9301      	str	r3, [sp, #4]
		finfo = fw_info_check(firmware_address +
 1002dc2:	9b00      	ldr	r3, [sp, #0]
 1002dc4:	441d      	add	r5, r3
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
 1002dc6:	4b27      	ldr	r3, [pc, #156]	; (1002e64 <fw_info_ext_api_provide+0xd8>)
 1002dc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 1002dcc:	ab03      	add	r3, sp, #12
 1002dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
 1002dd2:	4619      	mov	r1, r3
 1002dd4:	220c      	movs	r2, #12
 1002dd6:	4628      	mov	r0, r5
 1002dd8:	f001 f869 	bl	1003eae <memcmp>
 1002ddc:	9b01      	ldr	r3, [sp, #4]
 1002dde:	b900      	cbnz	r0, 1002de2 <fw_info_ext_api_provide+0x56>
		if (finfo) {
 1002de0:	b99d      	cbnz	r5, 1002e0a <fw_info_ext_api_provide+0x7e>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
 1002de2:	f10a 0a01 	add.w	sl, sl, #1
 1002de6:	f1ba 0f05 	cmp.w	sl, #5
 1002dea:	d1e7      	bne.n	1002dbc <fw_info_ext_api_provide+0x30>
	for (uint32_t i = 0; i < (uint32_t)_fw_info_images_size; i++) {
 1002dec:	4b1e      	ldr	r3, [pc, #120]	; (1002e68 <fw_info_ext_api_provide+0xdc>)
 1002dee:	f109 0901 	add.w	r9, r9, #1
 1002df2:	4599      	cmp	r9, r3
 1002df4:	d3dc      	bcc.n	1002db0 <fw_info_ext_api_provide+0x24>
		if (provide) {
 1002df6:	b117      	cbz	r7, 1002dfe <fw_info_ext_api_provide+0x72>
			*ext_api_req->ext_api = new_ext_api;
 1002df8:	2200      	movs	r2, #0
 1002dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1002dfc:	601a      	str	r2, [r3, #0]
		if (!new_ext_api && ext_api_req->required) {
 1002dfe:	6a23      	ldr	r3, [r4, #32]
 1002e00:	b333      	cbz	r3, 1002e50 <fw_info_ext_api_provide+0xc4>
		return false;
 1002e02:	2000      	movs	r0, #0
}
 1002e04:	b007      	add	sp, #28
 1002e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!fw_info || (fw_info->valid != CONFIG_FW_INFO_VALID_VAL)
 1002e0a:	6a2b      	ldr	r3, [r5, #32]
 1002e0c:	4a17      	ldr	r2, [pc, #92]	; (1002e6c <fw_info_ext_api_provide+0xe0>)
 1002e0e:	4293      	cmp	r3, r2
 1002e10:	d1ec      	bne.n	1002dec <fw_info_ext_api_provide+0x60>
		    || (fw_info == skip_fw_info)) {
 1002e12:	42ae      	cmp	r6, r5
 1002e14:	d0ea      	beq.n	1002dec <fw_info_ext_api_provide+0x60>
		for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 1002e16:	6b69      	ldr	r1, [r5, #52]	; 0x34
		const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
 1002e18:	f105 033c 	add.w	r3, r5, #60	; 0x3c
		for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 1002e1c:	4288      	cmp	r0, r1
 1002e1e:	d0e5      	beq.n	1002dec <fw_info_ext_api_provide+0x60>
	const uint32_t req_id = ext_api_req->request.ext_api_id;
 1002e20:	6925      	ldr	r5, [r4, #16]
	return ((ext_api->ext_api_id == req_id)
 1002e22:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
 1002e24:	4295      	cmp	r5, r2
 1002e26:	d10a      	bne.n	1002e3e <fw_info_ext_api_provide+0xb2>
		&&  (ext_api->ext_api_version >= req_min_version)
 1002e28:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
 1002e2a:	69a5      	ldr	r5, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
 1002e2c:	4295      	cmp	r5, r2
 1002e2e:	d806      	bhi.n	1002e3e <fw_info_ext_api_provide+0xb2>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
 1002e30:	69e5      	ldr	r5, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
 1002e32:	4295      	cmp	r5, r2
 1002e34:	d903      	bls.n	1002e3e <fw_info_ext_api_provide+0xb2>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
 1002e36:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
 1002e38:	695d      	ldr	r5, [r3, #20]
 1002e3a:	43aa      	bics	r2, r5
 1002e3c:	d005      	beq.n	1002e4a <fw_info_ext_api_provide+0xbe>
			ADVANCE_EXT_API(ext_api);
 1002e3e:	68da      	ldr	r2, [r3, #12]
		for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 1002e40:	3001      	adds	r0, #1
			ADVANCE_EXT_API(ext_api);
 1002e42:	4413      	add	r3, r2
		for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 1002e44:	e7ea      	b.n	1002e1c <fw_info_ext_api_provide+0x90>
	return true;
 1002e46:	2001      	movs	r0, #1
 1002e48:	e7dc      	b.n	1002e04 <fw_info_ext_api_provide+0x78>
		if (provide) {
 1002e4a:	b10f      	cbz	r7, 1002e50 <fw_info_ext_api_provide+0xc4>
			*ext_api_req->ext_api = new_ext_api;
 1002e4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 1002e4e:	6013      	str	r3, [r2, #0]
		ADVANCE_EXT_API_REQ(ext_api_req);
 1002e50:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < fw_info->ext_api_request_num; i++) {
 1002e52:	f108 0801 	add.w	r8, r8, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
 1002e56:	441c      	add	r4, r3
	for (uint32_t i = 0; i < fw_info->ext_api_request_num; i++) {
 1002e58:	e7a3      	b.n	1002da2 <fw_info_ext_api_provide+0x16>
 1002e5a:	bf00      	nop
 1002e5c:	0100543c 	.word	0x0100543c
 1002e60:	0100449c 	.word	0x0100449c
 1002e64:	01004400 	.word	0x01004400
 1002e68:	00000001 	.word	0x00000001
 1002e6c:	9102ffff 	.word	0x9102ffff

01002e70 <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
 1002e70:	2200      	movs	r2, #0
 1002e72:	00d3      	lsls	r3, r2, #3
 1002e74:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 1002e78:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 1002e7c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 1002e80:	3101      	adds	r1, #1
 1002e82:	d007      	beq.n	1002e94 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1002e84:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
 1002e88:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1002e8a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
 1002e8e:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1002e90:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
 1002e92:	d1ee      	bne.n	1002e72 <SystemInit+0x2>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
 1002e94:	4b22      	ldr	r3, [pc, #136]	; (1002f20 <SystemInit+0xb0>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1002e96:	e9d3 324c 	ldrd	r3, r2, [r3, #304]	; 0x130
 1002e9a:	2b07      	cmp	r3, #7
 1002e9c:	d126      	bne.n	1002eec <SystemInit+0x7c>
                {
                    switch(var2)
 1002e9e:	3a02      	subs	r2, #2
 1002ea0:	2a03      	cmp	r2, #3
 1002ea2:	4b20      	ldr	r3, [pc, #128]	; (1002f24 <SystemInit+0xb4>)
 1002ea4:	d928      	bls.n	1002ef8 <SystemInit+0x88>

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 1002ea6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1002eaa:	07d1      	lsls	r1, r2, #31
 1002eac:	d432      	bmi.n	1002f14 <SystemInit+0xa4>
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
 1002eae:	4b1c      	ldr	r3, [pc, #112]	; (1002f20 <SystemInit+0xb0>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1002eb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 1002eb4:	2a07      	cmp	r2, #7
 1002eb6:	d119      	bne.n	1002eec <SystemInit+0x7c>
                {
                    switch(var2)
 1002eb8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 1002ebc:	3b02      	subs	r3, #2
 1002ebe:	2b03      	cmp	r3, #3
 1002ec0:	d802      	bhi.n	1002ec8 <SystemInit+0x58>
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
        }
    }

    if (nrf53_errata_160())
 1002ec2:	4a19      	ldr	r2, [pc, #100]	; (1002f28 <SystemInit+0xb8>)
 1002ec4:	5cd3      	ldrb	r3, [r2, r3]
 1002ec6:	b18b      	cbz	r3, 1002eec <SystemInit+0x7c>
    {
        *((volatile uint32_t *)0x41002118) = 0x7Ful;
 1002ec8:	237f      	movs	r3, #127	; 0x7f
 1002eca:	4a18      	ldr	r2, [pc, #96]	; (1002f2c <SystemInit+0xbc>)
        *((volatile uint32_t *)0x41080E04) = 0x0ul;
 1002ecc:	4918      	ldr	r1, [pc, #96]	; (1002f30 <SystemInit+0xc0>)
        *((volatile uint32_t *)0x41002118) = 0x7Ful;
 1002ece:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        *((volatile uint32_t *)0x41080E04) = 0x0ul;
 1002ed2:	2300      	movs	r3, #0
 1002ed4:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
        *((volatile uint32_t *)0x41080E08) = 0x0ul;
 1002ed8:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
        *((volatile uint32_t *)0x41002124) = 0x0ul;
 1002edc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
        *((volatile uint32_t *)0x4100212C) = 0x0ul;
 1002ee0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
        *((volatile uint32_t *)0x41101110) = 0x0ul;
 1002ee4:	f502 227f 	add.w	r2, r2, #1044480	; 0xff000
 1002ee8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 1002eec:	4b11      	ldr	r3, [pc, #68]	; (1002f34 <SystemInit+0xc4>)
 1002eee:	681a      	ldr	r2, [r3, #0]
 1002ef0:	4b11      	ldr	r3, [pc, #68]	; (1002f38 <SystemInit+0xc8>)
 1002ef2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    }

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();
}
 1002ef6:	4770      	bx	lr
    if (nrf53_errata_49())
 1002ef8:	4910      	ldr	r1, [pc, #64]	; (1002f3c <SystemInit+0xcc>)
 1002efa:	5c8a      	ldrb	r2, [r1, r2]
 1002efc:	2a00      	cmp	r2, #0
 1002efe:	d0d2      	beq.n	1002ea6 <SystemInit+0x36>
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 1002f00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1002f04:	07d2      	lsls	r2, r2, #31
 1002f06:	d5ce      	bpl.n	1002ea6 <SystemInit+0x36>
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 1002f08:	2200      	movs	r2, #0
 1002f0a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 1002f0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if (var1 == 0x07)
 1002f12:	e7c8      	b.n	1002ea6 <SystemInit+0x36>
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 1002f14:	f06f 0201 	mvn.w	r2, #1
 1002f18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 1002f1c:	e7c7      	b.n	1002eae <SystemInit+0x3e>
 1002f1e:	bf00      	nop
 1002f20:	01ff0000 	.word	0x01ff0000
 1002f24:	41005000 	.word	0x41005000
 1002f28:	01005255 	.word	0x01005255
 1002f2c:	41002000 	.word	0x41002000
 1002f30:	41080000 	.word	0x41080000
 1002f34:	01ff8000 	.word	0x01ff8000
 1002f38:	41006000 	.word	0x41006000
 1002f3c:	01005259 	.word	0x01005259

01002f40 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
 1002f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1002f42:	4b33      	ldr	r3, [pc, #204]	; (1003010 <clock_stop+0xd0>)
    switch (domain)
 1002f44:	4604      	mov	r4, r0
 1002f46:	b150      	cbz	r0, 1002f5e <clock_stop+0x1e>
 1002f48:	2801      	cmp	r0, #1
 1002f4a:	d025      	beq.n	1002f98 <clock_stop+0x58>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
 1002f4c:	4931      	ldr	r1, [pc, #196]	; (1003014 <clock_stop+0xd4>)
 1002f4e:	4832      	ldr	r0, [pc, #200]	; (1003018 <clock_stop+0xd8>)
 1002f50:	22d8      	movs	r2, #216	; 0xd8
 1002f52:	f000 ff28 	bl	1003da6 <assert_print>
 1002f56:	21d8      	movs	r1, #216	; 0xd8
 1002f58:	482e      	ldr	r0, [pc, #184]	; (1003014 <clock_stop+0xd4>)
            NRFX_ASSERT(0);
 1002f5a:	f000 ff1d 	bl	1003d98 <assert_post_action>
    p_reg->INTENCLR = mask;
 1002f5e:	2202      	movs	r2, #2
 1002f60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002f64:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
 1002f68:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002f6c:	2201      	movs	r2, #1
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1002f6e:	4607      	mov	r7, r0
 1002f70:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 1002f72:	2301      	movs	r3, #1
 1002f74:	f242 7510 	movw	r5, #10000	; 0x2710
 1002f78:	4e25      	ldr	r6, [pc, #148]	; (1003010 <clock_stop+0xd0>)
 1002f7a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
 1002f7e:	b1b4      	cbz	r4, 1002fae <clock_stop+0x6e>
 1002f80:	2c01      	cmp	r4, #1
 1002f82:	d032      	beq.n	1002fea <clock_stop+0xaa>
            NRFX_ASSERT(0);
 1002f84:	4925      	ldr	r1, [pc, #148]	; (100301c <clock_stop+0xdc>)
 1002f86:	4824      	ldr	r0, [pc, #144]	; (1003018 <clock_stop+0xd8>)
 1002f88:	f240 3247 	movw	r2, #839	; 0x347
 1002f8c:	f000 ff0b 	bl	1003da6 <assert_print>
 1002f90:	f240 3147 	movw	r1, #839	; 0x347
 1002f94:	4821      	ldr	r0, [pc, #132]	; (100301c <clock_stop+0xdc>)
 1002f96:	e7e0      	b.n	1002f5a <clock_stop+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002f98:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
 1002f9a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002f9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 1002fa2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1002fa6:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002faa:	6058      	str	r0, [r3, #4]
 1002fac:	e7e1      	b.n	1002f72 <clock_stop+0x32>
            if (p_clk_src != NULL)
 1002fae:	b18f      	cbz	r7, 1002fd4 <clock_stop+0x94>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1002fb0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 1002fb4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
 1002fb8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1002fba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 1002fbe:	03da      	lsls	r2, r3, #15
 1002fc0:	d511      	bpl.n	1002fe6 <clock_stop+0xa6>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
 1002fc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1002fc6:	2801      	cmp	r0, #1
 1002fc8:	d10d      	bne.n	1002fe6 <clock_stop+0xa6>
 1002fca:	f001 f8f2 	bl	10041b2 <nrfx_busy_wait>
 1002fce:	3d01      	subs	r5, #1
 1002fd0:	d1d5      	bne.n	1002f7e <clock_stop+0x3e>
 1002fd2:	e008      	b.n	1002fe6 <clock_stop+0xa6>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1002fd4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 1002fd8:	03d9      	lsls	r1, r3, #15
 1002fda:	d504      	bpl.n	1002fe6 <clock_stop+0xa6>
 1002fdc:	2001      	movs	r0, #1
 1002fde:	f001 f8e8 	bl	10041b2 <nrfx_busy_wait>
 1002fe2:	3d01      	subs	r5, #1
 1002fe4:	d1f6      	bne.n	1002fd4 <clock_stop+0x94>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
 1002fe6:	b003      	add	sp, #12
 1002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
 1002fea:	b13f      	cbz	r7, 1002ffc <clock_stop+0xbc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1002fec:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1002ff0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
 1002ff4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 1002ff6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1002ffa:	e7e0      	b.n	1002fbe <clock_stop+0x7e>
 1002ffc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1003000:	03db      	lsls	r3, r3, #15
 1003002:	d5f0      	bpl.n	1002fe6 <clock_stop+0xa6>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
 1003004:	2001      	movs	r0, #1
 1003006:	f001 f8d4 	bl	10041b2 <nrfx_busy_wait>
 100300a:	3d01      	subs	r5, #1
 100300c:	d1f6      	bne.n	1002ffc <clock_stop+0xbc>
 100300e:	e7ea      	b.n	1002fe6 <clock_stop+0xa6>
 1003010:	41005000 	.word	0x41005000
 1003014:	0100525d 	.word	0x0100525d
 1003018:	010046c0 	.word	0x010046c0
 100301c:	0100529a 	.word	0x0100529a

01003020 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
 1003020:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
 1003022:	b950      	cbnz	r0, 100303a <nrfx_clock_init+0x1a>
 1003024:	490a      	ldr	r1, [pc, #40]	; (1003050 <nrfx_clock_init+0x30>)
 1003026:	480b      	ldr	r0, [pc, #44]	; (1003054 <nrfx_clock_init+0x34>)
 1003028:	f240 1215 	movw	r2, #277	; 0x115
 100302c:	f000 febb 	bl	1003da6 <assert_print>
 1003030:	f240 1115 	movw	r1, #277	; 0x115
 1003034:	4806      	ldr	r0, [pc, #24]	; (1003050 <nrfx_clock_init+0x30>)
 1003036:	f000 feaf 	bl	1003d98 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
 100303a:	4b07      	ldr	r3, [pc, #28]	; (1003058 <nrfx_clock_init+0x38>)
 100303c:	791a      	ldrb	r2, [r3, #4]
 100303e:	b922      	cbnz	r2, 100304a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
 1003040:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
 1003042:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
 1003044:	4805      	ldr	r0, [pc, #20]	; (100305c <nrfx_clock_init+0x3c>)
        m_clock_cb.module_initialized = true;
 1003046:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 1003048:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
 100304a:	4805      	ldr	r0, [pc, #20]	; (1003060 <nrfx_clock_init+0x40>)
    return err_code;
 100304c:	e7fc      	b.n	1003048 <nrfx_clock_init+0x28>
 100304e:	bf00      	nop
 1003050:	0100525d 	.word	0x0100525d
 1003054:	010046c0 	.word	0x010046c0
 1003058:	21000144 	.word	0x21000144
 100305c:	0bad0000 	.word	0x0bad0000
 1003060:	0bad000c 	.word	0x0bad000c

01003064 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
 1003064:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 1003066:	4b0e      	ldr	r3, [pc, #56]	; (10030a0 <nrfx_clock_enable+0x3c>)
 1003068:	791b      	ldrb	r3, [r3, #4]
 100306a:	b953      	cbnz	r3, 1003082 <nrfx_clock_enable+0x1e>
 100306c:	490d      	ldr	r1, [pc, #52]	; (10030a4 <nrfx_clock_enable+0x40>)
 100306e:	480e      	ldr	r0, [pc, #56]	; (10030a8 <nrfx_clock_enable+0x44>)
 1003070:	f44f 7297 	mov.w	r2, #302	; 0x12e
 1003074:	f000 fe97 	bl	1003da6 <assert_print>
 1003078:	f44f 7197 	mov.w	r1, #302	; 0x12e
 100307c:	4809      	ldr	r0, [pc, #36]	; (10030a4 <nrfx_clock_enable+0x40>)
 100307e:	f000 fe8b 	bl	1003d98 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
 1003082:	2005      	movs	r0, #5
 1003084:	f7fe fbf0 	bl	1001868 <arch_irq_is_enabled>
 1003088:	b910      	cbnz	r0, 1003090 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
 100308a:	2005      	movs	r0, #5
 100308c:	f7fe fbde 	bl	100184c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
 1003090:	2201      	movs	r2, #1
 1003092:	4b06      	ldr	r3, [pc, #24]	; (10030ac <nrfx_clock_enable+0x48>)
 1003094:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
 1003098:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
 100309c:	bd08      	pop	{r3, pc}
 100309e:	bf00      	nop
 10030a0:	21000144 	.word	0x21000144
 10030a4:	0100525d 	.word	0x0100525d
 10030a8:	010046c0 	.word	0x010046c0
 10030ac:	41005000 	.word	0x41005000

010030b0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
 10030b0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 10030b2:	4b29      	ldr	r3, [pc, #164]	; (1003158 <nrfx_clock_start+0xa8>)
 10030b4:	791b      	ldrb	r3, [r3, #4]
 10030b6:	b953      	cbnz	r3, 10030ce <nrfx_clock_start+0x1e>
 10030b8:	4928      	ldr	r1, [pc, #160]	; (100315c <nrfx_clock_start+0xac>)
 10030ba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 10030be:	4828      	ldr	r0, [pc, #160]	; (1003160 <nrfx_clock_start+0xb0>)
 10030c0:	f000 fe71 	bl	1003da6 <assert_print>
 10030c4:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
 10030c8:	4824      	ldr	r0, [pc, #144]	; (100315c <nrfx_clock_start+0xac>)
 10030ca:	f000 fe65 	bl	1003d98 <assert_post_action>
    switch (domain)
 10030ce:	4b25      	ldr	r3, [pc, #148]	; (1003164 <nrfx_clock_start+0xb4>)
 10030d0:	b150      	cbz	r0, 10030e8 <nrfx_clock_start+0x38>
 10030d2:	2801      	cmp	r0, #1
 10030d4:	d036      	beq.n	1003144 <nrfx_clock_start+0x94>
            NRFX_ASSERT(0);
 10030d6:	4921      	ldr	r1, [pc, #132]	; (100315c <nrfx_clock_start+0xac>)
 10030d8:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 10030dc:	4820      	ldr	r0, [pc, #128]	; (1003160 <nrfx_clock_start+0xb0>)
 10030de:	f000 fe62 	bl	1003da6 <assert_print>
 10030e2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 10030e6:	e7ef      	b.n	10030c8 <nrfx_clock_start+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10030e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10030ec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 10030f0:	03c9      	lsls	r1, r1, #15
 10030f2:	d511      	bpl.n	1003118 <nrfx_clock_start+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10030f4:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 10030f8:	2b02      	cmp	r3, #2
 10030fa:	d11c      	bne.n	1003136 <nrfx_clock_start+0x86>
    p_reg->LFCLKSRC = (uint32_t)(source);
 10030fc:	4a19      	ldr	r2, [pc, #100]	; (1003164 <nrfx_clock_start+0xb4>)
 10030fe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1003102:	2300      	movs	r3, #0
 1003104:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 1003108:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
 100310c:	2302      	movs	r3, #2
 100310e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1003112:	2301      	movs	r3, #1
 1003114:	6093      	str	r3, [r2, #8]
}
 1003116:	e00d      	b.n	1003134 <nrfx_clock_start+0x84>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
 1003118:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
 100311c:	07d2      	lsls	r2, r2, #31
 100311e:	d50f      	bpl.n	1003140 <nrfx_clock_start+0x90>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 1003120:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 1003124:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 1003128:	3a01      	subs	r2, #1
 100312a:	2a01      	cmp	r2, #1
 100312c:	d805      	bhi.n	100313a <nrfx_clock_start+0x8a>
    p_reg->INTENSET = mask;
 100312e:	2202      	movs	r2, #2
 1003130:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
 1003134:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 1003136:	2b01      	cmp	r3, #1
 1003138:	d002      	beq.n	1003140 <nrfx_clock_start+0x90>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 100313a:	2000      	movs	r0, #0
 100313c:	f7ff ff00 	bl	1002f40 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
 1003140:	2301      	movs	r3, #1
 1003142:	e7db      	b.n	10030fc <nrfx_clock_start+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1003144:	2200      	movs	r2, #0
 1003146:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100314a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 100314e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1003152:	6018      	str	r0, [r3, #0]
}
 1003154:	e7ee      	b.n	1003134 <nrfx_clock_start+0x84>
 1003156:	bf00      	nop
 1003158:	21000144 	.word	0x21000144
 100315c:	0100525d 	.word	0x0100525d
 1003160:	010046c0 	.word	0x010046c0
 1003164:	41005000 	.word	0x41005000

01003168 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
 1003168:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 100316a:	4b09      	ldr	r3, [pc, #36]	; (1003190 <nrfx_clock_stop+0x28>)
 100316c:	791b      	ldrb	r3, [r3, #4]
 100316e:	b953      	cbnz	r3, 1003186 <nrfx_clock_stop+0x1e>
 1003170:	4908      	ldr	r1, [pc, #32]	; (1003194 <nrfx_clock_stop+0x2c>)
 1003172:	4809      	ldr	r0, [pc, #36]	; (1003198 <nrfx_clock_stop+0x30>)
 1003174:	f240 12ad 	movw	r2, #429	; 0x1ad
 1003178:	f000 fe15 	bl	1003da6 <assert_print>
 100317c:	f240 11ad 	movw	r1, #429	; 0x1ad
 1003180:	4804      	ldr	r0, [pc, #16]	; (1003194 <nrfx_clock_stop+0x2c>)
 1003182:	f000 fe09 	bl	1003d98 <assert_post_action>
    clock_stop(domain);
}
 1003186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
 100318a:	f7ff bed9 	b.w	1002f40 <clock_stop>
 100318e:	bf00      	nop
 1003190:	21000144 	.word	0x21000144
 1003194:	0100525d 	.word	0x0100525d
 1003198:	010046c0 	.word	0x010046c0

0100319c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
 100319c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 100319e:	4b17      	ldr	r3, [pc, #92]	; (10031fc <nrfx_power_clock_irq_handler+0x60>)
 10031a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
 10031a4:	b152      	cbz	r2, 10031bc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10031a6:	2000      	movs	r0, #0
 10031a8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 10031ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
 10031b0:	2201      	movs	r2, #1
 10031b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 10031b6:	4b12      	ldr	r3, [pc, #72]	; (1003200 <nrfx_power_clock_irq_handler+0x64>)
 10031b8:	681b      	ldr	r3, [r3, #0]
 10031ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 10031bc:	4b0f      	ldr	r3, [pc, #60]	; (10031fc <nrfx_power_clock_irq_handler+0x60>)
 10031be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
 10031c2:	b18a      	cbz	r2, 10031e8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10031c4:	2200      	movs	r2, #0
 10031c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 10031ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10031ce:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10031d2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
 10031d6:	f002 0203 	and.w	r2, r2, #3
 10031da:	2a01      	cmp	r2, #1
 10031dc:	f04f 0102 	mov.w	r1, #2
 10031e0:	d103      	bne.n	10031ea <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
 10031e2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10031e6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
 10031e8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
 10031ea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 10031ee:	4b04      	ldr	r3, [pc, #16]	; (1003200 <nrfx_power_clock_irq_handler+0x64>)
 10031f0:	2001      	movs	r0, #1
}
 10031f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 10031f6:	681b      	ldr	r3, [r3, #0]
 10031f8:	4718      	bx	r3
 10031fa:	bf00      	nop
 10031fc:	41005000 	.word	0x41005000
 1003200:	21000144 	.word	0x21000144

01003204 <nvmc_word_write>:
 1003204:	4a04      	ldr	r2, [pc, #16]	; (1003218 <nvmc_word_write+0x14>)
 1003206:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
 100320a:	07db      	lsls	r3, r3, #31
 100320c:	d5fb      	bpl.n	1003206 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
 100320e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 1003210:	f3bf 8f5f 	dmb	sy
    __DMB();
}
 1003214:	4770      	bx	lr
 1003216:	bf00      	nop
 1003218:	41080000 	.word	0x41080000

0100321c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
 100321c:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
 100321e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 1003222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 1003226:	d204      	bcs.n	1003232 <nrfx_nvmc_page_erase+0x16>
    return !(addr % flash_page_size_get());
 1003228:	f3c0 030a 	ubfx	r3, r0, #0, #11
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
 100322c:	b163      	cbz	r3, 1003248 <nrfx_nvmc_page_erase+0x2c>
    {
        return NRFX_ERROR_INVALID_ADDR;
 100322e:	480e      	ldr	r0, [pc, #56]	; (1003268 <nrfx_nvmc_page_erase+0x4c>)
 1003230:	e019      	b.n	1003266 <nrfx_nvmc_page_erase+0x4a>
    NRFX_ASSERT(is_valid_address(addr, false));
 1003232:	490e      	ldr	r1, [pc, #56]	; (100326c <nrfx_nvmc_page_erase+0x50>)
 1003234:	480e      	ldr	r0, [pc, #56]	; (1003270 <nrfx_nvmc_page_erase+0x54>)
 1003236:	f240 1207 	movw	r2, #263	; 0x107
 100323a:	f000 fdb4 	bl	1003da6 <assert_print>
 100323e:	f240 1107 	movw	r1, #263	; 0x107
 1003242:	480a      	ldr	r0, [pc, #40]	; (100326c <nrfx_nvmc_page_erase+0x50>)
 1003244:	f000 fda8 	bl	1003d98 <assert_post_action>
    p_reg->CONFIG = (uint32_t)mode;
 1003248:	2202      	movs	r2, #2
 100324a:	4b0a      	ldr	r3, [pc, #40]	; (1003274 <nrfx_nvmc_page_erase+0x58>)
 100324c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
 1003250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 1003254:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
 1003256:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
 100325a:	07d2      	lsls	r2, r2, #31
 100325c:	d5fb      	bpl.n	1003256 <nrfx_nvmc_page_erase+0x3a>
    p_reg->CONFIG = (uint32_t)mode;
 100325e:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
 1003260:	4805      	ldr	r0, [pc, #20]	; (1003278 <nrfx_nvmc_page_erase+0x5c>)
 1003262:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
 1003266:	bd08      	pop	{r3, pc}
 1003268:	0bad000a 	.word	0x0bad000a
 100326c:	010052d9 	.word	0x010052d9
 1003270:	010046c0 	.word	0x010046c0
 1003274:	41080000 	.word	0x41080000
 1003278:	0bad0000 	.word	0x0bad0000

0100327c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
 100327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100327e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
 1003280:	2101      	movs	r1, #1
{
 1003282:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
 1003284:	f000 ff97 	bl	10041b6 <is_valid_address>
 1003288:	b950      	cbnz	r0, 10032a0 <nrfx_nvmc_word_write+0x24>
 100328a:	4910      	ldr	r1, [pc, #64]	; (10032cc <nrfx_nvmc_word_write+0x50>)
 100328c:	f240 1295 	movw	r2, #405	; 0x195
 1003290:	480f      	ldr	r0, [pc, #60]	; (10032d0 <nrfx_nvmc_word_write+0x54>)
 1003292:	f000 fd88 	bl	1003da6 <assert_print>
 1003296:	f240 1195 	movw	r1, #405	; 0x195
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
 100329a:	480c      	ldr	r0, [pc, #48]	; (10032cc <nrfx_nvmc_word_write+0x50>)
 100329c:	f000 fd7c 	bl	1003d98 <assert_post_action>
 10032a0:	f014 0703 	ands.w	r7, r4, #3
 10032a4:	d008      	beq.n	10032b8 <nrfx_nvmc_word_write+0x3c>
 10032a6:	4909      	ldr	r1, [pc, #36]	; (10032cc <nrfx_nvmc_word_write+0x50>)
 10032a8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 10032ac:	4808      	ldr	r0, [pc, #32]	; (10032d0 <nrfx_nvmc_word_write+0x54>)
 10032ae:	f000 fd7a 	bl	1003da6 <assert_print>
 10032b2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 10032b6:	e7f0      	b.n	100329a <nrfx_nvmc_word_write+0x1e>
 10032b8:	4e06      	ldr	r6, [pc, #24]	; (10032d4 <nrfx_nvmc_word_write+0x58>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
 10032ba:	4620      	mov	r0, r4
 10032bc:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
 10032c0:	4629      	mov	r1, r5
 10032c2:	f7ff ff9f 	bl	1003204 <nvmc_word_write>
 10032c6:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
 10032ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10032cc:	010052d9 	.word	0x010052d9
 10032d0:	010046c0 	.word	0x010046c0
 10032d4:	41080000 	.word	0x41080000

010032d8 <nrfx_nvmc_otp_halfword_read>:
    nvmc_readonly_mode_set();
}

uint16_t nrfx_nvmc_otp_halfword_read(uint32_t addr)
{
    NRFX_ASSERT(is_halfword_aligned(addr));
 10032d8:	07c1      	lsls	r1, r0, #31
{
 10032da:	b508      	push	{r3, lr}
    NRFX_ASSERT(is_halfword_aligned(addr));
 10032dc:	d50a      	bpl.n	10032f4 <nrfx_nvmc_otp_halfword_read+0x1c>
 10032de:	4909      	ldr	r1, [pc, #36]	; (1003304 <nrfx_nvmc_otp_halfword_read+0x2c>)
 10032e0:	4809      	ldr	r0, [pc, #36]	; (1003308 <nrfx_nvmc_otp_halfword_read+0x30>)
 10032e2:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 10032e6:	f000 fd5e 	bl	1003da6 <assert_print>
 10032ea:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 10032ee:	4805      	ldr	r0, [pc, #20]	; (1003304 <nrfx_nvmc_otp_halfword_read+0x2c>)
 10032f0:	f000 fd52 	bl	1003d98 <assert_post_action>

    uint32_t aligned_addr = addr & ~(0x03UL);
 10032f4:	f020 0303 	bic.w	r3, r0, #3
    uint32_t val32 = *(const uint32_t *)aligned_addr;
 10032f8:	681b      	ldr	r3, [r3, #0]

    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
 10032fa:	0782      	lsls	r2, r0, #30
 10032fc:	bf0c      	ite	eq
 10032fe:	b298      	uxtheq	r0, r3
 1003300:	0c18      	lsrne	r0, r3, #16
}
 1003302:	bd08      	pop	{r3, pc}
 1003304:	010052d9 	.word	0x010052d9
 1003308:	010046c0 	.word	0x010046c0

0100330c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 100330c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 100330e:	4604      	mov	r4, r0
 1003310:	460d      	mov	r5, r1
	__asm__ volatile(
 1003312:	f04f 0320 	mov.w	r3, #32
 1003316:	f3ef 8611 	mrs	r6, BASEPRI
 100331a:	f383 8812 	msr	BASEPRI_MAX, r3
 100331e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 1003322:	2200      	movs	r2, #0
 1003324:	2804      	cmp	r0, #4
 1003326:	bf96      	itet	ls
 1003328:	4b16      	ldrls	r3, [pc, #88]	; (1003384 <z_fatal_error+0x78>)
 100332a:	4b17      	ldrhi	r3, [pc, #92]	; (1003388 <z_fatal_error+0x7c>)
 100332c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
 1003330:	9200      	str	r2, [sp, #0]
 1003332:	2145      	movs	r1, #69	; 0x45
 1003334:	4602      	mov	r2, r0
 1003336:	4815      	ldr	r0, [pc, #84]	; (100338c <z_fatal_error+0x80>)
 1003338:	f000 fd43 	bl	1003dc2 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 100333c:	b13d      	cbz	r5, 100334e <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 100333e:	69eb      	ldr	r3, [r5, #28]
 1003340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1003344:	b11b      	cbz	r3, 100334e <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
 1003346:	2145      	movs	r1, #69	; 0x45
 1003348:	4811      	ldr	r0, [pc, #68]	; (1003390 <z_fatal_error+0x84>)
 100334a:	f000 fd3a 	bl	1003dc2 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 100334e:	2200      	movs	r2, #0
 1003350:	2145      	movs	r1, #69	; 0x45
 1003352:	4b10      	ldr	r3, [pc, #64]	; (1003394 <z_fatal_error+0x88>)
 1003354:	4810      	ldr	r0, [pc, #64]	; (1003398 <z_fatal_error+0x8c>)
 1003356:	f000 fd34 	bl	1003dc2 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 100335a:	4629      	mov	r1, r5
 100335c:	4620      	mov	r0, r4
 100335e:	f7ff fa99 	bl	1002894 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
 1003362:	2c04      	cmp	r4, #4
 1003364:	d108      	bne.n	1003378 <z_fatal_error+0x6c>
 1003366:	490d      	ldr	r1, [pc, #52]	; (100339c <z_fatal_error+0x90>)
 1003368:	480d      	ldr	r0, [pc, #52]	; (10033a0 <z_fatal_error+0x94>)
 100336a:	2293      	movs	r2, #147	; 0x93
 100336c:	f000 fd1b 	bl	1003da6 <assert_print>
 1003370:	2193      	movs	r1, #147	; 0x93
 1003372:	480a      	ldr	r0, [pc, #40]	; (100339c <z_fatal_error+0x90>)
 1003374:	f000 fd10 	bl	1003d98 <assert_post_action>
	__asm__ volatile(
 1003378:	f386 8811 	msr	BASEPRI, r6
 100337c:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 1003380:	b002      	add	sp, #8
 1003382:	bd70      	pop	{r4, r5, r6, pc}
 1003384:	010044b0 	.word	0x010044b0
 1003388:	01005315 	.word	0x01005315
 100338c:	01005323 	.word	0x01005323
 1003390:	01005350 	.word	0x01005350
 1003394:	01005376 	.word	0x01005376
 1003398:	0100537e 	.word	0x0100537e
 100339c:	0100539b 	.word	0x0100539b
 10033a0:	010046c0 	.word	0x010046c0

010033a4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 10033a4:	4b10      	ldr	r3, [pc, #64]	; (10033e8 <z_sys_init_run_level+0x44>)
{
 10033a6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 10033a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 10033ac:	3001      	adds	r0, #1
 10033ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 10033b2:	42a6      	cmp	r6, r4
 10033b4:	d800      	bhi.n	10033b8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 10033b6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
 10033b8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 10033bc:	b18d      	cbz	r5, 10033e2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
 10033be:	4628      	mov	r0, r5
 10033c0:	4798      	blx	r3
			if (rc != 0) {
 10033c2:	b138      	cbz	r0, 10033d4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 10033c4:	2800      	cmp	r0, #0
 10033c6:	bfb8      	it	lt
 10033c8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 10033ca:	28ff      	cmp	r0, #255	; 0xff
 10033cc:	bfa8      	it	ge
 10033ce:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 10033d0:	68eb      	ldr	r3, [r5, #12]
 10033d2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 10033d4:	68ea      	ldr	r2, [r5, #12]
 10033d6:	7853      	ldrb	r3, [r2, #1]
 10033d8:	f043 0301 	orr.w	r3, r3, #1
 10033dc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 10033de:	3408      	adds	r4, #8
 10033e0:	e7e7      	b.n	10033b2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 10033e2:	4798      	blx	r3
 10033e4:	e7fb      	b.n	10033de <z_sys_init_run_level+0x3a>
 10033e6:	bf00      	nop
 10033e8:	010044c4 	.word	0x010044c4

010033ec <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 10033ec:	2201      	movs	r2, #1
{
 10033ee:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 10033f0:	4b08      	ldr	r3, [pc, #32]	; (1003414 <bg_thread_main+0x28>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 10033f2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 10033f4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 10033f6:	f7ff ffd5 	bl	10033a4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 10033fa:	f000 f91b 	bl	1003634 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 10033fe:	2004      	movs	r0, #4
 1003400:	f7ff ffd0 	bl	10033a4 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 1003404:	f7fd fa4a 	bl	100089c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 1003408:	4a03      	ldr	r2, [pc, #12]	; (1003418 <bg_thread_main+0x2c>)
 100340a:	7b13      	ldrb	r3, [r2, #12]
 100340c:	f023 0301 	bic.w	r3, r3, #1
 1003410:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 1003412:	bd08      	pop	{r3, pc}
 1003414:	21000152 	.word	0x21000152
 1003418:	21000030 	.word	0x21000030

0100341c <z_bss_zero>:
{
 100341c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 100341e:	4803      	ldr	r0, [pc, #12]	; (100342c <z_bss_zero+0x10>)
 1003420:	4a03      	ldr	r2, [pc, #12]	; (1003430 <z_bss_zero+0x14>)
 1003422:	2100      	movs	r1, #0
 1003424:	1a12      	subs	r2, r2, r0
 1003426:	f000 feee 	bl	1004206 <z_early_memset>
}
 100342a:	bd08      	pop	{r3, pc}
 100342c:	21000010 	.word	0x21000010
 1003430:	21000154 	.word	0x21000154

01003434 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 1003434:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 1003436:	2000      	movs	r0, #0
 1003438:	f7ff ffb4 	bl	10033a4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 100343c:	4b16      	ldr	r3, [pc, #88]	; (1003498 <z_cstart+0x64>)
	uint32_t msp =
 100343e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1003442:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1003446:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 100344a:	2500      	movs	r5, #0
 100344c:	23e0      	movs	r3, #224	; 0xe0
 100344e:	4c13      	ldr	r4, [pc, #76]	; (100349c <z_cstart+0x68>)
 1003450:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 1003454:	77e5      	strb	r5, [r4, #31]
 1003456:	7625      	strb	r5, [r4, #24]
 1003458:	7665      	strb	r5, [r4, #25]
 100345a:	76a5      	strb	r5, [r4, #26]
 100345c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 1003460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1003462:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 1003466:	6263      	str	r3, [r4, #36]	; 0x24
 1003468:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 100346c:	f7fe fc9a 	bl	1001da4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 1003470:	f7fe f9a2 	bl	10017b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 1003474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 1003478:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 100347a:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 100347c:	f000 feb7 	bl	10041ee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 1003480:	2001      	movs	r0, #1
 1003482:	f7ff ff8f 	bl	10033a4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 1003486:	2002      	movs	r0, #2
 1003488:	f7ff ff8c 	bl	10033a4 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
 100348c:	462b      	mov	r3, r5
 100348e:	462a      	mov	r2, r5
 1003490:	4629      	mov	r1, r5
 1003492:	4803      	ldr	r0, [pc, #12]	; (10034a0 <z_cstart+0x6c>)
 1003494:	f7fe fa46 	bl	1001924 <z_arm_switch_to_main_no_multithreading>
 1003498:	21000158 	.word	0x21000158
 100349c:	e000ed00 	.word	0xe000ed00
 10034a0:	010033ed 	.word	0x010033ed

010034a4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 10034a4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 10034a6:	4806      	ldr	r0, [pc, #24]	; (10034c0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 10034a8:	4a06      	ldr	r2, [pc, #24]	; (10034c4 <z_data_copy+0x20>)
 10034aa:	4907      	ldr	r1, [pc, #28]	; (10034c8 <z_data_copy+0x24>)
 10034ac:	1a12      	subs	r2, r2, r0
 10034ae:	f000 feac 	bl	100420a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 10034b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 10034b6:	4a05      	ldr	r2, [pc, #20]	; (10034cc <z_data_copy+0x28>)
 10034b8:	4905      	ldr	r1, [pc, #20]	; (10034d0 <z_data_copy+0x2c>)
 10034ba:	4806      	ldr	r0, [pc, #24]	; (10034d4 <z_data_copy+0x30>)
 10034bc:	f000 bea5 	b.w	100420a <z_early_memcpy>
 10034c0:	21000000 	.word	0x21000000
 10034c4:	21000010 	.word	0x21000010
 10034c8:	01005440 	.word	0x01005440
 10034cc:	00000000 	.word	0x00000000
 10034d0:	01005440 	.word	0x01005440
 10034d4:	21000000 	.word	0x21000000

010034d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 10034d8:	4b03      	ldr	r3, [pc, #12]	; (10034e8 <elapsed+0x10>)
 10034da:	681b      	ldr	r3, [r3, #0]
 10034dc:	b90b      	cbnz	r3, 10034e2 <elapsed+0xa>
 10034de:	f000 bdda 	b.w	1004096 <sys_clock_elapsed>
}
 10034e2:	2000      	movs	r0, #0
 10034e4:	4770      	bx	lr
 10034e6:	bf00      	nop
 10034e8:	2100014c 	.word	0x2100014c

010034ec <next_timeout>:

static int32_t next_timeout(void)
{
 10034ec:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 10034ee:	4b0e      	ldr	r3, [pc, #56]	; (1003528 <next_timeout+0x3c>)
 10034f0:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10034f2:	429c      	cmp	r4, r3
 10034f4:	d104      	bne.n	1003500 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 10034f6:	f7ff ffef 	bl	10034d8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 10034fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 10034fe:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 1003500:	f7ff ffea 	bl	10034d8 <elapsed>
	if ((to == NULL) ||
 1003504:	2c00      	cmp	r4, #0
 1003506:	d0f8      	beq.n	10034fa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 1003508:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 100350c:	1a1b      	subs	r3, r3, r0
 100350e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 1003512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 1003516:	f172 0100 	sbcs.w	r1, r2, #0
 100351a:	daee      	bge.n	10034fa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 100351c:	2a00      	cmp	r2, #0
 100351e:	bfac      	ite	ge
 1003520:	4618      	movge	r0, r3
 1003522:	2000      	movlt	r0, #0
	return ret;
 1003524:	e7eb      	b.n	10034fe <next_timeout+0x12>
 1003526:	bf00      	nop
 1003528:	21000004 	.word	0x21000004

0100352c <remove_timeout>:
{
 100352c:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 100352e:	b170      	cbz	r0, 100354e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 1003530:	4b0b      	ldr	r3, [pc, #44]	; (1003560 <remove_timeout+0x34>)
 1003532:	685b      	ldr	r3, [r3, #4]
 1003534:	4298      	cmp	r0, r3
 1003536:	d00a      	beq.n	100354e <remove_timeout+0x22>
 1003538:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 100353a:	b143      	cbz	r3, 100354e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 100353c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 1003540:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 1003544:	1912      	adds	r2, r2, r4
 1003546:	eb41 0105 	adc.w	r1, r1, r5
 100354a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 100354e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 1003552:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1003554:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1003556:	2300      	movs	r3, #0
	node->prev = NULL;
 1003558:	e9c0 3300 	strd	r3, r3, [r0]
}
 100355c:	bd30      	pop	{r4, r5, pc}
 100355e:	bf00      	nop
 1003560:	21000004 	.word	0x21000004

01003564 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 1003564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 1003568:	f04f 0320 	mov.w	r3, #32
 100356c:	f3ef 8c11 	mrs	ip, BASEPRI
 1003570:	f383 8812 	msr	BASEPRI_MAX, r3
 1003574:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1003578:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1003628 <sys_clock_announce+0xc4>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 100357c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 100362c <sys_clock_announce+0xc8>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 1003580:	2400      	movs	r4, #0
	announce_remaining = ticks;
 1003582:	f8c9 0000 	str.w	r0, [r9]
 1003586:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
 100358a:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100358c:	4550      	cmp	r0, sl
 100358e:	bf08      	it	eq
 1003590:	2000      	moveq	r0, #0
		curr_tick += dt;
 1003592:	4f27      	ldr	r7, [pc, #156]	; (1003630 <sys_clock_announce+0xcc>)
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 1003594:	46e0      	mov	r8, ip
 1003596:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 100359a:	f8d9 3000 	ldr.w	r3, [r9]
 100359e:	b380      	cbz	r0, 1003602 <sys_clock_announce+0x9e>
 10035a0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 10035a4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 10035a8:	42b3      	cmp	r3, r6
 10035aa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 10035ae:	da05      	bge.n	10035bc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 10035b0:	1af6      	subs	r6, r6, r3
 10035b2:	eb6c 040e 	sbc.w	r4, ip, lr
 10035b6:	e9c0 6404 	strd	r6, r4, [r0, #16]
 10035ba:	e022      	b.n	1003602 <sys_clock_announce+0x9e>
		curr_tick += dt;
 10035bc:	18b2      	adds	r2, r6, r2
 10035be:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 10035c2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 10035c6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 10035ca:	f7ff ffaf 	bl	100352c <remove_timeout>
	__asm__ volatile(
 10035ce:	f388 8811 	msr	BASEPRI, r8
 10035d2:	f3bf 8f6f 	isb	sy
		t->fn(t);
 10035d6:	6883      	ldr	r3, [r0, #8]
 10035d8:	4798      	blx	r3
	__asm__ volatile(
 10035da:	f04f 0320 	mov.w	r3, #32
 10035de:	f3ef 8811 	mrs	r8, BASEPRI
 10035e2:	f383 8812 	msr	BASEPRI_MAX, r3
 10035e6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 10035ea:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 10035ee:	f8da 0000 	ldr.w	r0, [sl]
 10035f2:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10035f4:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 10035f6:	46c4      	mov	ip, r8
 10035f8:	f8c9 3000 	str.w	r3, [r9]
 10035fc:	d1ca      	bne.n	1003594 <sys_clock_announce+0x30>
		curr_tick += dt;
 10035fe:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 1003602:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 1003604:	189a      	adds	r2, r3, r2
 1003606:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 100360a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 100360e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 1003612:	f7ff ff6b 	bl	10034ec <next_timeout>
 1003616:	4621      	mov	r1, r4
 1003618:	f000 fd3c 	bl	1004094 <sys_clock_set_timeout>
	__asm__ volatile(
 100361c:	f388 8811 	msr	BASEPRI, r8
 1003620:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 1003624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1003628:	21000004 	.word	0x21000004
 100362c:	2100014c 	.word	0x2100014c
 1003630:	210000a8 	.word	0x210000a8

01003634 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 1003634:	4801      	ldr	r0, [pc, #4]	; (100363c <boot_banner+0x8>)
 1003636:	f000 bad1 	b.w	1003bdc <printk>
 100363a:	bf00      	nop
 100363c:	0100540a 	.word	0x0100540a

01003640 <sha256_blocks>:
 1003640:	2a3f      	cmp	r2, #63	; 0x3f
 1003642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003646:	4690      	mov	r8, r2
 1003648:	d952      	bls.n	10036f0 <sha256_blocks+0xb0>
 100364a:	4605      	mov	r5, r0
 100364c:	460c      	mov	r4, r1
 100364e:	f1a2 0640 	sub.w	r6, r2, #64	; 0x40
 1003652:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 1003656:	3640      	adds	r6, #64	; 0x40
 1003658:	4f27      	ldr	r7, [pc, #156]	; (10036f8 <sha256_blocks+0xb8>)
 100365a:	440e      	add	r6, r1
 100365c:	6823      	ldr	r3, [r4, #0]
 100365e:	3440      	adds	r4, #64	; 0x40
 1003660:	ba1b      	rev	r3, r3
 1003662:	642b      	str	r3, [r5, #64]	; 0x40
 1003664:	f854 3c3c 	ldr.w	r3, [r4, #-60]
 1003668:	4639      	mov	r1, r7
 100366a:	ba1b      	rev	r3, r3
 100366c:	646b      	str	r3, [r5, #68]	; 0x44
 100366e:	f854 3c38 	ldr.w	r3, [r4, #-56]
 1003672:	4628      	mov	r0, r5
 1003674:	ba1b      	rev	r3, r3
 1003676:	64ab      	str	r3, [r5, #72]	; 0x48
 1003678:	f854 3c34 	ldr.w	r3, [r4, #-52]
 100367c:	ba1b      	rev	r3, r3
 100367e:	64eb      	str	r3, [r5, #76]	; 0x4c
 1003680:	f854 3c30 	ldr.w	r3, [r4, #-48]
 1003684:	ba1b      	rev	r3, r3
 1003686:	652b      	str	r3, [r5, #80]	; 0x50
 1003688:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 100368c:	ba1b      	rev	r3, r3
 100368e:	656b      	str	r3, [r5, #84]	; 0x54
 1003690:	f854 3c28 	ldr.w	r3, [r4, #-40]
 1003694:	ba1b      	rev	r3, r3
 1003696:	65ab      	str	r3, [r5, #88]	; 0x58
 1003698:	f854 3c24 	ldr.w	r3, [r4, #-36]
 100369c:	ba1b      	rev	r3, r3
 100369e:	65eb      	str	r3, [r5, #92]	; 0x5c
 10036a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 10036a4:	ba1b      	rev	r3, r3
 10036a6:	662b      	str	r3, [r5, #96]	; 0x60
 10036a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 10036ac:	ba1b      	rev	r3, r3
 10036ae:	666b      	str	r3, [r5, #100]	; 0x64
 10036b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
 10036b4:	ba1b      	rev	r3, r3
 10036b6:	66ab      	str	r3, [r5, #104]	; 0x68
 10036b8:	f854 3c14 	ldr.w	r3, [r4, #-20]
 10036bc:	ba1b      	rev	r3, r3
 10036be:	66eb      	str	r3, [r5, #108]	; 0x6c
 10036c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 10036c4:	ba1b      	rev	r3, r3
 10036c6:	672b      	str	r3, [r5, #112]	; 0x70
 10036c8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 10036cc:	ba1b      	rev	r3, r3
 10036ce:	676b      	str	r3, [r5, #116]	; 0x74
 10036d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 10036d4:	ba1b      	rev	r3, r3
 10036d6:	67ab      	str	r3, [r5, #120]	; 0x78
 10036d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 10036dc:	ba1b      	rev	r3, r3
 10036de:	67eb      	str	r3, [r5, #124]	; 0x7c
 10036e0:	f7fc fdf4 	bl	10002cc <ocrypto_sha256_loop>
 10036e4:	42b4      	cmp	r4, r6
 10036e6:	d1b9      	bne.n	100365c <sha256_blocks+0x1c>
 10036e8:	f008 003f 	and.w	r0, r8, #63	; 0x3f
 10036ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10036f0:	4610      	mov	r0, r2
 10036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10036f6:	bf00      	nop
 10036f8:	010044dc 	.word	0x010044dc

010036fc <sha256_blocks.constprop.0>:
 10036fc:	460a      	mov	r2, r1
 10036fe:	b510      	push	{r4, lr}
 1003700:	6814      	ldr	r4, [r2, #0]
 1003702:	491a      	ldr	r1, [pc, #104]	; (100376c <sha256_blocks.constprop.0+0x70>)
 1003704:	ba24      	rev	r4, r4
 1003706:	6404      	str	r4, [r0, #64]	; 0x40
 1003708:	6854      	ldr	r4, [r2, #4]
 100370a:	ba24      	rev	r4, r4
 100370c:	6444      	str	r4, [r0, #68]	; 0x44
 100370e:	6894      	ldr	r4, [r2, #8]
 1003710:	ba24      	rev	r4, r4
 1003712:	6484      	str	r4, [r0, #72]	; 0x48
 1003714:	68d4      	ldr	r4, [r2, #12]
 1003716:	ba24      	rev	r4, r4
 1003718:	64c4      	str	r4, [r0, #76]	; 0x4c
 100371a:	6914      	ldr	r4, [r2, #16]
 100371c:	ba24      	rev	r4, r4
 100371e:	6504      	str	r4, [r0, #80]	; 0x50
 1003720:	6954      	ldr	r4, [r2, #20]
 1003722:	ba24      	rev	r4, r4
 1003724:	6544      	str	r4, [r0, #84]	; 0x54
 1003726:	6994      	ldr	r4, [r2, #24]
 1003728:	ba24      	rev	r4, r4
 100372a:	6584      	str	r4, [r0, #88]	; 0x58
 100372c:	69d4      	ldr	r4, [r2, #28]
 100372e:	ba24      	rev	r4, r4
 1003730:	65c4      	str	r4, [r0, #92]	; 0x5c
 1003732:	6a14      	ldr	r4, [r2, #32]
 1003734:	ba24      	rev	r4, r4
 1003736:	6604      	str	r4, [r0, #96]	; 0x60
 1003738:	6a54      	ldr	r4, [r2, #36]	; 0x24
 100373a:	ba24      	rev	r4, r4
 100373c:	6644      	str	r4, [r0, #100]	; 0x64
 100373e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 1003740:	ba24      	rev	r4, r4
 1003742:	6684      	str	r4, [r0, #104]	; 0x68
 1003744:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 1003746:	ba24      	rev	r4, r4
 1003748:	66c4      	str	r4, [r0, #108]	; 0x6c
 100374a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 100374c:	ba24      	rev	r4, r4
 100374e:	6704      	str	r4, [r0, #112]	; 0x70
 1003750:	6b54      	ldr	r4, [r2, #52]	; 0x34
 1003752:	ba24      	rev	r4, r4
 1003754:	6744      	str	r4, [r0, #116]	; 0x74
 1003756:	6b94      	ldr	r4, [r2, #56]	; 0x38
 1003758:	ba24      	rev	r4, r4
 100375a:	6784      	str	r4, [r0, #120]	; 0x78
 100375c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 100375e:	ba12      	rev	r2, r2
 1003760:	67c2      	str	r2, [r0, #124]	; 0x7c
 1003762:	f7fc fdb3 	bl	10002cc <ocrypto_sha256_loop>
 1003766:	2000      	movs	r0, #0
 1003768:	bd10      	pop	{r4, pc}
 100376a:	bf00      	nop
 100376c:	010044dc 	.word	0x010044dc

01003770 <ocrypto_sha256>:
 1003770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003774:	2700      	movs	r7, #0
 1003776:	4cb5      	ldr	r4, [pc, #724]	; (1003a4c <ocrypto_sha256+0x2dc>)
 1003778:	4bb5      	ldr	r3, [pc, #724]	; (1003a50 <ocrypto_sha256+0x2e0>)
 100377a:	b0b2      	sub	sp, #200	; 0xc8
 100377c:	e9cd 4300 	strd	r4, r3, [sp]
 1003780:	4bb4      	ldr	r3, [pc, #720]	; (1003a54 <ocrypto_sha256+0x2e4>)
 1003782:	4eb5      	ldr	r6, [pc, #724]	; (1003a58 <ocrypto_sha256+0x2e8>)
 1003784:	9302      	str	r3, [sp, #8]
 1003786:	4bb5      	ldr	r3, [pc, #724]	; (1003a5c <ocrypto_sha256+0x2ec>)
 1003788:	4614      	mov	r4, r2
 100378a:	e9cd 6303 	strd	r6, r3, [sp, #12]
 100378e:	4bb4      	ldr	r3, [pc, #720]	; (1003a60 <ocrypto_sha256+0x2f0>)
 1003790:	4605      	mov	r5, r0
 1003792:	9305      	str	r3, [sp, #20]
 1003794:	4bb3      	ldr	r3, [pc, #716]	; (1003a64 <ocrypto_sha256+0x2f4>)
 1003796:	9730      	str	r7, [sp, #192]	; 0xc0
 1003798:	9306      	str	r3, [sp, #24]
 100379a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 100379e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 10037a2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 10037a6:	9231      	str	r2, [sp, #196]	; 0xc4
 10037a8:	9307      	str	r3, [sp, #28]
 10037aa:	2a00      	cmp	r2, #0
 10037ac:	f040 8084 	bne.w	10038b8 <ocrypto_sha256+0x148>
 10037b0:	2280      	movs	r2, #128	; 0x80
 10037b2:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 10037b6:	2301      	movs	r3, #1
 10037b8:	466e      	mov	r6, sp
 10037ba:	eb0d 0702 	add.w	r7, sp, r2
 10037be:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 10037c2:	2000      	movs	r0, #0
 10037c4:	ea4f 029c 	mov.w	r2, ip, lsr #2
 10037c8:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 10037cc:	2a01      	cmp	r2, #1
 10037ce:	eb06 010e 	add.w	r1, r6, lr
 10037d2:	f846 000e 	str.w	r0, [r6, lr]
 10037d6:	d024      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037d8:	2a02      	cmp	r2, #2
 10037da:	6048      	str	r0, [r1, #4]
 10037dc:	d021      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037de:	2a03      	cmp	r2, #3
 10037e0:	6088      	str	r0, [r1, #8]
 10037e2:	d01e      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037e4:	2a04      	cmp	r2, #4
 10037e6:	60c8      	str	r0, [r1, #12]
 10037e8:	d01b      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037ea:	2a05      	cmp	r2, #5
 10037ec:	6108      	str	r0, [r1, #16]
 10037ee:	d018      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037f0:	2a06      	cmp	r2, #6
 10037f2:	6148      	str	r0, [r1, #20]
 10037f4:	d015      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037f6:	2a07      	cmp	r2, #7
 10037f8:	6188      	str	r0, [r1, #24]
 10037fa:	d012      	beq.n	1003822 <ocrypto_sha256+0xb2>
 10037fc:	2a08      	cmp	r2, #8
 10037fe:	61c8      	str	r0, [r1, #28]
 1003800:	d00f      	beq.n	1003822 <ocrypto_sha256+0xb2>
 1003802:	2a09      	cmp	r2, #9
 1003804:	6208      	str	r0, [r1, #32]
 1003806:	d00c      	beq.n	1003822 <ocrypto_sha256+0xb2>
 1003808:	2a0a      	cmp	r2, #10
 100380a:	6248      	str	r0, [r1, #36]	; 0x24
 100380c:	d009      	beq.n	1003822 <ocrypto_sha256+0xb2>
 100380e:	2a0b      	cmp	r2, #11
 1003810:	6288      	str	r0, [r1, #40]	; 0x28
 1003812:	d006      	beq.n	1003822 <ocrypto_sha256+0xb2>
 1003814:	2a0c      	cmp	r2, #12
 1003816:	62c8      	str	r0, [r1, #44]	; 0x2c
 1003818:	d003      	beq.n	1003822 <ocrypto_sha256+0xb2>
 100381a:	2a0e      	cmp	r2, #14
 100381c:	6308      	str	r0, [r1, #48]	; 0x30
 100381e:	bf08      	it	eq
 1003820:	6348      	streq	r0, [r1, #52]	; 0x34
 1003822:	f01c 0f03 	tst.w	ip, #3
 1003826:	d016      	beq.n	1003856 <ocrypto_sha256+0xe6>
 1003828:	f02c 0c03 	bic.w	ip, ip, #3
 100382c:	4463      	add	r3, ip
 100382e:	2100      	movs	r1, #0
 1003830:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 1003834:	446a      	add	r2, sp
 1003836:	2b3a      	cmp	r3, #58	; 0x3a
 1003838:	f802 1c48 	strb.w	r1, [r2, #-72]
 100383c:	d00b      	beq.n	1003856 <ocrypto_sha256+0xe6>
 100383e:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 1003842:	446a      	add	r2, sp
 1003844:	2b39      	cmp	r3, #57	; 0x39
 1003846:	f802 1c48 	strb.w	r1, [r2, #-72]
 100384a:	d004      	beq.n	1003856 <ocrypto_sha256+0xe6>
 100384c:	33ca      	adds	r3, #202	; 0xca
 100384e:	eb0d 0203 	add.w	r2, sp, r3
 1003852:	f802 1c48 	strb.w	r1, [r2, #-72]
 1003856:	2300      	movs	r3, #0
 1003858:	0f62      	lsrs	r2, r4, #29
 100385a:	f362 0307 	bfi	r3, r2, #0, #8
 100385e:	0d62      	lsrs	r2, r4, #21
 1003860:	f362 230f 	bfi	r3, r2, #8, #8
 1003864:	0b62      	lsrs	r2, r4, #13
 1003866:	f362 4317 	bfi	r3, r2, #16, #8
 100386a:	0962      	lsrs	r2, r4, #5
 100386c:	4639      	mov	r1, r7
 100386e:	f362 631f 	bfi	r3, r2, #24, #8
 1003872:	4630      	mov	r0, r6
 1003874:	00e4      	lsls	r4, r4, #3
 1003876:	f8cd 30bb 	str.w	r3, [sp, #187]	; 0xbb
 100387a:	f88d 40bf 	strb.w	r4, [sp, #191]	; 0xbf
 100387e:	f7ff ff3d 	bl	10036fc <sha256_blocks.constprop.0>
 1003882:	e9dd 0100 	ldrd	r0, r1, [sp]
 1003886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100388a:	ba06      	rev	r6, r0
 100388c:	ba14      	rev	r4, r2
 100388e:	ba18      	rev	r0, r3
 1003890:	ba09      	rev	r1, r1
 1003892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 1003896:	ba12      	rev	r2, r2
 1003898:	6069      	str	r1, [r5, #4]
 100389a:	612a      	str	r2, [r5, #16]
 100389c:	ba19      	rev	r1, r3
 100389e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 10038a2:	ba12      	rev	r2, r2
 10038a4:	ba1b      	rev	r3, r3
 10038a6:	602e      	str	r6, [r5, #0]
 10038a8:	60ac      	str	r4, [r5, #8]
 10038aa:	60e8      	str	r0, [r5, #12]
 10038ac:	6169      	str	r1, [r5, #20]
 10038ae:	61aa      	str	r2, [r5, #24]
 10038b0:	61eb      	str	r3, [r5, #28]
 10038b2:	b032      	add	sp, #200	; 0xc8
 10038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10038b8:	466e      	mov	r6, sp
 10038ba:	4630      	mov	r0, r6
 10038bc:	4688      	mov	r8, r1
 10038be:	f7ff febf 	bl	1003640 <sha256_blocks>
 10038c2:	1a24      	subs	r4, r4, r0
 10038c4:	eb08 0304 	add.w	r3, r8, r4
 10038c8:	2800      	cmp	r0, #0
 10038ca:	f000 80f5 	beq.w	1003ab8 <ocrypto_sha256+0x348>
 10038ce:	1e42      	subs	r2, r0, #1
 10038d0:	2a02      	cmp	r2, #2
 10038d2:	d953      	bls.n	100397c <ocrypto_sha256+0x20c>
 10038d4:	f858 2004 	ldr.w	r2, [r8, r4]
 10038d8:	9220      	str	r2, [sp, #128]	; 0x80
 10038da:	0882      	lsrs	r2, r0, #2
 10038dc:	2a01      	cmp	r2, #1
 10038de:	f000 80e6 	beq.w	1003aae <ocrypto_sha256+0x33e>
 10038e2:	6859      	ldr	r1, [r3, #4]
 10038e4:	2a02      	cmp	r2, #2
 10038e6:	9121      	str	r1, [sp, #132]	; 0x84
 10038e8:	f000 80be 	beq.w	1003a68 <ocrypto_sha256+0x2f8>
 10038ec:	6899      	ldr	r1, [r3, #8]
 10038ee:	2a03      	cmp	r2, #3
 10038f0:	9122      	str	r1, [sp, #136]	; 0x88
 10038f2:	f000 80e7 	beq.w	1003ac4 <ocrypto_sha256+0x354>
 10038f6:	68d9      	ldr	r1, [r3, #12]
 10038f8:	2a04      	cmp	r2, #4
 10038fa:	9123      	str	r1, [sp, #140]	; 0x8c
 10038fc:	f000 80e7 	beq.w	1003ace <ocrypto_sha256+0x35e>
 1003900:	6919      	ldr	r1, [r3, #16]
 1003902:	2a05      	cmp	r2, #5
 1003904:	9124      	str	r1, [sp, #144]	; 0x90
 1003906:	f000 80e7 	beq.w	1003ad8 <ocrypto_sha256+0x368>
 100390a:	6959      	ldr	r1, [r3, #20]
 100390c:	2a06      	cmp	r2, #6
 100390e:	9125      	str	r1, [sp, #148]	; 0x94
 1003910:	f000 80e7 	beq.w	1003ae2 <ocrypto_sha256+0x372>
 1003914:	6999      	ldr	r1, [r3, #24]
 1003916:	2a07      	cmp	r2, #7
 1003918:	9126      	str	r1, [sp, #152]	; 0x98
 100391a:	f000 80e7 	beq.w	1003aec <ocrypto_sha256+0x37c>
 100391e:	69d9      	ldr	r1, [r3, #28]
 1003920:	2a08      	cmp	r2, #8
 1003922:	9127      	str	r1, [sp, #156]	; 0x9c
 1003924:	f000 80e7 	beq.w	1003af6 <ocrypto_sha256+0x386>
 1003928:	6a19      	ldr	r1, [r3, #32]
 100392a:	2a09      	cmp	r2, #9
 100392c:	9128      	str	r1, [sp, #160]	; 0xa0
 100392e:	f000 80ed 	beq.w	1003b0c <ocrypto_sha256+0x39c>
 1003932:	6a59      	ldr	r1, [r3, #36]	; 0x24
 1003934:	2a0a      	cmp	r2, #10
 1003936:	9129      	str	r1, [sp, #164]	; 0xa4
 1003938:	f000 80b1 	beq.w	1003a9e <ocrypto_sha256+0x32e>
 100393c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 100393e:	2a0b      	cmp	r2, #11
 1003940:	912a      	str	r1, [sp, #168]	; 0xa8
 1003942:	f000 80f4 	beq.w	1003b2e <ocrypto_sha256+0x3be>
 1003946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 1003948:	2a0c      	cmp	r2, #12
 100394a:	912b      	str	r1, [sp, #172]	; 0xac
 100394c:	f000 8103 	beq.w	1003b56 <ocrypto_sha256+0x3e6>
 1003950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 1003952:	2a0d      	cmp	r2, #13
 1003954:	912c      	str	r1, [sp, #176]	; 0xb0
 1003956:	f000 8109 	beq.w	1003b6c <ocrypto_sha256+0x3fc>
 100395a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 100395c:	2a0e      	cmp	r2, #14
 100395e:	912d      	str	r1, [sp, #180]	; 0xb4
 1003960:	d006      	beq.n	1003970 <ocrypto_sha256+0x200>
 1003962:	2a0f      	cmp	r2, #15
 1003964:	6b99      	ldr	r1, [r3, #56]	; 0x38
 1003966:	bf18      	it	ne
 1003968:	6bda      	ldrne	r2, [r3, #60]	; 0x3c
 100396a:	912e      	str	r1, [sp, #184]	; 0xb8
 100396c:	bf18      	it	ne
 100396e:	922f      	strne	r2, [sp, #188]	; 0xbc
 1003970:	f020 0703 	bic.w	r7, r0, #3
 1003974:	0782      	lsls	r2, r0, #30
 1003976:	443b      	add	r3, r7
 1003978:	f000 80de 	beq.w	1003b38 <ocrypto_sha256+0x3c8>
 100397c:	7819      	ldrb	r1, [r3, #0]
 100397e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 1003982:	446a      	add	r2, sp
 1003984:	f802 1c48 	strb.w	r1, [r2, #-72]
 1003988:	1c7a      	adds	r2, r7, #1
 100398a:	4290      	cmp	r0, r2
 100398c:	d90f      	bls.n	10039ae <ocrypto_sha256+0x23e>
 100398e:	1c59      	adds	r1, r3, #1
 1003990:	7809      	ldrb	r1, [r1, #0]
 1003992:	32c8      	adds	r2, #200	; 0xc8
 1003994:	3702      	adds	r7, #2
 1003996:	446a      	add	r2, sp
 1003998:	42b8      	cmp	r0, r7
 100399a:	f802 1c48 	strb.w	r1, [r2, #-72]
 100399e:	d906      	bls.n	10039ae <ocrypto_sha256+0x23e>
 10039a0:	789b      	ldrb	r3, [r3, #2]
 10039a2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 10039a6:	eb0d 0702 	add.w	r7, sp, r2
 10039aa:	f807 3c48 	strb.w	r3, [r7, #-72]
 10039ae:	2180      	movs	r1, #128	; 0x80
 10039b0:	1c43      	adds	r3, r0, #1
 10039b2:	f100 02c8 	add.w	r2, r0, #200	; 0xc8
 10039b6:	446a      	add	r2, sp
 10039b8:	2b38      	cmp	r3, #56	; 0x38
 10039ba:	9030      	str	r0, [sp, #192]	; 0xc0
 10039bc:	f802 1c48 	strb.w	r1, [r2, #-72]
 10039c0:	d96a      	bls.n	1003a98 <ocrypto_sha256+0x328>
 10039c2:	2b3f      	cmp	r3, #63	; 0x3f
 10039c4:	d82c      	bhi.n	1003a20 <ocrypto_sha256+0x2b0>
 10039c6:	2200      	movs	r2, #0
 10039c8:	33c8      	adds	r3, #200	; 0xc8
 10039ca:	446b      	add	r3, sp
 10039cc:	283e      	cmp	r0, #62	; 0x3e
 10039ce:	f803 2c48 	strb.w	r2, [r3, #-72]
 10039d2:	d025      	beq.n	1003a20 <ocrypto_sha256+0x2b0>
 10039d4:	f100 03ca 	add.w	r3, r0, #202	; 0xca
 10039d8:	eb0d 0103 	add.w	r1, sp, r3
 10039dc:	283d      	cmp	r0, #61	; 0x3d
 10039de:	f801 2c48 	strb.w	r2, [r1, #-72]
 10039e2:	d01d      	beq.n	1003a20 <ocrypto_sha256+0x2b0>
 10039e4:	f100 03cb 	add.w	r3, r0, #203	; 0xcb
 10039e8:	446b      	add	r3, sp
 10039ea:	283c      	cmp	r0, #60	; 0x3c
 10039ec:	f803 2c48 	strb.w	r2, [r3, #-72]
 10039f0:	d016      	beq.n	1003a20 <ocrypto_sha256+0x2b0>
 10039f2:	f100 03cc 	add.w	r3, r0, #204	; 0xcc
 10039f6:	446b      	add	r3, sp
 10039f8:	283b      	cmp	r0, #59	; 0x3b
 10039fa:	f803 2c48 	strb.w	r2, [r3, #-72]
 10039fe:	d00f      	beq.n	1003a20 <ocrypto_sha256+0x2b0>
 1003a00:	f100 03cd 	add.w	r3, r0, #205	; 0xcd
 1003a04:	446b      	add	r3, sp
 1003a06:	283a      	cmp	r0, #58	; 0x3a
 1003a08:	f803 2c48 	strb.w	r2, [r3, #-72]
 1003a0c:	d008      	beq.n	1003a20 <ocrypto_sha256+0x2b0>
 1003a0e:	f100 03ce 	add.w	r3, r0, #206	; 0xce
 1003a12:	446b      	add	r3, sp
 1003a14:	2838      	cmp	r0, #56	; 0x38
 1003a16:	f803 2c48 	strb.w	r2, [r3, #-72]
 1003a1a:	d101      	bne.n	1003a20 <ocrypto_sha256+0x2b0>
 1003a1c:	f88d 20bf 	strb.w	r2, [sp, #191]	; 0xbf
 1003a20:	af20      	add	r7, sp, #128	; 0x80
 1003a22:	4639      	mov	r1, r7
 1003a24:	4630      	mov	r0, r6
 1003a26:	f7ff fe69 	bl	10036fc <sha256_blocks.constprop.0>
 1003a2a:	283a      	cmp	r0, #58	; 0x3a
 1003a2c:	4603      	mov	r3, r0
 1003a2e:	d83c      	bhi.n	1003aaa <ocrypto_sha256+0x33a>
 1003a30:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 1003a32:	f1c3 023a 	rsb	r2, r3, #58	; 0x3a
 1003a36:	2a02      	cmp	r2, #2
 1003a38:	f67f aef9 	bls.w	100382e <ocrypto_sha256+0xbe>
 1003a3c:	1c5a      	adds	r2, r3, #1
 1003a3e:	2a3b      	cmp	r2, #59	; 0x3b
 1003a40:	f1c3 0c3b 	rsb	ip, r3, #59	; 0x3b
 1003a44:	bf88      	it	hi
 1003a46:	f04f 0c01 	movhi.w	ip, #1
 1003a4a:	e6ba      	b.n	10037c2 <ocrypto_sha256+0x52>
 1003a4c:	6a09e667 	.word	0x6a09e667
 1003a50:	bb67ae85 	.word	0xbb67ae85
 1003a54:	3c6ef372 	.word	0x3c6ef372
 1003a58:	a54ff53a 	.word	0xa54ff53a
 1003a5c:	510e527f 	.word	0x510e527f
 1003a60:	9b05688c 	.word	0x9b05688c
 1003a64:	1f83d9ab 	.word	0x1f83d9ab
 1003a68:	2808      	cmp	r0, #8
 1003a6a:	d054      	beq.n	1003b16 <ocrypto_sha256+0x3a6>
 1003a6c:	2708      	movs	r7, #8
 1003a6e:	443b      	add	r3, r7
 1003a70:	4619      	mov	r1, r3
 1003a72:	1c7a      	adds	r2, r7, #1
 1003a74:	f811 cb01 	ldrb.w	ip, [r1], #1
 1003a78:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 1003a7c:	446c      	add	r4, sp
 1003a7e:	4290      	cmp	r0, r2
 1003a80:	f804 cc48 	strb.w	ip, [r4, #-72]
 1003a84:	d884      	bhi.n	1003990 <ocrypto_sha256+0x220>
 1003a86:	2180      	movs	r1, #128	; 0x80
 1003a88:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
 1003a8c:	eb0d 0203 	add.w	r2, sp, r3
 1003a90:	9030      	str	r0, [sp, #192]	; 0xc0
 1003a92:	1c43      	adds	r3, r0, #1
 1003a94:	f802 1c48 	strb.w	r1, [r2, #-72]
 1003a98:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 1003a9a:	af20      	add	r7, sp, #128	; 0x80
 1003a9c:	e7c9      	b.n	1003a32 <ocrypto_sha256+0x2c2>
 1003a9e:	2828      	cmp	r0, #40	; 0x28
 1003aa0:	f000 8088 	beq.w	1003bb4 <ocrypto_sha256+0x444>
 1003aa4:	2728      	movs	r7, #40	; 0x28
 1003aa6:	443b      	add	r3, r7
 1003aa8:	e7e2      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003aaa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 1003aac:	e6d3      	b.n	1003856 <ocrypto_sha256+0xe6>
 1003aae:	2804      	cmp	r0, #4
 1003ab0:	d026      	beq.n	1003b00 <ocrypto_sha256+0x390>
 1003ab2:	2704      	movs	r7, #4
 1003ab4:	443b      	add	r3, r7
 1003ab6:	e7db      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003ab8:	2280      	movs	r2, #128	; 0x80
 1003aba:	2301      	movs	r3, #1
 1003abc:	9030      	str	r0, [sp, #192]	; 0xc0
 1003abe:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 1003ac2:	e7e9      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003ac4:	280c      	cmp	r0, #12
 1003ac6:	d02c      	beq.n	1003b22 <ocrypto_sha256+0x3b2>
 1003ac8:	270c      	movs	r7, #12
 1003aca:	443b      	add	r3, r7
 1003acc:	e7d0      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003ace:	2810      	cmp	r0, #16
 1003ad0:	d03b      	beq.n	1003b4a <ocrypto_sha256+0x3da>
 1003ad2:	2710      	movs	r7, #16
 1003ad4:	443b      	add	r3, r7
 1003ad6:	e7cb      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003ad8:	2814      	cmp	r0, #20
 1003ada:	d041      	beq.n	1003b60 <ocrypto_sha256+0x3f0>
 1003adc:	2714      	movs	r7, #20
 1003ade:	443b      	add	r3, r7
 1003ae0:	e7c6      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003ae2:	2818      	cmp	r0, #24
 1003ae4:	d047      	beq.n	1003b76 <ocrypto_sha256+0x406>
 1003ae6:	2718      	movs	r7, #24
 1003ae8:	443b      	add	r3, r7
 1003aea:	e7c1      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003aec:	281c      	cmp	r0, #28
 1003aee:	d049      	beq.n	1003b84 <ocrypto_sha256+0x414>
 1003af0:	271c      	movs	r7, #28
 1003af2:	443b      	add	r3, r7
 1003af4:	e7bc      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003af6:	2820      	cmp	r0, #32
 1003af8:	d050      	beq.n	1003b9c <ocrypto_sha256+0x42c>
 1003afa:	2720      	movs	r7, #32
 1003afc:	443b      	add	r3, r7
 1003afe:	e7b7      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003b00:	2280      	movs	r2, #128	; 0x80
 1003b02:	2305      	movs	r3, #5
 1003b04:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b06:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
 1003b0a:	e7c5      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b0c:	2824      	cmp	r0, #36	; 0x24
 1003b0e:	d03f      	beq.n	1003b90 <ocrypto_sha256+0x420>
 1003b10:	2724      	movs	r7, #36	; 0x24
 1003b12:	443b      	add	r3, r7
 1003b14:	e7ac      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003b16:	2280      	movs	r2, #128	; 0x80
 1003b18:	2309      	movs	r3, #9
 1003b1a:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b1c:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 1003b20:	e7ba      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b22:	2280      	movs	r2, #128	; 0x80
 1003b24:	230d      	movs	r3, #13
 1003b26:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b28:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 1003b2c:	e7b4      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b2e:	282c      	cmp	r0, #44	; 0x2c
 1003b30:	d03a      	beq.n	1003ba8 <ocrypto_sha256+0x438>
 1003b32:	272c      	movs	r7, #44	; 0x2c
 1003b34:	443b      	add	r3, r7
 1003b36:	e79b      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003b38:	2180      	movs	r1, #128	; 0x80
 1003b3a:	f100 02c8 	add.w	r2, r0, #200	; 0xc8
 1003b3e:	446a      	add	r2, sp
 1003b40:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b42:	1c43      	adds	r3, r0, #1
 1003b44:	f802 1c48 	strb.w	r1, [r2, #-72]
 1003b48:	e73b      	b.n	10039c2 <ocrypto_sha256+0x252>
 1003b4a:	2280      	movs	r2, #128	; 0x80
 1003b4c:	2311      	movs	r3, #17
 1003b4e:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b50:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 1003b54:	e7a0      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b56:	2830      	cmp	r0, #48	; 0x30
 1003b58:	d032      	beq.n	1003bc0 <ocrypto_sha256+0x450>
 1003b5a:	2730      	movs	r7, #48	; 0x30
 1003b5c:	443b      	add	r3, r7
 1003b5e:	e787      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003b60:	2280      	movs	r2, #128	; 0x80
 1003b62:	2315      	movs	r3, #21
 1003b64:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b66:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
 1003b6a:	e795      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b6c:	2834      	cmp	r0, #52	; 0x34
 1003b6e:	d02d      	beq.n	1003bcc <ocrypto_sha256+0x45c>
 1003b70:	2734      	movs	r7, #52	; 0x34
 1003b72:	443b      	add	r3, r7
 1003b74:	e77c      	b.n	1003a70 <ocrypto_sha256+0x300>
 1003b76:	2118      	movs	r1, #24
 1003b78:	2280      	movs	r2, #128	; 0x80
 1003b7a:	2319      	movs	r3, #25
 1003b7c:	9130      	str	r1, [sp, #192]	; 0xc0
 1003b7e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 1003b82:	e789      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b84:	2280      	movs	r2, #128	; 0x80
 1003b86:	231d      	movs	r3, #29
 1003b88:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b8a:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
 1003b8e:	e783      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b90:	2280      	movs	r2, #128	; 0x80
 1003b92:	2325      	movs	r3, #37	; 0x25
 1003b94:	9030      	str	r0, [sp, #192]	; 0xc0
 1003b96:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
 1003b9a:	e77d      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003b9c:	2280      	movs	r2, #128	; 0x80
 1003b9e:	2321      	movs	r3, #33	; 0x21
 1003ba0:	9030      	str	r0, [sp, #192]	; 0xc0
 1003ba2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 1003ba6:	e777      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003ba8:	2280      	movs	r2, #128	; 0x80
 1003baa:	232d      	movs	r3, #45	; 0x2d
 1003bac:	9030      	str	r0, [sp, #192]	; 0xc0
 1003bae:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 1003bb2:	e771      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003bb4:	2280      	movs	r2, #128	; 0x80
 1003bb6:	2329      	movs	r3, #41	; 0x29
 1003bb8:	9030      	str	r0, [sp, #192]	; 0xc0
 1003bba:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 1003bbe:	e76b      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003bc0:	2280      	movs	r2, #128	; 0x80
 1003bc2:	2331      	movs	r3, #49	; 0x31
 1003bc4:	9030      	str	r0, [sp, #192]	; 0xc0
 1003bc6:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 1003bca:	e765      	b.n	1003a98 <ocrypto_sha256+0x328>
 1003bcc:	2280      	movs	r2, #128	; 0x80
 1003bce:	2335      	movs	r3, #53	; 0x35
 1003bd0:	9030      	str	r0, [sp, #192]	; 0xc0
 1003bd2:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
 1003bd6:	e75f      	b.n	1003a98 <ocrypto_sha256+0x328>

01003bd8 <arch_printk_char_out>:
}
 1003bd8:	2000      	movs	r0, #0
 1003bda:	4770      	bx	lr

01003bdc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 1003bdc:	b40f      	push	{r0, r1, r2, r3}
 1003bde:	b507      	push	{r0, r1, r2, lr}
 1003be0:	a904      	add	r1, sp, #16
 1003be2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1003be6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 1003be8:	f7fc fed4 	bl	1000994 <vprintk>

	va_end(ap);
}
 1003bec:	b003      	add	sp, #12
 1003bee:	f85d eb04 	ldr.w	lr, [sp], #4
 1003bf2:	b004      	add	sp, #16
 1003bf4:	4770      	bx	lr

01003bf6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1003bf6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
 1003bf8:	f013 0307 	ands.w	r3, r3, #7
 1003bfc:	d105      	bne.n	1003c0a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 1003bfe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 1003c00:	2b00      	cmp	r3, #0
 1003c02:	bf0c      	ite	eq
 1003c04:	2000      	moveq	r0, #0
 1003c06:	2003      	movne	r0, #3
 1003c08:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 1003c0a:	2b02      	cmp	r3, #2
 1003c0c:	d105      	bne.n	1003c1a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 1003c0e:	8b40      	ldrh	r0, [r0, #26]
 1003c10:	fab0 f080 	clz	r0, r0
 1003c14:	0940      	lsrs	r0, r0, #5
 1003c16:	0080      	lsls	r0, r0, #2
 1003c18:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 1003c1a:	2b01      	cmp	r3, #1
 1003c1c:	d105      	bne.n	1003c2a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 1003c1e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 1003c20:	2b00      	cmp	r3, #0
 1003c22:	bf0c      	ite	eq
 1003c24:	2000      	moveq	r0, #0
 1003c26:	2005      	movne	r0, #5
 1003c28:	4770      	bx	lr
	int evt = EVT_NOP;
 1003c2a:	2000      	movs	r0, #0
}
 1003c2c:	4770      	bx	lr

01003c2e <validate_args>:
{
 1003c2e:	b510      	push	{r4, lr}
 1003c30:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 1003c32:	b100      	cbz	r0, 1003c36 <validate_args+0x8>
 1003c34:	b911      	cbnz	r1, 1003c3c <validate_args+0xe>
		return -EINVAL;
 1003c36:	f06f 0015 	mvn.w	r0, #21
}
 1003c3a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
 1003c3c:	1d08      	adds	r0, r1, #4
 1003c3e:	f000 f83d 	bl	1003cbc <sys_notify_validate>
	if ((rv == 0)
 1003c42:	2800      	cmp	r0, #0
 1003c44:	d1f9      	bne.n	1003c3a <validate_args+0xc>
	    && ((cli->notify.flags
 1003c46:	68a3      	ldr	r3, [r4, #8]
 1003c48:	2b03      	cmp	r3, #3
 1003c4a:	d9f6      	bls.n	1003c3a <validate_args+0xc>
 1003c4c:	e7f3      	b.n	1003c36 <validate_args+0x8>

01003c4e <notify_one>:
{
 1003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003c52:	460d      	mov	r5, r1
 1003c54:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1003c56:	4619      	mov	r1, r3
 1003c58:	1d28      	adds	r0, r5, #4
{
 1003c5a:	4690      	mov	r8, r2
 1003c5c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1003c5e:	f7fd f88d 	bl	1000d7c <sys_notify_finalize>
	if (cb) {
 1003c62:	4604      	mov	r4, r0
 1003c64:	b138      	cbz	r0, 1003c76 <notify_one+0x28>
		cb(mgr, cli, state, res);
 1003c66:	4633      	mov	r3, r6
 1003c68:	4642      	mov	r2, r8
 1003c6a:	4629      	mov	r1, r5
 1003c6c:	4638      	mov	r0, r7
 1003c6e:	46a4      	mov	ip, r4
}
 1003c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 1003c74:	4760      	bx	ip
}
 1003c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01003c7a <transition_complete>:
{
 1003c7a:	b410      	push	{r4}
	__asm__ volatile(
 1003c7c:	f04f 0420 	mov.w	r4, #32
 1003c80:	f3ef 8211 	mrs	r2, BASEPRI
 1003c84:	f384 8812 	msr	BASEPRI_MAX, r4
 1003c88:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
 1003c8c:	6141      	str	r1, [r0, #20]
}
 1003c8e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
 1003c90:	2101      	movs	r1, #1
 1003c92:	f7fc be8d 	b.w	10009b0 <process_event>

01003c96 <onoff_manager_init>:
{
 1003c96:	b538      	push	{r3, r4, r5, lr}
 1003c98:	460c      	mov	r4, r1
	if ((mgr == NULL)
 1003c9a:	4605      	mov	r5, r0
 1003c9c:	b158      	cbz	r0, 1003cb6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 1003c9e:	b151      	cbz	r1, 1003cb6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 1003ca0:	680b      	ldr	r3, [r1, #0]
 1003ca2:	b143      	cbz	r3, 1003cb6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 1003ca4:	684b      	ldr	r3, [r1, #4]
 1003ca6:	b133      	cbz	r3, 1003cb6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1003ca8:	221c      	movs	r2, #28
 1003caa:	2100      	movs	r1, #0
 1003cac:	f000 f91a 	bl	1003ee4 <memset>
	return 0;
 1003cb0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1003cb2:	612c      	str	r4, [r5, #16]
}
 1003cb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 1003cb6:	f06f 0015 	mvn.w	r0, #21
 1003cba:	e7fb      	b.n	1003cb4 <onoff_manager_init+0x1e>

01003cbc <sys_notify_validate>:
	if (notify == NULL) {
 1003cbc:	4603      	mov	r3, r0
 1003cbe:	b158      	cbz	r0, 1003cd8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 1003cc0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 1003cc2:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
 1003cc6:	2a01      	cmp	r2, #1
 1003cc8:	d003      	beq.n	1003cd2 <sys_notify_validate+0x16>
 1003cca:	2a03      	cmp	r2, #3
 1003ccc:	d104      	bne.n	1003cd8 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
 1003cce:	6802      	ldr	r2, [r0, #0]
 1003cd0:	b112      	cbz	r2, 1003cd8 <sys_notify_validate+0x1c>
		notify->result = 0;
 1003cd2:	2000      	movs	r0, #0
 1003cd4:	6098      	str	r0, [r3, #8]
 1003cd6:	4770      	bx	lr
 1003cd8:	f06f 0015 	mvn.w	r0, #21
}
 1003cdc:	4770      	bx	lr

01003cde <encode_uint>:
{
 1003cde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1003ce2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 1003ce4:	78d3      	ldrb	r3, [r2, #3]
{
 1003ce6:	4680      	mov	r8, r0
	switch (specifier) {
 1003ce8:	2b6f      	cmp	r3, #111	; 0x6f
{
 1003cea:	460f      	mov	r7, r1
 1003cec:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 1003cee:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 1003cf2:	d029      	beq.n	1003d48 <encode_uint+0x6a>
 1003cf4:	d824      	bhi.n	1003d40 <encode_uint+0x62>
		return 10;
 1003cf6:	2b58      	cmp	r3, #88	; 0x58
 1003cf8:	bf0c      	ite	eq
 1003cfa:	2610      	moveq	r6, #16
 1003cfc:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 1003cfe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 1003d02:	4632      	mov	r2, r6
 1003d04:	2300      	movs	r3, #0
 1003d06:	4640      	mov	r0, r8
 1003d08:	4639      	mov	r1, r7
 1003d0a:	f7fc fa97 	bl	100023c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1003d0e:	2a09      	cmp	r2, #9
 1003d10:	b2d4      	uxtb	r4, r2
 1003d12:	d81e      	bhi.n	1003d52 <encode_uint+0x74>
 1003d14:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 1003d16:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1003d18:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 1003d1a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1003d1e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 1003d22:	d301      	bcc.n	1003d28 <encode_uint+0x4a>
 1003d24:	45d1      	cmp	r9, sl
 1003d26:	d811      	bhi.n	1003d4c <encode_uint+0x6e>
	if (conv->flag_hash) {
 1003d28:	782b      	ldrb	r3, [r5, #0]
 1003d2a:	069b      	lsls	r3, r3, #26
 1003d2c:	d505      	bpl.n	1003d3a <encode_uint+0x5c>
		if (radix == 8) {
 1003d2e:	2e08      	cmp	r6, #8
 1003d30:	d115      	bne.n	1003d5e <encode_uint+0x80>
			conv->altform_0 = true;
 1003d32:	78ab      	ldrb	r3, [r5, #2]
 1003d34:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 1003d38:	70ab      	strb	r3, [r5, #2]
}
 1003d3a:	4648      	mov	r0, r9
 1003d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 1003d40:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 1003d44:	2b70      	cmp	r3, #112	; 0x70
 1003d46:	e7d7      	b.n	1003cf8 <encode_uint+0x1a>
	switch (specifier) {
 1003d48:	2608      	movs	r6, #8
 1003d4a:	e7d8      	b.n	1003cfe <encode_uint+0x20>
		value /= radix;
 1003d4c:	4680      	mov	r8, r0
 1003d4e:	460f      	mov	r7, r1
 1003d50:	e7d7      	b.n	1003d02 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1003d52:	f1bb 0f19 	cmp.w	fp, #25
 1003d56:	bf94      	ite	ls
 1003d58:	3437      	addls	r4, #55	; 0x37
 1003d5a:	3457      	addhi	r4, #87	; 0x57
 1003d5c:	e7db      	b.n	1003d16 <encode_uint+0x38>
		} else if (radix == 16) {
 1003d5e:	2e10      	cmp	r6, #16
 1003d60:	d1eb      	bne.n	1003d3a <encode_uint+0x5c>
			conv->altform_0c = true;
 1003d62:	78ab      	ldrb	r3, [r5, #2]
 1003d64:	f043 0310 	orr.w	r3, r3, #16
 1003d68:	e7e6      	b.n	1003d38 <encode_uint+0x5a>

01003d6a <outs>:
{
 1003d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1003d6e:	4607      	mov	r7, r0
 1003d70:	4688      	mov	r8, r1
 1003d72:	4615      	mov	r5, r2
 1003d74:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1003d76:	4614      	mov	r4, r2
 1003d78:	42b4      	cmp	r4, r6
 1003d7a:	d305      	bcc.n	1003d88 <outs+0x1e>
 1003d7c:	b10e      	cbz	r6, 1003d82 <outs+0x18>
	return (int)count;
 1003d7e:	1b60      	subs	r0, r4, r5
 1003d80:	e008      	b.n	1003d94 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1003d82:	7823      	ldrb	r3, [r4, #0]
 1003d84:	2b00      	cmp	r3, #0
 1003d86:	d0fa      	beq.n	1003d7e <outs+0x14>
		int rc = out((int)*sp++, ctx);
 1003d88:	4641      	mov	r1, r8
 1003d8a:	f814 0b01 	ldrb.w	r0, [r4], #1
 1003d8e:	47b8      	blx	r7
		if (rc < 0) {
 1003d90:	2800      	cmp	r0, #0
 1003d92:	daf1      	bge.n	1003d78 <outs+0xe>
}
 1003d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01003d98 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
 1003d98:	4040      	eors	r0, r0
 1003d9a:	f380 8811 	msr	BASEPRI, r0
 1003d9e:	f04f 0004 	mov.w	r0, #4
 1003da2:	df02      	svc	2
}
 1003da4:	4770      	bx	lr

01003da6 <assert_print>:

void assert_print(const char *fmt, ...)
{
 1003da6:	b40f      	push	{r0, r1, r2, r3}
 1003da8:	b507      	push	{r0, r1, r2, lr}
 1003daa:	a904      	add	r1, sp, #16
 1003dac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1003db0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 1003db2:	f7fc fdef 	bl	1000994 <vprintk>

	va_end(ap);
}
 1003db6:	b003      	add	sp, #12
 1003db8:	f85d eb04 	ldr.w	lr, [sp], #4
 1003dbc:	b004      	add	sp, #16
 1003dbe:	4770      	bx	lr

01003dc0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 1003dc0:	4770      	bx	lr

01003dc2 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
 1003dc2:	b40f      	push	{r0, r1, r2, r3}
 1003dc4:	b507      	push	{r0, r1, r2, lr}
 1003dc6:	a904      	add	r1, sp, #16
 1003dc8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1003dcc:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 1003dce:	f7fc fde1 	bl	1000994 <vprintk>
	va_end(ap);
}
 1003dd2:	b003      	add	sp, #12
 1003dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 1003dd8:	b004      	add	sp, #16
 1003dda:	4770      	bx	lr

01003ddc <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
 1003ddc:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
 1003dde:	6883      	ldr	r3, [r0, #8]
 1003de0:	68db      	ldr	r3, [r3, #12]
 1003de2:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
 1003de4:	6800      	ldr	r0, [r0, #0]
 1003de6:	bd08      	pop	{r3, pc}

01003de8 <stream_flash_buffered_write>:
{
 1003de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1003dec:	4689      	mov	r9, r1
 1003dee:	4616      	mov	r6, r2
 1003df0:	4698      	mov	r8, r3
	if (!ctx) {
 1003df2:	4604      	mov	r4, r0
 1003df4:	b398      	cbz	r0, 1003e5e <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
 1003df6:	6882      	ldr	r2, [r0, #8]
 1003df8:	6903      	ldr	r3, [r0, #16]
 1003dfa:	4413      	add	r3, r2
 1003dfc:	6982      	ldr	r2, [r0, #24]
 1003dfe:	4433      	add	r3, r6
 1003e00:	4293      	cmp	r3, r2
 1003e02:	d830      	bhi.n	1003e66 <stream_flash_buffered_write+0x7e>
	int processed = 0;
 1003e04:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
 1003e06:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
 1003e0a:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
 1003e0e:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
 1003e10:	45ba      	cmp	sl, r7
 1003e12:	d215      	bcs.n	1003e40 <stream_flash_buffered_write+0x58>
	if (processed < len) {
 1003e14:	42b5      	cmp	r5, r6
 1003e16:	d209      	bcs.n	1003e2c <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
 1003e18:	6823      	ldr	r3, [r4, #0]
 1003e1a:	4652      	mov	r2, sl
 1003e1c:	4418      	add	r0, r3
 1003e1e:	eb09 0105 	add.w	r1, r9, r5
 1003e22:	f000 f854 	bl	1003ece <memcpy>
		ctx->buf_bytes += len - processed;
 1003e26:	68a3      	ldr	r3, [r4, #8]
 1003e28:	4453      	add	r3, sl
 1003e2a:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
 1003e2c:	f1b8 0f00 	cmp.w	r8, #0
 1003e30:	d01c      	beq.n	1003e6c <stream_flash_buffered_write+0x84>
 1003e32:	68a0      	ldr	r0, [r4, #8]
 1003e34:	b1a8      	cbz	r0, 1003e62 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
 1003e36:	4620      	mov	r0, r4
}
 1003e38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
 1003e3c:	f7fd bbfe 	b.w	100163c <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
 1003e40:	6823      	ldr	r3, [r4, #0]
 1003e42:	463a      	mov	r2, r7
 1003e44:	4418      	add	r0, r3
 1003e46:	eb09 0105 	add.w	r1, r9, r5
 1003e4a:	f000 f840 	bl	1003ece <memcpy>
		ctx->buf_bytes = ctx->buf_len;
 1003e4e:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
 1003e50:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
 1003e52:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
 1003e54:	f7fd fbf2 	bl	100163c <flash_sync>
		if (rc != 0) {
 1003e58:	b918      	cbnz	r0, 1003e62 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
 1003e5a:	443d      	add	r5, r7
 1003e5c:	e7d3      	b.n	1003e06 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
 1003e5e:	f06f 000d 	mvn.w	r0, #13
}
 1003e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
 1003e66:	f06f 000b 	mvn.w	r0, #11
 1003e6a:	e7fa      	b.n	1003e62 <stream_flash_buffered_write+0x7a>
 1003e6c:	4640      	mov	r0, r8
 1003e6e:	e7f8      	b.n	1003e62 <stream_flash_buffered_write+0x7a>

01003e70 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 1003e70:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 1003e72:	6800      	ldr	r0, [r0, #0]
 1003e74:	f7fd bcbc 	b.w	10017f0 <z_arm_fatal_error>

01003e78 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 1003e78:	2100      	movs	r1, #0
 1003e7a:	2001      	movs	r0, #1
 1003e7c:	f7fd bcb8 	b.w	10017f0 <z_arm_fatal_error>

01003e80 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 1003e80:	b508      	push	{r3, lr}
	handler();
 1003e82:	f7fd fd25 	bl	10018d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 1003e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 1003e8a:	f7fd bd7d 	b.w	1001988 <z_arm_exc_exit>

01003e8e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 1003e8e:	4603      	mov	r3, r0
	size_t n = 0;
 1003e90:	2000      	movs	r0, #0

	while (*s != '\0') {
 1003e92:	5c1a      	ldrb	r2, [r3, r0]
 1003e94:	b902      	cbnz	r2, 1003e98 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 1003e96:	4770      	bx	lr
		n++;
 1003e98:	3001      	adds	r0, #1
 1003e9a:	e7fa      	b.n	1003e92 <strlen+0x4>

01003e9c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 1003e9c:	4603      	mov	r3, r0
	size_t n = 0;
 1003e9e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 1003ea0:	5c1a      	ldrb	r2, [r3, r0]
 1003ea2:	b10a      	cbz	r2, 1003ea8 <strnlen+0xc>
 1003ea4:	4288      	cmp	r0, r1
 1003ea6:	d100      	bne.n	1003eaa <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 1003ea8:	4770      	bx	lr
		n++;
 1003eaa:	3001      	adds	r0, #1
 1003eac:	e7f8      	b.n	1003ea0 <strnlen+0x4>

01003eae <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 1003eae:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 1003eb0:	b15a      	cbz	r2, 1003eca <memcmp+0x1c>
 1003eb2:	3901      	subs	r1, #1
 1003eb4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 1003eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 1003eba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 1003ebe:	42a0      	cmp	r0, r4
 1003ec0:	d001      	beq.n	1003ec6 <memcmp+0x18>
 1003ec2:	429a      	cmp	r2, r3
 1003ec4:	d0f7      	beq.n	1003eb6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 1003ec6:	1ad0      	subs	r0, r2, r3
}
 1003ec8:	bd10      	pop	{r4, pc}
		return 0;
 1003eca:	4610      	mov	r0, r2
 1003ecc:	e7fc      	b.n	1003ec8 <memcmp+0x1a>

01003ece <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 1003ece:	b510      	push	{r4, lr}
 1003ed0:	1e43      	subs	r3, r0, #1
 1003ed2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 1003ed4:	4291      	cmp	r1, r2
 1003ed6:	d100      	bne.n	1003eda <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 1003ed8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 1003eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 1003ede:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 1003ee2:	e7f7      	b.n	1003ed4 <memcpy+0x6>

01003ee4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 1003ee4:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 1003ee6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 1003ee8:	4402      	add	r2, r0
 1003eea:	4293      	cmp	r3, r2
 1003eec:	d100      	bne.n	1003ef0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 1003eee:	4770      	bx	lr
		*(d_byte++) = c_byte;
 1003ef0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 1003ef4:	e7f9      	b.n	1003eea <memset+0x6>

01003ef6 <set_on_state>:
 1003ef6:	f04f 0320 	mov.w	r3, #32
 1003efa:	f3ef 8211 	mrs	r2, BASEPRI
 1003efe:	f383 8812 	msr	BASEPRI_MAX, r3
 1003f02:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 1003f06:	6803      	ldr	r3, [r0, #0]
 1003f08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1003f0c:	f043 0302 	orr.w	r3, r3, #2
 1003f10:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 1003f12:	f382 8811 	msr	BASEPRI, r2
 1003f16:	f3bf 8f6f 	isb	sy
}
 1003f1a:	4770      	bx	lr

01003f1c <async_start>:
{
 1003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003f1e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
 1003f20:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 1003f22:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 1003f24:	f04f 0520 	mov.w	r5, #32
 1003f28:	f3ef 8611 	mrs	r6, BASEPRI
 1003f2c:	f385 8812 	msr	BASEPRI_MAX, r5
 1003f30:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1003f34:	250c      	movs	r5, #12
 1003f36:	4369      	muls	r1, r5
 1003f38:	440c      	add	r4, r1
 1003f3a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 1003f3c:	f005 0c07 	and.w	ip, r5, #7
 1003f40:	f1bc 0f01 	cmp.w	ip, #1
 1003f44:	d10b      	bne.n	1003f5e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 1003f46:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
 1003f48:	f386 8811 	msr	BASEPRI, r6
 1003f4c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
 1003f50:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
 1003f54:	6843      	ldr	r3, [r0, #4]
 1003f56:	585b      	ldr	r3, [r3, r1]
 1003f58:	4798      	blx	r3
	return 0;
 1003f5a:	2000      	movs	r0, #0
}
 1003f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 1003f5e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
 1003f62:	42af      	cmp	r7, r5
 1003f64:	f386 8811 	msr	BASEPRI, r6
 1003f68:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
 1003f6c:	bf0c      	ite	eq
 1003f6e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
 1003f72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 1003f76:	e7f1      	b.n	1003f5c <async_start+0x40>

01003f78 <api_start>:
{
 1003f78:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 1003f7a:	2480      	movs	r4, #128	; 0x80
 1003f7c:	9400      	str	r4, [sp, #0]
 1003f7e:	f7ff ffcd 	bl	1003f1c <async_start>
}
 1003f82:	b002      	add	sp, #8
 1003f84:	bd10      	pop	{r4, pc}

01003f86 <api_blocking_start>:
}
 1003f86:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1003f8a:	4770      	bx	lr

01003f8c <onoff_started_callback>:
{
 1003f8c:	b410      	push	{r4}
	notify(mgr, 0);
 1003f8e:	241c      	movs	r4, #28
	return &data->mgr[type];
 1003f90:	6900      	ldr	r0, [r0, #16]
 1003f92:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 1003f94:	fb03 0004 	mla	r0, r3, r4, r0
 1003f98:	2100      	movs	r1, #0
}
 1003f9a:	bc10      	pop	{r4}
	notify(mgr, 0);
 1003f9c:	4710      	bx	r2

01003f9e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 1003f9e:	2000      	movs	r0, #0
 1003fa0:	f7ff b886 	b.w	10030b0 <nrfx_clock_start>

01003fa4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 1003fa4:	2000      	movs	r0, #0
 1003fa6:	f7ff b8df 	b.w	1003168 <nrfx_clock_stop>

01003faa <api_stop>:
	return stop(dev, subsys, CTX_API);
 1003faa:	2280      	movs	r2, #128	; 0x80
 1003fac:	f7fd bfd2 	b.w	1001f54 <stop>

01003fb0 <is_regular_addr_valid>:
{
 1003fb0:	b538      	push	{r3, r4, r5, lr}
 1003fb2:	4605      	mov	r5, r0
 1003fb4:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
 1003fb6:	f000 f912 	bl	10041de <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
 1003fba:	2d00      	cmp	r5, #0
 1003fbc:	db07      	blt.n	1003fce <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
 1003fbe:	42a8      	cmp	r0, r5
 1003fc0:	d905      	bls.n	1003fce <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
 1003fc2:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
 1003fc4:	4284      	cmp	r4, r0
 1003fc6:	bf8c      	ite	hi
 1003fc8:	2000      	movhi	r0, #0
 1003fca:	2001      	movls	r0, #1
}
 1003fcc:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
 1003fce:	2000      	movs	r0, #0
 1003fd0:	e7fc      	b.n	1003fcc <is_regular_addr_valid+0x1c>

01003fd2 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
 1003fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1003fd4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
 1003fd6:	2300      	movs	r3, #0
{
 1003fd8:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
 1003fda:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
 1003fdc:	6023      	str	r3, [r4, #0]
	info->index = 0U;
 1003fde:	60a3      	str	r3, [r4, #8]
{
 1003fe0:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
 1003fe2:	6913      	ldr	r3, [r2, #16]
 1003fe4:	4669      	mov	r1, sp
 1003fe6:	aa01      	add	r2, sp, #4
 1003fe8:	4798      	blx	r3

	while (layout_size--) {
 1003fea:	9b01      	ldr	r3, [sp, #4]
 1003fec:	1e5a      	subs	r2, r3, #1
 1003fee:	9201      	str	r2, [sp, #4]
 1003ff0:	b91b      	cbnz	r3, 1003ffa <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
 1003ff2:	f06f 0015 	mvn.w	r0, #21
}
 1003ff6:	b003      	add	sp, #12
 1003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
 1003ffa:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
 1003ffc:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
 1003ffe:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
 1004000:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
 1004002:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
 1004004:	b985      	cbnz	r5, 1004028 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
 1004006:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
 1004008:	f8d0 c000 	ldr.w	ip, [r0]
 100400c:	4563      	cmp	r3, ip
 100400e:	bf28      	it	cs
 1004010:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
 1004012:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
 1004016:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
 1004018:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
 100401a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
 100401c:	6802      	ldr	r2, [r0, #0]
 100401e:	429a      	cmp	r2, r3
 1004020:	d806      	bhi.n	1004030 <flash_get_page_info+0x5e>
		layout++;
 1004022:	3008      	adds	r0, #8
 1004024:	9000      	str	r0, [sp, #0]
 1004026:	e7e0      	b.n	1003fea <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
 1004028:	1a6b      	subs	r3, r5, r1
 100402a:	fbb3 f3f7 	udiv	r3, r3, r7
 100402e:	e7eb      	b.n	1004008 <flash_get_page_info+0x36>
			return 0;
 1004030:	2000      	movs	r0, #0
 1004032:	e7e0      	b.n	1003ff6 <flash_get_page_info+0x24>

01004034 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 1004034:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
 1004036:	2200      	movs	r2, #0
 1004038:	f7ff bfcb 	b.w	1003fd2 <flash_get_page_info>

0100403c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
 100403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
 1004040:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
 1004042:	6883      	ldr	r3, [r0, #8]
{
 1004044:	b086      	sub	sp, #24
 1004046:	4688      	mov	r8, r1
 1004048:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
 100404a:	691b      	ldr	r3, [r3, #16]
 100404c:	aa02      	add	r2, sp, #8
 100404e:	a901      	add	r1, sp, #4
 1004050:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
 1004052:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
 1004054:	4625      	mov	r5, r4
 1004056:	9b02      	ldr	r3, [sp, #8]
 1004058:	42ab      	cmp	r3, r5
 100405a:	d802      	bhi.n	1004062 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
 100405c:	b006      	add	sp, #24
 100405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
 1004062:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
 1004064:	9f01      	ldr	r7, [sp, #4]
 1004066:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
 100406a:	687b      	ldr	r3, [r7, #4]
 100406c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
 100406e:	683a      	ldr	r2, [r7, #0]
 1004070:	eb0a 0306 	add.w	r3, sl, r6
 1004074:	42b2      	cmp	r2, r6
 1004076:	d802      	bhi.n	100407e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
 1004078:	469a      	mov	sl, r3
 100407a:	3501      	adds	r5, #1
 100407c:	e7eb      	b.n	1004056 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
 100407e:	4649      	mov	r1, r9
			page_info.start_offset = off;
 1004080:	9403      	str	r4, [sp, #12]
			page_info.index = page;
 1004082:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
 1004084:	a803      	add	r0, sp, #12
 1004086:	47c0      	blx	r8
 1004088:	2800      	cmp	r0, #0
 100408a:	d0e7      	beq.n	100405c <flash_page_foreach+0x20>
			off += page_info.size;
 100408c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
 100408e:	3601      	adds	r6, #1
			off += page_info.size;
 1004090:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
 1004092:	e7ec      	b.n	100406e <flash_page_foreach+0x32>

01004094 <sys_clock_set_timeout>:
}
 1004094:	4770      	bx	lr

01004096 <sys_clock_elapsed>:
}
 1004096:	2000      	movs	r0, #0
 1004098:	4770      	bx	lr

0100409a <sys_clock_cycle_get_32>:
{
 100409a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
 100409c:	f7fe f99e 	bl	10023dc <z_nrf_rtc_timer_read>
}
 10040a0:	bd08      	pop	{r3, pc}

010040a2 <fprotect_area>:
	return 0;
}

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
 10040a2:	2202      	movs	r2, #2
 10040a4:	f7fe bb66 	b.w	1002774 <fprotect_set_permission>

010040a8 <crypto_init_signing>:
#include <fw_info.h>

__weak int crypto_init_signing(void)
{
	return 0;
}
 10040a8:	2000      	movs	r0, #0
 10040aa:	4770      	bx	lr

010040ac <crypto_init_hash>:

__weak int crypto_init_hash(void)
 10040ac:	2000      	movs	r0, #0
 10040ae:	4770      	bx	lr

010040b0 <bl_crypto_init>:
{
	return 0;
}

int bl_crypto_init(void)
{
 10040b0:	b508      	push	{r3, lr}
	int retval = crypto_init_signing();
 10040b2:	f7ff fff9 	bl	10040a8 <crypto_init_signing>
	if (retval) {
 10040b6:	b908      	cbnz	r0, 10040bc <bl_crypto_init+0xc>
		return retval;
	}

	return crypto_init_hash();
 10040b8:	f7ff fff8 	bl	10040ac <crypto_init_hash>
}
 10040bc:	bd08      	pop	{r3, pc}

010040be <bl_sha256_verify>:
					firmware, firmware_len, true);
}

#ifndef CONFIG_BL_SHA256_EXT_API_REQUIRED
int bl_sha256_verify(const uint8_t *data, uint32_t data_len, const uint8_t *expected)
{
 10040be:	b530      	push	{r4, r5, lr}
 10040c0:	b089      	sub	sp, #36	; 0x24
 10040c2:	4615      	mov	r5, r2
	int retval = get_hash(hash, data, data_len, external);
 10040c4:	2301      	movs	r3, #1
 10040c6:	460a      	mov	r2, r1
 10040c8:	4601      	mov	r1, r0
 10040ca:	4668      	mov	r0, sp
 10040cc:	f000 f80e 	bl	10040ec <get_hash>
	if (retval != 0) {
 10040d0:	4604      	mov	r4, r0
 10040d2:	b940      	cbnz	r0, 10040e6 <bl_sha256_verify+0x28>
	if (!ocrypto_constant_time_equal(expected, hash, hash_len)) {
 10040d4:	2220      	movs	r2, #32
 10040d6:	4669      	mov	r1, sp
 10040d8:	4628      	mov	r0, r5
 10040da:	f7fc f8c9 	bl	1000270 <ocrypto_constant_time_equal>
		return -EHASHINV;
 10040de:	2800      	cmp	r0, #0
 10040e0:	bf08      	it	eq
 10040e2:	f06f 0464 	mvneq.w	r4, #100	; 0x64
	return verify_truncated_hash(data, data_len, expected, CONFIG_SB_HASH_LEN, true);
}
 10040e6:	4620      	mov	r0, r4
 10040e8:	b009      	add	sp, #36	; 0x24
 10040ea:	bd30      	pop	{r4, r5, pc}

010040ec <get_hash>:

BUILD_ASSERT(SHA256_CTX_SIZE >= sizeof(ocrypto_sha256_ctx), \
		"ocrypto_sha256_ctx can no longer fit inside bl_sha256_ctx_t.");

int get_hash(uint8_t *hash, const uint8_t *data, uint32_t data_len, bool external)
{
 10040ec:	b508      	push	{r3, lr}
	(void) external;
	ocrypto_sha256(hash, data, data_len);
 10040ee:	f7ff fb3f 	bl	1003770 <ocrypto_sha256>

	/* Return success always as ocrypto_sha256 does not have a return value. */
	return 0;
}
 10040f2:	2000      	movs	r0, #0
 10040f4:	bd08      	pop	{r3, pc}

010040f6 <get_monotonic_version>:
{
 10040f6:	b513      	push	{r0, r1, r4, lr}
	if (version_out == NULL) {
 10040f8:	4604      	mov	r4, r0
 10040fa:	b158      	cbz	r0, 1004114 <get_monotonic_version+0x1e>
	err = get_monotonic_counter(BL_MONOTONIC_COUNTERS_DESC_NSIB, &monotonic_version_and_slot);
 10040fc:	2001      	movs	r0, #1
 10040fe:	f10d 0106 	add.w	r1, sp, #6
 1004102:	f000 f843 	bl	100418c <get_monotonic_counter>
	if (err) {
 1004106:	b918      	cbnz	r0, 1004110 <get_monotonic_version+0x1a>
	*version_out = monotonic_version_and_slot >> 1;
 1004108:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 100410c:	085b      	lsrs	r3, r3, #1
 100410e:	8023      	strh	r3, [r4, #0]
}
 1004110:	b002      	add	sp, #8
 1004112:	bd10      	pop	{r4, pc}
		return -EINVAL;
 1004114:	f06f 0015 	mvn.w	r0, #21
 1004118:	e7fa      	b.n	1004110 <get_monotonic_version+0x1a>

0100411a <bl_validate_firmware>:


bool bl_validate_firmware(uint32_t fw_dst_address, uint32_t fw_src_address)
{
 100411a:	b570      	push	{r4, r5, r6, lr}
 100411c:	4605      	mov	r5, r0
	return validate_firmware(fw_dst_address, fw_src_address,
 100411e:	4608      	mov	r0, r1
{
 1004120:	460c      	mov	r4, r1
	return validate_firmware(fw_dst_address, fw_src_address,
 1004122:	f7fe fc31 	bl	1002988 <fw_info_find>
 1004126:	4621      	mov	r1, r4
 1004128:	4602      	mov	r2, r0
 100412a:	2301      	movs	r3, #1
 100412c:	4628      	mov	r0, r5
				fw_info_find(fw_src_address), true);
}
 100412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return validate_firmware(fw_dst_address, fw_src_address,
 1004132:	f7fe bc39 	b.w	10029a8 <validate_firmware>

01004136 <get_counter>:
 * @retval 0        Success
 * @retval -EINVAL  Cannot find counters with description @p counter_desc or the pointer to
 *                  @p counter_value is NULL.
 */
static int get_counter(uint16_t counter_desc, uint16_t *counter_value, const uint16_t **free_slot)
{
 1004136:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100413a:	460d      	mov	r5, r1
 100413c:	4616      	mov	r6, r2
	uint16_t highest_counter = 0;
	const uint16_t *addr = NULL;
	const struct monotonic_counter *counter_obj = get_counter_struct(counter_desc);
 100413e:	f7fe fd41 	bl	1002bc4 <get_counter_struct>
	const uint16_t *slots;
	uint16_t num_counter_slots;

	if (counter_obj == NULL || counter_value == NULL) {
 1004142:	4604      	mov	r4, r0
 1004144:	b1f8      	cbz	r0, 1004186 <get_counter+0x50>
 1004146:	b1f5      	cbz	r5, 1004186 <get_counter+0x50>
		return -EINVAL;
	}

	slots = counter_obj->counter_slots;
	num_counter_slots = nrfx_nvmc_otp_halfword_read((uint32_t)&counter_obj->num_counter_slots);
 1004148:	3002      	adds	r0, #2
 100414a:	f7ff f8c5 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>

	for (uint32_t i = 0; i < num_counter_slots; i++) {
 100414e:	2700      	movs	r7, #0
	num_counter_slots = nrfx_nvmc_otp_halfword_read((uint32_t)&counter_obj->num_counter_slots);
 1004150:	4681      	mov	r9, r0
	uint16_t highest_counter = 0;
 1004152:	46b8      	mov	r8, r7
 1004154:	3404      	adds	r4, #4
	for (uint32_t i = 0; i < num_counter_slots; i++) {
 1004156:	45b9      	cmp	r9, r7
 1004158:	d807      	bhi.n	100416a <get_counter+0x34>
	const uint16_t *addr = NULL;
 100415a:	2400      	movs	r4, #0
		if (highest_counter < counter) {
			highest_counter = counter;
		}
	}

	if (free_slot != NULL) {
 100415c:	b106      	cbz	r6, 1004160 <get_counter+0x2a>
		*free_slot = addr;
 100415e:	6034      	str	r4, [r6, #0]
	}

	*counter_value = highest_counter;
	return 0;
 1004160:	2000      	movs	r0, #0
	*counter_value = highest_counter;
 1004162:	f8a5 8000 	strh.w	r8, [r5]
}
 1004166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint16_t counter = ~nrfx_nvmc_otp_halfword_read((uint32_t)&slots[i]);
 100416a:	4620      	mov	r0, r4
 100416c:	f7ff f8b4 	bl	10032d8 <nrfx_nvmc_otp_halfword_read>
 1004170:	43c3      	mvns	r3, r0
 1004172:	b29b      	uxth	r3, r3
		if (counter == 0) {
 1004174:	1ca2      	adds	r2, r4, #2
 1004176:	2b00      	cmp	r3, #0
 1004178:	d0f0      	beq.n	100415c <get_counter+0x26>
		if (highest_counter < counter) {
 100417a:	4598      	cmp	r8, r3
 100417c:	bf38      	it	cc
 100417e:	4698      	movcc	r8, r3
	for (uint32_t i = 0; i < num_counter_slots; i++) {
 1004180:	4614      	mov	r4, r2
 1004182:	3701      	adds	r7, #1
 1004184:	e7e7      	b.n	1004156 <get_counter+0x20>
		return -EINVAL;
 1004186:	f06f 0015 	mvn.w	r0, #21
 100418a:	e7ec      	b.n	1004166 <get_counter+0x30>

0100418c <get_monotonic_counter>:

int get_monotonic_counter(uint16_t counter_desc, uint16_t *counter_value)
{
	return get_counter(counter_desc, counter_value, NULL);
 100418c:	2200      	movs	r2, #0
 100418e:	f7ff bfd2 	b.w	1004136 <get_counter>

01004192 <pcd_cmd_data_ptr_get>:
}
 1004192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 1004196:	6858      	ldr	r0, [r3, #4]
 1004198:	4770      	bx	lr

0100419a <skip_ext_apis>:
{
 100419a:	4603      	mov	r3, r0
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 100419c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 100419e:	2300      	movs	r3, #0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
 10041a0:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 10041a2:	429a      	cmp	r2, r3
 10041a4:	d100      	bne.n	10041a8 <skip_ext_apis+0xe>
}
 10041a6:	4770      	bx	lr
		ADVANCE_EXT_API(ext_api);
 10041a8:	68c1      	ldr	r1, [r0, #12]
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 10041aa:	3301      	adds	r3, #1
		ADVANCE_EXT_API(ext_api);
 10041ac:	4408      	add	r0, r1
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
 10041ae:	e7f8      	b.n	10041a2 <skip_ext_apis+0x8>

010041b0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 10041b0:	4700      	bx	r0

010041b2 <nrfx_busy_wait>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
 10041b2:	f000 b832 	b.w	100421a <z_impl_k_busy_wait>

010041b6 <is_valid_address>:
{
 10041b6:	4603      	mov	r3, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
 10041b8:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 10041bc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
 10041c0:	4608      	mov	r0, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
 10041c2:	d30a      	bcc.n	10041da <is_valid_address+0x24>
    if (uicr_allowed &&
 10041c4:	b151      	cbz	r1, 10041dc <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
 10041c6:	f103 407e 	add.w	r0, r3, #4261412864	; 0xfe000000
 10041ca:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    if (uicr_allowed &&
 10041ce:	f5b0 7f60 	cmp.w	r0, #896	; 0x380
 10041d2:	bf2c      	ite	cs
 10041d4:	2000      	movcs	r0, #0
 10041d6:	2001      	movcc	r0, #1
 10041d8:	4770      	bx	lr
        return true;
 10041da:	2001      	movs	r0, #1
}
 10041dc:	4770      	bx	lr

010041de <nrfx_nvmc_flash_size_get>:

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
 10041de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 10041e2:	4770      	bx	lr

010041e4 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
 10041e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 10041e8:	4770      	bx	lr

010041ea <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
 10041ea:	2080      	movs	r0, #128	; 0x80
 10041ec:	4770      	bx	lr

010041ee <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 10041ee:	4770      	bx	lr

010041f0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 10041f0:	b140      	cbz	r0, 1004204 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 10041f2:	68c3      	ldr	r3, [r0, #12]
 10041f4:	7858      	ldrb	r0, [r3, #1]
 10041f6:	f010 0001 	ands.w	r0, r0, #1
 10041fa:	bf1e      	ittt	ne
 10041fc:	7818      	ldrbne	r0, [r3, #0]
 10041fe:	fab0 f080 	clzne	r0, r0
 1004202:	0940      	lsrne	r0, r0, #5
}
 1004204:	4770      	bx	lr

01004206 <z_early_memset>:
	(void) memset(dst, c, n);
 1004206:	f7ff be6d 	b.w	1003ee4 <memset>

0100420a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 100420a:	f7ff be60 	b.w	1003ece <memcpy>

0100420e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100420e:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
 1004212:	3800      	subs	r0, #0
 1004214:	bf18      	it	ne
 1004216:	2001      	movne	r0, #1
 1004218:	4770      	bx	lr

0100421a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 100421a:	b108      	cbz	r0, 1004220 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
 100421c:	f7fd b9c4 	b.w	10015a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 1004220:	4770      	bx	lr

01004222 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 1004222:	4770      	bx	lr
